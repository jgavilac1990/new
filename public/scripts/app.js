var AppManager = function () {

  var AppManager = {
    // Referencia de $routeProvider
    routeProvider: {},

    // Rutas que ha ingresado el usuario sin procesar. Toma la variable routeBase en configModule
    routeBase: {},

    // Constantes para el manejo de grupos
    GROUPS: {
      BEARS: 1,
      TIGERS: 2,
      LIONS: 3
    },

    // Para producción en repositorios de sharepoint. IMPORTANTE!!!!
    MENUS: [
      "../../Segundo/segundo.html",
    ],

    /**
     * Devuelve un array con las rutas de routeBase
     * Usado principalmente para obtener la posición actual dentro de las rutas
     *
     * @return Array array con las rutas
     */
    getPathArray: function () {
      var arr = [];

      angular.forEach(this.routeBase.routes, function (route) {
        arr.push(route.name);
      });

      return arr;
    },

    /**
     * Configura el ruteador de la aplicación de modo que puede ser utilizado
     * posteriormente. La idea es generar un ruteador secuencial fácil de utilizar
     *
     * @param app      Object    Módulo de angular al cuál se le quieren ingresar las rutas
     * @param routeBase    Object    Objeto que posee 2 elementos:
     *    routes:
     *      name: nombre de la ruta. Ejemplo: '/ruta-1'
     *      templateUrl: plantilla de angular
     *      controller: controlador especificado
     *
     *    No obstante, se pueden pasar más elementos y usarlo como se desee
     */
    configModule: function (app, routeBase) {

      var self = this,
        actualRoute = {},
        nextRoute = {},
        lastRoute = app.name + "lr"; // Nombre de la variable en localStorage para cada una de las lecciones

      // Se almacena la información de las rutas sin procesar
      self.routeBase = routeBase;

      // Inicialmente, se referencia $routeProvider
      //
      // --------------------------------------------------------------------------
      app.config(function ($routeProvider) {
        self.routeProvider = $routeProvider;
      });

      /**
       * esta función de angular es especial
       * y nos permite definir gran cantidad de configuraciones de la aplicación.
       */
      app.run(function ($rootScope, $location, $route, $window) {

        // Recuperar sesión
        // --------------------------------------------------------------------------
        if (localStorage.getItem(lastRoute)) {
          routeBase.routes.unshift({
            name: '/recuperar',
            templateUrl: '../views/common/last_route.html',
            controller: function ($scope, $location) {
              $scope.$root.isNextEnabled = true;

              /**
               * Nos dirige a la última ruta usada por el usuario.
               */
              $scope.goToLastVisited = function () {
                $location.path($scope.$root.routes[localStorage.getItem(lastRoute)].name);
              };

            },
            title: 'Recuperar sesión'
          });
        }


        // Ruta de competencias
        // --------------------------------------------------------------------------
        if (routeBase.hasOwnProperty('competences1') || routeBase.hasOwnProperty('competences2')) {
          routeBase.routes.unshift({
            name: '/competencias',
            templateUrl: '../views/common/competences.html',
            controller: function ($scope) {
              $scope.competencesSound = routeBase.competencesSound;
              $scope.competences1 = routeBase.competences1;
              $scope.competences2 = routeBase.competences2;
              $scope.competences3 = routeBase.competences3;
              $scope.$root.isNextEnabled = true;
            },
            title: 'Estándares básicos de competencias'
          });
        }


        // Constructor del ruteador en base a las rutas definidas por el desarrollador
        // --------------------------------------------------------------------------
        angular.forEach(routeBase.routes, function (route) {
          // Si el objeto simplemente tiene la propiedad grupos, entonces se inserta la vista de grupos
          if (route.hasOwnProperty('groups')) {

            // Se debe actualizar la ruta como con la información misma
            route.name = '/seleccion-grupos';
            route.title = 'Selecciona tu grupo';

            // Se añade la ruta al proveedor
            self.routeProvider.when(route.name, {
              templateUrl: '../views/common/groups.html',
              controller: function ($scope) {
                // Función que define el grupo elegido por el niño, guardándolo en localStorage
                $scope.setGroup = function (groupId) {
                  localStorage.setItem('group', groupId);
                  $rootScope.isNextEnabled = true;
                  $rootScope.goNext(); // Ir a la siguiente ruta
                }
              }
            });

          } else {
            // Añadimos normalmente la ruta definida por el desarrollador
            self.routeProvider.when(route.name, { templateUrl: route.templateUrl, controller: route.controller });
          }
        });


        // Ruta de evidencias
        // --------------------------------------------------------------------------
        if (routeBase.hasOwnProperty('evidences') === true) {
          self.routeProvider.when('/evidences', {
            templateUrl: '../views/common/evidences.html',
            controller: function ($scope) {
              $scope.description = routeBase.evidences;
              $scope.evidencesSound = routeBase.evidencesSound;
              $scope.$root.isNextEnabled = true;
            }
          });

          routeBase.routes.push({ name: '/evidences', title: 'Actividad de evidencias académicas' });
        }


        // Ruta de despedida
        // --------------------------------------------------------------------------
        self.routeProvider.when('/despedida', {
          templateUrl: '../views/common/farewell.html',
          controller: function () { }
        });

        routeBase.routes.push({ name: '/despedida' });

        // Ruta por defecto
        // --------------------------------------------------------------------------
        // Cuando se ponga una ruta diferente a las definidas inicialmente, ir a la primera.
        self.routeProvider.otherwise({ redirectTo: routeBase.routes[0].name  });
        $route.reload(); // Recargamos el ruteador, para que así lea las rutas definidas


        // ======================================================================================
        // Router - Funcionalidad global - Toda funcionalidad añadida debe ir AQUÍ
        // ======================================================================================
        $rootScope.routes = AppManager.routeBase.routes; // Referencia a las rutas de AppManager para usarlas dentro de angular
        $rootScope.GROUPS = AppManager.GROUPS; // Referencia a los grupos definidos dentro de la aplicación
        $rootScope.farewell = routeBase.farewell; // Mensaje de despedida
        $rootScope.isFarewell = false; // Switch para definir si la próxima ruta debe ser despedida
        $rootScope.resources = routeBase.resources; // Carpeta de recursos de la lección
        $rootScope.lessonTitle = ''; // Título de cada lección que se ve arriba
        $rootScope.lessonsMenu = document.referrer; // vínculo anterior. Usado para ir al menú de lecciones
        $rootScope.subjectMenu = self.MENUS[ app.name[3] - 1 ]; // Vínculo para volver al menú principal


        // $routeChangeStart
        // --------------------------------------------------------------------------
        // Esta función corre cada vez que cambia la ruta.
        $rootScope.$on("$routeChangeStart", function (event, next, current) {
          $rootScope.pathIndex = self.getPathArray().indexOf($location.path()); // Busca el índice de la ruta dentro de las rutas

          // Guardamos el índice de la actividad más avanzada hasta el momento.
          if(localStorage.getItem(lastRoute)) {
            if($rootScope.pathIndex > localStorage.getItem(lastRoute))
              localStorage.setItem(lastRoute, $rootScope.pathIndex);
          } else {
            localStorage.setItem(lastRoute, $rootScope.pathIndex);
          }

          // Por defecto, esta propiedad esta en falso y permite activar/desactivar el botón de la siguiente ruta
          $rootScope.isNextEnabled = false;

          // Actualizamos la ruta actual
          actualRoute = $rootScope.routes[$rootScope.pathIndex];

          // Analizamos la siguiente ruta, con el fin de analizar si el grupo es permitido
          nextRoute = $rootScope.routes[$rootScope.pathIndex + 1] ? $rootScope.routes[$rootScope.pathIndex + 1] : false;

          // Actualizamos el título de la lección en base a la ruta
          $rootScope.lessonTitle = actualRoute.hasOwnProperty('title') !== "undefined" ? actualRoute.title : "";

          // Reiniciamos el valor de farewell
          $rootScope.isFarewell = false;

          // Grupos de estudiantes
          // --------------------------------------------------------------------------
          // Identifica si la siguiente ruta no es permitida para el estudiante, definiendo la despedida.
          // IMPORTANTE: Esta funcionalidad solo se usó en el grado 1 de primaria incluyente.
          if (typeof nextRoute.excludedGroups !== "undefined") {
            var actualGroup = localStorage.getItem('group');

            if (nextRoute.excludedGroups.bears) { if (actualGroup == $rootScope.GROUPS.BEARS) $rootScope.isFarewell = true; }
            if (nextRoute.excludedGroups.tigers) { if (actualGroup == $rootScope.GROUPS.TIGERS) $rootScope.isFarewell = true; }
            if (nextRoute.excludedGroups.lions) { if (actualGroup == $rootScope.GROUPS.LIONS) $rootScope.isFarewell = true; }
          }
        });


        /**
         * Nos dirige a la ruta anterior.
         */
        $rootScope.goPrev = function () {
          // Función que se ejecuta antes de ir a la ultima actividad
            if (typeof $rootScope.beforeGoLast !== "undefined") {
              if ($rootScope.beforeGoLast()) {
                return false;
              }
            }

          // Solo si el índice es 0, de modo que no nos salgamos del array
          if ($rootScope.pathIndex !== 0 ) {
            if ($rootScope.pathIndex === $rootScope.routes.length - 2) {
              $window.history.back();
            } else {
              $location.path($rootScope.routes[$rootScope.pathIndex - 1].name);
            }
          }
        };


        /**
         * Nos dirige a la ruta siguiente.
         */
        $rootScope.goNext = function () {
          // Si la ruta actual es diferente al último elemento y isNextEnabled es verdadero
          if ($rootScope.pathIndex !== $rootScope.routes.length - 1 && $rootScope.isNextEnabled) {

            // Función que se ejecuta antes de ir a la siguiente actividad
            if (typeof $rootScope.beforeGoNext !== "undefined") {
              if ($rootScope.beforeGoNext()) {
                $rootScope.beforeGoNext = undefined; // Limpiamos la función
                return false;
              }
            }

            // Si $rootScope.isFarewell es verdadero, entonces redirigimos a la despedida (última ruta)
            if ($rootScope.isFarewell) {
              $location.path($rootScope.routes[$rootScope.routes.length - 2].name);
            } else {
              // Sino, rutear normalmente (sencuencia)
              $location.path($rootScope.routes[$rootScope.pathIndex + 1].name);
            }
          }
        };


        /**
         * Nos dirige a la última ruta usada por el usuario.
         */
        $rootScope.goToLastVisited = function () {
           
          $location.path($rootScope.routes[localStorage.getItem(lastRoute)].name);
        };


      });
    }
  };

  return AppManager;

};





var factories = angular.module('factories', []);

factories.factory('shuffleArrayFactory', function () {
	this.run = function(array) {
		for (var i = array.length - 1; i > 0; i--) {
			var j = Math.floor(Math.random() * (i + 1));
			var temp = array[i];
			array[i] = array[j];
			array[j] = temp;
		}
		return array;
	};

	return this;
});

var activities = angular.module('activities', [
  // Módulos de angular
  'ngRoute',
  'ui.sortable',

  // Otros
  'directives',
  'factories',

  // Conceptos
  'lizLetter1',
  'lizCompetences',
  'lizText1',
  'lizClickImages',
  'lizImagesAndText',
  'lizMultiplesImagesAndText',
  'lizTwoFramesDescription',
  'lizBoxAnimationFigure',
  'lizImagesInfo',
  'lizClickTransition',
  'lizShowParts',
  'lizWatch',
  'lizTable',
  'lizInputsAndTable',
  'lizShowConcepts',
  'lizHoverShowText',
  'lizShowName',
  'lizShowConceptsText',
  'lizChangeStyleSelect',
  'lizChangeStyleClick',
  'lizShowConceptsCharacter',
  'lizShowConceptsCharacters',
  'lizShowConceptsGroupExamples',
  'lizShowDescriptionImagesSound', // Maria Giraldo
  'lizShowTextCharacter',
  'lizSlideShowCharacter',
  'lizClickImageMap',
  'lizZoom',
  'lizImageMapDescription',
  'lizImageMapMat',
  'lizShowdescription',
  'lizConceptsTable',
  'lizShowImagesBlockDescription',
  'lizImagesBlockDescription',
  'lizImagesBlockMat',
  'lizShowMultipleHoverPhrase',
  'lizShowMultipleHoverPhrases',
  'lizCorrectWordInSentence',

  // Actividades
  'lizAnimationBase',
  'lizChooseItems',
  'lizPairs',
  'lizCompleteInputs',
  'lizSelectOptionsImg',
  'lizDropCondition',
  'lizCompleteInputsDescription',
  'lizOneGroup',
  'lizOneGroupToogle', //Maria Giraldo
  'lizOneGroupRule',
  'lizTwoGroup',
  'lizRadioQuestions',
  'lizRadioQuestionsImages',
  'lizSideNumbers',
  'lizOneGroupShape',
  'lizGreaterLowerMat',
  'lizAbacus',
  'lizGiraffe',
  'lizDifferences',
  'lizLetterSoup',
  'lizCrossword',
  'lizCrosswordWithLetter', //Maria Giraldo
  /*'lizCrosswordWithPuzzle', */
  'lizSoundGroup',
  'lizSoundGroups',
  'lizTransclusion',
  'lizTransclusions',
  'lizPairsInputs',
  'lizClickAndListen',
  'lizBuyItems',
  'lizDropOut',
  'lizSelectWords',
  'lizImageMapSelect',
  'lizTangram',
  'lizTablePath',
  'lizReplaceWithInputs',
  'lizReplaceWithInputsMat',
  'lizTablePathInstruction',
  'lizCountElements',
  'lizDropBoxes',
  'lizDragMarkCanvas',
  'lizCountElements',
  'lizCountElements2',
  'lizCompareSample',
  'lizGreaterLowerThan',
  'lizCompleteLetters',
  'lizChalkboard',
  'lizDragToText',
  'lizDragToTexts', 
  'lizDragToImg',
  'lizDragToMat',
  'lizImageGroupDrop',
  'lizCompleteWords',
  'lizGroupCompleteWords',
  'lizGroupCompleteLetters',
  'lizGroupCompleteImages',
  'lizGroupClassifyTable',
  'lizGroupSelectWords',
  'lizClickToSelectPosition',
  'lizClickToCompleteInput',
  'lizCompleteInputsPosition',
  'lizGroupCompleteSound',
  'lizGroupCompleteText',
  'lizGroupTableTextFree',
  'lizGroupTableTextConditions',
  'lizGroupTableTextConditionsOptions',
  'lizGroupTableTextOptions',
  'lizGroupCompleteTextFree',
  'lizGroupCompleteFreeConditions',
  'lizGroupCompleteYesNot',
  'lizGroupCompleteSounds',// No utilizar solo realizando una prueba gregory
  'lizCompleteWordsWi',
  'lizCompleteInputsFree',
  'lizComplementary',
  'lizNumericSequences',
  'lizDragDropMultiples',
  'lizDragDropMultiplesPositions',
  'lizOperationInput',
  'lizDropImageSample',
  'lizThousandNumbers',
  'lizTenThousandNumbers',
  'lizThousandPatterns',
  'lizStackMultiple',
  'lizSequences',
  'lizGroupInputs',
  'lizButtonBubbleDescription',
  'lizPuzzleWord',
  'lizCompareSounds',
  'lizMultipleSelection',
  'lizDragDropMark',
  'lizMultipleMark',
  'lizMultipleImageMapDescription',
  'lizPuzzle1',
  'lizPuzzle2',
  'lizPuzzle3',
  'lizPuzzle4',
  'lizPuzzle5',
  'lizPairsSquares',
  'lizShowConceptsImages',
  'lizShowConceptsImg',
  'lizCompleteTableInputs',
  'lizCompleteTableImageInputs',
  'lizCompleteInputsTrueFalse',
  'lizCompleteTableWithList',
  'lizBubbleDescription',
  'lizCompleteTableWithText',
  'lizChooseCorrectOption',
  'lizClickAndListen',
  'lizImageSound',
  'lizWriteTrueFalse',
  'lizCompleteInputParts',
  'lizCompleteTextBoxes',
  'lizCompleteWordsSelect',
  'lizCompleteWordsSelects',
  'lizSelectCheckbox',
  'lizDragDropMultiplesDiff',
  'lizComplementary2',
  "lizTextActivity",
  'lizPairsWithMessage',
  'lizSelectQuestions',
  'lizSelectOptionsPositions',
  'lizChooseCorrectImage',
  'lizSelectTableImageMultiple',
  'lizSelectCorrectImageOption',
  'lizSelectAllCorrectImageOption',
  'lizShowHoverWords',
  'lizJoiningLines',
  'lizGroupSelectMultiplesWords',
  'lizCompleteMultitable',
  'lizSelectOptionsTable',
  'lizCompleteTableRandomInputs',
  'lizCheckboxOptions',
  'lizGroupTableCompleteWords',
  'lizGroupChoiceWords',
  'lizDragDropPairText',
  'lizGroupPuzzleWord',
  'lizQuestionsImages', //Maria Giraldo
  'lizChooseCorrectImageSecuence', //Maria Giraldo

  // Animations
  'lizAnimationVideo'


]);

var lizAbacus = angular.module('lizAbacus', ['factories']);

lizAbacus.directive('abacus', function  (shuffleArrayFactory) {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			baseDescription: '@',
			baseAudio: '@',
			inputDescription: '@',
			inputAudio: '@',
			formDescription: '@',
			formAudio: '@'
		},
		templateUrl: '../views/activities/abacus.html',
		link: function (scope, element, attrs) {
			var opt = scope.options, // alias de options
				columnTemp = {}, // Variable temporal para las columnas
				wrongAnswers = 0, // Número de respuestas incorrectas. Necesarias para activar failure
				minRightAnswers = opt.minRightAnswers;

			// Modos
			scope.FORM_MODE = 1,
			scope.INPUT_MODE = 2;
			scope.formChances = opt.chances; // Chances for FORM_MODE
			scope.inputChances = opt.chances; // Chances for INPUT_MODE

			// Calificaciones
			scope.rightAnswer = false;
			scope.wrongAnswer = false;
			scope.success = false;
			scope.failure = false;

			scope.description = scope.baseDescription; // Damos a description el valor base
			scope.mode = 0; // Modo seleccionado
			scope.userNumber = ''; // número ingresado por el usuario
			scope.abacusNumber = 0; // número a formar por el ábaco
			scope.audioMode = ''; // Audio a reproducir

			scope.$watch('mode', function (mode) {
				if(mode === 0) scope.audioMode = 'base';
				if(mode === 1) scope.audioMode = 'form';
				if(mode === 2) scope.audioMode = 'input';
			});

			scope.columns = []; // Array de columnas
			var columnNames = ['Uni', 'Dec', 'Cen', 'UMil', 'DMil'];

			// Constructor de columns
			for(var i=0; i < opt.numCols; i++){
				columnTemp = {
					name: columnNames[i], // Nombre de la columna
					ballText: Math.pow(10, i), // texto en la bola
					rings: [] // Array para los aros en cada columna
				};
				scope.columns.unshift(columnTemp); 
			}

			// ===================================================
			// Interfaz
			// ===================================================
			/**
			 * Selecciona el modo de trabajo
			 */
			scope.selectMode = function (mode) {
				scope.mode = mode;
				wrongAnswers = 0; // Reinicia las preguntas incorrectas

				// Cambia la descripción según el modo
				if(scope.mode === scope.FORM_MODE) scope.description = scope.formDescription;
				if(scope.mode === scope.INPUT_MODE) scope.description = scope.inputDescription; 

				// Corre el modo
				scope.run();
			};

			/**
			 * Función principal. Verifica la actividad según el modo
			 */
			scope.verify = function () {
				// FORM_MODE
				if(scope.mode === scope.FORM_MODE) {
					// recuperamos el número desde las columnas del ábaco
					var num = '';
					scope.columns.forEach(function (col) { num += col.rings.length; });

					if(parseInt(num) === scope.abacusNumber){
						// Respuesta Correcta
						scope.rightAnswer = scope.abacusNumber;
					} else {
						// Respuesta Incorrecta
						scope.wrongAnswer = scope.abacusNumber;
						wrongAnswers++;
					}

					scope.formChances--; // Reducimos las posibilidades
					if(scope.formChances === 0) scope.mode = 0;
				}

				// INPUT_MODE
				if(scope.mode === scope.INPUT_MODE) {
					if(parseInt(scope.userNumber) === scope.abacusNumber){
						// Respuesta Correcta
						scope.rightAnswer = scope.abacusNumber;
					} else {
						// Respuesta Incorrecta
						scope.wrongAnswer = scope.abacusNumber;
						wrongAnswers++;
					}

					scope.inputChances--; // Reducimos las posibilidades
					if(scope.inputChances === 0) scope.mode = 0;
				}

				// genera el próximo intento
				scope.run();

				// Vuelve a intentarlo
				if(wrongAnswers === opt.wrongAnswers) scope.failure = true;

				// Fin de la actividad satisfactorio
				if(scope.inputChances === 0 && scope.formChances === 0){
					scope.$root.isNextEnabled = true;
					scope.success = true;
				}
			};

			/**
			 * Inicia cada actividad según el modo
			 */
			scope.run = function () {
				scope.abacusNumber = scope.generateNumber(opt.numCols); // genera el número

				if(scope.mode === scope.FORM_MODE) {
					// reinicia los anillos
					scope.columns.forEach(function (col) { col.rings.length = 0; });
				}

				if(scope.mode === scope.INPUT_MODE) {
					scope.userNumber = ''; // Reinicia el input

					// Dividimos el número en digitos. Luego, llenamos cada array de anillos
					// con el número de elementos seleccionado
					var temp = scope.abacusNumber.toString();

					for (var i=0; i < temp.length; i++) {
						scope.columns[i].rings.length = 0; // Vacía el array de anillos
						for(var j=0; j < temp[i]; j++){
							scope.columns[i].rings.push(j);
						}
					}
				}
			};

			/**
			 * Añade un anillo a la columna
			 */
			scope.addRing = function (col) {
				if(col.rings.length < 9) col.rings.push(Math.random() * 10000);
			};

			/**
			 * Remueve un anillo de la columna
			 */
			scope.removeRing = function (col) {
				if(col.rings.length && scope.mode === scope.FORM_MODE) col.rings.pop();
			};

			// ===================================================
			// Útiles
			// ===================================================
			/**
			 * Genera números aleatorios, en base a una cantidad determinada de dígitos
			 */
			scope.generateNumber = function (digits) {
				var min = Math.pow(10, digits - 1);
				var max = (min * 9);

				return Math.floor(Math.random() * max) + min;
			};

			// ===================================================
			// Solo Estilos
			// ===================================================
			/**
			 * Devuelve los estilos de las columnas
			 */
			scope.getColStyles = function () {
				var styles = '';
				styles += "width: " + (100 / scope.columns.length) + "%;";

				return styles;
			};

			/**
			 * Devuelve los estilos de los aros o bolas que van en el abaco
			 */
			scope.getBallStyles = function (index) {
				var styles = '',
					ballHeight = element.find('.abcol-ball').outerHeight(); // altura de los aros

				styles += "bottom: " + (ballHeight * index) + "px;";

				return styles;
			};

		}
	}; 
});

var lizBuyItems = angular.module('lizBuyItems', []);

// Knockout Pairs Factory
lizBuyItems.factory('buyItemsActivity', function ($rootScope) {

	var buyItemsActivity = {};

	/**
	 * Crea el ViewModel
	 */
	buyItemsActivity.create = function (options) {
		return new buyItemsActivity._ViewModel(options);
	}

	/**
	 * Genera el ViewModel de las parejas con sus funcionalidades
	 *
	 * Recibe un objeto con las siguientes propiedades
	 *
	 */
	buyItemsActivity._ViewModel = function (opt) {
		var self = this,
			rightAnswers = 0, // Contador
			total = 0, // Suma total de los productos
			chances = opt.chances; // Posibilidades de equivocarse

		self.products = ko.observableArray(opt.products); // productos
		self.showTotal = ko.observable(false); // activa el cuadro de texto de total
		self.total = ko.observable(''); // cuadro de texto con el total
		self.money = ko.observableArray(opt.money); // productos

		// Monedas
		self.coins = ko.observableArray([
			{
				src: 'coin_50',
				alt: "moneda de 50 pesos",
				title: "Banco de la Republica [Fotografía] (2013). Obtenido de http://www.banrep.gov.co/es/monedas/2140",
				value: 50
			},
			{
				src: 'coin_100',
				alt: "moneda de 100 pesos",
				title: "Banco de la Republica [Fotografía] (2013). Obtenido de http://www.banrep.gov.co/es/node/32360",
				value: 100
			},
			{
				src: 'coin_200',
				alt: "moneda de 200 pesos",
				title: "Banco de la Republica [Fotografía] (2013). Obtenido de http://www.banrep.gov.co/es/node/32361",
				value: 200
			},
			{
				src: 'coin_500',
				alt: "moneda de 500 pesos",
				title: "Banco de la Republica [Fotografía] (2013). Obtenido de http://www.banrep.gov.co/es/node/32363",
				value: 500
			},
		]);

		// Billetes
		self.bills = ko.observableArray([
			{
				src: "bill_1000",
				alt: "billete de 1000 pesos",
				title: "Banco de la Republica [Fotografía] (2013). Obtenido de: http://www.banrep.gov.co/es/contenidos/page/billete-1000-pesos",
				value: 1000
			},
			{
				src: "bill_2000",
				alt: "billete de 2000 pesos",
				title: "Banco de la Republica [Fotografía] (2013). Obtenido de: http://www.banrep.gov.co/es/contenidos/page/billete-2000-pesos",
				value: 2000
			},
			{
				src: "bill_5000",
				alt: "billete de 5000 pesos",
				title: "Banco de la Republica [Fotografía] (2013). Obtenido de: http://www.banrep.gov.co/es/contenidos/page/billete-5000-pesos",
				value: 5000
			}
		]);

		if (opt.money){

			self.bills = self.money;
			self.coins = false
		}

		// Añadimos a cada uno de los productos un observableArray para ir guardando los productos y 
		// una propiedad computed
		ko.utils.arrayForEach(self.products(), function(product){
			total += product.price;

			product.priceSum = ko.observableArray();
			product.priceSum.max = product.price; // Precio máximo

			product.priceSum.counter = ko.computed({
				read: function() {
					var total = 0;

					this.priceSum().forEach(function(item){
						total += item.value;
					});

					return total;
				},
				owner: product
			});
		});

		self.audio = ko.observable(opt.audio); // audio
		self.resources = $rootScope.resources; // Carpeta de recursos desde angular

		self.rightAnswers = 0; // Inicializamos el número de respuestas buenas a 0

		self.rightAnswer = ko.observable();
		self.wrongAnswer = ko.observable();
		self.failure = ko.observable(false);
		self.success = ko.observable(false);

		/**
		 * Reproduce el audio de la instrucción.
		 */
		self.playAudio = function () {
			$('#audio-instruction')[0].play();
		};

		/**
		 * Obtiene los estilos de los productos.
		 */
		self.getProductStyles = function () {
			var styles = '';
			styles += 'width: ' + (100 / self.products().length) + '%;';

			return styles;
		};


		/**
		 * Verifica los elementos cada vez que se sueltan.
		 */
		self.verifyAnswer = function (arg) {
			var parent = arg.targetParent,
				item = arg.item;

			if(parent.max < parent.counter() + item.value) {
				// Respuesta incorrecta
				arg.cancelDrop = true;
				self.wrongAnswer(Math.random());
				chances--;
			} 

			// Si es igual, suma la respuesta correcta
			if(parent.max === parent.counter() + item.value) {
				self.rightAnswer(Math.random());
				rightAnswers++;
			}

			// Muestra el cuadro de texto para el total
			if(rightAnswers === self.products().length) {
				self.showTotal(true);
			}

			if(chances === 0) {
				// termina la actividad con fracaso
				self.failure(true);
			}
		};


		/**
		 * Verifica el total del cuadro.
		 */
		self.verifyTotal = function () {
			if(parseInt(self.total()) === total) {
				$rootScope.isNextEnabled = true; // activa la siguiente actividad
				self.success(true);
			} else {
				self.failure(true);
			}
		};


	};

	/**
	 * Inicializa la instancia del ViewModel creado con buyItemsActivity.create
	 *
	 * @param {object} instance Intancia del VM de knockout
	 */
	buyItemsActivity.run = function (instance) {
		ko.cleanNode($('#main-container')[0]);
		ko.bindingHandlers.sortable.beforeMove = instance.verifyAnswer;
		ko.applyBindings(instance, $('#main-container')[0]);
	};

	return buyItemsActivity;

});

lizBuyItems.directive('buyItems', function  (buyItemsActivity) {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			description: '@',
			instruction: '@',
			audio: '@',
			customClass: '@'
		},
		templateUrl: '../views/activities/buy_items.html',
		link: function postLink(scope, element, attrs) {
			// Añadimos el audio a options
			scope.options.audio = typeof scope.audio !== "undefined" ? scope.audio : false;

			// Corremos la aplicación
			var vm = buyItemsActivity.create(scope.options);
			buyItemsActivity.run(vm);
		}
	}; 
});

var lizChalkboard = angular.module('lizChalkboard', []);

lizChalkboard.directive('chalkboard', function  () {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			audio: '@',
			description: '@'
		},
		templateUrl: '../views/activities/chalkboard.html',
		link: function postLink(scope, element, attrs) {

			var opt = scope.options,
				rightAnswers = 0, // Preguntas correctas
				questions = opt.questions, // Preguntas por modo
				completedRanges = 0, // Número completado de rangos
				minRightAnswers = opt.minRightAnswers, // Preguntas mínimas para pasar
				chances = opt.chances;

			// Constantes para las operaciones
			var oprs = {
				addition: {
					sign: '+'
				},
				subtraction: {
					sign: '-'
				},
				multiplication: {
					sign: 'x'
				},
				division: {
					sign: '/'
				}
			};

			scope.ranges = opt.ranges; // Rangos u opciones de dificultad
			scope.selectedOpr = oprs[opt.operation]; // Operación seleccionada al inicio
			scope.selectedRange = false; // Rango a seleccionar

			// Números y total
			scope.number1 = 0;
			scope.number2 = 0;
			scope.total = 0;

			// Calificaciones 
			scope.rightAnswer = false;
			scope.wrongAnswer = false;
			scope.success = false;
			scope.failure = false;

			// Input
			scope._total = '';

			// Cada vez que cambia el rango, se genera la nueva operación
			scope.$watch('selectedRange', function (val) {
				if(val){
					scope.generateOperation();
				}
			});

			/**
			 * Verifica el campo de texto con el número total
			 */
			scope.verify = function () {
				if(scope._total === '') return; 

				// Si no es un número, borramos el último caractér
				if(!scope._total.match(/^\d+$/)){
					scope._total = scope._total.slice(0, -1);
					return;
				}		

				// Si se ha llenado el input con los dígitos necesarios
				if(scope._total.length === scope.total.toString().length){
					if(parseInt(scope._total) === scope.total) {
						// Respuesta Correcta
						scope.rightAnswer = Math.random(); // Disparador de respuesta

						rightAnswers++;
						chances = opt.chances;
						scope._total = ''; // Reinicia el input
						scope.generateOperation(); // Genera la siguiente operación
						questions--; // reducimos las preguntas

					} else {
						// Respuesta Incorrecta
						scope.wrongAnswer = Math.random(); // Disparador de respuesta
						scope._total = ''; // Reinicia el input

						chances--; // Reduce las posibilidades

						// Si se acaban las oportunidades
						if(chances === 0){
							scope.generateOperation(); // Genera la siguiente operación
							chances = opt.chances;
							questions--; // reducimos las preguntas
						}
					}
				}

				// Si no hay más preguntas
				if(questions === 0){
					questions = opt.questions; // Reiniciamos las preguntas
					completedRanges++; // Aumeta el número de rangos completados

					scope.selectedRange.completed = true; // Se añade esta propiedad para deshabilitar
					scope.selectedRange = false; // Reinicia
				}

				// Fin del juego
				if(scope.ranges.length === completedRanges){
					if(rightAnswers >= minRightAnswers){
						scope.$root.isNextEnabled = true;
						scope.success = true;
					} else {
						scope.failure = true;
					}
				}
				
			};

			/**
			 * Genera el siguiente número
			 */
			scope.generateOperation = function () {

				var min = scope.selectedRange.range[0];
				var max = scope.selectedRange.range[1];


				// Suma
				if(opt.operation === "addition"){
					scope.number1 = Math.floor( Math.random() * (max - min) + min	);
					scope.number2 = Math.floor( Math.random() * (max - min) + min	);

					scope.total = scope.number1 + scope.number2;
				}

				// Resta
				if(opt.operation === "subtraction"){
					// Nos aseguramos que el primero número siempre sea mayor al segundo
					do{
						scope.number1 = Math.floor( Math.random() * (max - min) + min	);
						scope.number2 = Math.floor( Math.random() * (max - min) + min	);
					} while(scope.number1 < scope.number2);

					scope.total = scope.number1 - scope.number2;
				}

				// Multiplicación
				if(opt.operation === "multiplication"){
					// Para la multiplicación, hay que usar 2 rangos distintos
					var r = scope.selectedRange.range; // Alias

					// Se toman los primeros dos elementos de range
					scope.number1 = Math.floor( Math.random() * (r[1] - r[0]) + r[0]	);

					// Se toman los últimos dos elementos de range
					scope.number2 = Math.floor( Math.random() * (r[2] - r[3]) + r[3]	);

					scope.total = scope.number1 * scope.number2;
				}

				// Division
				if(opt.operation === "division"){
					// Nos aseguramos que el segundo número no sea 0, y que se pueda dividir
					// sin decimales
					do{
						scope.number1 = Math.floor( Math.random() * (max - min) + min	);
						scope.number2 = Math.floor( Math.random() * (max - min) + min	);
					} while(scope.number1 < scope.number2 || scope.number1 % scope.number2 !== 0 || scope.number1 / scope.number2 === 1);

					scope.total = scope.number1 / scope.number2;
				}

			};

			scope.disableInput = function (range) {
				return scope.selectedRange || range.completed;
			};


		}
	}; 
});

var lizCheckboxOptions = angular.module('lizCheckboxOptions', ['factories']);

lizCheckboxOptions.directive('checkboxOptions', function  (shuffleArrayFactory) {
  return {
    restrict: 'E',
    scope: {
      options: '=',
      audio: '@',
      description: '@'
    },
    templateUrl: '../views/activities/checkbox_options.html',
    link: function (scope, element, attrs) {
      var opt = scope.options,
        rightAnswers = 0;

      // variables básicas de la acividad de angular
      scope.rightAnswer = false;
      scope.wrongAnswer = false;
      scope.success = false;
      scope.failure = false;
      scope.hasModalImage = (opt.hasModalImage) ? true : false;
      scope.hasNoQuestions = (opt.hasNoQuestions) ? true : false;
      scope.chancesPerItem = (opt.chancesPerItem) ? opt.chancesPerItem : 2;
      scope.minRightAnwers = opt.minRightAnwers;
      scope.globalNumAnswers = 0;
      scope.randomItems = (!scope.options.randomItems) ? false:true;

      if (scope.hasModalImage) {
        scope.modalSrc = opt.modalSrc;
        scope.modalAlt = opt.modalAlt;
        scope.modalBtnText = opt.modalBtnText;
      }

      // Imagen principal
      scope.src = opt.src;
      scope.alt = opt.alt;

      // Preguntas
      scope.questions = opt.questions;
        angular.forEach(scope.questions, function (question, key) {
          question.numAnswers = opt.numAnswers;
          question.chances = scope.chancesPerItem - 1;
          scope.globalNumAnswers += opt.numAnswers;
        });

      // añadimos el número de posibilidades
      scope.questions.forEach(function (q) {
        q.chances = scope.chancesPerItem;
        if (scope.randomItems) {
          shuffleArrayFactory.run(q.answers);
        }
      });

      /**
       * Verifica la respuesta.
       */
       var counter = 0;
      scope.verify = function (item, answer) {
        if(answer.answer) {
          scope.rightAnswer = Math.random();
          answer.wrong = false;
          answer.right = true;
          rightAnswers += 1;
          counter++;
          answer.completed = true;
          item.chances--;
          if (0 === item.chances) {
            item.completed = true;
          }
        } else {
          answer.wrong = true;
          answer.selectedAnswer = false;
          scope.wrongAnswer = Math.random(); 
          item.chances -= 1;
          counter++;
          if(item.chances === 0) {item.completed = true;}
        }

        // Contamos los elementos terminados
        //var completedItems = scope.questions.filter(function (q) {
        //  return q.completed;
        //}).length;

        if(counter === scope.globalNumAnswers) {
          // solo pasa la actividad si todas las respuestas son correctas
          if(rightAnswers === scope.globalNumAnswers || rightAnswers >= scope.minRightAnwers) {
            scope.$root.isNextEnabled = true;
            scope.success = true;
          } else {
            scope.failure = true;
          }
        }
      };
    }
  };
});

/**
 * Pertime escoger entre varias imagenes una correcta haciendo click.
 */
 var lizChooseCorrectImage = angular.module('lizChooseCorrectImage', []);

 lizChooseCorrectImage.directive('chooseCorrectImage', function(){
 	// Runs during compile
 	return {
 		// name: '',
 		// priority: 1,
 		// terminal: true,
 		scope: {
 			options: "=",
 			title: "@",
      		description: '@',
      		instruction: '@',
      		audio: '@'
 		}, // {} = isolate, true = child, false/undefined = no change
 		// controller: function($$scope, $element, $attrs, $transclude) {},
 		// require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements
 		restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
 		// template: '',
 		templateUrl: '../views/activities/choose_correct_image.html',
 		// replace: true,
 		// transclude: true,
 		// compile: function(tElement, tAttrs, function transclude(function($scope, cloneLinkingFn){ return function linking($scope, elm, attrs){}})),
 		link: function($scope, $sce) {

 			$scope.items = $scope.options.items;
 			// $scope.customClass = $scope.options.customClass;
 			$scope.complete = false; // Cuando termina la actividad
      		// $scope.itemsPerRow = $scope.options.itemsPerRow;
      		$scope.chances = $scope.options.chances-1;
      		$scope.counter = 0;

      		$scope.$watch('complete', function (complete) {
		        if (complete) {
		          	if ($scope.counter === 0) {
		          		// éxito
						$scope.success = true;

						// Activamos la siguiente actividad o ruta
						$scope.$root.isNextEnabled = true;
		          	} else {
		          		// fracaso
						$scope.failure = true;
		          	}
		        }
	      	});

	      	/**
			 * Para obtener los estilos de los elementos, específicamente el ancho
			 */
			$scope.getStyles = function () {
				var styles = "";

				if($scope.itemsPerRow){
					styles += "width: " + (100 / $scope.itemsPerRow) + "%;";
				} else {
					styles += "width: " + (100 / $scope.items.length) + "%;";
				}
				
				return styles;
			};


	      	$scope.verify = function (item) {
	      		console.log(item);
	      		if (true === item.correct) {
	      			$("#right-answer").fadeIn(300).delay(400).fadeOut(300);
	      			$scope.complete = true;
	      		} else {
	      			if($scope.chances === 0){
                    	$scope.complete = true;
                    } else {
                    	chances--;
                    }
                    $scope.counter++;
                    $("#wrong-answer").fadeIn(300).delay(400).fadeOut(300);
	      		}
	      	};
 		}
 	};
 });
/**
 * Pertime escoger entre varias imagenes una correcta haciendo click.
 */
 var lizChooseCorrectImageSecuence = angular.module('lizChooseCorrectImageSecuence', []);

lizChooseCorrectImageSecuence.directive('chooseCorrectImageSecuence', function(){
 	// Runs during compile
 	return {
 		// name: '',
 		// priority: 1,
 		// terminal: true,
 		scope: {
 			options: "=",
 			title: "@",
      		description: '@',
      		instruction: '@',
      		audio: '@'
 		}, // {} = isolate, true = child, false/undefined = no change
 		// controller: function($$scope, $element, $attrs, $transclude) {},
 		// require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements
 		restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
 		// template: '',
 		templateUrl: '../views/activities/choose_correct_image_secuence.html',
 		// replace: true,
 		// transclude: true,
 		// compile: function(tElement, tAttrs, function transclude(function($scope, cloneLinkingFn){ return function linking($scope, elm, attrs){}})),
 		link: function($scope, $sce) {

 			$scope.items = $scope.options.items;
 			// $scope.customClass = $scope.options.customClass;
 			$scope.complete = false; // Cuando termina la actividad
      		// $scope.itemsPerRow = $scope.options.itemsPerRow;
      		$scope.chances = $scope.options.chances-1;
      		$scope.counter = 0;
            $scope.indexI = 0;

      		$scope.$watch('complete', function (complete) {
		        if (complete) {
		          	if ($scope.counter === 0) {
		          		// éxito
						$scope.success = true;

						// Activamos la siguiente actividad o ruta
						$scope.$root.isNextEnabled = true;
		          	} else {
		          		// fracaso
						$scope.failure = true;
		          	}
		        }
	      	});

	      	/**
			 * Para obtener los estilos de los elementos, específicamente el ancho
			 */
			$scope.getStyles = function () {
				var styles = "";

				/*if($scope.itemsPerRow){
					styles += "width: " + (100 / $scope.itemsPerRow) + "%;";
				} else {
					//styles += "width: " + (100 / $scope.items.length) + "%;";
				}
				*/
				return styles;
			};


	      	$scope.verify = function (item) {

                $scope.chances--;

                // Si la imagen seleccionada es la que sigue en el orden
                if (item.img === $scope.options.answers[$scope.indexI].img){
                    $scope.options.answers[$scope.indexI].imgDefault = $scope.options.answers[$scope.indexI].img;
                    $scope.options.answers[$scope.indexI].completed = true;
                    $("#right-answer").fadeIn(300).delay(400).fadeOut(300);
                    $scope.indexI++;
                }
                else{
                    $("#wrong-answer").fadeIn(300).delay(400).fadeOut(300);
                    $scope.counter++;
                }

                console.log("verirfy");


                // Si ha cumplido con todas, se termina
                var completedItems =  $scope.options.answers.filter(function (q) {
                    return q.completed;
                }).length;

                if (completedItems == $scope.options.answers.length){
                    $scope.complete = true;
                    scope.$root.isNextEnabled = true;
                }

                if($scope.chances === 0){
                    $scope.complete = true;
                }


                //$scope.options.answers[$scope.indexI].imgDefault = $scope.options.answers[$scope.indexI].img;


	      		/*if (true === item.correct) {
	      			$("#right-answer").fadeIn(300).delay(400).fadeOut(300);
	      			$scope.complete = true;
	      		} else {
	      			if($scope.chances === 0){
                    	$scope.complete = true;
                    } else {
                    	chances--;
                    }
                    $scope.counter++;
                    $("#wrong-answer").fadeIn(300).delay(400).fadeOut(300);
	      		}*/
	      	};
 		}
 	};
 });
/**
 * La actividad permite escoger una opción entre tres
 * y verificar si es correcta de acuerdo a una condición.
 */
var lizChooseCorrectOption = angular.module('lizChooseCorrectOption', []);

lizChooseCorrectOption.directive('chooseCorrectOption', function () {
    'use strict';
    return {
        restrict: 'E',
        templateUrl: '../views/activities/choose_correct_option.html',
        scope: {
            options: '=',
            instruction: '@',
            title: '@',
            description: '@',
            audio: '@'
        },
        link: function (scope, iElement, iAttrs) {
            scope.rightAnswers = 0;
            scope.complete = false; // Cuando termina la actividad
            scope.block = false;
            scope.success = false;
            scope.failure = false;

            // watch if the activity is finished
            scope.$watch('complete', function (complete) {
                if (complete) {
                    if (scope.rightAnswers >= scope.options.minRightAnswers) {
                        // éxito
                        scope.success = true;

                        // Activamos la siguiente actividad o ruta
                        scope.$root.isNextEnabled = true;
                    } else {
                        // fracaso
                        scope.failure = true;
                    }
                }
            });

            scope.makeId = function (id) {
                var newId = id.replace(" ", "_");
                var text = newId + "_";
                var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

                for (var i = 0; i < 5; i++) {
                    text += possible.charAt(Math.floor(Math.random() * possible.length));
				}

                return text;
            };

            scope.items = scope.options.data;
            
            angular.forEach(scope.options.aOptions, function (value, key) {
            	value.optId = scope.makeId(value.name);
            });

            scope.aOptions = scope.options.aOptions;

            // Si la descripción o el título están, entonces la instrucción va al fondo
            scope.isBottom = scope.title || scope.description;

            var counter = 0, chances = scope.options.chancesPerItem - 1;

            scope.verify = function (option, item, id) {
                if ((option === null) || (option === '')) { return; }

                // Verificamos la respuesta. Añadimos una propiedad right o wrong para definir si el item es correcto o no
                if (option.toLowerCase() === item.answer.toLowerCase()) {
                    scope.rightAnswers++;
                    item.wrong = false;
                    item.right = true;
                    item.block = true; // marcamos el item como completo, para desactivar el input
                    counter++;
                } else {

                    item.wrong ? chances = scope.options.chancesPerItem - 2 : chances = scope.options.chancesPerItem - 1;

                    item.wrong = true;


                    if (chances === 0) {
                        item.block = true;
                        counter++;
                        chances = scope.options.chancesPerItem - 1;
                    } else {
                        chances--;
                        $("#" + id).button('reset');
                    }
                }

                if (counter === scope.options.data.length) {

                    scope.complete = true;

                }

                scope.$apply();
            };

            
        }
    };
});
/**
 * La actividad permite seleccionar varios elementos dando click.
 */
var lizChooseItems = angular.module('lizChooseItems', []);

lizChooseItems.directive('chooseItems', function(){
	return  {
		restrict: 'E',
		templateUrl: '../views/activities/choose_items.html',
		transclude: true,
		scope: {
			options: "=",
			description: "@",
			audio: "@"
		},
		link: function(scope, element, attrs){

			// Variables de éxito - fracaso
			scope.success = false;
			scope.failure = false;

			scope.chances = scope.options.chances ? scope.options.chances : scope.options.items.lenght; // Posibilidades de realizar la actividad
			scope.rightAnswers = 0; // contador de respuestas buenas
			scope.minRightAnswers = scope.options.minRightAnswers; // número mínimo de respuestas
			scope.itemsfloat = scope.options.itemsfloat ? scope.options.itemsfloat : false;
			scope.activateAfter = scope.options.activateAfter ? scope.options.activateAfter : false;

			console.log(scope.itemsfloat);

			// Disparadores para las preguntas buenas y malas
			scope.rightAnswer = false;
			scope.wrongAnswer = false;

			scope.verify = function (item) {
				// para impedir que se repitan letras
				if(item._completed) return;

				item._completed = true;

				if (item.answer) {
					// respuesta buena
					scope.rightAnswer = item;
					scope.rightAnswers++;
				} else {
					// Respuesta incorrecta
					scope.wrongAnswer = item;
				}

				scope.chances--;

				// Fin de la actividad
				if(scope.chances === 0) {
					if (scope.rightAnswers >= scope.minRightAnswers) {
						scope.success = true;

						// Activamos la siguiente
						scope.$root.isNextEnabled = true;
					} else {
						scope.failure = true;
					}
				}

				// si activateAfter esta definido 
				if(scope.activateAfter){
					if(scope.rightAnswers === scope.activateAfter){
						// Activamos la siguiente
						scope.$root.isNextEnabled = true;
					}
				}
			};	
		}
	};
});


var lizClickAndListen = angular.module('lizClickAndListen', []);

lizClickAndListen.directive('clickAndListen', function  () {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			audio: '@',
			description: '@'
		},
		templateUrl: '../views/activities/click_and_listen.html',
		link: function postLink(scope, element, attrs) {
			var opt = scope.options;

			// Elementos de la actividad
			scope.headings = opt.headings;
			scope.items = opt.items;

			// calificación
			scope.success = false;
			scope.failure = false;


			/**
			 * Añade la propiedad de completado y verifica el fin de la actividad
			 */
			scope.verify = function (item) {
				// si esta completo, entonces sale automáticamente
				if(item.completed) return;

				item.completed = true;

				var completed = scope.items.filter(function(item){ return item.completed; }).length;

				// fin de la actividad
				if(completed === scope.items.length) {
					scope.$root.isNextEnabled = true;
					scope.success = true;
				}
			};


		}
	}; 
});

var lizClickImageMap = angular.module('lizClickImageMap', []);

lizClickImageMap.directive('clickImageMap', function () {
	return {
		restrict: 'E',
		scope: {
			options: "=",
			title: '@',
			instruction: '@',
			description: '@'
		},
		templateUrl: '../views/concepts/click_image_map.html',
		link: function (scope, element, attrs) {

			var opt = scope.options,
				countCompleted = 0;

			// Recuperamos cada valor de las variables
			scope.canvas = scope.$root.resources + '/' + opt.canvas + '.png'; // imagen a mapear
			scope.canvasAlt = opt.canvasAlt; // Texto alternativo de la imagen
			scope.targets = opt.targets; // mapas donde se da click para el sonido

			// Si la descripción o el título están, entonces la instrucción va al fondo
			scope.isBottom = scope.title || scope.description;

			/**
			 * Revisa si el elemento ya fue seleccionado
			 */
			scope.markCompleted = function (target) {
				// Marcamos el elemento seleccionado con un valor booleano
				if(! target.hasOwnProperty('_isCompleted')){
					target._isCompleted = true;
				}

				// Contamos los completos
				countCompleted = scope.targets.filter(function(target){
					return target._isCompleted;
				}).length;

				// revisamos si ya se completaron todos los objetivos
				if(countCompleted === scope.targets.length){
					scope.$root.isNextEnabled = true;
				}

			};

			/**
			 * Devuelve los estilos de cada target
			 */
			scope.getTargetStyles = function (target) {

				var styles = "";

				styles += "width: " + target.w + "%;";
				styles += "height: " + target.h + "%;";
				styles += "top: " + target.t + "%;";
				styles += "left: " + target.l + "%;";

				return styles;
				
			};


		}
	}; 
});

var lizClickToCompleteInput = angular.module('lizClickToCompleteInput', []);

lizClickToCompleteInput.directive('clickToCompleteInput', function  () {
    return {
        restrict: 'E',
        templateUrl: '../views/activities/click_to_complete_input.html',
		scope: {
			options: '=',
			description: '@',
			audio:'@'
			
		},

		link: function (scope, element, attrs) {
			// Corremos la aplicación
			scope.items = scope.options.items;
			scope.canvas = scope.options.canvas; // La imagen principal
			scope.titlecanvas = scope.options.titlecanvas; // title de La imagen principal
			minRightAnswers = scope.options.minRightAnswers
			rightAnswers = 0, // Contador de preguntas buenas
			chances = scope.options.chances,
			scope.success = false;
			scope.failure = false;
			scope.block = false;
			completedItems = 0;

			/**
			 * Definimos nuestra función beforeGoNext para que muestre el cuadro de felicitaciones
			 */
			scope.$root.beforeGoNext = function () {
				scope.success = true;
				return true; 
			};


			/**
			 * Para obtener los estilos de los elementos, específicamente el ancho
			 */
			scope.getTargetsStyles = function (item) {
				var styles = '';

				styles += 'width: ' + item.w + 'px;';
				styles += 'height: ' + item.h + 'px;';
				styles += 'top: ' + item.t + '%;';
				styles += 'left: ' + item.l + '%;';

				/*// estilos personalizados
				if(opt.hasOwnProperty('customStyles')) styles += opt.customStyles;*/

				return styles;
			};
			/**
			 * Para obtener los estilos las calificaciones de los targets 
			 */
			scope.getTargetsStyles2 = function (item) {
				var styles = '';

				styles += 'width: ' + item.w + 'px;';
				styles += 'height: ' + item.h + 'px;';
				styles += 'top: ' + item.t + '%;';
				styles += 'left: ' + item.l + '%;';
				styles += 'background-size: ' + item.w + 'px;' + item.w + 'px;';
				/*// estilos personalizados
				if(opt.hasOwnProperty('customStyles')) styles += opt.customStyles;*/

				return styles;
			};

			

			/**
			 * Marca los elementos y verifica el final
			 */
			scope.verify = function (item) {
								
				if(/*item.completed ||*/ item.input === "") return;

				if( ((item.answer[0] === 'free') && (item.input.length >= item.length)) || ( item.answer.indexOf(item.input) > -1 )  ){
					item.completed = true;
					item.wrong = false;
					item.right = true;
					
				}else{

					item.right = false;
					item.wrong = true;					
				}

				var countCompleted = scope.items.filter(function(item){
					return item.completed;
				}).length;
				
				if(countCompleted === chances) {
					scope.$root.isNextEnabled = true; // Activa la flecha de siguiente
				}
			};

		}

    }; 
});

lizClickToCompleteInput.directive('popclick', function($timeout, $compile){
	return {
	    restrict: 'A',
			scope: {
				item: '=popoverItem',
				popoverText: '@',
				popoverPlacement: '@'
			},
	    link : function (scope, element, attrs) {
				var disable = false,
					isHidden = true,
					data = ''; // template del input

				data = '<input type="text" class="popover-input" ng-model="item.input" ng-blur="verifyInput()" placeholder="Escribe aqui">';
				scope.item.input = ''; // Añade el modelo para el input

				element.bind('click', function (e) {
					if(disable) return; // Solo se anima la primera vez

					$(element).popover({
						animation: true,
						placement: scope.popoverPlacement,
						trigger: 'manual',
						content: $compile(data)(scope),
						html : true
						/*content: scope.popoverText*/
						//container: 'body'
					});
					
					if(isHidden){
						$(element).popover('show');
						isHidden = false;
					}else{
						$(element).popover('destroy');
						isHidden = true;
					}

				});

				scope.verifyInput = function () {

					scope.$parent.verify(scope.item);
				};

    	}
	};
});



var lizClickToSelectPosition = angular.module('lizClickToSelectPosition', []);

lizClickToSelectPosition.directive('clickToSelectPosition', function  () {
    return {
        restrict: 'E',
        templateUrl: '../views/activities/click_to_select_position.html',
		scope: {
			options: '=',
			description: '@',
			audio:'@'
			
		},

		link: function (scope, element, attrs) {
			// Corremos la aplicación
			scope.items = scope.options.items;
			scope.itemsPerRow = scope.options.itemsPerRow;
			scope.canvas = scope.options.canvas; // La imagen principal
			scope.titlecanvas = scope.options.titlecanvas; // title de La imagen principal
			scope.pattern = scope.items.pattern;
			scope.answer2 = scope.items.answer2;
			scope.selectedItem = false; // elemento seleccionado
			scope.selectedItem2 = false; // elemento seleccionado
			scope.selectedItemAux = false; // elemento seleccionado
			minRightAnswers = scope.options.minRightAnswers
			rightAnswers = 0, // Contador de preguntas buenas
			chances = scope.options.chances,
			scope.success = false;
			scope.failure = false;
			scope.block = false;
			completedItems = 0;
			/**
			 * Para obtener los estilos de los elementos, específicamente el ancho
			 */
			scope.getTargetsStyles = function (item) {
				var styles = '';

				styles += 'width: ' + item.w + 'px;';
				styles += 'height: ' + item.h + 'px;';
				styles += 'top: ' + item.t + '%;';
				styles += 'left: ' + item.l + '%;';

				/*// estilos personalizados
				if(opt.hasOwnProperty('customStyles')) styles += opt.customStyles;*/

				return styles;
			};
			/**
			 * Para obtener los estilos las calificaciones de los targets 
			 */
			scope.getTargetsStyles2 = function (item) {
				var styles = '';

				styles += 'width: ' + item.w + 'px;';
				styles += 'height: ' + item.h + 'px;';
				styles += 'top: ' + item.t + '%;';
				styles += 'left: ' + item.l + '%;';
				styles += 'background-size: ' + item.w + 'px;' + item.w + 'px;';
				/*// estilos personalizados
				if(opt.hasOwnProperty('customStyles')) styles += opt.customStyles;*/

				return styles;
			};

			

			/**
			 * Selecciona el elemento indicado
			 */
			scope.selectItem = function (item) {
			if(item.hasOwnProperty('isCompleted') || scope.selectedItem != false ) return;
				item.isCompleted = [];
				scope.selectedItemAux.select = [];
				scope.selectedItem = item; // seleccionamos el objeto
				scope.selectedItem.select = [];
				
			};

			/**
			 * Selecciona el objetivo indicado
			 */
			scope.selectItem2 = function (item) {
			if(scope.selectedItem === false ) return;

				scope.selectedItemAux = item; // seleccionamos el objeto

				if (scope.selectedItem.text === scope.selectedItemAux.text){
						item.wrong = false;
						item.right = true;
						scope.selectedItem = false; // borramos el elemento seleccionado		
						item.isCompleted = true; // marcamos el elemento, para no volver a seleccionarlo
						completedItems++;
						rightAnswers++
						scope.selectedItem2.target.wrong = false;
						
					

				}else{
					
					item.target = [];
					scope.selectedItem.wrong = true;
					scope.selectedItemAux.target.wrong = true;

					if(scope.selectedItem.select === true){
						
						/*if(!scope.selectedItem.hasOwnProperty('isCompleted')){*/
							
							completedItems++;
							scope.selectedItem.isCompleted = true; // marcamos el elemento, para no volver a seleccionarlo
							scope.selectedItem = false; // elemento seleccionado
							scope.selectedItemAux.target.wrong = false;
							scope.selectedItem2.target.wrong = false;

						/*}*/
					}else{
						scope.selectedItem.word = [];
						scope.selectedItem.word.wrong = true;
						scope.selectedItem.select = true;
						scope.selectedItem2 = item;
					}
				}

				// Fin de la actividad
				if(completedItems === chances){

					if (rightAnswers >= minRightAnswers){
						scope.$root.isNextEnabled = true;
							scope.success = true;
						} else {
							scope.failure = true;
						}
				}

				
			};	

			scope.random = function(){
    			return 0.5 - Math.random();
			};	

		}

		


    }; 
});




var lizCompareSample = angular.module('lizCompareSample', ['factories']);

lizCompareSample.directive('compareSample', function  (shuffleArrayFactory) {
    return {
        restrict: 'E',
		scope: {
			options: '=',
			description: '@'
		},
        templateUrl: '../views/activities/compare_sample.html',
		link: function postLink(scope, element, attrs) {

			scope.groups = shuffleArrayFactory.run(scope.options.groups); // Filas
			scope.chances = scope.options.hasOwnProperty('chances') ? scope.options.chances : scope.groups.length;
			scope.minRightAnswers = scope.options.hasOwnProperty('minRightAnswers') ? scope.options.minRightAnswers : scope.groups.length;
			scope.rightAnswers = 0; // respuestas correctas

			// variables que activan la pantalla de felicitaciones/vuelve a intentarlo
			scope.success = false;
			scope.failure = false;

			angular.forEach(scope.groups, function (group) {
				group.items = shuffleArrayFactory.run(group.items);
			});

			/**
			 * Obtiene los estilos de los items
			 */
			scope.getItemStyles = function (items) {
				return "width: " + (100 / items.length) + "%;";
			};

			/**
			 * Verifica si la respuesta es correcta/incorrecta
			 */
			scope.verify = function (item, group) {
				
				// Verificamos que el grupo no haya sido completado aún
				if(group.hasOwnProperty('_completed')) return;

				group._completed = true; //se define el grupo como terminado

				if(item.hasOwnProperty('answer')){
					// Respuesta Correcta
					item.isRight = true;
					scope.rightAnswers++;
				} else {
					// Respuesta Incorrecta
					item.isWrong = true;
				}

				scope.chances--;

				// Término de la actividad
				if (scope.chances === 0) {
					if(scope.rightAnswers >= scope.minRightAnswers){
						// éxito
						scope.success = true;
						scope.$root.isNextEnabled = true; // Activamos el botón de siguiente
					} else {
						// Fracaso
						scope.failure = true;
					}
				}
			};
		}
	}; 
});

var lizCompareSounds = angular.module('lizCompareSounds', ['factories']);

lizCompareSounds.directive('compareSounds', function  (shuffleArrayFactory) {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			audio: '@',
			hideImages: '@',
			description: '@'
		},
		templateUrl: '../views/activities/compare_sounds.html',
		link: function postLink(scope, element, attrs) {

			var items = scope.options.items;

			// La diversión empieza aquí!!!
			scope.items = shuffleArrayFactory.run(items.slice(0));
			scope.audios = items.slice(0).filter(function(item){ return !item.hasOwnProperty('noSound'); });
			scope.selectedItem = false; // Elemento que se selecciona al dar click
			scope.chances = typeof scope.options.chances !== "undefined" ? scope.options.chances : scope.options.items.length;
			scope.rightAnswers = 0; // Contador de preguntas correctas

			// Recorremos los elementos para definir propiedades por defecto
			scope.items.forEach(function(item){
				if(! item.hasOwnProperty('type')) item.type = 'png';
				if(! item.hasOwnProperty('audio')) item.audio = item.resource;
			});

			/**
			 * Selecciona el item que se le pasa como parámetro. En este caso, se trata del 
			 * sonido seleccionado
			 */
			scope.selectItem = function (item) {
				if(item.isRight || item.isWrong) return;
				scope.selectedItem = item;
			}

			/**
			 * Compara el item seleccionado con el usuario con selectedItem
			 */
			scope.compareItems = function (item) {
				// Si no se ha selecionado ningún item, se no se hace nada
				if (!scope.selectedItem) return;

				if(scope.selectedItem === item){
					// Respuesta correcta: Son iguales
					scope.selectedItem.isRight = true;
					scope.rightAnswers++;

				} else {
					// Respuesta incorrecta
					scope.selectedItem.isWrong = true;
				}

				// Reducimos las posibilidades y devolvemos a selectedItem a su estado inicial
				scope.chances--;
				scope.selectedItem = false;

			console.log(scope.chances);
				// Fin de la actividad
				if(scope.chances === 0){
					if(scope.rightAnswers >= scope.options.minRightAnswers){
						scope.success = true;	
						scope.$root.isNextEnabled = true; // Activamos la siguiente actividad
					} else {
						scope.failure = true;
					}
				}
			};

		}
	}; 
});

var lizComplementary = angular.module('lizComplementary', []);

lizComplementary.directive('complementary', function  () {
    return {
        restrict: 'E',
        templateUrl: '../views/activities/complementary.html',
		scope: {
			options: '=',
			description: '@',
			audio:'@'
		},

		link: function (scope, element, attrs) {
			// Corremos la aplicación
			
			link = scope.options.link
			link2 = scope.options.link2
			link3 = scope.options.link3
			link4 = scope.options.link4

			scope.success = false;
			scope.failure = false;
			scope.block = false;
			
			var visitedlink = false;
			var visitedlink2 = scope.options.link2 ? false : true;
			var visitedlink3 = scope.options.link3 ? false : true;
			var visitedlink4 = scope.options.link4 ? false : true;

			scope.verify = function (item) {
				
				if(item === link) {visitedlink = true}
				if(item === link2){visitedlink2 = true};
				if(item === link3){visitedlink3 = true};
				if(item === link4){visitedlink4 = true};

				if ((visitedlink === true) && (visitedlink2 === true) && (visitedlink3 === true) && (visitedlink4 === true)){

					scope.$root.isNextEnabled = true;
					scope.success = true;
				}

			}; // verify()


			

		}


    }; 
});


var lizComplementary2 = angular.module('lizComplementary2', []);

lizComplementary2.directive('complementary2', function  () {
    return {
        restrict: 'E',
        templateUrl: '../views/activities/complementary2.html',
		scope: {
			options: '=',
			description: '@',
			audio:'@',
			mainimg: "@",
			mainalt: "@"
		},

		link: function (scope, element, attrs) {
			// Corremos la aplicación
			
			scope.caseLinks = scope.options.caseLinks;
			scope.success = false;
			scope.failure = false;
			scope.block = false;

			angular.forEach(scope.caseLinks, function (value, key) {
				value.visited = false;
			});
			
			var counter = 0;
			scope.verify = function (item) {
				
				item.visited = true;

				counter++;

				if (scope.caseLinks.length === counter) {

					scope.$root.isNextEnabled = true;
					scope.success = true;
				}

			}; // verify()


			/**
			 * Devuelve los estilos de cada elemento
			 */
			scope.getStyles = function (item) {
				var styles = '';

				styles += "top: " + item.t + "%;";
				styles += "left: " + item.l + "%;";
				styles += "width: " + item.w + "px;";
				styles += "height: " + item.h + "px;";
				
				return styles;
			};

		}


    }; 
});


/**
 * La actividad permite completar inputs dentro de un "canvas".
 */
var lizCompleteInputParts = angular.module('lizCompleteInputParts', []);

lizCompleteInputParts.directive('completeInputParts', function () {
	return {
		restrict: 'E',
        templateUrl: '../views/activities/complete_input_parts.html',
        scope: {
            options: '=',
            instruction: '@',
            title: '@',
            description: '@',
            audio: '@'
        },
		link: function (scope, iElement, iAttrs) {
			scope.canvasBlocks = scope.options.canvasBlocks;

			scope.itemsLength = 0;
			scope.rightAnswers = 0;
			scope.complete = false; // Cuando termina la actividad
			scope.block = false;
			scope.success = false;
			scope.failure = false;

			angular.forEach(scope.canvasBlocks, function (value, key) {
				scope.itemsLength += value.items.length;
			})

			// watch if the activity is finished
			scope.$watch('complete', function(complete) {
				if (complete) {
					if (scope.rightAnswers >= scope.itemsLength ) {
						// éxito
						scope.success = true;

						// Activamos la siguiente actividad o ruta
						scope.$root.isNextEnabled = true;
					} else {
						// fracaso
						scope.failure = true;
					}
				} 
			});

			var counter = 0;
			var chances = scope.options.chancesPerItem-1;

			// si la opcion default esta completa el item
		    scope.canvasBlocks.forEach(function (q) {
		      q.items.forEach(function (i) {

			       	if(i.default){
			       		scope.rightAnswers++;
			       		i.right = true;
			       		i.block = true;
			       		i.input = i.answer;
			       		counter++;			       		
			       	}
			      
		       });
		    });

			// Si la descripción o el título están, entonces la instrucción va al fondo
			scope.isBottom = scope.title || scope.description;

			scope.verify = function (item) {
				if (null == item.input || "" === item.input) { return; }

				if (item.input.toLowerCase() === item.answer.toLowerCase()) {
					scope.rightAnswers++;
					item.wrong = false;
					item.right = true;
					item.block = true; // marcamos el item como completo, para desactivar el input
					counter++;
				} else {
					item.wrong ? chances=scope.options.chancesPerItem-2: chances=scope.options.chancesPerItem-1;

                	item.wrong = true;
                	

                    	if(chances === 0){
                    	item.block = true;
                    	item.input = item.answer;
                    	counter++;
                    	chances=scope.options.chancesPerItem-1;
                    	}else{chances--;item.input="";}
				}

				if(counter === scope.itemsLength){
                    
                    scope.complete = true;
                	
                }

                scope.$apply();
			}

			/**
			 * Devuelve los estilos de cada elemento
			 */
			scope.getStyles = function (item) {
				var styles = '';

				styles += "top: " + item.t + "%;";
				styles += "left: " + item.l + "%;";

				item.w ? styles += "width: " + item.w + "%;" : '' ;	

				return styles;
			};
		}
	};
});
/**
 * La actividad permite completar palabras en inputs
 */
var lizCompleteInputs = angular.module('lizCompleteInputs', []);

lizCompleteInputs.directive('completeInputs', function(){
	return  {
		restrict: 'E',
		templateUrl: '../views/activities/complete_inputs.html',
		scope: {
			inputs: "=",
			description: '@'
		},
		link: function(scope, element, attrs){
			// Inputs procesados
			scope.words = [];

			// Procesamos cada elemento del array entrante
			angular.forEach(scope.inputs, function (input) {
				scope.words.push({ word: input, right: false, wrong: false });
			});

			scope.rightAnswers = 0; // número de respuestas correctas
			scope.complete = false; // Cuando termina la actividad

			scope.success = false;
			scope.failure = false;

			// watch if the activity is finished
			scope.$watch('complete', function(complete) {
				if (complete) {
					if (scope.rightAnswers >= 3) {
						// éxito
						scope.success = true;

						// Activamos la siguiente actividad o ruta
						scope.$root.isNextEnabled = true;
					} else {
						// fracaso
						scope.failure = true;
					}
				}
			});

		}
	};
});

lizCompleteInputs.directive('compare', function () {
    return {
        scope: {
            compare: '=compare',
            counter: '=counter',
            complete: '=complete'
        },
        link: function (scope, element, attrs) {
            element.bind('keyup', function () {
                if (element.val().length == scope.compare.word.length) {
                    // Good answer -> increase good answers
                    if (element.val() === scope.compare.word) {
                        scope.compare.right = true;
                    } else {
                        scope.compare.wrong = true;
                    }

                    scope.counter++;

                    element.attr('disabled', 'disabled');
                    var inputs = element.closest('form').find(':input:visible');

                    if(scope.counter === inputs.length){
                    	
                        scope.complete = true;
                    	
                    }

                    inputs.eq(inputs.index(element) + 1).focus();

                    scope.$apply();
                }
            });
        }
    }
});


/**
 * La actividad permite completar palabras en inputs
 */
var lizCompleteInputsDescription = angular.module('lizCompleteInputsDescription', []);

lizCompleteInputsDescription.directive('completeInputsDescription', function ($sce) {
  return {
    restrict: 'E',
    templateUrl: '../views/activities/complete_inputs_description.html',
    scope: {
      options: "=",
      title: '@',
      correctAnswer: '@',
      description: '@',
      instruction: '@',
      titleBlock: '@',
      audio: '@',
      tableTextTitle: '@',
      inputTextTitle: '@'
    },
    link: function (scope, element, attrs) {
      var opt = scope.options;

      // Inputs procesados
      scope.words = [];

      // Procesamos cada elemento del array entrante
      angular.forEach(scope.inputs, function (input) {
        scope.words.push({ word: input, right: false, wrong: false });
      });

      scope.feedback = opt.hasOwnProperty('feedback') ? opt.feedback : false;

      scope.extension = opt.extension ? opt.extension : '.png';
      scope.complete = false; // Cuando termina la actividad
      scope.hideDescription = scope.options.hideDescription;
      scope.descriptionTop = scope.options.descriptionTop;
      scope.itemsPerRow = scope.options.itemsPerRow;
      scope.block = false;

      scope.rightAnswers = 0; // número de respuestas correctas
      scope.success = false;
      scope.failure = false;

      // watch if the activity is finished
      scope.$watch('complete', function (complete) {
        if (complete) {

          if (scope.rightAnswers >= minRightAnswers) {
            // éxito
            scope.success = true;

            // Activamos la siguiente actividad o ruta
            scope.$root.isNextEnabled = true;
          } else {
            // fracaso
            scope.failure = true;
          }
        }
      });

      // Permite el uso de html
      scope.sanitize = function (item) {
        return $sce.trustAsHtml(item);
      };

      // ordena el array de forma aleatoria usando el algoritmo de Fisher-Yates
      self.shuffleArray = function (array) {
        for (var i = array.length - 1; i > 0; i--) {
          var j = Math.floor(Math.random() * (i + 1));
          var temp = array[i];
          array[i] = array[j];
          array[j] = temp;
        }
        return array;
      };

      scope.items = scope.options.data,
        minRightAnswers = scope.options.minRightAnswers,
        randomItems = scope.options.randomItems ? true : false,
        scope.description_data = scope.options.data.slice(0);   // Clonamos el array para empezar a trabajar

      if (randomItems) {
        data = self.shuffleArray(scope.items);
      }

      // Si la descripción o el título están, entonces la instrucción va al fondo
      scope.isBottom = scope.title || scope.description;


      /**
       * Para obtener los estilos de los elementos, específicamente el ancho
       */
      scope.getStyles = function () {
        var styles = "";

        if (scope.itemsPerRow) {
          styles += "width: " + (100 / scope.itemsPerRow) + "%;";
        } else {
          styles += "width: " + (100 / (scope.options.data.length + 2)) + "%;";
          styles += "margin-left: " + (100 / (scope.options.data.length * 4)) + "%;";
        }

        return styles;
      };

      /**
       * Función de Jeison
       */
      var counter = 0,
        chances = scope.options.chancesPerItem - 1;

      /**
       * Verifica los inputs y da fin a la actividad.
       * @param input
       */
      scope.verify = function (input) {
        // aquí se hace lo que quiera con el input
        // Good answer -> increase good answers
        if ( ((input.correctAnswer.toLowerCase() === input.input.toLowerCase()) && (input.input != "" )) || input.correctAnswer.toLowerCase() === 'free') {
          input.wrong = false;
          input.right = true;
          input.block = true;
          scope.rightAnswers++;

          counter++;
        }

        if ((input.correctAnswer.toLowerCase() != input.input.toLowerCase()) && ((input.input != null ) && (input.input != "" ) && (input.correctAnswer.toLowerCase() != "free" ))) {
          input.wrong ? chances = scope.options.chancesPerItem - 2 : chances = scope.options.chancesPerItem - 1;
          input.wrong = true;

          if (chances === 0) {
            input.block = true;
            counter++;
            chances = scope.options.chancesPerItem - 1;
          } else {
            chances--;
            input.input = "";
          }
        }

        if (counter === scope.options.data.length) {
          // Solamente activa la flecha, permitiendo al estudiante ver la realimentación
          scope.$root.isNextEnabled = true;

          if(scope.feedback) {
            scope.showFeedback = true;
          } else {
            scope.complete = true;
          }
        }
      };

      // If feedback is activated, show the feedback
      if(scope.feedback) {
        scope.$root.beforeGoNext = function () {
          if (scope.rightAnswers >= minRightAnswers) {
            scope.success = true;
            return true;
          } else {
            scope.failure = true;
            return false;
          }
        };
      }

    }
  };
});


var lizCompleteInputsFree = angular.module('lizCompleteInputsFree', []);

lizCompleteInputsFree.directive('completeInputsFree', function  () {
    return {
        restrict: 'E',
        templateUrl: '../views/activities/complete_inputs_free.html',
		scope: {
			options: '=',
			description: '@',
			audio:'@'
		},

		link: function (scope, element, attrs) {
			// Corremos la aplicación
			scope.items = scope.options.items;
			scope.itemsPerRow = scope.options.itemsPerRow;
			scope.pattern = scope.items[0].pattern;
			scope.words = [];
			minRightAnswers = scope.options.minRightAnswers //MAria Giraldo -> Se utiliza para validar la cantidad de letras en la caja de texto
			rightAnswers = 0, // Contador de preguntas buenas
			chances = scope.items[0].pattern.length * 1, // el doble, ya que es izquierda y derecha
			scope.success = false;
			scope.failure = false;
			scope.block = false;

			/**
			 * Para obtener los estilos de los elementos, específicamente el ancho
			 */
			scope.getStyles = function function_name(argument) {
				var styles = "";

				if(scope.itemsPerRow){
					styles += "width: " + (100 / scope.itemsPerRow) + "%;";
					styles += "margin-left: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-top: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-right: " + (10 / scope.itemsPerRow) + "%!important;";
				} else {
					styles += "width: " + (100 / scope.items.length) + "%;";
					styles += "margin-left: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-top: " + (10 / scope.itemsPerRow) + "%;";
				}
				
				return styles;

				
			};

			

			/**
			 * Definimos nuestra función beforeGoNext para que muestre el cuadro de felicitaciones
			 */
			scope.$root.beforeGoNext = function () {
				scope.success = true;
				return true; 
			};

			/**
			 * Verifica si el input cumple con las condiciones del número 
			 */
			 var chancesPerItem = 1

			scope.verify = function (item) {

				if(item.input === '') return; 

				
				//if (item.input.length >= 15){ //COmentado por Maria Giraldo, para poner numero de letras dinámico

                /*
                * Maria Giraldo
                * Validación temporal para no afectar el numero estatico de 15 letras
                * if (minRightAnswers !== 30) minRightAnswers = 15; (*)
                * -- La validación dinámica del numero de letras, aplica al 100% si se elimina esta validación (*).
                * Por el momento funciona para 30 caracteres
                * */
                if (minRightAnswers !== 30) minRightAnswers = 15;

                if (item.input.length >= minRightAnswers){

                    scope.$root.isNextEnabled = true;

                }

					/*// fin de la actividad
					if(chances === 0){
						if(rightAnswers >= minRightAnswers){
							
							scope.success = true;
						} else {
							scope.failure = true;
						}
					} */
					
			}; // verify()



		}


    }; 
});


var lizCompleteInputsPosition = angular.module('lizCompleteInputsPosition', []);

lizCompleteInputsPosition.directive('completeInputsPosition', function  () {
    return {
        restrict: 'E',
        templateUrl: '../views/activities/complete_inputs_position.html',
		scope: {
			options: '=',
			description: '@',
			audio:'@'
			
		},

		link: function (scope, element, attrs) {
			// Corremos la aplicación
			scope.items = scope.options.items;
			scope.itemsPerRow = scope.options.itemsPerRow;
			scope.canvas = scope.options.canvas; // La imagen principal
			scope.canvasalt = scope.options.canvasalt;
			scope.imgStyle = scope.options.imgStyle; // estilos de La imagen principal
			scope.examples = scope.options.examples;
			scope.pattern = scope.items.pattern;
			scope.answer2 = scope.items.answer2;
			minRightAnswers = scope.options.minRightAnswers
			chancesPerItem = scope.options.chancesPerItem ? scope.options.chancesPerItem : 1
			rightAnswers = 0, // Contador de preguntas buenas
			chances = scope.options.chances,
			scope.success = false;
			scope.failure = false;
			scope.block = false;
			completedItems = 0;

			// Recorremos todos los items
			      scope.items.forEach(function (item) {
			        
		      		if (item.default){

		      			item.complete = [];

		      			item.complete.push({
						  complete: true,								      
						});

						rightAnswers++;
						chances--;
						item.wrong = false;
						item.right = true;
						item.completed = true; // marcamos el item como completo, para desactivar el input
						item.input = item.pattern ;

		      		}

			      });
			/**


			 * Para obtener los estilos de los elementos, específicamente el ancho
			 */
			scope.getTargetsStyles = function (item) {
				var styles = '';

				styles += 'width: ' + item.w + 'px;';
				styles += 'height: ' + item.h + 'px;';
				styles += 'top: ' + item.t + '%;';
				styles += 'left: ' + item.l + '%;';

				/*// estilos personalizados
				if(opt.hasOwnProperty('customStyles')) styles += opt.customStyles;*/

				return styles;
			};
			/**
			 * Para obtener los estilos las calificaciones de los targets 
			 */
			scope.getTargetsStyles2 = function (item) {
				var styles = '';

				styles += 'width: ' + item.w + 'px;';
				styles += 'height: ' + item.h + 'px;';
				styles += 'top: ' + item.t + '%;';
				styles += 'left: ' + item.l + '%;';
				styles += 'background-size: ' + item.w + 'px;' + item.w + 'px;';
				/*// estilos personalizados
				if(opt.hasOwnProperty('customStyles')) styles += opt.customStyles;*/

				return styles;
			};

			

			

			scope.verify = function (item) {

				if((item.input === '' ) || ! item.hasOwnProperty('input')) return;

					item.complete = [];					
					

						if( item.pattern.indexOf(item.input) > -1  || item.pattern[0] === "free" ){
								
								item.complete.push({
									  complete: true,								      
								});
								

						} 

						else{
							
						}			


				// Si se han completado todos
					
				if (item.complete.length >= 1) {
							
							rightAnswers++;
							chances--;
							item.wrong = false;
							item.right = true;
							item.completed = true; // marcamos el item como completo, para desactivar el input
							
					} 
					else {
							item.wrong ? chancesPerItem = scope.options.chancesPerItem ? scope.options.chancesPerItem - 1 : chancesPerItem = 1 : chancesPerItem = scope.options.chancesPerItem ? scope.options.chancesPerItem : chancesPerItem = 1 ;
							chancesPerItem--	
							item.wrong = true;
								if(chancesPerItem === 0){
		                    	item.completed = true;
		                    	item.input = item.pattern;
		                    	chances--;
		                    	chancesPerItem = scope.options.chancesPerItem ? scope.options.chancesPerItem : 1
		                    	}
		                    	else{item.input="";}

					}

					// fin de la actividad
					if(chances === 0){
						if(rightAnswers >= minRightAnswers){
							scope.$root.isNextEnabled = true;
							scope.success = true;
						} else {
							scope.failure = true;
						}
					} 					
			}; // verify()

				

				
			

			

		}

		


    }; 
});




/**
 * La actividad permite completar inputs con falso "F" o verdadero "V".
 */
var lizCompleteInputsTrueFalse = angular.module('lizCompleteInputsTrueFalse', []);

lizCompleteInputsTrueFalse.directive('completeInputsTrueFalse', function () {
	return {
		restrict: 'E',
		templateUrl: '../views/activities/complete_inputs_true_false.html',
 		scope: {
 			options: '=',
 			instruction: '@',
 			title: '@',
 			description: '@',
 			audio: '@'
 		},
		link: function (scope, iElement, iAttrs) {
			// Inputs procesados
			scope.words = [];

			// Procesamos cada elemento del array entrante
			angular.forEach(scope.inputs, function (input) {
				scope.words.push({ word: input, right: false, wrong: false });
			});

			scope.rightAnswers = 0;
			scope.complete = false; // Cuando termina la actividad
			scope.block = false;
			scope.success = false;
			scope.failure = false;

			// watch if the activity is finished
			scope.$watch('complete', function(complete) {
				if (complete) {
					if (scope.rightAnswers >= scope.options.data.length || scope.rightAnswers >= scope.options.minRightAnswers) {
						// éxito
						scope.success = true;

						// Activamos la siguiente actividad o ruta
						scope.$root.isNextEnabled = true;
					} else {
						// fracaso
						scope.failure = true;
					}
				} 
			});

			scope.items = scope.options.data;
			if (scope.options.aOptions) {
				scope.aOptions = scope.options.aOptions;
			}

			// Si la descripción o el título están, entonces la instrucción va al fondo
			scope.isBottom = scope.title || scope.description;

			var counter = 0
			var chances = scope.options.chancesPerItem-1

			scope.verify = function (item) {
				if ((item.input == null ) || (item.input == "" )) return;

				// Verificamos la respuesta. Añadimos una propiedad right o wrong para definir si el item es correcto o no
				if(item.input.toLowerCase() === item.answer.toLowerCase()){
					scope.rightAnswers++;
					item.wrong = false;
					item.right = true;
					item.block = true; // marcamos el item como completo, para desactivar el input
					counter++;
				} else {
					
					item.wrong ? chances=scope.options.chancesPerItem-2: chances=scope.options.chancesPerItem-1;

                	item.wrong = true;
                	

                    	if(chances === 0){
                    	item.block = true;
                    	item.input = item.answer;
                    	counter++;
                    	chances=scope.options.chancesPerItem-1;
                    	}else{chances--;item.input="";}
				}

				if(counter === scope.options.data.length){
                    	
                    scope.complete = true;
                	
                }
			}
		}
	};
});
var lizCompleteLetters = angular.module('lizCompleteLetters', []);

lizCompleteLetters.factory('completeLettersActivity', function ($rootScope) {

  var completeLettersActivity = {};

  /**
   * Crea el ViewModel. Aquí es donde ocurre la magia. SUPER IMPORTANTE.
   */
  completeLettersActivity.create = function (options) {
    var processedData = [];

    angular.forEach(options.items, function (item) {
      processedData.push(new Item(item.resource, item.name, item.pattern));
    });

    options.items = processedData;

    return new completeLettersActivity._ViewModel(options);
  };


  // Clase necesaria para convertir cada letra en un input
  var Letter = function (letter, isInput) {
    this.letter = letter;
    this.input = isInput;
    this.value = ko.observable(''); // used for the user input
    this.lastValue = ko.observable();
    this.chances =  1
  };

  // Cada elemento de items que se ingrese debe ser convertido para generar los objetos Letter
  var Item = function (resource, name, positions) {
    var self = this;

    self.resource = resource;
    self.name = [];

    // Constructor
    // Recorre el array comparando las posiciones y configurando los inputs
    $.each(name.split(''), function (key, value) {
      if ($.inArray(key, positions) !== -1) {
        self.name.push(new Letter(value, true));
      } else {
        self.name.push(new Letter(value, false));
      }
    });
    console.log(self.name)
  };

  /**
   * Genera el ViewModel de las parejas con sus funcionalidades
   *
   * Recibe un objeto con las siguientes propiedades
   *
   * @param {object}    options            Opciones a utilizar.
   * @param {object}    options.items        Elementos con las letras a completar
   * @param {object}    options.chances        Oportunidades para realizar la actividad
   * @param {object}    options.minRightAnswers    Número mínimo de respuestas buenas
   * @param {object}    options.resources      directorio de recursos
   */
  completeLettersActivity._ViewModel = function (options) {
    // Inicialización de variables
    var self = this;

    self.items = ko.observableArray(options.items);
    self.chances = ko.observable(options.chances ? options.chances : options.items.length);
    self.rightAnswers = ko.observable(0);
    self.minRightAnswers = options.minRightAnswers;
    self.resources = options.resources;
    self.itemsPerRow = typeof options.itemsPerRow !== "undefined" ? options.itemsPerRow : 4;
    self.chancesPerItem = typeof options.chancesPerItem !== "undefined" ? options.chancesPerItem : 1;

    // audio
    self.audio = ko.observable(options.audio);

    // Si está buena, va al siguiente input
    self.verifyAnswer = function (item, e) {
      var input = e.currentTarget;

      if (item.value() !== '') {
        if (item.value() == item.letter) {
          // Es correcto
          self.rightAnswers(self.rightAnswers() + 1);
          self.chances(self.chances() - 1);
          input.disabled = 'disabled'; // desabilita el input

          // Va al siguiente input. Necesario que todo esté dentro de un elemento FORM
          var inputs = $(input).closest('form').find(':input:visible');
          inputs.eq(inputs.index(input) + 1).focus(); // Esta es la función de salto al siguiente input
        } else {
          // Incorrecto
          item.chances++
          if(item.chances > self.chancesPerItem){
            item.lastValue(item.value());
            self.chances(self.chances() - 1);
            console.log(item);
            item.value = item.letter;
            input.disabled = 'disabled'; // desabilita el input
            // Va al siguiente input. Necesario que todo esté dentro de un elemento FORM
            var inputs = $(input).closest('form').find(':input:visible');
            inputs.eq(inputs.index(input) + 1).focus(); // Esta es la función de salto al siguiente input
          }
        }

        
      }
    };

    /**
     * Reproduce el audio de la instrucción.
     */
    self.playAudio = function () {
      $('#audio-instruction')[0].play();
    };

    // Limpia el input después de teclear
    self.clearInput = function (item, e) {
      if (item.value() !== '' && item.value() != item.letter) {
        item.value(String.fromCharCode(e.charCode)); // set the pressed key
      }

      return true;
    };

    // Define el éxito de la actividad
    self.success = ko.computed(function () {
      // Activamos la siguiente
      if (self.chances() === 0 && self.rightAnswers() >= self.minRightAnswers) {
        $rootScope.isNextEnabled = true;
      }

      return self.chances() === 0 && self.rightAnswers() >= self.minRightAnswers;
    });

    // Define el fracaso de la actividad
    self.failure = ko.computed(function () {
      return self.chances() === 0 && self.rightAnswers() < self.minRightAnswers;
    });
  };


  /**
   * Inicializa la instancia del ViewModel creado con pairsActivity.create
   *
   * @param {object} instance Intancia del VM de knockout
   */
  completeLettersActivity.run = function (instance) {
    ko.cleanNode($('#main-container')[0]);
    ko.applyBindings(instance, $('#main-container')[0]);
  };

  return completeLettersActivity;
});


lizCompleteLetters.directive('completeLetters', function (completeLettersActivity) {
  return {
    restrict: 'E',
    templateUrl: '../views/activities/complete_letters.html',
    scope: {
      options: '=',
      description: '@',
      letter: '@',
      audio: '@'
    },
    link: function postLink(scope, element, attrs) {
      // Corremos la aplicación
      // Añadimos el audio a options
      scope.options.audio = typeof scope.audio !== "undefined" ? scope.audio : false;
      scope.options.resources = scope.$root.resources;
      completeLettersActivity.run(completeLettersActivity.create(scope.options));
    }
  };
});


var lizCompleteMultitable = angular.module('lizCompleteMultitable', []);

lizCompleteMultitable.directive('completeMultitable', function  () {
    return {
        restrict: 'E',
        templateUrl: '../views/activities/complete_multitable.html',
		scope: {
			options: '=',
			description: '@',
			audio:'@',
			titleBlock: '@',
			blockText: '@',
			mainimg: '@'
		},

		link: function (scope, element, attrs) {
			// Corremos la aplicación
			scope.groups = scope.options.groups;
			scope.items = [];
			scope.list = scope.options.list;
			scope.words = [];
			scope.wordIn = false;
			scope.count = false;
			minRightAnswers = scope.options.minRightAnswers
			rightAnswers = 0, // Contador de preguntas buenas
			chances = scope.options.chances,
			scope.itemsStyle = scope.options.itemsStyle;
			scope.groupsStyle = scope.options.groupsStyle;
			scope.success = false;
			scope.failure = false;
			scope.block = false;


			// Recorremos todos los grupos y sus items
			      scope.groups.forEach(function (group) {
			        group.items.forEach(function (item) {
			          // agregamos cada item a el array de items
			          scope.items.push({
							item: item,								      
					  });

			        });
			      });


			var items = scope.items;

		   // Constructor de palabras
		   for(var j=0; j < items.length; j++){

			   	var string = items[j].item.text;
				var words = string.split(" ");

				scope.items[j].item.words = [];

				
				
				for(var i=0; i < words.length; i++){

							scope.items[j].item.words.push({
								  isInput: true,
							      input: '',
							      word: (words[i]),
							});
				}
					console.log(scope.items[j].item.words);
			}


			/**
			 * Verifica si el input cumple con las condiciones del número 
			 */
			
			scope.verify = function (item,word,pattern,items) {
				var chancesPerItem = 1
				if(word.wrong === true){chancesPerItem = 0}
				
					// Recorremos el grupo y sus items
			        pattern.forEach(function (wordx) {
			        	
			        	if(item === wordx.input && item != ''){
			        		scope.count ++
		          		}				      
					  
			        });			     

			      	if(scope.count >= 2){
	          			scope.wordIn = true
	          			scope.count = 0
	          		}else{scope.wordIn = false;scope.count = 0}

				if(item === '' || scope.wordIn === true) return; 
				
				// Verificamos la respuesta. Añadimos una propiedad right o wrong para definir si el item es correcto o no
				for(var i=0; i < pattern.length; i++){
					if( item.indexOf(pattern[i].word) > -1 ){
						rightAnswers++;
						chances--;
						word.wrong = false;
						word.right = true;
						word.completed = true; // marcamos el item como completo, para desactivar el input
						break
					} else {
						
						if(items.hasOwnProperty('answer2')){
							if(item === items.answer2){
								chances--;
								word.wrong = false;
								word.right = true;
								word.completed = true; // marcamos el item como completo, para desactivar el input
								break
							}else{
							       	word.right = false;
									word.wrong = true;
	                    		}
						}else {
						
							word.right = false;
							word.wrong = true;
                    	}
					}

				}
					
					if(word.wrong === true && chancesPerItem === 0){
						word.completed = true; // marcamos el item como completo, para desactivar el input
						chancesPerItem = 1
						chances--;
						item ="";
					}else{chancesPerItem = 0 ;}

					// fin de la actividad
					if(chances === 0){
						if(rightAnswers >= minRightAnswers){
							scope.$root.isNextEnabled = true;
							scope.success = true;
						} else {
							scope.failure = true;
						}
					} 
					
			}; // verify()



		}


    }; 
});


/**
 * La actividad permite completar inputs en un table de acuerdo a 
 * las imagenes que se hubican en la primera columna.
 */
var lizCompleteTableImageInputs = angular.module('lizCompleteTableImageInputs', []);

 lizCompleteTableImageInputs.directive('completeTableImageInputs', function () {
 	return {
 		restrict: 'E',
 		templateUrl: '../views/activities/complete_table_image_inputs.html',
 		scope: {
 			options: '=',
 			instruction: '@',
 			title: '@',
 			description: '@',
 			audio: '@',
 			mainimg: '@',
 			alt: '@'
 		},
 		link: function (scope, iElement, iAttrs) {
 			// Inputs procesados
			scope.words = [];

			// Procesamos cada elemento del array entrante
			angular.forEach(scope.inputs, function (input) {
				scope.words.push({ word: input, right: false, wrong: false });
			});

			scope.textImageTitle = scope.options.textImageTitle;
			scope.textInput1Title = scope.options.textInput1Title;
			scope.textInput2Title = scope.options.textInput2Title;
			scope.rightAnswers = 0;
			scope.complete = false; // Cuando termina la actividad
			scope.block = false;
			scope.success = false;
			scope.failure = false;

			// watch if the activity is finished
			scope.$watch('complete', function(complete) {
				if (complete) {
					if (scope.rightAnswers >= scope.options.minRightAnswers) {
						// éxito
						scope.success = true;

						// Activamos la siguiente actividad o ruta
						scope.$root.isNextEnabled = true;
					} else {
						// fracaso
						scope.failure = true;
					}
				} 
			});

			scope.items = scope.options.data;

			// Si la descripción o el título están, entonces la instrucción va al fondo
			scope.isBottom = scope.title || scope.description;

			var counter = 0;
			var chances = scope.options.chancesPerItem-1;

			scope.verify = function (obj) {
				if ((obj.input == null ) || (obj.input == "" )) return;

				// Verificamos la respuesta. Añadimos una propiedad right o wrong para definir si el item es correcto o no
				if(obj.input.toLowerCase() === obj.tableText.toLowerCase()){
					scope.rightAnswers++;
					obj.wrong = false;
					obj.right = true;
					obj.completed = true; // marcamos el item como completo, para desactivar el input
					counter++;
				} else {
					
					obj.wrong ? chances=scope.options.chancesPerItem-2: chances=scope.options.chancesPerItem-1;

                	obj.wrong = true;
                	

                    	if(chances === 0){
                    	obj.block = true;
                    	counter++;
                    	chances=scope.options.chancesPerItem-1;
                    	}else{chances--;obj.input="";}
				}

				if(counter === (scope.options.data.length * 2)){
                    	
                    scope.complete = true;
                	
                }
                
                scope.$apply();
			}
 		}
 	};
 });
/**
 * La actividad permite completar inputs en un table de acuerdo a 
 * unas condiciones.
 */

var lizCompleteTableInputs = angular.module('lizCompleteTableInputs', []);

lizCompleteTableInputs.directive('completeTableInputs', function () {
 	return {
 		restrict: 'E',
 		templateUrl: '../views/activities/complete_table_inputs.html',
 		scope: {
 			options: '=',
 			instruction: '@',
 			audio: '@'
 		},
 		link: function (scope, iElement, iAttrs) {
 			console.log(iAttrs);
			// Inputs procesados
			scope.words = [];

			// Procesamos cada elemento del array entrante
			angular.forEach(scope.inputs, function (input) {
				scope.words.push({ word: input, right: false, wrong: false });
			});

			scope.tableTextTitle = scope.options.tableTextTitle;
			scope.inputTextTitle = scope.options.inputTextTitle;
			scope.rightAnswers = 0;
			scope.complete = false; // Cuando termina la actividad
			scope.block = false;
			scope.success = false;
			scope.failure = false;

			// watch if the activity is finished
			scope.$watch('complete', function(complete) {
				if (complete) {
					if (scope.rightAnswers >= scope.options.data.length) {
						// éxito
						scope.success = true;

						// Activamos la siguiente actividad o ruta
						scope.$root.isNextEnabled = true;
					} else {
						// fracaso
						scope.failure = true;
					}
				} 
			});

			scope.items = scope.options.data;

			// Si la descripción o el título están, entonces la instrucción va al fondo
			scope.isBottom = scope.title || scope.description;

			var counter = 0
			var chances = scope.options.chancesPerItem-1

			scope.verify = function (input) {
				// aquí se hace lo que quiera con el input
				var letters = /^[A-Za-z]+$/;

				if((input.input.match(letters) !== null) && (input.input !="" )) {
                    	
                	input.wrong = false;
                    input.right = true;
                    input.block = true;
                    scope.rightAnswers++;
                    counter++;
                                                                   
                }

                if((input.input.match(letters) === null) && ((input.input != null ) && (input.input != "" ))) {
	                    	
	                    	
                    	input.wrong ? chances=scope.options.chancesPerItem-2: chances=scope.options.chancesPerItem-1;

                    	input.wrong = true;
                    	

	                    	if(chances === 0){
	                    	input.block = true;
	                    	counter++;
	                    	chances=scope.options.chancesPerItem-1;
	                    	}else{chances--;input.input="";}
            	}

            	if(counter === scope.options.data.length){
                    	
                    scope.complete = true;
                	
                }
                
			}
 		}
 	};
});
/**
 * La actividad permite completar inputs en hubicaciones aleatorias 
 * en un table.
 */
var lizCompleteTableRandomInputs = angular.module('lizCompleteTableRandomInputs', []);

 lizCompleteTableRandomInputs.directive('completeTableRandomInputs', function ($sce) {
 	return {
 		restrict: 'E',
 		templateUrl: '../views/activities/complete_table_random_inputs.html',
 		scope: {
 			options: '=',
 			instruction: '@',
 			title: '@',
 			description: '@',
 			audio: '@'
 		},
 		link: function (scope, element, iAttrs) {

			scope.sanitize = function (item) {
				return $sce.trustAsHtml(item);
			};

			// ordena el array de forma aleatoria usando el algoritmo de Fisher-Yates
			scope.shuffleArray = function(array) {
				for (var i = array.length - 1; i > 0; i--) {
					var j = Math.floor(Math.random() * (i + 1));
					var temp = array[i];
					array[i] = array[j];
					array[j] = temp;
				}
				return array;
			};

			scope.items = scope.options.items;
			scope.titles = scope.options.titles;
			scope.rightAnswers = 0;
			scope.complete = false; // Cuando termina la actividad
			scope.block = false;
			scope.minRightAnswers = scope.options.minRightAnswers;
			scope.success = false;
			scope.failure = false;
			scope.numInputs = 0;

			angular.forEach(scope.items, function (item, key) {
				angular.forEach(item.objs, function (obj, k) {
					if (obj.isInput) {
						obj.chances = scope.options.chancesPerItem - 1;
						obj.right = false;
						obj.wrong = false;
						scope.numInputs++;
					}
				});
			});

			// watch if the activity is finished
			scope.$watch('complete', function(complete) {
				if (complete) {
					if (scope.rightAnswers >= scope.minRightAnswers) {
						// éxito
						scope.success = true;

						// Activamos la siguiente actividad o ruta
						scope.$root.isNextEnabled = true;
					} else {
						// fracaso
						scope.failure = true;
					}
				} 
			});

			// Si la descripción o el título están, entonces la instrucción va al fondo
			scope.isBottom = scope.title || scope.description;

			var counter = 0;

			scope.verify = function (obj) {
				if ("" === obj.input || null === obj.input) { return; }
				
				// Verificamos la respuesta. Añadimos una propiedad right o wrong para definir si el item es correcto o no
				if(obj.input.toLowerCase() === obj.answer.toLowerCase()){
					scope.rightAnswers++;
					obj.wrong = false;
					obj.right = true;
					obj.block = true; // marcamos el item como completo, para desactivar el input
					counter++;
				} else {
					
					// item.wrong ? chances=scope.options.chancesPerItem-2: chances=scope.options.chancesPerItem-1;

                	obj.wrong = true;

                    	if(obj.chances === 0){
                    	obj.block = true;
                    	obj.input = obj.answer;
                    	counter++;
                    	obj.chances=scope.options.chancesPerItem-1;
                    	}else{obj.chances--;obj.input="";}
				}

				if(counter === scope.numInputs){
                    	
                    scope.complete = true;
                	
                }
			}
 		}
 	};
 });
/**
 * La actividad permite completar inputs en un table de acuerdo a 
 * una lista lateral.
 */
var lizCompleteTableWithList = angular.module('lizCompleteTableWithList', []);

 lizCompleteTableWithList.directive('completeTableWithList', function ($sce) {
 	return {
 		restrict: 'E',
 		templateUrl: '../views/activities/complete_table_with_list.html',
 		scope: {
 			options: '=',
 			instruction: '@',
 			title: '@',
 			description: '@',
 			audio: '@'
 		},
 		link: function (scope, element, iAttrs) {
 			// Inputs procesados
			scope.words = [];

			// Procesamos cada elemento del array entrante
			angular.forEach(scope.inputs, function (input) {
				scope.words.push({ word: input, right: false, wrong: false });
			});

			scope.sanitize = function (item) {
				return $sce.trustAsHtml(item);
			};

			scope.number = 7;
			scope.getNumber = function(num) {
			    return new Array(num);   
			};

			// ordena el array de forma aleatoria usando el algoritmo de Fisher-Yates
			scope.shuffleArray = function(array) {
				for (var i = array.length - 1; i > 0; i--) {
					var j = Math.floor(Math.random() * (i + 1));
					var temp = array[i];
					array[i] = array[j];
					array[j] = temp;
				}
				return array;
			};

			scope.textInput1Title = scope.options.textInput1Title;
			scope.textInput2Title = scope.options.textInput2Title;
			scope.textInput3Title = scope.options.textInput3Title;
			scope.rightAnswers = 0;
			scope.complete = false; // Cuando termina la actividad
			scope.block = false;
			scope.minRightAnswers = scope.options.minRightAnswers
			scope.success = false;
			scope.failure = false;
			scope.inputs =  scope.options.data;
			scope.randomItems = (scope.options.randomItems) ? true : false;
			console.log(scope.randomItems);

			scope.items = [];
			angular.forEach(scope.inputs.inputs1, function (value) {
				scope.items.push({listValue: value.listValue});
			});

			if (scope.inputs.hasOwnProperty("inputs2")) {
				$.merge(scope.items, scope.inputs.inputs2);
			}

			if (scope.inputs.hasOwnProperty("inputs3")) {
				$.merge(scope.items, scope.inputs.inputs3);
			}
			
			if (scope.randomItems) {
				scope.items = scope.shuffleArray(scope.items);
			}

			// watch if the activity is finished
			scope.$watch('complete', function(complete) {
				if (complete) {
					if (scope.rightAnswers >= scope.minRightAnswers) {
						// éxito
						scope.success = true;

						// Activamos la siguiente actividad o ruta
						scope.$root.isNextEnabled = true;
					} else {
						// fracaso
						scope.failure = true;
					}
				} 
			});

			// Si la descripción o el título están, entonces la instrucción va al fondo
			scope.isBottom = scope.title || scope.description;

			var counter = 0
			var chances = scope.options.chancesPerItem-1

			scope.verify = function (item, inputs, num) {
				scope.actualValue = item.input;
				if ((scope.actualValue == null ) || (scope.actualValue === "" )) return;
				scope.exist = false;

				angular.forEach(inputs, function (value, key) {
					if (angular.equals(angular.lowercase(value.listValue), angular.lowercase(scope.actualValue))) {
						scope.exist = true;
					}
				});

				// Verificamos la respuesta. Añadimos una propiedad right o wrong para definir si el item es correcto o no
				if(scope.exist){
					scope.rightAnswers++;
					item.wrong = false;
					item.right = true;
					item.block = true; // marcamos el item como completo, para desactivar el input
					counter++;
				} else {
					
					item.wrong ? chances=scope.options.chancesPerItem-2: chances=scope.options.chancesPerItem-1;

                	item.wrong = true;

                    	if(chances === 0){
                    		angular.forEach(scope.inputs, function (obj, key) {
								angular.forEach(obj, function (o, k) {
									if (o.listValue.toLowerCase() === item.input.toLowerCase()) {
										var n = obj.indexOf(o);
										obj.splice(n, 1);
									}
								});
							});

							for (var i = 0; i < scope.items.length; i++) {
								if (scope.items[i].listValue.toLowerCase() === item.input.toLowerCase()) {
									scope.items[i].listValue = "<span style='color:#F00'>" + item.input +"</span>";
									break;
								}
							}
                    	item.block = true;
                    	counter++;
                    	chances=scope.options.chancesPerItem-1;
                    	}else{chances--;item.input="";}
				}

				if(counter === scope.items.length){
                    	
                    scope.complete = true;
                	
                }
			}
 		}
 	};
 });
/**
 * La actividad permite completar inputs en un table de acuerdo a 
 * el texto que se hubican en la primera columna.
 */
var lizCompleteTableWithText = angular.module('lizCompleteTableWithText', []);

 lizCompleteTableWithText.directive('completeTableWithText', function () {
 	return {
 		restrict: 'E',
 		templateUrl: '../views/activities/complete_table_with_text.html',
 		scope: {
 			options: '=',
 			instruction: '@',
 			title: '@',
 			description: '@',
 			audio: '@'
 		},
 		link: function (scope, iElement, iAttrs) {
 			// Inputs procesados
			scope.words = [];

			// Procesamos cada elemento del array entrante
			angular.forEach(scope.inputs, function (input) {
				scope.words.push({ word: input, right: false, wrong: false });
			});

			scope.getNumber = function(num) {
			    return new Array(num);   
			};

			scope.textMainTitle = scope.options.textMainTitle;
			scope.textInput1Title = scope.options.textInput1Title;
			scope.textInput2Title = scope.options.textInput2Title;
			scope.textInput3Title = scope.options.textInput3Title;
			scope.isPrefix = scope.options.isPrefix || false;
			scope.hasOptions = scope.options.hasOptions || false;
			scope.noTitle = scope.options.noTitle || false;
			scope.rightAnswers = 0;
			scope.complete = false; // Cuando termina la actividad
			scope.block = false;
			scope.success = false;
			scope.failure = false;

			if (scope.hasOptions) {
				scope.opts = scope.options.opts;
			}

			// watch if the activity is finished
			scope.$watch('complete', function(complete) {
				if (complete) {
					if (scope.rightAnswers >= scope.options.minRightAnswers) {
						// éxito
						scope.success = true;

						// Activamos la siguiente actividad o ruta
						scope.$root.isNextEnabled = true;
					} else {
						// fracaso
						scope.failure = true;
					}
				} 
			});

			scope.items = scope.options.data;

			// Si la descripción o el título están, entonces la instrucción va al fondo
			scope.isBottom = scope.title || scope.description;

			var counter = 0
			var chances = scope.options.chancesPerItem-1

			scope.verify = function (item, items, type) {
				if ((item.input == null ) || (item.input == "" )) return;
				scope.exist = false;

				switch (type) {
					case 1:
							if (item.input.toLowerCase() === items[0].option.toLowerCase()) {
								scope.exist = true;
							} else if (chances === 0) {
								item.input = items[0].option;
							}
						break;

					case 2:
							var match = 0;
							var itemArray = item.input.split(", ");
							console.log(itemArray);
							angular.forEach(itemArray, function (i, k) {
								angular.forEach(items, function (value, key) {
									if (angular.equals(angular.lowercase(value.option), angular.lowercase(i))) {
										match++;
									}
								});
							});

							if (items.length === match) {
								scope.exist = true;
							}
						break;

					case 3 :
							angular.forEach(items, function (value, key) {
								if (angular.equals(angular.lowercase(value.option), angular.lowercase(item.input))) {
									scope.exist = true;
								}
							});
						break;
				}
				// Verificamos la respuesta. Añadimos una propiedad right o wrong para definir si el item es correcto o no
				if(scope.exist){
					scope.rightAnswers++;
					item.wrong = false;
					item.right = true;
					item.block = true; // marcamos el item como completo, para desactivar el input
					counter++;
				} else {
					
					item.wrong ? chances=scope.options.chancesPerItem-2: chances=scope.options.chancesPerItem-1;

                	item.wrong = true;
                	

                    	if(chances === 0){
                    	item.block = true;
                    	counter++;
                    	chances=scope.options.chancesPerItem-1;
                    	}else{chances--;item.input="";}
				}

				if(counter === (scope.options.numOptions)){

                    // 08 08 2014 - Maria Giraldo, Se cambia  scope.complete = false; por  scope.complete = true;para activar la actividad completa al ingresar todas las opciones
                    scope.complete = true;
                    //scope.complete = false;
                	
                }
			}
 		}
 	};
 });
/**
 * La actividad permite responder a varias preguntas en cuadros de texto. 
 */

var lizCompleteTextBoxes = angular.module('lizCompleteTextBoxes', []);

lizCompleteTextBoxes.directive('completeTextBoxes', function($sce){
	// Runs during compile
	return {
		// name: '',
		// priority: 1,
		// terminal: true,
		scope: {
			options: '=',
 			instruction: '@',
 			title: '@',
 			description: '@',
 			src: '@',
 			alt: '@',
 			audio: '@'
		}, // {} = isolate, true = child, false/undefined = no change
		// controller: function($scope, $element, $attrs, $transclude) {},
		// require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements
		restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
		// template: '',
		templateUrl: '../views/activities/complete_text_boxes.html',
		// replace: true,
		// transclude: true,
		// compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn){ return function linking(scope, elm, attrs){}})),
		link: function(scope, iElm, iAttrs, controller) {
			
			scope.rightAnswers = 0;
			scope.complete = false; // Cuando termina la actividad
			scope.block = false;
			scope.success = false;
			scope.failure = false;
			scope.minChars = (scope.options.minChars) ? scope.options.minChars : 5;
			scope.hasImage = (scope.options.hasImage) ? true : false;

			scope.items = scope.options.items;

			// watch if the activity is finished
			scope.$watch('complete', function(complete) {
				if (complete) {
					if (scope.rightAnswers >= scope.options.minRightAnswers || scope.rightAnswers >= scope.items.length) {
						// éxito
						scope.success = true;

						// Activamos la siguiente actividad o ruta
						scope.$root.isNextEnabled = true;
					} else {
						// fracaso
						scope.failure = true;
					}
				} 
			});

			// Si la descripción o el título están, entonces la instrucción va al fondo
			scope.isBottom = scope.title || scope.description;

			var counter = 0;
			var chances = scope.options.chancesPerItem-1;

			// Para usar el html en angular
			scope.sanitize = function (item) {
				return $sce.trustAsHtml(item);
			}

			scope.compareArray = function (arrayA, arrayB) {
				if (arrayA.length != arrayB.length) { return false; }
		        // sort modifies original array
		        // (which are passed by reference to our method!)
		        // so clone the arrays before sorting
		        var a = jQuery.extend(true, [], arrayA);
		        var b = jQuery.extend(true, [], arrayB);
		        a.sort(); 
		        b.sort();
		        for (var i = 0, l = a.length; i < l; i++) {
		            if (a[i] !== b[i]) { 
		                return false;
		            }
		        }
		        return true;
			};

			scope.verify = function (item) {
				if ((item.input == null ) || (item.input === "" )) return;

				var done = false;
				
				if (item.hasAnswers) {
					var string = item.input.toLowerCase();
					for (var i = 0; i < item.answers.length; i++) {
						if (string.indexOf(item.answers[i].toLowerCase()) === -1)  {
							done = false;
							break;
						}
						done = true;
					};
				} else {
					var letters = /^[A-Za-záéíóúAÉÍÓÚ\s\,\.\;]+$/;
					done = (item.input.match(letters) && item.input.length >= scope.minChars) ? true : false;
				}


				if (done) {
					scope.rightAnswers++;
					item.wrong = false;
					item.right = true;
					item.block = true; // marcamos el item como completo, para desactivar el input
					counter++;
				} else {
					item.wrong ? chances=scope.options.chancesPerItem-2: chances=scope.options.chancesPerItem-1;

                	item.wrong = true;
                	

                    	if(chances === 0){
                    	item.block = true;
                    	counter++;
                    	chances=scope.options.chancesPerItem-1;
                    	}else{chances--;item.input="";}
				}

				if(counter === scope.items.length){
                    	
                    scope.complete = true;
                	
                }
                
			};
		}
	};
});
var lizCompleteWords = angular.module('lizCompleteWords', []);

lizCompleteWords.directive('completeWords', function () {
  return {
    restrict: 'E',
    templateUrl: '../views/activities/complete_words.html',
    scope: {
      options: '=',
      description: '@',
      audio: '@'
    },
    link: function (scope, element, attrs) {
      var opt = scope.options,
        minRightAnswers = opt.minRightAnswers,
        rightAnswers = 0, // Contador de preguntas buenas
        chances = 0; // el doble, ya que es izquierda y derecha

      // Corremos la aplicación
      scope.items = opt.items;
      scope.itemsPerRow = opt.itemsPerRow;
      scope.pattern = scope.items[0].pattern;
      scope.words = [];
      scope.success = false;
      scope.failure = false;
      scope.block = false;
      scope.samples = opt.samples; // ejemplos para llenar los cuadros

      chances = scope.items[0].pattern.length * 1; // el doble, ya que es izquierda y derecha

      /**
       * Devuelve los estilos del texto.
       */
      scope.getTextStyles = function () {
        var styles = "";

        if(! scope.items[0].resource) {
          styles = "margin-left: 0; width: 100%;";
        }

        return styles;
      };

      /**
       * Para obtener los estilos de los elementos, específicamente el ancho
       */
      scope.getStyles = function () {
        var styles = "";

        if (scope.itemsPerRow) {
          styles += "width: " + (100 / scope.itemsPerRow) + "%;";
          styles += "margin-left: " + (10 / scope.itemsPerRow) + "%;";
          styles += "margin-top: " + (10 / scope.itemsPerRow) + "%;";
          styles += "margin-right: " + (10 / scope.itemsPerRow) + "%!important;";
        } else {
          styles += "width: " + (100 / scope.items.length) + "%;";
          styles += "margin-left: " + (10 / scope.itemsPerRow) + "%;";
          styles += "margin-top: " + (10 / scope.itemsPerRow) + "%;";
        }

        return styles;
      };

      var string = scope.items[0].text;
      var words = string.split(" ");

      // Constructor de palabras
      for (var i = 0; i < words.length; i++) {

        if (scope.pattern.indexOf(i) > -1) {
          scope.words.push({
            isInput: true,
            input: '',
            word: (words[i])
          });
        }  else {
          scope.words.push({
            isInput: false,
            word: (words[i])
          });
        }

      }

      /**
       * Verifica si el input cumple con las condiciones del número
       */
      var chancesPerItem = 1;

      scope.verify = function (item) {
        if (item.input === '') return;

        // Verificamos la respuesta. Añadimos una propiedad right o wrong para definir si el item es correcto o no
        if (item.input === item.word || ((scope.items[0].hasOwnProperty('answer2')) && (item.input === scope.items[0].answer2))) {
          rightAnswers++;
          chances--;
          item.wrong = false;
          item.right = true;
          item.completed = true; // marcamos el item como completo, para desactivar el input
        } else {

          item.wrong ? chancesPerItem = 0 : chancesPerItem = 1;
          item.wrong = true;

          if (chancesPerItem === 0) {
            item.completed = true;
            chances--;
            chancesPerItem = 1;
          } else {
            item.input = "";
          }
        }

        // fin de la actividad
        if (chances === 0) {
          if (rightAnswers >= minRightAnswers) {
            scope.$root.isNextEnabled = true;
            scope.success = true;
          } else {
            scope.failure = true;
          }
        }

      }; // verify()
    }
  };
});


/**
 * La actividad permite completar palabras de uno o varios textos.
 * por medio de selects.
 */

var lizCompleteWordsSelect = /**
 * lizCompleteWordsSelect Module
 */
  angular.module('lizCompleteWordsSelect', []);

lizCompleteWordsSelect.directive('completeWordsSelect', function ($log) {
  // Runs during compile
  return {
    // name: '',
    // priority: 1,
    // terminal: true,
    scope: {
      options: '=',
      instruction: '@',
      title: '@',
      description: '@',
      audio: '@'
    }, // {} = isolate, true = child, false/undefined = no change
    // controller: function($scope, $element, $attrs, $transclude) {},
    // require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements
    restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
    // template: '',
    templateUrl: '../views/activities/complete_words_select.html',
    // replace: true,
    // transclude: true,
    // compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn){ return function linking(scope, elm, attrs){}})),
    link: function (scope, iElm, iAttrs, controller) {
      scope.items = scope.options.items;
      scope.itemsPerRow = scope.options.itemsPerRow;
      var minRightAnswers = scope.options.minRightAnswers,
        chances = scope.options.chancesPerItem - 1;
      scope.inputsCounter = 0;
      scope.rightAnswers = 0;
      scope.complete = false;
      scope.success = false;
      scope.failure = false;
      scope.block = false;

      // watch if the activity is finished
      scope.$watch('complete', function (complete) {
        if (complete) {
          if (scope.rightAnswers >= minRightAnswers) {
            // success
            scope.success = true;

            // Turn on next route
            scope.$root.isNextEnabled = true;
          } else {
            // failure
            scope.failure = true;
          }
        }
      });

      angular.forEach(scope.items, function (item, key) {

        angular.forEach(item.answers, function (value, key) {
          item.text = item.text.replace(value.answer, "inputhere");
        });

        item.words = [];

        var words = item.text.split(" ");

        // Constructor de palabras
        for (var i = 0; i < words.length; i++) {
          if (item.pattern.indexOf(i) > -1) {
            scope.inputsCounter++;
            item.words.push({
              isInput: true,
              input: '',
              word: item.answers[i].answer,
              index: i,
              options: item.answers[i].options
            });
          } else {
            item.words.push({
              isInput: false,
              word: (words[i])
            });
          }
        }
      });

      var counter = 0;
      scope.verify = function (item) {
        $log.log(item);
        if (item.input === '') return;

        // Verificamos la respuesta. Añadimos una propiedad right o wrong para definir si el item es correcto o no
        if (item.input.toLowerCase() === item.word.toLowerCase()) {
          scope.rightAnswers++;
          item.wrong = false;
          item.right = true;
          item.completed = true; // marcamos el item como completo, para desactivar el input
          counter++;
        } else {
          item.wrong ? chances = scope.options.chancesPerItem - 2 : chances = scope.options.chancesPerItem - 1;

          item.wrong = true;

          if (chances === 0) {
            item.completed = true;
            counter++;
            chances = scope.options.chancesPerItem - 1;
            item.input = item.word;
          } else {
            chances--;
            item.input = "";
          }
        }

        if (counter === scope.inputsCounter) {
          scope.complete = true;
        }

      };
    }
  };
});
/**
 * La actividad permite completar palabras de uno o varios textos.
 * por medio de selects.
 */

var lizCompleteWordsSelects = /**
 * lizCompleteWordsSelect Module
 */
  angular.module('lizCompleteWordsSelects', []);

lizCompleteWordsSelects.directive('completeWordsSelects', function ($log) {
  // Runs during compile
  return {
    // name: '',
    // priority: 1,
    // terminal: true,
    scope: {
      options: '=',
      instruction: '@',
      title: '@',
      description: '@',
      audio: '@'
    }, // {} = isolate, true = child, false/undefined = no change
    // controller: function($scope, $element, $attrs, $transclude) {},
    // require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements
    restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
    // template: '',
    templateUrl: '../views/activities/complete_words_selects.html',
    // replace: true,
    // transclude: true,
    // compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn){ return function linking(scope, elm, attrs){}})),
    link: function (scope, iElm, iAttrs, controller) {
      scope.items = scope.options.items;
      scope.itemsPerRow = scope.options.itemsPerRow;
      var minRightAnswers = scope.options.minRightAnswers,
        chances = scope.options.chancesPerItem - 1;
      scope.inputsCounter = 0;
      scope.rightAnswers = 0;
      scope.complete = false;
      scope.success = false;
      scope.failure = false;
      scope.block = false;

      // watch if the activity is finished
      scope.$watch('complete', function (complete) {
        if (complete) {
          if (scope.rightAnswers >= minRightAnswers) {
            // success
            scope.success = true;

            // Turn on next route
            scope.$root.isNextEnabled = true;
          } else {
            // failure
            scope.failure = true;
          }
        }
      });

      angular.forEach(scope.items, function (item, key) {

        angular.forEach(item.answers, function (value, key) {
          item.text = item.text.replace(value.answer, "inputhere");
        });

        item.words = [];

        var words = item.text.split(" ");

        // Constructor de palabras
        for (var i = 0; i < words.length; i++) {
          if (item.pattern.indexOf(i) > -1) {
            scope.inputsCounter++;
            item.words.push({
              isInput: true,
              input: '',
              word: item.answers[i].answer,
              index: i,
              options: item.answers[i].options
            });
          } else {
            item.words.push({
              isInput: false,
              word: (words[i])
            });
          }
        }
      });

      var counter = 0;
      scope.verify = function (item) {
        $log.log(item);
        if (item.input === '') return;

        // Verificamos la respuesta. Añadimos una propiedad right o wrong para definir si el item es correcto o no
        if (item.input.toLowerCase() === item.word.toLowerCase()) {
          scope.rightAnswers++;
          item.wrong = false;
          item.right = true;
          item.completed = true; // marcamos el item como completo, para desactivar el input
          counter++;
        } else {
          item.wrong ? chances = scope.options.chancesPerItem - 2 : chances = scope.options.chancesPerItem - 1;

          item.wrong = true;

          if (chances === 0) {
            item.completed = true;
            counter++;
            chances = scope.options.chancesPerItem - 1;
            item.input = item.word;
          } else {
            chances--;
            item.input = "";
          }
        }

        if (counter === scope.inputsCounter) {
          scope.complete = true;
        }

      };
    }
  };
});
var lizCompleteWordsWi = angular.module('lizCompleteWordsWi', []);

lizCompleteWordsWi.directive('completeWordsWi', function  () {
    return {
        restrict: 'E',
        templateUrl: '../views/activities/complete_words_wi.html',
		scope: {
			options: '=',
			description: '@',
			audio:'@'
		},

		link: function (scope, element, attrs) {
			// Corremos la aplicación
			scope.items = scope.options.items;
			scope.itemsPerRow = scope.options.itemsPerRow;
			scope.pattern = scope.items[0].pattern;
			scope.words = [];
			minRightAnswers = scope.options.minRightAnswers
			rightAnswers = 0, // Contador de preguntas buenas
			chances = scope.items[0].pattern.length * 1, // el doble, ya que es izquierda y derecha
			scope.success = false;
			scope.failure = false;
			scope.block = false;
			/**
			 * Para obtener los estilos de los elementos, específicamente el ancho
			 */
			scope.getStyles = function function_name(argument) {
				var styles = "";

				if(scope.itemsPerRow){
					styles += "width: " + (100 / scope.itemsPerRow) + "%;";
					styles += "margin-left: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-top: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-right: " + (10 / scope.itemsPerRow) + "%!important;";
				} else {
					styles += "width: " + (100 / scope.items.length) + "%;";
					styles += "margin-left: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-top: " + (10 / scope.itemsPerRow) + "%;";
				}
				
				return styles;

				
			};

			var string = scope.items[0].text;
			var words = string.split(" ");
			

				   console.log(words);
				   /*console.log(scope.pattern);*/

		   // Constructor de palabras
			for(var i=0; i < words.length; i++){

				if( scope.pattern.indexOf(i) > -1 ){
					scope.words.push({
							  isInput: true,
						      input: (words[i]).substring(0,1),
						      word: (words[i])
					});

				} 

				else{
					scope.words.push({
							 isInput: false,
						     word: (words[i])
					});
				}

			}

			/**
			 * Verifica si el input cumple con las condiciones del número 
			 */
			 var chancesPerItem = 1

			scope.verify = function (item) {
				if(item.input === '') return; 

				// Verificamos la respuesta. Añadimos una propiedad right o wrong para definir si el item es correcto o no
					if(item.input === item.word){
						rightAnswers++;
						chances--;
						item.wrong = false;
						item.right = true;
						item.completed = true; // marcamos el item como completo, para desactivar el input
					} else {
						
						item.wrong ? chancesPerItem = 0: chancesPerItem = 1;
						item.wrong = true;
						
								if(chancesPerItem === 0){
		                    	item.completed = true;
		                    	chances--;
		                    	chancesPerItem = 1;
		                    	}else{item.input="";}
					}

					
					

					// fin de la actividad
					if(chances === 0){
						if(rightAnswers >= minRightAnswers){
							scope.$root.isNextEnabled = true;
							scope.success = true;
						} else {
							scope.failure = true;
						}
					} 
					
			}; // verify()



		}


    }; 
});


var lizCountElements = angular.module('lizCountElements', []);

// Knockout Pairs Factory
lizCountElements.factory('countElementsActivity', function ($rootScope, shuffleArrayFactory) {

	var countElementsActivity = {};

	/**
	 * Crea el ViewModel
	 */
	countElementsActivity.create = function (options) {
		return new countElementsActivity._ViewModel(options);
	}

	/**
	 * Genera el ViewModel de las parejas con sus funcionalidades
	 *
	 * Recibe un objeto con las siguientes propiedades
	 *
	 * @param {object}		options						Opciones a utilizar.
	 *
	 * @param {integer}		options.chances							Número de posibilidades que tiene el usuario de hacer la actividad
	 * @param {integer}		options.minRightAnswers			Número mínimo de respuestas correctas
	 * @param {function}	options.successCallback			Función que se llama cuando se termina la actividad de forma satisfactoria
	 * @param {function}	options.rightAnswerCallback	Función que se llama cuando la respuesta es correcta
	 *
	 */
	countElementsActivity._ViewModel = function (options) {
		var self = this;

		var minRightAnswers = options.minRightAnswers ? options.minRightAnswers : options.items.length,
			chances = options.chances ? options.chances : options.items.length;

		// antes que nada, generamos el Id para cada uno de los elementos
		options.items.forEach(function(item){
			item._id = (Math.random() + 1).toString(36).substring(7);
		});

		self.targets = ko.observableArray(options.items.slice(0)); // Clonamos el array
		self.numbers = ko.observableArray(shuffleArrayFactory.run(options.items)); // Elementos desordenados

		self.targets().forEach(function(target){
			// Debemos agregar una propiedad a cada target para manejar el sortable
			target._sortable = ko.observableArray();
			target._sortable._id = target._id; // Para compararlo usando knockoutSortable

			// Fuera de eso, agregaremos un array con un tamaño igual a número, para así multiplicar las imágenes
			target._multiplier = [];

			for(var i = 0; i < target.number; i++){
				target._multiplier.push(i + 1);
			}

		});

		// Carpeta de recursos desde angular
		self.resources = $rootScope.resources;

		self.maximumElements = 1; // IMPORTANTE: Requerido para que los sortables no acepten más de un elemento
		self.rightAnswers = 0; // Inicializamos el número de respuestas buenas a 0

		// Triggers que se activan cuando la respuesta es correcta/incorrecta
		self.rightAnswer = ko.observable();
		self.wrongAnswer = ko.observable();

		// Triggers cuando la actividad termina satisfactoria y/o insatisfactoriamente
		self.failure = ko.observable(false);
		self.success = ko.observable(false);

		// Define si el target esta lleno utilizando self.maximumElements
		self.isContainerFull = function (parent) {
			return parent().length < self.maximumElements;
		};

		// Función que se ejecuta cuando se suelta el elemento y hace toda la funcionalidad
		self.verifyAnswer = function (arg) {
			var item = arg.item,
				parent = arg.targetParent;

			if(arg.sourceParent === parent) return;

			if(item._id === parent._id){
				// Respuesta Correcta
				self.rightAnswer(item);
				self.rightAnswers++;
			} else {
				// Respuesta Incorrecta
				self.wrongAnswer(item);
				arg.cancelDrop = true;
			}

			chances--;

			if(chances === 0){
				if (self.rightAnswers >= minRightAnswers) {

					self.success(true); // Trigger de éxito
					$rootScope.isNextEnabled = true; // Activamos el siguiente

					// Se llama la función de éxito, definida por el desarrollador
					if (typeof options.successCallback !== "undefined") options.successCallback();

				} else {
					// Trigger de fracaso
					self.failure(true);
				}
				
			} 
		};

	};

	/**
	 * Inicializa la instancia del ViewModel creado con countElementsActivity.create
	 *
	 * @param {object} instance Intancia del VM de knockout
	 */
	countElementsActivity.run = function (instance) {
		ko.cleanNode($('#main-container')[0]);
		ko.bindingHandlers.sortable.beforeMove = instance.verifyAnswer;
		ko.applyBindings(instance, $('#main-container')[0]);
	};

	return countElementsActivity;

});


lizCountElements.directive('countElements', function  (countElementsActivity) {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			description: '@'
		},
		templateUrl: '../views/activities/count_elements.html',
		link: function postLink(scope, element, attrs) {
			// Corremos la aplicación
			countElementsActivity.run(countElementsActivity.create(scope.options));
		}
	}; 
});

var lizCountElements2 = angular.module('lizCountElements2', ['factories']);

lizCountElements2.directive('countElements2', function  (shuffleArrayFactory) {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			hideImages: '@',
			description: '@'
		},
		templateUrl: '../views/activities/count_elements2.html',
		link: function postLink(scope, element, attrs) {

			var opt = scope.options;

			// La diversión empieza aquí!!!
			scope.items = opt.items;
			scope.rightAnswers = 0; // Contador de preguntas correctas

			/**
			 * Función que corre que cuando cambia el valor de un input
			 */
			scope.verifyInput = function (item) {

				// Si no es un número, borramos el input
				if(isNaN(parseInt(item.input))){
					item.input = '';
				}

				// Recorremos todos los elementos. Si se han llenado los inputs mínimos requeridos, activamos el botón de siguiente
				var count = 0;

				count = scope.items.filter(function(item){
					return item.hasOwnProperty('input') && item.input !== '';
				}).length;

				if(count >= opt.minRightAnswers){
					scope.$root.isNextEnabled = true;
				} else {
					scope.$root.isNextEnabled = false;
				}


			}

			scope.$root.beforeGoNext = function () {
				scope.success = true; // Mostramos la vista de felicitación
				return true; // nos permite pasar a la siguiente actividad
			};

		}
	}; 
});


var lizCrossword = angular.module('lizCrossword', []);

lizCrossword.directive('crossword', function () {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			audio:'@',
			description: '@'
		},
		templateUrl: '../views/activities/crossword.html',
		link: function (scope, element, attrs) {
			var opt = scope.options; // Alias de opciones

			// Número de columnas y filas en la tabla
			var cols = 0,
				rows = 0,
				start = 0, // punto inicial usado en words.foreach
				end = 0, // punto final usado en words.foreach
				filtered = null; // Filtrado de palabras

			scope.table = []; // Tabla de trabajo
			scope.words = opt.words; // Tomamos las palabras desde el controlador
			scope.selectedWord = false; // palabra seleccionada actualmente
			scope.selectedCell = false; // palabra seleccionada actualmente
			scope.prevParent = false; // padre anterior. Usado para las palabras cruzadas en el salto de celda

			// calificaciones
			scope.success = false;
			scope.failure = false;

			// ===================================================
			// CONSTRUCCIÓN DE PALABRAS
			// ===================================================
			// Recorremos las palabras para obtener la configuración.
			// Inicialmente, se busca el tamaño del crucigrama
			scope.words.forEach(function (word) {

				// Convertimos las palabras a mayúsculas
				word.word = word.word.toUpperCase();

				// columnas
				if(word.pos[0][0] > cols) cols = word.pos[0][0];
				if(word.pos[1][0] > cols) cols = word.pos[1][0];

				// filas
				if(word.pos[0][1] > rows) rows = word.pos[0][1];
				if(word.pos[1][1] > rows) rows = word.pos[1][1];

				// Creamos el objeto de palabra
				if(word.pos[0][1] === word.pos[1][1]){
					// horizontal
					word.horizontal = true;
					word._word = [];

					// si x en cada posición es igual, es horizontal
					for(var i = word.pos[0][0]; i <= word.pos[1][0]; i++){
						var item = {
							x: i,
							y: word.pos[0][1],
							$parent: word,
							letter: word.word[i - word.pos[0][0]] // añade la letra de la palabra
						};

						// si es la letra inicial, añadimos el número
						if(i === word.pos[0][0]) item.number = word.number;
						word._word.push(item);
					}

				} else if(word.pos[0][0] === word.pos[1][0]){
					// vertical
					word.vertical = true;
					word._word = [];

					// antes que nada, debemos ver desde donde empieza la palabra
					if(word.pos[0][1] < word.pos[1][1]) {
						// de arriba a abajo
						// si y en cada posición es igual, entonces es vertical
						for(var i = word.pos[0][1]; i <= word.pos[1][1]; i++){
							var item = {
								x: word.pos[0][0],
								y: i,
								$parent: word,
								letter: word.word[i - word.pos[0][1]]
							};

							// si es la letra inicial, añadimos el número
							if(i === word.pos[0][1]) item.number = word.number;
							word._word.push(item);
						}
					} else if(word.pos[0][1] > word.pos[1][1]) {
						// De abajo a arriba
						// Reversa la palabra
						word.word = word.word.split("").reverse().join("");
						word.reverse = true; // propiedad para definir que la palabra vertical viene invertida

						for(var i = word.pos[1][1]; i <= word.pos[0][1]; i++){
							var item = {
								x: word.pos[0][0],
								y: i,
								$parent: word,
								letter: word.word[i - word.pos[1][1]]
							};

							// si es la letra inicial, añadimos el número
							if(i === word.pos[0][1]) item.number = word.number;
							word._word.push(item);
						}
					}
				}
			});


			// ===================================================
			// CONSTRUCCIÓN DE TABLA
			// ===================================================
			var temp = null, // Variable temporal
				number = null;

			for(var y = 0; y <= rows; y++){
				// Añadimos una nueva fila
				scope.table.push([]);

				// para cada celda
				for(var x = 0; x <= cols; x++){
					// Buscamos la palabra que coincide con (x,y)
					filtered = scope.words.filter(function (w) {
						return ((w.pos[0][0] <= x && w.pos[1][0] >= x)
							&& (w.pos[0][1] <= y && w.pos[1][1] >= y)) ||
								((w.pos[1][0] <= x && w.pos[0][0] >= x)
							&& (w.pos[1][1] <= y && w.pos[0][1] >= y));
					});

					// Agrega el nuevo objeto en la tabla
					if(filtered.length > 0){
						// Recuperamos la celda idéntica desde las palabras
						temp = filtered[0]._word.filter(function (w) { 
							return w.x === x && w.y === y;
						})[0];

						// Añadimos el modelo a vincular con cada uno de los inputs
						temp.$parent._word.forEach(function (letter) { letter.input = ''; });

						// Para las celdas que se cruzan, debemos hacer una funcionalidad especial
						if(filtered.length > 1){
							temp.cross = true;
						}

					} else {
						// Si no, es un cuadro vacío
						temp = {
							x: x,
							y: y,
							empty: true
						};
					}

					// Añade el objeto
					scope.table[y].push(temp);
				}
			}


			// Añadimos los números a las palabras que empiezan dentro de otra palabra
			var iX = 0,
				iY = 0;

			scope.words.forEach(function(word){
				iX = word.pos[0][0];
				iY = word.pos[0][1];

				// si no tiene número, se agrega
				if(! scope.table[iY][iX].hasOwnProperty('number')) {
					scope.table[iY][iX].number = word.number;
				}
			});


			/**
			 * Selecciona la palabra y la celda, para que el estudiante pueda empezar a
			 * escribir la palabra
			 *
			 * @param {Object} item celda seleccionada en el crucigrama
			 */
			scope.selectWord = function (item) {
				// si no es parte de una palabra, cancelamos inmediatamente
				if(item.empty) return;

				// si existe una palabra seleccionada previamente, limpiamos activated
				if(scope.selectedWord){
					scope.selectedWord._word.forEach(function (letter) {
						delete scope.table[letter.y][letter.x].actived;
					});
				} 

				// se limpia la celda
				if(scope.selectedCell){
					delete scope.selectedCell.mainCell;
				}

				// Actualizamos la palabra y la celda seleccionada
				scope.prevParent = scope.selectedCell.$parent;
				scope.selectedWord = item.$parent;
				scope.selectedCell = item;

				// Buscamos la celda, para enfocarse en el input
				element.find('.c' + item.x + '.r' + item.y + ' input').focus();

				// Marcamos la palabra y la celda para que se vean activas
				scope.selectedCell.mainCell = true;
				item.$parent._word.forEach(function (letter) { scope.table[letter.y][letter.x].actived = true; });
			}; // selectWord()


			/**
			 * Función que se dispara al escribir en los inputs. Permite el cambio de celda
			 * al escribir
			 */
			scope.changeCell = function () {
				// Se debe haber seleccionado una celda
				if(!scope.selectedCell) return;

				var cell = scope.selectedCell, // alias
					next = false, // siguiente celda
					parent = cell.$parent;

				// si el input no tiene nada, volvemos.
				if(cell.input === '') return; 

				// Cambia a mayúsculas
				cell.input = cell.input.toUpperCase();

				// solo letras. No espacios
				if(! cell.input.match("^[A-ZÑ]+$")){
					cell.input = cell.input.slice(0, -1);
					return;
				}

				// si tiene más de una letra, se borra todo y se deja siempre la última letra
				if(cell.input.length > 1){ cell.input = cell.input[ cell.input.length - 1 ]; }

				// Celdas cruzadas
				if(cell.cross){
					// Si la celda es cruzada y el padre es igual al padre anterior, es necesario
					// buscar al otro padre y actualizar la misma celda
					if(parent === scope.prevParent){
						var cells = null,
							otherCell = null;

						// El otro padre. Usando filtros anidados
						var otherParent = scope.words.filter(function(word){
							cells = word._word.filter(function(letter){
								return letter.x === cell.x && letter.y === cell.y;
							});

							return cells.length && word !== parent;
						})[0];

						// Buscamos la celda y la actualizamos
						otherCell = otherParent._word.filter(function (letter) {
							return letter.x === cell.x && letter.y === cell.y;
						})[0];

						otherCell.input = cell.input;
					} else {
						parent = scope.prevParent;
					}

					// debemos buscar la otra celda cruzada y actualizar su input
					var crossCell = parent._word.filter(function (letter) {
						return letter.x === cell.x && letter.y === cell.y;
					})[0];

					// Actualizamos el input
					if(crossCell) crossCell.input = cell.input;
				}

				// ===================================================
				// Próxima celda en base a la actual
				// ===================================================
				// Miramos cual será la siguiente celda
				if(parent.horizontal){
					next = scope.table[cell.y][cell.x + 1];
				}

				if(parent.vertical){
					// de arriba a abajo
					if(parent.pos[0][1] < parent.pos[1][1]) next = scope.table[cell.y + 1] ? scope.table[cell.y + 1][cell.x] : false;
					// de abajo a arriba
					if(parent.pos[0][1] > parent.pos[1][1]) next = scope.table[cell.y - 1] ? scope.table[cell.y - 1][cell.x] : false;
				}

				// Si la próxima celda no esta vacía
				if(!next || next.hasOwnProperty('empty')){
					// si es vertical de arriba a abajo
					if(parent.vertical && parent.pos[0][1] > parent.pos[1][1]){
						// último elemento, ya que va al revés
						next = scope.table[ parent._word[parent._word.length - 1].y ][ parent._word[parent._word.length - 1].x ];
					} else {
						next = scope.table[ parent._word[0].y ][ parent._word[0].x ];
					}
				}
					
				// Cambia de celda a la siguiente
				scope.selectWord(next);
			}; // changeCell()


			/**
			 * Verifica si el crucigrama es correcto o no
			 */
			scope.verify = function () {
				// Contadores 
				var total = 0,
					rightAnswers = 0;

				// Empezamos a recorrer todas las palabras y sumando
				scope.words.forEach(function(word){
					// Total de letras
					total += word._word.length; 

					// Contamos las letras correctas
					rightAnswers += word._word.filter(function(letter){
						return letter.input === letter.letter;
					}).length;
				});

				if (total === rightAnswers) {
				  scope.success = true;
				  scope.$root.isNextEnabled = true;
				}
				else {
				  scope.failure = true;
				}
				
			}

			// ============================================================================
			// IMPORTANTE!!!! IMPIDE EL USO DE LA BARRA ESPACIADORA EN EL CRUCIGRAMA
			// ============================================================================
			element.bind("keyup keypress keydown", function (e) {
				if(e.keyCode === 32){
					e.preventDefault();
				}
			});



		}
	}; 
});

var lizCrosswordWithLetter = angular.module('lizCrosswordWithLetter', []);

lizCrosswordWithLetter.directive('crosswordWithLetter', function () {
    return {
        restrict: 'E',
        scope: {
            options: '=',
            audio:'@',
            description: '@'
        },
        templateUrl: '../views/activities/crossword_with_letter.html',
        link: function (scope, element, attrs) {
            var opt = scope.options; // Alias de opciones

            // Número de columnas y filas en la tabla
            var cols = 0,
                rows = 0,
                start = 0, // punto inicial usado en words.foreach
                end = 0, // punto final usado en words.foreach
                filtered = null; // Filtrado de palabras

            scope.table = []; // Tabla de trabajo
            scope.words = opt.words; // Tomamos las palabras desde el controlador
            scope.selectedWord = false; // palabra seleccionada actualmente
            scope.selectedCell = false; // palabra seleccionada actualmente
            scope.prevParent = false; // padre anterior. Usado para las palabras cruzadas en el salto de celda

            // calificaciones
            scope.success = false;
            scope.failure = false;

            // ===================================================
            // CONSTRUCCIÓN DE PALABRAS
            // ===================================================
            // Recorremos las palabras para obtener la configuración.
            // Inicialmente, se busca el tamaño del crucigrama
            scope.words.forEach(function (word) {
                // Convertimos las palabras a mayúsculas
                word.word = word.word.toUpperCase();

                // columnas
                if(word.pos[0][0] > cols) cols = word.pos[0][0];
                if(word.pos[1][0] > cols) cols = word.pos[1][0];

                // filas
                if(word.pos[0][1] > rows) rows = word.pos[0][1];
                if(word.pos[1][1] > rows) rows = word.pos[1][1];

                // Creamos el objeto de palabra
                if(word.pos[0][1] === word.pos[1][1]){
                    // horizontal
                    word.horizontal = true;
                    word._word = []

                    // si x en cada posición es igual, es horizontal
                    for(var i = word.pos[0][0]; i <= word.pos[1][0]; i++){
                        var item = {
                            x: i,
                            y: word.pos[0][1],
                            $parent: word,
                            letter: word.word[i - word.pos[0][0]], // añade la letra de la palabra
                            init_letter: word.init_letter[i - word.pos[0][0]] // añade la letra de la palabra
                        };

                        // si es la letra inicial, añadimos el número
                        if(i === word.pos[0][0]) item.number = word.number;
                        word._word.push(item);
                    }

                } else if(word.pos[0][0] === word.pos[1][0]){
                    // vertical
                    word.vertical = true;
                    word._word = [];

                    // antes que nada, debemos ver desde donde empieza la palabra
                    if(word.pos[0][1] < word.pos[1][1]) {
                        // de arriba a abajo
                        // si y en cada posición es igual, entonces es vertical
                        for(var i = word.pos[0][1]; i <= word.pos[1][1]; i++){
                            var item = {
                                x: word.pos[0][0],
                                y: i,
                                $parent: word,
                                letter: word.word[i - word.pos[0][1]],
                                init_letter:  word.init_letter[i - word.pos[0][1]]
                            };

                            // si es la letra inicial, añadimos el número
                            if(i === word.pos[0][1]) item.number = word.number;
                            word._word.push(item);
                        }
                    } else if(word.pos[0][1] > word.pos[1][1]) {
                        // De abajo a arriba
                        // Reversa la palabra
                        word.word = word.word.split("").reverse().join("");
                        word.reverse = true; // propiedad para definir que la palabra vertical viene invertida

                        for(var i = word.pos[1][1]; i <= word.pos[0][1]; i++){
                            var item = {
                                x: word.pos[0][0],
                                y: i,
                                $parent: word,
                                letter: word.word[i - word.pos[1][1]],
                                init_letter: word.init_letter[i - word.pos[1][1]]
                            };

                            // si es la letra inicial, añadimos el número
                            if(i === word.pos[0][1]) item.number = word.number;
                            word._word.push(item);
                        }
                    }
                }
            });


            // ===================================================
            // CONSTRUCCIÓN DE TABLA
            // ===================================================
            var temp = null, // Variable temporal
                number = null;

            for(var y = 0; y <= rows; y++){
                // Añadimos una nueva fila
                scope.table.push([]);

                // para cada celda
                for(var x = 0; x <= cols; x++){
                    // Buscamos la palabra que coincide con (x,y)
                    filtered = scope.words.filter(function (w) {
                        return ((w.pos[0][0] <= x && w.pos[1][0] >= x)
                        && (w.pos[0][1] <= y && w.pos[1][1] >= y)) ||
                        ((w.pos[1][0] <= x && w.pos[0][0] >= x)
                        && (w.pos[1][1] <= y && w.pos[0][1] >= y));
                    });

                    // Agrega el nuevo objeto en la tabla
                    if(filtered.length > 0){
                        // Recuperamos la celda idéntica desde las palabras
                        temp = filtered[0]._word.filter(function (w) {
                            return w.x === x && w.y === y;
                        })[0];

                        // Añadimos el modelo a vincular con cada uno de los inputs
                        temp.$parent._word.forEach(function (letter) { letter.input = ''; });

                        // Para las celdas que se cruzan, debemos hacer una funcionalidad especial
                        if(filtered.length > 1){
                            temp.cross = true;
                        }

                    } else {
                        // Si no, es un cuadro vacío
                        temp = {
                            x: x,
                            y: y,
                            empty: true
                        };
                    }

                    // Añade el objeto
                    scope.table[y].push(temp);
                }
            }


            // Añadimos los números a las palabras que empiezan dentro de otra palabra
            var iX = 0,
                iY = 0;

            scope.words.forEach(function(word){
                iX = word.pos[0][0];
                iY = word.pos[0][1];

                // si no tiene número, se agrega
                if(! scope.table[iY][iX].hasOwnProperty('number')) {
                    scope.table[iY][iX].number = word.number;
                }
            });


            /**
             * Selecciona la palabra y la celda, para que el estudiante pueda empezar a
             * escribir la palabra
             *
             * @param {Object} item celda seleccionada en el crucigrama
             */
            scope.selectWord = function (item) {
                // si no es parte de una palabra, cancelamos inmediatamente
                if(item.empty) return;

                // si existe una palabra seleccionada previamente, limpiamos activated
                if(scope.selectedWord){
                    scope.selectedWord._word.forEach(function (letter) {
                        delete scope.table[letter.y][letter.x].actived;
                    });
                }

                // se limpia la celda
                if(scope.selectedCell){
                    delete scope.selectedCell.mainCell;
                }

                // Actualizamos la palabra y la celda seleccionada
                scope.prevParent = scope.selectedCell.$parent;
                scope.selectedWord = item.$parent;
                scope.selectedCell = item;

                // Buscamos la celda, para enfocarse en el input
                element.find('.c' + item.x + '.r' + item.y + ' input').focus();

                // Marcamos la palabra y la celda para que se vean activas
                scope.selectedCell.mainCell = true;
                item.$parent._word.forEach(function (letter) { scope.table[letter.y][letter.x].actived = true; });
            }; // selectWord()


            /**
             * Función que se dispara al escribir en los inputs. Permite el cambio de celda
             * al escribir
             */
            scope.changeCell = function () {
                // Se debe haber seleccionado una celda
                if(!scope.selectedCell) return;

                //08 08 2014 Maria Giraldo -Validar que escriba una sola letra

                var cell = scope.selectedCell, // alias
                    next = false, // siguiente celda
                    parent = cell.$parent;

                /*


                 // si el input no tiene nada, volvemos.
                 if(cell.input === '') return;
                 // solo letras. No espacios
                 if(! cell.input.match("^[A-ZÑ]+$ ")){
                 cell.input = cell.input.slice(0, -1);
                 return;
                 }
                */


                // Cambia a mayúsculas
                cell.input = cell.input.toUpperCase();
               
                // si tiene más de una letra, se borra todo y se deja siempre la última letra
                if(cell.input.length > 1){
                    cell.input = cell.input[ cell.input.length - 1 ];
                }


                // Celdas cruzadas
                if(cell.cross){
                    // Si la celda es cruzada y el padre es igual al padre anterior, es necesario
                    // buscar al otro padre y actualizar la misma celda
                    if(parent === scope.prevParent){
                        var cells = null,
                            otherCell = null;

                        // El otro padre. Usando filtros anidados
                        var otherParent = scope.words.filter(function(word){
                            cells = word._word.filter(function(letter){
                                return letter.x === cell.x && letter.y === cell.y;
                            });

                            return cells.length && word !== parent;
                        })[0];

                        // Buscamos la celda y la actualizamos
                        otherCell = otherParent._word.filter(function (letter) {
                            return letter.x === cell.x && letter.y === cell.y;
                        })[0];

                        otherCell.input = cell.input;
                    } else {
                        parent = scope.prevParent;
                    }

                    // debemos buscar la otra celda cruzada y actualizar su input
                    var crossCell = parent._word.filter(function (letter) {
                        return letter.x === cell.x && letter.y === cell.y;
                    })[0];

                    // Actualizamos el input
                    if(crossCell) crossCell.input = cell.input;
                }

                // ===================================================
                // Próxima celda en base a la actual
                // ===================================================
                // Miramos cual será la siguiente celda
                if(parent.horizontal){
                    next = scope.table[cell.y][cell.x + 1];
                }

                if(parent.vertical){
                    // de arriba a abajo
                    if(parent.pos[0][1] < parent.pos[1][1]) next = scope.table[cell.y + 1] ? scope.table[cell.y + 1][cell.x] : false;
                    // de abajo a arriba
                    if(parent.pos[0][1] > parent.pos[1][1]) next = scope.table[cell.y - 1] ? scope.table[cell.y - 1][cell.x] : false;
                }

                // Si la próxima celda no esta vacía
                if(!next || next.hasOwnProperty('empty')){
                    // si es vertical de arriba a abajo
                    if(parent.vertical && parent.pos[0][1] > parent.pos[1][1]){
                        // último elemento, ya que va al revés
                        next = scope.table[ parent._word[parent._word.length - 1].y ][ parent._word[parent._word.length - 1].x ];
                    } else {
                        next = scope.table[ parent._word[0].y ][ parent._word[0].x ];
                    }
                }
                scope.selectWord(next);
            }; // changeCell()


            /**
             * Verifica si el crucigrama es correcto o no
             */
            scope.verify = function () {
                // Contadores
                var total = 0,
                    rightAnswers = 0;

                // Empezamos a recorrer todas las palabras y sumando
                scope.words.forEach(function(word){
                    // Total de letras
                    total += word._word.length;

                    // Contamos las letras correctas
                    rightAnswers += word._word.filter(function(letter){

                        //08 08 2014 -  Maria Giraldo, se añade validación de letras estáticas
                        if (letter.init_letter != '' && letter.init_letter === letter.letter){
                            return letter.letter === letter.init_letter;
                        }

                       // return letter.input === letter.init_letter;
                        return letter.input === letter.letter;
                    }).length;

                });

                // se resta 1 porque se desborda
                total = total - 1;

                if (total === rightAnswers) {
                    scope.success = true;
                    scope.$root.isNextEnabled = true;
                }
                else {
                    scope.failure = true;
                }
            }


            scope.onClick = function() {
                console.log("click");
                var cell = scope.selectedCell, // alias
                    next = false, // siguiente celda
                    parent = cell.$parent;

                /*
                 // si el input no tiene nada, volvemos.
                 if(cell.input === '') return;
                 // solo letras. No espacios
                 if(! cell.input.match("^[A-ZÑ]+$ ")){
                 cell.input = cell.input.slice(0, -1);
                 return;
                 }
                 */

                // Cambia a mayúsculas
                cell.input = cell.input.toUpperCase();

                console.log("aca ");
                console.log(cell);



            }

            // ============================================================================
            // IMPORTANTE!!!! IMPIDE EL USO DE LA BARRA ESPACIADORA EN EL CRUCIGRAMA
            // ============================================================================
            element.bind("keyup keypress keydown", function (e) {
                if(e.keyCode === 32){
                    e.preventDefault();
                }
            });



        }
    };
});

var lizDifferences = angular.module('lizDifferences', []);

lizDifferences.directive('differences', function  () {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			audio: '@',
			description: '@'
		},
		templateUrl: '../views/activities/differences.html',
		link: function postLink(scope, element, attrs) {

			var opt = scope.options,
				pass = false; // Used to evaluate if the inputs are right

			scope.images = opt.images;
			scope.inputs = [];
			scope.passes = false; // Define si la actividad cumple o no

			// Activa el botón de siguiente desde el inicio
			scope.$root.isNextEnabled = true;

			// Constructor de inputs
			for (var i=0; i < opt.inputs; i++) {
				scope.inputs.push({
					input: ''
				});
			}

			scope.$root.beforeGoNext = function () {
				if(pass){
					scope.success = true;
					return true;
				} else {
					scope.failure = true;
					return false;
				}
			}

			/**
			 * Verifica el fin de la actividad
			 */
			scope.verify = function () {
				// Contamos los elementos que cumplen las condiciones
				var matches = scope.inputs.filter(function(item){
					return item.input.toLowerCase().match(/([bcdfghjklmnñpqrstvwxyz])/) &&
						item.input.toLowerCase().match(/([aeiou])/);
				}).length;

				// Comparamos el número con el total de elementos
				if(matches === scope.inputs.length){
					pass = true;
				} else {
					pass = false;
				}
			}


			
		}
	}; 
});

var lizDragDropMark = angular.module('lizDragDropMark', []);

// Knockout Pairs Factory
lizDragDropMark.factory('dragDropMarkActivity', function ($rootScope) {

	var dragDropMarkActivity = {};

	/**
	 * Crea el ViewModel
	 */
	dragDropMarkActivity.create = function (options) {
		return new dragDropMarkActivity._ViewModel(options);
	}

	/**
	 * Genera el ViewModel de las parejas con sus funcionalidades
	 *
	 * Recibe un objeto con las siguientes propiedades
	 *
	 * @param {object}		options						Opciones a utilizar.
	 * @param {Array}		options.items				Elementos donde se suelta la marca. Deben tener la propiedad bool "answer"
	 * @param {integer}		options.chances				Número de posibilidades que tiene el usuario de hacer la actividad
	 * @param {integer}		options.minRightAnswers		Número mínimo de respuestas correctas
	 * @param {function}	options.successCallback		Función que se llama cuando se termina la actividad de forma satisfactoria
	 * @param {function}	options.rightAnswerCallback	Función que se llama cuando la respuesta es correcta
	 *
	 */
	dragDropMarkActivity._ViewModel = function (options) {
		var self = this,
				rightAnswers = 0,
				chances = typeof options.chances !== "undefined" ? options.chances : options.items.length,
				minRightAnswers = options.minRightAnswers,
				maximumElements = 1;

		// ordena el array de forma aleatoria usando el algoritmo de Fisher-Yates
		self.shuffleArray = function(array) {
			for (var i = array.length - 1; i > 0; i--) {
				var j = Math.floor(Math.random() * (i + 1));
				var temp = array[i];
				array[i] = array[j];
				array[j] = temp;
			}
			return array;
		};

		var number = 1
		self.items = ko.observableArray(options.items);

		// Añadimos a cada item un observableArray para que puedan recibir las marcas
		ko.utils.arrayForEach(self.items(), function(item,index){
			item._target = ko.observableArray();
			item._target._id = item.answer; // para poder identificar si esta bueno o malo

			// Propiedades por defecto
			item.resource = item.hasOwnProperty('resource') ? item.resource : false;
			item.alt = item.hasOwnProperty('alt') ? item.alt : '';
			item.text = item.hasOwnProperty('text') ? item.text : false;
			item.question = item.hasOwnProperty('question') ? item.question : false;
			item.number = item.hasOwnProperty('question') ? number : false;
			number ++
			console.log(item.number);
		});

		// Carpeta de recursos desde angular
		self.resources = $rootScope.resources;

		// audio
		self.audio = ko.observable(options.audio);

		// Triggers que se activan cuando la respuesta es correcta/incorrecta
		self.rightAnswer = ko.observable();
		self.wrongAnswer = ko.observable();

		// Triggers cuando la actividad termina satisfactoria y/o insatisfactoriamente
		self.failure = ko.observable(false);
		self.success = ko.observable(false);

		// Marcas
		self.rightMark = ko.observable({ right: true });
		self.wrongMark = ko.observable({ right: false });


		/**
		 * Reproduce el audio de la instrucción.
		 */
		self.playAudio = function () {
			$('#audio-instruction')[0].play();
		};


		/**
		 * Define si el target esta lleno utilizando self.maximumElements
		 */
		self.isContainerFull = function (parent) {
			return parent().length < maximumElements;
		};


		/**
		 * Función que se ejecuta al soltar los elementos
		 */
		self.verifyAnswer = function (arg) {
			var item = arg.item,
			target = arg.targetParent;

			if(target._id === item.right){
				// respuesta correcta
				self.rightAnswer(item);
				rightAnswers++;

				if(typeof options.rightAnswerCallback !== "undefined") options.rightAnswerCallback(item);
			} else {
				// respuesta incorrecta
				self.wrongAnswer(item);
			}

			chances--;

			// Final de la actividad
			if(chances === 0){
				if(rightAnswers >= minRightAnswers){
					// éxito
					self.success(true);

					$rootScope.isNextEnabled = true; // Activamos la siguiente ruta en angular

					if(typeof options.successCallback !== "undefined") options.successCallback();

				} else {
					// Fracaso
					self.failure(true);
				}
			}
		}
	};

	/**
	 * Inicializa la instancia del ViewModel creado con dragDropMarkActivity.create
	 *
	 * @param {object} instance Intancia del VM de knockout
	 */
	dragDropMarkActivity.run = function (instance) {
		ko.cleanNode($('#main-container')[0]);
		ko.bindingHandlers.sortable.beforeMove = instance.verifyAnswer;
		ko.applyBindings(instance, $('#main-container')[0]);
	};

	return dragDropMarkActivity;

});


lizDragDropMark.directive('dragDropMark', function  (dragDropMarkActivity) {
	return {
		restrict: 'E',
		transclude: true,
		scope: {
			options: '=',
			audio: '@',
			customClass: '@',
			description: '@'
		},
		templateUrl: '../views/activities/drag_drop_mark.html',
		link: function postLink(scope, element, attrs) {
			// Añadimos el audio a options
			scope.options.audio = typeof scope.audio !== "undefined" ? scope.audio : false;


			// Corremos la aplicación
			dragDropMarkActivity.run(dragDropMarkActivity.create(scope.options));
		}
	}; 
});

/**
 * Actividad donde los elementos pueden ser arrastrados en múltiples grupos
 */
var lizDragDropMultiples = angular.module('lizDragDropMultiples', []);

lizDragDropMultiples.factory('dragDropMultiplesActivity', function ($rootScope) {

  var dragDropMultiplesActivity = {};

  /**
   * Crea el ViewModel
   */
  dragDropMultiplesActivity.create = function (options) {
    return new dragDropMultiplesActivity._ViewModel(options);
  }

  /**
   * Genera el ViewModel de las parejas con sus funcionalidades
   *
   * Recibe un objeto con las siguientes propiedades
   *
   * @param {object}    options            Opciones a utilizar.
   * @param {Array}    options.groups        Grupos definidos. Cada grupo es un objeto que posee las siguientes propiedades
   *
   *  title: Título del bloque donde se sueltan los objetos
   *  items: elementos pertenecientes al grupo
   *
   * @param {integer}    options.chances        Número de posibilidades que tiene el usuario de hacer la actividad
   * @param {integer}    options.minRightAnswers    Número mínimo de respuestas correctas
   * @param {function}  options.successCallback    Función que se llama cuando se termina la actividad de forma satisfactoria
   * @param {function}  options.rightAnswerCallback  Función que se llama cuando la respuesta es correcta
   *
   */
  dragDropMultiplesActivity._ViewModel = function (options) {
    var self = this;

    var Group = function (options) {
      this._id = options._id;
      this.title = options.title;
      this.resource = options.resource ? options.resource : false;
      this.alt = options.alt ? options.alt : false;
      this.items = ko.observableArray();
      this.items._id = this._id;
    }

    var chances = options.chances,
      rightAnswers = 0,
      minRightAnswers = options.minRightAnswers;
      noSuffleArray = options.noSuffleArray;//esta opcion desactiva el orden aleatorio de los items ::: ejemplo esp304 act 5 :::
      self.itemsStyle = options.itemsStyle ? options.itemsStyle : '';

    // ordena el array de forma aleatoria usando el algoritmo de Fisher-Yates
    self.shuffleArray = function (array) {

      if(!noSuffleArray){//es importante para q las palabras queden el el orden deseado 
        for (var i = array.length - 1; i > 0; i--) {
          var j = Math.floor(Math.random() * (i + 1));
          var temp = array[i];
          array[i] = array[j];
          array[j] = temp;
        }
      }
      return array;
    };

    // Conjunto total de elementos
    self.items = ko.observableArray();
    self.groups = ko.observableArray(); 

    self.resources = $rootScope.resources;

    // audio
    self.audio = ko.observable(options.audio);

    // Triggers que se activan cuando la respuesta es correcta/incorrecta
    self.rightAnswer = ko.observable();
    self.wrongAnswer = ko.observable();

    // Triggers cuando la actividad termina satisfactoria y/o insatisfactoriamente
    self.failure = ko.observable(false);
    self.success = ko.observable(false);

    // Recorremos cada grupo y cada uno de los elementos, para agregarlos a items
    ko.utils.arrayForEach(options.groups, function (group) {
      // Creamos un nuevo grupo en base a la plantilla creada
     /* group._id = (Math.random() + 1).toString(36).substring(7);*/
      group._id = group.title;
      self.groups.push(new Group(group));

      ko.utils.arrayForEach(group.items, function (item) {
        item._id = item.groupId ? item.groupId : group._id;
        item.title = item.title ? item.title : false;
        self.items.push(item);
      });
    });


    // Organizamos los elementos de forma aleatoria
    self.items(self.shuffleArray(self.items()));

    // Definimos los estilos de cada elemento
    for (var i = 0; i < self.items().length; i++) {
      var width = (100 / self.items().length);
      self.items()[i]._style = "width: " + width + '%; ';
      self.items()[i]._style += "left: " + ( i * width ) + '%';
      self.items()[i]._style += ';' + self.itemsStyle;
    }
    ;

    // Después del constructor, definimos el número de intentos
    chances = options.chances ? options.chances : self.items().length;


    /**
     * Reproduce el audio de la instrucción.
     */
    self.playAudio = function () {
      $('#audio-instruction')[0].play();
    };


    /**
     * Función que se ejecuta cada vez que se suelta un elemento
     */
    self.verify = function (arg) {
      var item = arg.item,
        targetParent = arg.targetParent;

      if (targetParent._id === item._id || ( item.groupId && item.groupId.indexOf(targetParent._id) > -1 )  ) {
        // respuesta correcta
        self.rightAnswer(item);
        rightAnswers++;

        // Reproducimos el audio
        if (targetParent.resource) {
          $('#audio-' + targetParent._id)[0].play();
        }

        if (typeof options.rightAnswerCallback !== "undefined") options.rightAnswerCallback(item);
      } else {
        // respuesta incorrecta
        self.wrongAnswer(item);
        arg.cancelDrop = true;
      }

      // reducimos las posibilidades
      chances--;

      // Fin de la actividad
      if (chances === 0 || self.items().length === 1) {
        if (rightAnswers >= minRightAnswers) {
          // éxito
          self.success(true);

          // Activamos el siguiente
          $rootScope.isNextEnabled = true;

          if (typeof options.rightAnswerCallback !== "undefined") options.rightAnswerCallback(item);
        } else {
          self.failure(true);
        }
      }

    }

    /**
     * Propiedad Computed para el tamaño de los grupos
     */
    self.getGroupWidth = ko.computed(function () {
      return "width: " + (100 / self.groups().length) + "%";
    });

  };

  /**
   * Inicializa la instancia del ViewModel creado con dragDropMultiplesActivity.create
   *
   * @param {object} instance Intancia del VM de knockout
   */
  dragDropMultiplesActivity.run = function (instance) {
    ko.cleanNode($('#main-container')[0]);
    ko.bindingHandlers.sortable.beforeMove = instance.verify;
    ko.applyBindings(instance, $('#main-container')[0]);
  };

  return dragDropMultiplesActivity;
});

lizDragDropMultiples.directive('dragDropMultiples', function (dragDropMultiplesActivity) {
  return {
    restrict: 'E',
    scope: {
      options: '=',
      audio: '@',
      description: '@'
    },
    transclude: true,
    templateUrl: '../views/activities/drag_drop_multiples.html',
    link: function postLink(scope, element, attrs) {
      // Definimos los contenedores y los elementos transcluídos
      var itemChildren = element.find('.transcluded item').children(),
        itemContainer = element.find('.item');

      // Se añade cada uno de los hijos a la plantilla en la posición adecuada
      angular.forEach(itemChildren, function (elem) {
        itemContainer.append(elem);
      });

      // Se elimina el elemento transcluded del DOM
      element.find('.transcluded').remove();

      // Añadimos el audio a options
      scope.options.audio = typeof scope.audio !== "undefined" ? scope.audio : false;

      // Iniciar Knockout
      dragDropMultiplesActivity.run(dragDropMultiplesActivity.create(scope.options));
    }
  };
});

/**
 * Actividad donde los elementos pueden ser arrastrados en múltiples grupos
 */
var lizDragDropMultiplesDiff = angular.module('lizDragDropMultiplesDiff', []);

lizDragDropMultiplesDiff.factory('dragDropMultiplesDiffActivity', function ($rootScope) {

	var dragDropMultiplesDiffActivity = {};

	/**
	 * Crea el ViewModel
	 */
	dragDropMultiplesDiffActivity.create = function (options) {
		return new dragDropMultiplesDiffActivity._ViewModel(options);
	}

	/**
	 * Genera el ViewModel de las parejas con sus funcionalidades
	 *
	 * Recibe un objeto con las siguientes propiedades
	 *
	 * @param {object}		options						Opciones a utilizar.
	 * @param {Array}		options.groups				Grupos definidos. Cada grupo es un objeto que posee las siguientes propiedades
	 *
	 *	title: Título del bloque donde se sueltan los objetos
	 *	items: elementos pertenecientes al grupo	
	 *
	 * @param {integer}		options.chances				Número de posibilidades que tiene el usuario de hacer la actividad
	 * @param {integer}		options.minRightAnswers		Número mínimo de respuestas correctas
	 * @param {function}	options.successCallback		Función que se llama cuando se termina la actividad de forma satisfactoria
	 * @param {function}	options.rightAnswerCallback	Función que se llama cuando la respuesta es correcta
	 *
	 */
	dragDropMultiplesDiffActivity._ViewModel = function (options) {
		var self = this;
		var cc = options.customClass;
	var Group = function (options) {

		this.title = options.title;
		this.resource = options.resource;
		this.alt = options.alt;
		this.items = ko.observableArray();
		this.items._id = options.id;
		this.customClass = (cc) ? cc : "";
	}

	// ordena el array de forma aleatoria usando el algoritmo de Fisher-Yates
	self.shuffleArray = function(array) {
		for (var i = array.length - 1; i > 0; i--) {
			var j = Math.floor(Math.random() * (i + 1));
			var temp = array[i];
			array[i] = array[j];
			array[j] = temp;
		}
		return array;
	};

	rightAnswers = 0,
	minRightAnswers = options.minRightAnswers;

	self.hasCountdown = (options.hasCountdown) ? true : false;
	self.countdownTime = (options.countdownTime) ? options.countdownTime : "";

	// Conjunto total de elementos
	self.items = ko.observableArray();
	self.groups = ko.observableArray();

	self.resources = $rootScope.resources;

	// Triggers que se activan cuando la respuesta es correcta/incorrecta
	self.rightAnswer = ko.observable();
	self.wrongAnswer = ko.observable();

	// Triggers cuando la actividad termina satisfactoria y/o insatisfactoriamente
	self.failure = ko.observable(false);
	self.success = ko.observable(false);

	// Recorremos cada grupo y cada uno de los elementos, para agregarlos a items
	ko.utils.arrayForEach(options.groups, function (group) {
		// Creamos un nuevo grupo en base a la plantilla creada
		self.groups.push(new Group(group));

		ko.utils.arrayForEach(group.items, function (item) {
			item._id = group.id;
			item.htmlId = item.resource;
			item.chances = options.chancesPerItem-1;
			self.items.push(item);
		});
	});

	// Organizamos los elementos de forma aleatoria
	self.items( self.shuffleArray( self.items()  )  );

	// Definimos los estilos de cada elemento
	for(var i = 0; i < self.items().length; i++){
		var width = (100 / self.items().length);
		self.items()[i]._style = "width: " + width + '%; ';
		self.items()[i]._style += "left: " + ( i * width ) + '%';
	};

	self.playSound = function () {
		$("#audio-instruction").get(0).play();
	};

	// Después del constructor, definimos el número de intentos
	//chances = options.chances ? options.chances : self.items().length; 

	/**
	 * Función que se ejecuta cada vez que se suelta un elemento
	 */
	var counter = 0;
	var numItems = self.items().length;
	self.verify = function (arg) {
		var item = arg.item,
		targetParent = arg.targetParent;

		if(targetParent._id === item._id){
			// respuesta correcta
			self.rightAnswer(item);
			rightAnswers++;
			$("#" + item.htmlId).attr("style", "");
			/*// Reproducimos el audio
			$('#audio-' + targetParent._id)[0].play();*/

			numItems--;
			if(typeof options.rightAnswerCallback !== "undefined") options.rightAnswerCallback(item);
		} else {
			// respuesta incorrecta
			self.wrongAnswer(item);
			arg.cancelDrop = true;
			// reducimos las posibilidades
			if(item.chances === 0){
				$("#" + item.htmlId).hide(200);
				numItems--;
        	}else{item.chances--;}
		}

		// Fin de la actividad
		if(0 === numItems){
			if(rightAnswers >= minRightAnswers){
				// éxito
				self.success(true);

				// Activamos el siguiente
				$rootScope.isNextEnabled = true;

				if(typeof options.rightAnswerCallback !== "undefined") options.rightAnswerCallback(item);
			} else {
				self.failure(true);
			}
		}

	};

	self.countDown = ko.observable();

	ko.bindingHandlers.timer = {

	    update: function (element, valueAccessor) {

	        // retrieve the value from the span
	        var sec = $(element).text();
	        var timer = setInterval(function() { 

	            $(element).text(--sec);
	            if (sec == 0) {
	                if(rightAnswers >= minRightAnswers){
						// éxito
						self.success(true);

						// Activamos el siguiente
						$rootScope.isNextEnabled = true;

						if(typeof options.rightAnswerCallback !== "undefined") options.rightAnswerCallback(item);
					} else {
						self.failure(true);
					}
					clearInterval(timer);	
	            }

	            if (true === self.success() || true === self.failure()) {
	            	clearInterval(timer);
	            }
	        }, 1000);
	    }
	};

	/**
	 * Propiedad Computed para el tamaño de los grupos
	 */
	self.getGroupWidth = ko.computed(function () {
		return "width: " + (100 / self.groups().length) + "%";
	});

};

/**
 * Inicializa la instancia del ViewModel creado con dragDropMultiplesActivity.create
 *
 * @param {object} instance Intancia del VM de knockout
 */
dragDropMultiplesDiffActivity.run = function (instance) {
	ko.cleanNode($('#main-container')[0]);
	ko.bindingHandlers.sortable.beforeMove = instance.verify;
	ko.applyBindings(instance, $('#main-container')[0]);
};

return dragDropMultiplesDiffActivity;
});


lizDragDropMultiplesDiff.directive('dragDropMultiplesDiff', function  (dragDropMultiplesDiffActivity) {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			description: '@',
			audio: '@'
		},
		transclude: true,
		templateUrl: '../views/activities/drag_drop_multiples_diff.html',
		link: function postLink(scope, element, attrs) {
			// Definimos los contenedores y los elementos transcluídos
			var itemChildren = element.find('.transcluded item').children(),
			itemContainer = element.find('.item');

			// Se añade cada uno de los hijos a la plantilla en la posición adecuada
			angular.forEach(itemChildren, function (elem) { itemContainer.append(elem); });

			// Se elimina el elemento transcluded del DOM
			element.find('.transcluded').remove();

			// Iniciar Knockout
			dragDropMultiplesDiffActivity.run(dragDropMultiplesDiffActivity.create(scope.options));
		}
	}; 
});

/**
 * Actividad donde los elementos pueden ser arrastrados en múltiples grupos
 */
var lizDragDropMultiplesPositions = angular.module('lizDragDropMultiplesPositions', []);

lizDragDropMultiplesPositions.factory('dragDropMultiplesPositionsActivity', function ($rootScope) {

  var dragDropMultiplesPositionsActivity = {};

  /**
   * Crea el ViewModel
   */
  dragDropMultiplesPositionsActivity.create = function (options) {
    return new dragDropMultiplesPositionsActivity._ViewModel(options);
  }

  /**
   * Genera el ViewModel de las parejas con sus funcionalidades
   *
   * Recibe un objeto con las siguientes propiedades
   *
   * @param {object}    options            Opciones a utilizar.
   * @param {Array}    options.groups        Grupos definidos. Cada grupo es un objeto que posee las siguientes propiedades
   *
   *  title: Título del bloque donde se sueltan los objetos
   *  items: elementos pertenecientes al grupo
   *
   * @param {integer}    options.chances        Número de posibilidades que tiene el usuario de hacer la actividad
   * @param {integer}    options.minRightAnswers    Número mínimo de respuestas correctas
   * @param {function}  options.successCallback    Función que se llama cuando se termina la actividad de forma satisfactoria
   * @param {function}  options.rightAnswerCallback  Función que se llama cuando la respuesta es correcta
   *
   */
  dragDropMultiplesPositionsActivity._ViewModel = function (options) {
    var self = this;

    var Group = function (options) {
      this._id = options.title; /*options.groupId ? options.groupId : options._id;*/
      this.title = options.title;
      this.w = options.w;
      this.h = options.h;
      this.t = options.t;
      this.l = options.l;
      this.resource = options.resource ? options.resource : false;
      this.alt = options.alt ? options.alt : false;
      this.items = ko.observableArray();
      this.items._id = this._id;
    }

    // ordena el array de forma aleatoria usando el algoritmo de Fisher-Yates
    
    self.shuffleArray = function (array) {
      if (self.randomitems === true){
        for (var i = array.length - 1; i > 0; i--) {
          var j = Math.floor(Math.random() * (i + 1));
          var temp = array[i];
          array[i] = array[j];
          array[j] = temp;
        }
        return array;
      };
      return array;
    };

    var chances = options.chances,
      rightAnswers = 0,
      minRightAnswers = options.minRightAnswers;
      self.canvas = options.canvas; // La imagen en sí
      self.canvasAlt = options.canvasAlt; // texto alternativo de la imagen pricipal
      self.canvasContainerStyle = options.canvasContainerStyle;//estilos del contenedor de la imagen principal 
      self.randomitems = options.randomitems  //ordenar aleatoreamente el array de items

    // Conjunto total de elementos
    self.items = ko.observableArray();
    self.groups = ko.observableArray();

    self.resources = $rootScope.resources;

    // audio
    self.audio = ko.observable(options.audio);

    // Triggers que se activan cuando la respuesta es correcta/incorrecta
    self.rightAnswer = ko.observable();
    self.wrongAnswer = ko.observable();

    // Triggers cuando la actividad termina satisfactoria y/o insatisfactoriamente
    self.failure = ko.observable(false);
    self.success = ko.observable(false);

    // Recorremos cada grupo y cada uno de los elementos, para agregarlos a items
    ko.utils.arrayForEach(options.groups, function (group) {
      // Creamos un nuevo grupo en base a la plantilla creada
      group._id = group.title /*(Math.random() + 1).toString(36).substring(7);*/
      self.groups.push(new Group(group));

      ko.utils.arrayForEach(group.items, function (item) {
        /*item._id = group._id;*/
        item._id = item.groupId ? item.groupId : group._id;
        self.items.push(item);
      });
    });


    // Organizamos los elementos de forma aleatoria
    self.items(self.shuffleArray(self.items()));

    // Definimos los estilos de cada elemento
    for (var i = 0; i < self.items().length; i++) {
      var width = (100 / self.items().length);
      self.items()[i]._style = "width: " + width + '%; ';
      self.items()[i]._style += "left: " + ( i * width ) + '%';
    }
    ;

    // Después del constructor, definimos el número de intentos
    chances = options.chances ? options.chances : self.items().length;


    /**
     * Reproduce el audio de la instrucción.
     */
    self.playAudio = function () {
      $('#audio-instruction')[0].play();
    };


    /**
     * Función que se ejecuta cada vez que se suelta un elemento
     */
    self.verify = function (arg) {

      var item = arg.item,
        targetParent = arg.targetParent;
        
      if (targetParent._id === item._id || item._id.indexOf(targetParent._id) > -1){
        // respuesta correcta
        self.rightAnswer(item);
        rightAnswers++;

        // Reproducimos el audio
        if (targetParent.resource) {
          $('#audio-' + targetParent._id)[0].play();
        }

        if (typeof options.rightAnswerCallback !== "undefined") options.rightAnswerCallback(item);
      } else {
        // respuesta incorrecta
        self.wrongAnswer(item);
        arg.cancelDrop = true;
      }

      // reducimos las posibilidades
      chances--;

      // Fin de la actividad
      if (chances === 0 || self.items().length === 1) {
        if (rightAnswers >= minRightAnswers) {
          // éxito
          self.success(true);

          // Activamos el siguiente
          $rootScope.isNextEnabled = true;

          if (typeof options.rightAnswerCallback !== "undefined") options.rightAnswerCallback(item);
        } else {
          self.failure(true);
        }
      }

    }

    /**
     * Propiedad Computed para el tamaño de los grupos
     */
   self.getTargetsStyles = function (item) {
      console.log(item);
      var styles = '';
      /*return "width: " + (100 / self.groups().length) + "%";*/

      styles += 'width: ' + item.w + '%;';
      styles += 'height: ' + item.h + '%;';
      styles += 'top: ' + item.t + '%;';
      styles += 'left: ' + item.l + '%;';

      return styles;
    };

  };

  /**
   * Inicializa la instancia del ViewModel creado con dragDropMultiplesPositionsActivity.create
   *
   * @param {object} instance Intancia del VM de knockout
   */
  dragDropMultiplesPositionsActivity.run = function (instance) {
    ko.cleanNode($('#main-container')[0]);
    ko.bindingHandlers.sortable.beforeMove = instance.verify;
    ko.applyBindings(instance, $('#main-container')[0]);
  };

  return dragDropMultiplesPositionsActivity;
});

lizDragDropMultiplesPositions.directive('dragDropMultiplesPositions', function (dragDropMultiplesPositionsActivity) {
  return {
    restrict: 'E',
    scope: {
      options: '=',
      audio: '@',
      description: '@'
    },
    transclude: true,
    templateUrl: '../views/activities/drag_drop_multiples_positions.html',
    link: function postLink(scope, element, attrs) {
      // Definimos los contenedores y los elementos transcluídos
      var itemChildren = element.find('.transcluded item').children(),
        itemContainer = element.find('.item');

      // Se añade cada uno de los hijos a la plantilla en la posición adecuada
      angular.forEach(itemChildren, function (elem) {
        itemContainer.append(elem);
      });

      // Se elimina el elemento transcluded del DOM
      element.find('.transcluded').remove();

      // Añadimos el audio a options
      scope.options.audio = typeof scope.audio !== "undefined" ? scope.audio : false;

      // Iniciar Knockout
      dragDropMultiplesPositionsActivity.run(dragDropMultiplesPositionsActivity.create(scope.options));
    }
  };
});

var lizDragDropPairText = angular.module('lizDragDropPairText', []);

// Knockout Pairs Factory
lizDragDropPairText.factory('dragDropPairTextActivity', function ($rootScope) {

	var dragDropPairTextActivity = {};

  /**
   * Crea el ViewModel
   */
  dragDropPairTextActivity.create = function (options) {
    return new dragDropPairTextActivity._ViewModel(options);
  };

	/**
	 * Genera el ViewModel de las parejas con sus funcionalidades
	 *
	 * Recibe un objeto con las siguientes propiedades
	 *
	 * @param {object}		opt						Opciones a utilizar.
	 * @param {Array}			opt.data				Información de los elementos. Dentro de cada objeto, se pueden definir las propiedades:
	 *
	 *	target: Permite darle un orden apropiado a los targets. Debe empezar desde 0 y la propiedad opt.randomTargets debe estar desactivada
	 *
	 * @param {integer}		opt.chances				Número de posibilidades que tiene el usuario de hacer la actividad
	 * @param {integer}		opt.minRightAnswers		Número mínimo de respuestas correctas
	 * @param {boolean}		opt.randomItems			Define si los elementos deben ser puestos en forma aleatoria
	 * @param {boolean}		opt.randomTargets		Define si los objetivos debe ser puestos en forma aleatoria
	 * @param {function}	opt.successCallback		Función que se llama cuando se termina la actividad de forma satisfactoria
	 * @param {function}	opt.rightAnswerCallback	Función que se llama cuando la respuesta es correcta
	 *
	 */
	dragDropPairTextActivity._ViewModel = function (opt) {
		var self = this;

		// ordena el array de forma aleatoria usando el algoritmo de Fisher-Yates
		self.shuffleArray = function(array) {
			for (var i = array.length - 1; i > 0; i--) {
				var j = Math.floor(Math.random() * (i + 1));
				var temp = array[i];
				array[i] = array[j];
				array[j] = temp;
			}
			return array;
		};

		// Inicializa las opciones
		var data = opt.data,
      minRightAnswers = opt.minRightAnswers ? opt.minRightAnswers : data.length,
      randomItems = opt.randomItems ? true : false,
      randomTargets = opt.randomTargets ? true : false,
      chances = opt.chances ? opt.chances : data.length,
      targets_data = data.slice(0),   // Clonamos el array para empezar a trabajar
      completedItems = 0, // contador de elementos completos
      border = opt.hasOwnProperty('border') ? opt.border : true,
      padding = opt.hasOwnProperty('padding') ? opt.padding : true;

		// Objetos aleatorios
		if(randomItems) {
			data = self.shuffleArray(data);
		}

		// Creamos los índices para la posición absoluta
		for(var i = 0; i < data.length; i++){
			data[i]._index = i;
		}

		self.itemsPerRow = (opt.hasOwnProperty("itemsPerRow")) ? opt.itemsPerRow : opt.data.length;

		// audio
		self.audio = ko.observable(opt.audio);

		// Definimos los observableArrays para items y targets
		self.items = ko.observableArray(data);
		self.targets = ko.observableArray();

		// Carpeta de recursos desde angular
		self.resources = $rootScope.resources;

		self.maximumElements = 1; // IMPORTANTE: Requerido para que los sortables no acepten más de un elemento
		self.rightAnswers = 0; // Inicializamos el número de respuestas buenas a 0

		// Triggers que se activan cuando la respuesta es correcta/incorrecta
		self.rightAnswer = ko.observable();
		self.wrongAnswer = ko.observable();

		// Triggers cuando la actividad termina satisfactoria y/o insatisfactoriamente
		self.failure = ko.observable(false);
		self.success = ko.observable(false);

		// ======================================================================================
		// Constructor de los targets
		// ======================================================================================

		// Si la opción de randomTargets está activada, aplicamos el orden aleatorio
		if(randomTargets){
			targets_data = self.shuffleArray(targets_data);
		} else {
			// En caso contrario, se utiliza la propiedad target, dentro del array de data
			targets_data.sort(function (a, b) {
				return ((a.target < b.target) ? -1 : ((a.target > b.target) ? 1 : 0));
			});
		}

		var _index = 1; // índice que se le asignará a cada uno de los elementos

		ko.utils.arrayForEach(targets_data, function (item) {
			// Creamos el nuevo target. Añadimos un índice para hacer la relación 1 a 1
			item._items = ko.observableArray();
			if (opt.hasOwnProperty("chancesPerItem")) {
				item.chances = opt.chancesPerItem - 1;
			}
			item._items._id = _index++;

			self.targets.push(item);
		});
		
		// ======================================================================================
		// FIN Constructor
		// ======================================================================================

		/**
		 * Reproduce el audio de la instrucción.
		 */
		self.playAudio = function () {
			$('#audio-instruction')[0].play();
		};

		// Define si el target esta lleno utilizando self.maximumElements
		self.isContainerFull = function (parent) {
			return parent().length < self.maximumElements;
		};


		// Función que se ejecuta cuando se suelta el elemento y hace toda la funcionalidad
		self.verifyAnswer = function (arg) {
			var parent = arg.targetParent,
			item = arg.item;
         

			// Si el target es igual al contenedor inicial, se devuelve a su posición original
			if(typeof parent._id === "undefined") {
				arg.cancelDrop = true;
				return;
			} else {
				// Compara el _id para encontrar la pareja idéntica. Si es igual, la respuesta es correcta
				if(parent._id === item._items._id){

					// RESPUESTA CORRECTA
					self.rightAnswers++;
					self.rightAnswer(item);
          			completedItems += 1;
          			// Reducimos en 1 las posibilidades
					chances -= 1;

					// Si se definió una función cuando la respuesta es correcta, se corre
					if(typeof opt.rightAnswerCallback !== "undefined" ) opt.rightAnswerCallback(item);

				} else {

					// RESPUESTA INCORRECTA
					self.wrongAnswer(item);
					arg.cancelDrop = true;

					if (item.hasOwnProperty("chances")) {
						if(item.chances === 0){
							// Reducimos en 1 las posibilidades
							chances -= 1;
							$("#" + item._items._id).hide(200);
			        	}else{item.chances--;}
					} else {
						// Reducimos en 1 las posibilidades
						chances -= 1;
					}
				}
			}

			// La actividad termina cuando el número de posibilidades se termina
			if(chances === 0 || completedItems === self.targets().length) {
				// Si el número de respuestas correctas es mayor o igual al requerido inicialmente
				if(self.rightAnswers >= minRightAnswers) {
					self.success(true); // Trigger de éxito

					// Se llama la función de éxito, definida por el desarrollador
					if (typeof opt.successCallback !== "undefined") opt.successCallback();

					$rootScope.isNextEnabled = true; // Activamos el siguiente
				} else {
					self.failure(true); // Trigger de fracaso
				}
			}
		};

    /**
     * Estilos de los elementos.
     */
     var _itemIndex = 0;
    self.getItemStyles = function (item) {
      var styles = '';

     //  if (opt.hasOwnProperty("itemsPerRow")) {
     //  	if (_itemIndex === opt.itemsPerRow) {
     //  		_itemIndex = 0;
     //  	}

     //  	if (item._index >= opt.itemsPerRow) {
  			// styles += 'top: 33%;';
     //  	}
     //  	styles += 'width: ' + (100 / opt.itemsPerRow) + '%;';
     //  	styles += 'left: ' + ((100 / opt.itemsPerRow) * _itemIndex ) + '%;';
     //  	_itemIndex++
     //  } else {
      	styles += 'width: ' + (100 / self.targets().length) + '%;';
      

      
      	styles += 'left: ' + ((100 / self.targets().length) * item._index ) + '%;';
      // }
      
      styles += 'position: absolute;';
      return styles;
    };

    /**
     * Estilos de cada objetivo.
     * @returns {string}
     */
    self.getTargetStyles = function () {
      var styles = '';

      if (opt.hasOwnProperty("itemsPerRow")) {
  		styles += 'width: ' + (100 / opt.itemsPerRow) + '%;';
      } else {
      	styles += 'width: ' + (100 / self.targets().length) + '%;';
      }
      
      if(typeof opt.targetStyles !== "undefined") styles += opt.targetStyles;

      return styles;
    };

		/**
		 * Estilos para elementos internos de target e item.
		 */
		self.getInnerStyles = function (item) {
			var styles = '';

			// Estilos Opcionales
			if(border) styles += 'border: 4px solid #000;';
			if(padding) styles += 'padding: 4px;';

			return styles;
		}

	};

	/**
	 * Inicializa la instancia del ViewModel creado con pairsActivity.create
	 *
	 * @param {object} instance Intancia del VM de knockout
	 */
	dragDropPairTextActivity.run = function (instance) {
		console.log(ko.bindingHandlers);
		ko.cleanNode($('#main-container')[0]);
		ko.bindingHandlers.sortable.beforeMove = instance.verifyAnswer;
		ko.applyBindings(instance, $('#main-container')[0]);
	};

	return dragDropPairTextActivity;

});

lizDragDropPairText.directive('dragDropPairText', function  (dragDropPairTextActivity) {
	return {
		restrict: 'E',
		transclude: true,
		scope: {
			options: '=',
			description: '@',
			audio:'@',
			customClass: '@'
		},
		templateUrl: '../views/activities/drag_drop_pair_text.html',
		link: function postLink(scope, element, attrs) {
			console.log(arguments);
			if(typeof scope.customClass !== "undefined"){
				scope.$root.customClass = scope.customClass;
			}

			// Definimos los contenedores y los elementos transcluídos
			var itemChildren = element.find('.transcluded item').children(),
			itemContainer = element.find('.item'),
			targetChildren = element.find('.transcluded target').children(),
			targetContainer = element.find('.target')
			itemTargetChildren = element.find('.transcluded item-target').children(),
			itemTargetContainer = element.find('.item-target');

			// Se añade cada uno de los hijos a la plantilla en la posición adecuada
			angular.forEach(itemChildren, function (elem) { itemContainer.append(elem); });
			angular.forEach(targetChildren, function (elem) { targetContainer.append(elem); });
			angular.forEach(itemTargetChildren, function (elem) { itemTargetContainer.append(elem); });

			// Se elimina el elemento transcluded del DOM
			element.find('.transcluded').remove();

			// Añadimos el audio a options
			// scope.options.audio = typeof scope.audio !== "undefined" ? scope.audio : false;

			// Corremos la aplicación
			var vm = dragDropPairTextActivity.create(scope.options);
			dragDropPairTextActivity.run(vm);
		}
	}; 
});

var lizDragMarkCanvas = angular.module('lizDragMarkCanvas', []);

// Knockout Pairs Factory
lizDragMarkCanvas.factory('dragMarkCanvasActivity', function ($rootScope) {

	var dragMarkCanvasActivity = {};

	/**
	 * Crea el ViewModel
	 */
	dragMarkCanvasActivity.create = function (options) {
		return new dragMarkCanvasActivity._ViewModel(options);
	}

	/**
	 * Genera el ViewModel de las parejas con sus funcionalidades
	 *
	 * Recibe un objeto con las siguientes propiedades
	 *
	 * @param {object}		options						Opciones a utilizar.
	 * @param {Array}			options.data				Información de los elementos. Dentro de cada objeto, se pueden definir las propiedades:
	 *
	 *	target: Permite darle un orden apropiado a los targets. Debe empezar desde 0 y la propiedad options.randomTargets debe estar desactivada
	 *
	 * @param {integer}		options.chances				Número de posibilidades que tiene el usuario de hacer la actividad
	 * @param {integer}		options.minRightAnswers		Número mínimo de respuestas correctas
	 * @param {boolean}		options.randomItems			Define si los elementos deben ser puestos en forma aleatoria
	 * @param {boolean}		options.randomTargets		Define si los objetivos debe ser puestos en forma aleatoria
	 * @param {function}	options.successCallback		Función que se llama cuando se termina la actividad de forma satisfactoria
	 * @param {function}	options.rightAnswerCallback	Función que se llama cuando la respuesta es correcta
	 *
	 */
	dragMarkCanvasActivity._ViewModel = function (opt) {
		var self = this,
			chances = opt.chances,
			minRightAnswers = opt.minRightAnswers,
			temp = false;

		// Elementos de la actividad
		self.canvas = opt.canvas;
		self.alt = opt.alt;
		self.items = opt.items; // Elementos que se arrastran
		self.targets = ko.observableArray(); // Targets 

		self.items.forEach(function(item){
			item.targets.forEach(function(target){
				temp = {
					sortable: ko.observableArray(),
					t: target.t,
					l: target.l,
					w: target.w,
					h: target.h
				};

				temp.sortable._id = item.drag;

				// Añadimos el elemento a los targets
				self.targets.push(temp);
			});
		});

		// audio
		self.audio = ko.observable(opt.audio);

		// Carpeta de recursos desde angular
		self.resources = $rootScope.resources;

		self.maximumElements = 1; // IMPORTANTE: Requerido para que los sortables no acepten más de un elemento
		self.rightAnswers = 0; // Inicializamos el número de respuestas buenas a 0

		// Triggers que se activan cuando la respuesta es correcta/incorrecta
		self.rightAnswer = ko.observable();
		self.wrongAnswer = ko.observable();

		// Triggers cuando la actividad termina satisfactoria y/o insatisfactoriamente
		self.failure = ko.observable(false);
		self.success = ko.observable(false);




		/**
		 * Reproduce el audio de la instrucción.
		 */
		self.playAudio = function () {
			$('#audio-instruction')[0].play();
		};

		/**
		 * Define si el target esta lleno utilizando self.maximumElements
		 */
		self.isContainerFull = function (parent) {
			return parent().length < self.maximumElements;
		};


		/**
		 * Obtiene los estilos de los targets
		 */
		self.getTargetStyles = function (target) {
			var styles = '';

			styles += 'top: ' + target.t + '%;';
			styles += 'left: ' + target.l + '%;';
			styles += 'width: ' + target.w + '%;';
			styles += 'height: ' + target.h + '%;';

			return styles;
		};


		/**
		 * Función que se ejecuta cuando se suelta el elemento y hace toda la funcionalidad
		 */
		self.verifyAnswer = function (arg) {
			var parent = arg.targetParent,
				item = arg.item;

			if(parent._id === item.drag){
				// RESPUESTA CORRECTA
				self.rightAnswers++;
				self.rightAnswer(item);

				// Si se definió una función cuando la respuesta es correcta, se corre
				if(typeof opt.rightAnswerCallback !== "undefined" ) opt.rightAnswerCallback(item);
			} else {
				// RESPUESTA INCORRECTA
				self.wrongAnswer(item);
				arg.cancelDrop = true;
			}

			// Reducimos en 1 las posibilidades
			chances--;

			// La actividad termina cuando el número de posibilidades se termina
			if(chances === 0 || self.rightAnswers === self.targets().length) {
				// Si el número de respuestas correctas es mayor o igual al requerido inicialmente
				if(self.rightAnswers >= minRightAnswers) {
					self.success(true); // Trigger de éxito

					// Se llama la función de éxito, definida por el desarrollador
					if (typeof opt.successCallback !== "undefined") opt.successCallback();

					$rootScope.isNextEnabled = true; // Activamos el siguiente
				} else {
					self.failure(true); // Trigger de fracaso
				}
			}
		};

	};

	/**
	 * Inicializa la instancia del ViewModel creado con dragMarkCanvasActivity.create
	 *
	 * @param {object} instance Intancia del VM de knockout
	 */
	dragMarkCanvasActivity.run = function (instance) {
		ko.cleanNode($('#main-container')[0]);
		ko.bindingHandlers.sortable.beforeMove = instance.verifyAnswer;
		ko.applyBindings(instance, $('#main-container')[0]);
	};

	return dragMarkCanvasActivity;

});

lizDragMarkCanvas.directive('dragMarkCanvas', function  (dragMarkCanvasActivity) {
	return {
		restrict: 'E',
		transclude: true,
		scope: {
			options: '=',
			description: '@',
			audio:'@',
			customClass: '@'
		},
		templateUrl: '../views/activities/drag_mark_canvas.html',
		link: function postLink(scope, element, attrs) {
			// Añadimos el audio a options
			scope.options.audio = typeof scope.audio !== "undefined" ? scope.audio : false;

			// Corremos la aplicación
			var vm = dragMarkCanvasActivity.create(scope.options);
			dragMarkCanvasActivity.run(vm);
		}
	}; 
});

var lizDragToImg = angular.module('lizDragToImg', ['ngDragDrop']);

lizDragToImg.directive('dragToImg', function  ($compile) {
  return {
    restrict: 'E',
    scope: {
      options: '=',
      audio: '@',
      description: '@'
    },
    templateUrl: '../views/activities/drag_to_img.html',
    link: function (scope, element, attrs) {
      var opt = scope.options,
        replaceArray = [], // array con los índices de los targets
        targetCounter = 0, // Variable temporal usada como contador
        rightAnswers = 0, // contador de respuestas correctas
        minRightAnswers = opt.minRightAnswers, // respuestas correctas mínimas para pasar
        template = opt.template;

      // Models
      // --------------------------------------------------------------------
      scope.items = [];
      scope.targets = [];

      // img
      scope.src = opt.src;
      scope.alt = opt.alt;

      // iteramos sobre los objetos, para construir los draggables
      opt.items.forEach(function (item, index) {
        var _data = null;

        if(typeof item === 'object') _data = item.data;
        else _data = item;

        // Creación de item
        if(_data instanceof Array) {
          _data.forEach(function (i) {
            scope.items.push({
              _id: index,
              text: i
            });
          });
        } else {
          scope.items.push({
            _id: index,
            text: _data
          });
        }

      });

      // Template Creation
      // --------------------------------------------------------------------
      // Usamos replace para obtener los índices
      template.replace(/\$\{(\d+)\}/g, function (a, b) {
        a = a.substr(2, a.length - 3); // Remueve los elementos que producen la interpolación
        replaceArray.push(a);
        return false;
      });

      replaceArray.forEach(function (i) {
        // Creación de target
        scope.targets.push({
          _id: parseInt(i),
          drop: true,
          chances: 2,
          customClass: opt.items[i].customClass ? opt.items[i].customClass : '',
          model: {} // droppable
        });
      });

      // Formateamos el contenido para añadirlo a .operation-content
      template = template.replace(/\$\{(\d+)\}/g, function (a, b) {
        a = "targets[" + targetCounter + "]";
        targetCounter += 1;

        var elem = '<span class="drop-container bd-1 {{ _x_.customClass }}" ng-class="{ disabled: _x_.disabled }" data-drop="_x_.drop" ng-model="_x_.model" jqyoui-droppable="{ onDrop: \'dropCallback(_x_)\' }">\n    <span class="dropped-item">{{ _x_.model.text }}</span>\n    <span class="answer-icon icon-right" ng-show="_x_.right"></span>\n    <span class="answer-icon icon-wrong" ng-show="_x_.wrong"></span>\n</span>\n';

        return elem.replace(/_x_/g, a);
      });

      element.find('.template-container').append($compile(template)(scope));

      // Events
      // --------------------------------------------------------------------
      /**
       * Función que se ejecuta al soltar un elemento.
       *
       * @param e    event de jquery ui
       * @param ui
       * @param target    Modelo donde fue soltado el item
       */
      scope.dropCallback = function (e, ui, target) {
        var completedTargets = 0;
        console.log(e, ui, target);

        // revisa el modelo interno y compara _ids
        if(target._id === target.model._id) {
          // Respuesta correcta
          target.drop = false; // deshabilita el drop
          target.disabled = true;
          target.right = true;

          rightAnswers += 1;
        } else {
          // Respuesta incorrecta
          target.model = {}; // limpia el interno
          target.chances -= 1;

          if(target.chances === 0) {
            target.disabled = true;
            target.wrong = true;
          }
        }

        // Fin de la actividad
        completedTargets = scope.targets.filter(function (t) {
          return t.disabled;
        }).length;

        if(completedTargets === scope.targets.length) {
          scope.$root.isNextEnabled = true;
        }
      };

      /**
       * Función que se ejecuta al dar click en la flecha de siguiente.
       */
      scope.$root.beforeGoNext = function () {
        if(rightAnswers >= minRightAnswers) {
          scope.success = true;
          return true;
        } else {
          scope.failure = true;
          return false;
        }
      };


    }
  };
});

var lizDragToMat = angular.module('lizDragToMat', ['ngDragDrop']);

lizDragToMat.directive('dragToMat', function  ($compile) {
  return {
    restrict: 'E',
    scope: {
      options: '=',
      audio: '@',
      description: '@',
    },
    templateUrl: '../views/activities/drag_to_mat.html',
    link: function (scope, element, attrs) {
      var opt = scope.options,
        replaceArray = [], // array con los índices de los targets
        targetCounter = 0, // Variable temporal usada como contador
        rightAnswers = 0, // contador de respuestas correctas
        minRightAnswers = opt.minRightAnswers, // respuestas correctas mínimas para pasar
        template = opt.template;

      // Models
      // --------------------------------------------------------------------
      scope.items = [];
      scope.targets = [];

      // img
      scope.src = opt.src;
      scope.alt = opt.alt;
    
      // iteramos sobre los objetos, para construir los draggables
      opt.items.forEach(function (item, index) {
        var _data = null;

        if(typeof item === 'object') _data = item.data;
        else _data = item;

        // Creación de item
        if(_data instanceof Array) {
          _data.forEach(function (i) {
            scope.items.push({
              _id: index,
              text: i
            });
          });
        } else {
          scope.items.push({
            _id: index,
            text: _data
          });
        }

      });

      // Template Creation
      // --------------------------------------------------------------------
      // Usamos replace para obtener los índices
      template.replace(/\$\{(\d+)\}/g, function (a, b) {
        a = a.substr(2, a.length - 3); // Remueve los elementos que producen la interpolación
        replaceArray.push(a);
        return false;
      });

      replaceArray.forEach(function (i) {
        // Creación de target
        scope.targets.push({
          _id: parseInt(i),
          drop: true,
          chances: 2,
          customClass: opt.items[i].customClass ? opt.items[i].customClass : '',
          model: {} // droppable
        });
      });

      // Formateamos el contenido para añadirlo a .operation-content
      template = template.replace(/\$\{(\d+)\}/g, function (a, b) {
        a = "targets[" + targetCounter + "]";
        targetCounter += 1;

        var elem = '<span class="drop-container bd-1 {{ _x_.customClass }}" ng-class="{ disabled: _x_.disabled }" data-drop="_x_.drop" ng-model="_x_.model" jqyoui-droppable="{ onDrop: \'dropCallback(_x_)\' }">\n    <span class="dropped-item">{{ _x_.model.text }}</span>\n    <span class="answer-icon icon-right" ng-show="_x_.right"></span>\n    <span class="answer-icon icon-wrong" ng-show="_x_.wrong"></span>\n</span>\n';

        return elem.replace(/_x_/g, a);
      });

      element.find('.template-container').append($compile(template)(scope));

      // Events
      // --------------------------------------------------------------------
      /**
       * Función que se ejecuta al soltar un elemento.
       *
       * @param e    event de jquery ui
       * @param ui
       * @param target    Modelo donde fue soltado el item
       */
      scope.dropCallback = function (e, ui, target) {
        var completedTargets = 0;
        console.log(e, ui, target);

        // revisa el modelo interno y compara _ids
        if(target._id === target.model._id) {
          // Respuesta correcta
          target.drop = false; // deshabilita el drop
          target.disabled = true;
          target.right = true;

          rightAnswers += 1;
        } else {
          // Respuesta incorrecta
          target.model = {}; // limpia el interno
          target.chances -= 1;

          if(target.chances === 0) {
            target.disabled = true;
            target.wrong = true;
          }
        }

        // Fin de la actividad
        completedTargets = scope.targets.filter(function (t) {
          return t.disabled;
        }).length;

        if(completedTargets === scope.targets.length) {
          scope.$root.isNextEnabled = true;
        }
      };

      /**
       * Función que se ejecuta al dar click en la flecha de siguiente.
       */
      scope.$root.beforeGoNext = function () {
        if(rightAnswers >= minRightAnswers) {
          scope.success = true;
          return true;
        } else {
          scope.failure = true;
          return true;
        }
      };


    }
  };
});

var lizDragToText = angular.module('lizDragToText', ['ngDragDrop']);

lizDragToText.directive('dragToText', function  ($compile) {
  return {
    restrict: 'E',
    scope: {
      options: '=',
      audio: '@',
      description: '@'
    },
    templateUrl: '../views/activities/drag_to_text.html',
    link: function (scope, element, attrs) {
      var opt = scope.options,
        replaceArray = [], // array con los índices de los targets
        targetCounter = 0, // Variable temporal usada como contador
        rightAnswers = 0, // contador de respuestas correctas
        minRightAnswers = opt.minRightAnswers, // respuestas correctas mínimas para pasar
        template = opt.template;

      // Models
      // --------------------------------------------------------------------
      scope.items = [];
      scope.targets = [];

      // img
      scope.src = opt.src;
      scope.alt = opt.alt;

      // iteramos sobre los objetos, para construir los draggables
      opt.items.forEach(function (item, index) {
        var _data = null;

        if(typeof item === 'object') _data = item.data;
        else _data = item;

        // Creación de item
        if(_data instanceof Array) {
          _data.forEach(function (i) {
            scope.items.push({
              _id: index,
              text: i
            });
          });
        } else {
          scope.items.push({
            _id: index,
            text: _data
          });
        }

      });

      // Template Creation
      // --------------------------------------------------------------------
      // Usamos replace para obtener los índices
      template.replace(/\$\{(\d+)\}/g, function (a, b) {
        a = a.substr(2, a.length - 3); // Remueve los elementos que producen la interpolación
        replaceArray.push(a);
        return false;
      });

      replaceArray.forEach(function (i) {
        // Creación de target
        scope.targets.push({
          _id: parseInt(i),
          drop: true,
          chances: 2,
          customClass: opt.items[i].customClass ? opt.items[i].customClass : '',
          model: {} // droppable
        });
      });

      // Formateamos el contenido para añadirlo a .operation-content
      template = template.replace(/\$\{(\d+)\}/g, function (a, b) {
        a = "targets[" + targetCounter + "]";
        targetCounter += 1;

        var elem = '<span class="drop-container bd-1 {{ _x_.customClass }}" ng-class="{ disabled: _x_.disabled }" data-drop="_x_.drop" ng-model="_x_.model" jqyoui-droppable="{ onDrop: \'dropCallback(_x_)\' }">\n    <span class="dropped-item">{{ _x_.model.text }}</span>\n    <span class="answer-icon icon-right" ng-show="_x_.right"></span>\n    <span class="answer-icon icon-wrong" ng-show="_x_.wrong"></span>\n</span>\n';

        return elem.replace(/_x_/g, a);
      });

      element.find('.template-container').append($compile(template)(scope));

      // Events
      // --------------------------------------------------------------------
      /**
       * Función que se ejecuta al soltar un elemento.
       *
       * @param e    event de jquery ui
       * @param ui
       * @param target    Modelo donde fue soltado el item
       */
      scope.dropCallback = function (e, ui, target) {
        var completedTargets = 0;
        console.log(e, ui, target);

        // revisa el modelo interno y compara _ids
        if(target._id === target.model._id) {
          // Respuesta correcta
          target.drop = false; // deshabilita el drop
          target.disabled = true;
          target.right = true;

          rightAnswers += 1;
        } else {
          // Respuesta incorrecta
          target.model = {}; // limpia el interno
          target.chances -= 1;

          if(target.chances === 0) {
            target.disabled = true;
            target.wrong = true;
          }
        }

        // Fin de la actividad
        completedTargets = scope.targets.filter(function (t) {
          return t.disabled;
        }).length;

        if(completedTargets === scope.targets.length) {
          scope.$root.isNextEnabled = true;
        }
      };

      /**
       * Función que se ejecuta al dar click en la flecha de siguiente.
       */
      scope.$root.beforeGoNext = function () {
        if(rightAnswers >= minRightAnswers) {
          scope.success = true;
          return true;
        } else {
          scope.failure = true;
          return false;
        }
      };


    }
  };
});

var lizDragToTexts = angular.module('lizDragToTexts', ['ngDragDrop']);

lizDragToTexts.directive('dragToTexts', function  ($compile) {
  return {
    restrict: 'E',
    scope: {
      options: '=',
      audio: '@',
      description: '@'
    },
    templateUrl: '../views/activities/drag_to_texts.html',
    link: function (scope, element, attrs) {
      var opt = scope.options,
        replaceArray = [], // array con los índices de los targets
        targetCounter = 0, // Variable temporal usada como contador
        rightAnswers = 0, // contador de respuestas correctas
        minRightAnswers = opt.minRightAnswers, // respuestas correctas mínimas para pasar
        template = opt.template;

      // Models
      // --------------------------------------------------------------------
      scope.items = [];
      scope.targets = [];

      // img
      scope.src = opt.src;
      scope.alt = opt.alt;

      // iteramos sobre los objetos, para construir los draggables
      opt.items.forEach(function (item, index) {
        var _data = null;

        if(typeof item === 'object') _data = item.data;
        else _data = item;

        // Creación de item
        if(_data instanceof Array) {
          _data.forEach(function (i) {
            scope.items.push({
              _id: index,
              text: i
            });
          });
        } else {
          scope.items.push({
            _id: index,
            text: _data
          });
        }

      });

      // Template Creation
      // --------------------------------------------------------------------
      // Usamos replace para obtener los índices
      template.replace(/\$\{(\d+)\}/g, function (a, b) {
        a = a.substr(2, a.length - 3); // Remueve los elementos que producen la interpolación
        replaceArray.push(a);
        return false;
      });

      replaceArray.forEach(function (i) {
        // Creación de target
        scope.targets.push({
          _id: parseInt(i),
          drop: true,
          chances: 2,
          customClass: opt.items[i].customClass ? opt.items[i].customClass : '',
          model: {} // droppable
        });
      });

      // Formateamos el contenido para añadirlo a .operation-content
      template = template.replace(/\$\{(\d+)\}/g, function (a, b) {
        a = "targets[" + targetCounter + "]";
        targetCounter += 1;

        var elem = '<span class="drop-container bd-1 {{ _x_.customClass }}" ng-class="{ disabled: _x_.disabled }" data-drop="_x_.drop" ng-model="_x_.model" jqyoui-droppable="{ onDrop: \'dropCallback(_x_)\' }">\n    <span class="dropped-item">{{ _x_.model.text }}</span>\n    <span class="answer-icon icon-right" ng-show="_x_.right"></span>\n    <span class="answer-icon icon-wrong" ng-show="_x_.wrong"></span>\n</span>\n';

        return elem.replace(/_x_/g, a);
      });

      element.find('.template-container').append($compile(template)(scope));

      // Events
      // --------------------------------------------------------------------
      /**
       * Función que se ejecuta al soltar un elemento.
       *
       * @param e    event de jquery ui
       * @param ui
       * @param target    Modelo donde fue soltado el item
       */
      scope.dropCallback = function (e, ui, target) {
        var completedTargets = 0;
        console.log(e, ui, target);

        // revisa el modelo interno y compara _ids
        if(target._id === target.model._id) {
          // Respuesta correcta
          target.drop = false; // deshabilita el drop
          target.disabled = true;
          target.right = true;

          rightAnswers += 1;
        } else {
          // Respuesta incorrecta
          target.model = {}; // limpia el interno
          target.chances -= 1;

          if(target.chances === 0) {
            target.disabled = true;
            target.wrong = true;
          }
        }

        // Fin de la actividad
        completedTargets = scope.targets.filter(function (t) {
          return t.disabled;
        }).length;

        if(completedTargets === scope.targets.length) {
          scope.$root.isNextEnabled = true;
        }
      };

      /**
       * Función que se ejecuta al dar click en la flecha de siguiente.
       */
      scope.$root.beforeGoNext = function () {
        if(rightAnswers >= minRightAnswers) {
          scope.success = true;
          return true;
        } else {
          scope.failure = true;
          return false;
        }
      };


    }
  };
});

var lizDropBoxes = angular.module('lizDropBoxes', ['factories']);

lizDropBoxes.directive('dropBoxes', function  (shuffleArrayFactory) {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			audio: '@',
			description: '@'
		},
		templateUrl: '../views/activities/drop_boxes.html',
		link: function postLink(scope, element, attrs) {

			var opt = scope.options,
				chances = opt.chancesPerPhase; // posibilidades por fase

			scope.phases = opt.phases; // Fases del juego
			scope.dropTarget = null; // Padre en donde cae el objeto
			scope.remaining = []; // Objetos sobrantes
			scope.actualPhase = {}; // Fase Actual

			// variables de calificación
			scope.rightAnswer = false;
			scope.wrongAnswer = false;
			scope.success = false;

			// Constructor de remaining
			scope.phases.forEach(function(phase){
				phase.groups.forEach(function(group){
					// Creamos un objeto por cada uno de los items del grupo
					// mientras que los vamos eliminando del mismo array usando shift
					// Se deben diferenciar por phase y grupo
					while(group.items.length){
						scope.remaining.push({
							phase: phase.title,
							group: group.title,
							word: group.items.shift()
						})
					};
				});
			});

			// Se barajan los elementos
			shuffleArrayFactory.run(scope.remaining);

			// Se carga la fase actual
			scope.actualPhase = scope.phases.shift();

			// Opciones del sortable
			scope.sortableOptions = {
				connectWith: '.connected',
			};

			/**
			 * -----------------------------------------------------------------------------
			 * Verify
			 * -----------------------------------------------------------------------------
			 * Verifica la fase actual. Es la función principal de la actividad.
			 *
			 * Primero se buscan todos los elementos erróneos dentro de la fase actual, así
			 * como los elementos que no se hayan agregado. Después, si se han encontrado elementos
			 * entonces la respuesta es incorrecta, de lo contrario, es correcta y se carga la siguiente
			 * fase.
			 *
			 * La actividad termina cuando ya no hay más fáses.
			 */
			scope.verify = function () {
				var badAnswers = []; // puestos por error
				var missedItems = []; // objetos perdidos

				// ============================================================================
				// Búsqueda de elementos
				// ============================================================================
				// Recorremos cada group y comparamos los objetos adentro
				scope.actualPhase.groups.forEach(function(group){
					// Si aún hay objetos pendientes que van dentro de las casillas
					var missedInGroup = scope.remaining.filter(function(item){
						return item.phase === scope.actualPhase.title &&
							item.group === group.title;
					});

					// Concatenamos los objetos perdidos
					missedItems = missedItems.concat(missedInGroup);

					// Objetos no pertenecientes a la lista
					group.items.forEach(function(item){
						if(item.group !== group.title || item.phase !== scope.actualPhase.title){
							badAnswers.push(item)
						}
					});
				});

				// ============================================================================
				// Verificación de respuesta correcta/incorrecta
				// ============================================================================
				if(missedItems.length || badAnswers.length){
					// Respuesta Incorrecta
					scope.wrongAnswer = Math.random(); // Disparador de respuesta
					chances--;

					// Se debe reiniciar la serie si se acaban las posibilidades
					if(chances === 0){
						chances = opt.chancesPerPhase; // Reinicia el contador

						// Recorremos los grupos y eliminamos los elementos, añadiéndolos nuevamente a la
						// gran lista
						scope.actualPhase.groups.forEach(function(group){
							while(group.items.length){
								scope.remaining.push( group.items.shift() ); 
							};
						});
					}
				} else {
					// Respuesta Correcta
					scope.rightAnswer = Math.random(); // Disparador de respuesta
					chances = opt.chancesPerPhase; // Reinicia el contador

					// ============================================================================
					// Fin de la actividad
					// ============================================================================
					if(scope.phases.length === 0){
						scope.$root.isNextEnabled = true;
						scope.success = true;
					} else {
						scope.actualPhase = scope.phases.shift();
					}
				}

			};
			
		}
	}; 
});

/* ===========================================================
 * Drop Condition
 * ===========================================================
 * Permite arrastrar elementos a cuadros basado en una condición definida por medio de una función.
 */
var lizDropCondition = angular.module('lizDropCondition', ['ngDragDrop']);

lizDropCondition.directive('dropCondition', function  ($compile) {
  return {
    restrict: 'E',
    scope: {
      options: '=',
      audio: '@',
      description: '@'
    },
    templateUrl: '../views/activities/drop_condition.html',
    link: function (scope, element, attrs) {
      var opt = scope.options,
        iTemplate = opt.itemTemplate,
        tTemplate = iTemplate.replace('item', 'target.model'), // Usa la misma plantilla de los items
        $itemsTemplate = null, // Plantilla de los objetos
        $targetsTemplate = null,
        chances = opt.chances,
        minRightAnswers = opt.minRightAnswers,
        rightAnswers = 0; // Contador de respuestas correctas

      // Models
      // --------------------------------------------------------------------
      scope.items = opt.items.slice(0);
      scope.targets = _.range(opt.targets).map(function () { return { drop: "true", model: {} }; });

      // Calificación
      scope.success = false;
      scope.failure = false;
      scope.wrongAnswer = false;

      // Template Configuration
      // --------------------------------------------------------------------
      $itemsTemplate = '<div ng-repeat="item in items" class="item" ng-show="item._showIf_" data-drag="true" data-jqyoui-options="{ revert: \'invalid\' }" ng-model="items"\n     jqyoui-draggable="{index: {{$index}} }">\n</div>\n'
      $itemsTemplate = $itemsTemplate.replace('_showIf_', opt.showIf);
      $itemsTemplate = angular.element($itemsTemplate);
      $itemsTemplate.append(iTemplate);

      $targetsTemplate = '<div class="targets">\n    <div class="target" ng-repeat="target in targets" data-drop="! target.completed" ng-model="target.model" jqyoui-droppable="{ onDrop: \'dropCallback(target)\' }"></div>\n</div>\n';
      $targetsTemplate = angular.element($targetsTemplate);
      $targetsTemplate.find('.target').append($compile(tTemplate)(scope));

      element.find('.items').append($compile($itemsTemplate)(scope));
      element.find('.targets-container').append($compile($targetsTemplate)(scope));


      // Callback
      // --------------------------------------------------------------------
      scope.dropCallback = function (event, ui, target) {
        var completedTargets = 0;

        // Revisamos el target utilizando la función personalizada
        if(opt.pass(target.model)) {
          // Respuesta correcta
          target.completed = true;
          rightAnswers += 1;
        } else {
          // Respuesta incorrecta: Devuelve a su posición inicial
          scope.items.push(target.model); // Devuelve a los items
          target.model = {}; // limpia el interno
          scope.wrongAnswer = Math.random();
        }

        chances -= 1;

        // Fin de la actividad
        completedTargets = scope.targets.filter(function (t) {
          return t.completed;
        }).length;

        if(completedTargets === scope.targets.length || chances === 0) {
          if(rightAnswers >= minRightAnswers) {
            scope.$root.isNextEnabled = true;
            scope.success = true;
          } else {
            scope.failure = true;
          }
        }
      };


    }
  };
});

var lizDropImageSample = angular.module('lizDropImageSample', []);

// Knockout Pairs Factory
lizDropImageSample.factory('dropImageSampleActivity', function ($rootScope, shuffleArrayFactory) {

	var dropImageSampleActivity = {};

	/**
	 * Crea el ViewModel
	 */
	dropImageSampleActivity.create = function (options) {
		return new dropImageSampleActivity._ViewModel(options);
	}

	/**
	 * Genera el ViewModel de las parejas con sus funcionalidades
	 *
	 * Recibe un objeto con las siguientes propiedades
	 *
	 * @param {object}		opt						Opciones a utilizar.
	 *
	 *	target: Permite darle un orden apropiado a los targets. Debe empezar desde 0 y la propiedad opt.randomTargets debe estar desactivada
	 *
	 * @param {integer}		opt.chances				Número de posibilidades que tiene el usuario de hacer la actividad
	 * @param {integer}		opt.minRightAnswers		Número mínimo de respuestas correctas
	 * @param {function}	opt.successCallback		Función que se llama cuando se termina la actividad de forma satisfactoria
	 * @param {function}	opt.rightAnswerCallback	Función que se llama cuando la respuesta es correcta
	 *
	 */
	dropImageSampleActivity._ViewModel = function (opt) {
		var self = this;

		// Inicializa las opciones
		var	minRightAnswers = opt.minRightAnswers ? opt.minRightAnswers : opt.targets.length,
		chances = opt.chances ? opt.chances : opt.targets.length;

		self.items = ko.observableArray(shuffleArrayFactory.run(opt.targets)); // Elementos a lanzar 

		// Agregamos una propiedad _index a cada uno de los items para poder organizarlos de forma absoluta
		for(var i=0; i < self.items().length; i++){
			self.items()[i]._id = i;

			// extension de la imagen
			self.items()[i].extension = self.items()[i].hasOwnProperty('extension') ?  self.items()[i].extension : 'png' ;
		}

		self.targets = ko.observableArray(self.items().slice(0)); // copia a los targets, donde caerán los elementos

		self.canvas = opt.canvas;
		self.canvasAlt = opt.canvasAlt;

		self.sample = typeof opt.sample !== 'undefined' ? opt.sample : false;
		self.sampleAlt = typeof opt.sampleAlt !== 'undefined' ? opt.sampleAlt : false;

		// audio
		self.audio = ko.observable(opt.audio);

		self.itemsContainerHeight = opt.itemsContainerHeight; // Para darle un tamaño fijo al contenedor de items y no quede vacío

		// Carpeta de recursos desde angular
		self.resources = $rootScope.resources;

		self.maximumElements = 1; // IMPORTANTE: Requerido para que los sortables no acepten más de un elemento
		self.rightAnswers = 0; // Inicializamos el número de respuestas buenas a 0

		// Triggers que se activan cuando la respuesta es correcta/incorrecta
		self.rightAnswer = ko.observable();
		self.wrongAnswer = ko.observable();

		// Triggers cuando la actividad termina satisfactoria y/o insatisfactoriamente
		self.failure = ko.observable(false);
		self.success = ko.observable(false);

		ko.utils.arrayForEach(self.targets(), function(target){
			target.sortable = ko.observableArray(); // Donde caen los elementos
			target.sortable._id = target._id; // Id de comparación
		});

		/**
		 * Reproduce el audio de la instrucción.
		 */
		self.playAudio = function () {
			$('#audio-instruction')[0].play();
		};

		// Define si el target esta lleno utilizando self.maximumElements
		self.isContainerFull = function (parent) {
			return parent().length < self.maximumElements;
		};

		// Función que se ejecuta cuando se suelta el elemento y hace toda la funcionalidad
		self.verifyAnswer = function (arg) {
			var parent = arg.targetParent,
			item = arg.item;


			// Compara el _id para encontrar la pareja idéntica. Si es igual, la respuesta es correcta
			if(parent._id === item.sortable._id){

				// RESPUESTA CORRECTA
				self.rightAnswers++;
				self.rightAnswer(item);

				// Si se definió una función cuando la respuesta es correcta, se corre
				if(typeof opt.rightAnswerCallback !== "undefined" ) opt.rightAnswerCallback(item);

			} else {

				// RESPUESTA INCORRECTA
				self.wrongAnswer(item);
				arg.cancelDrop = true;
			}

			// Reducimos en 1 las posibilidades
			chances--;

			// La actividad termina cuando el número de posibilidades se termina
			if(chances === 0 || self.rightAnswers === self.targets().length) {
				// Si el número de respuestas correctas es mayor o igual al requerido inicialmente
				if(self.rightAnswers >= minRightAnswers) {
					self.success(true); // Trigger de éxito

					// Se llama la función de éxito, definida por el desarrollador
					if (typeof opt.successCallback !== "undefined") opt.successCallback();

					$rootScope.isNextEnabled = true; // Activamos el siguiente
				} else {
					self.failure(true); // Trigger de fracaso
				}
			}
		};

		/**
		 * Devuelve los estilos de los elementos
		 */
		self.getItemStyles = function (item) {
			var styles = '';

			styles += "width: " + (100 / self.targets().length) + "%;";
			styles += "left: " + ((100 / self.targets().length) * item._id) + "%;";

			return styles;
		};

		/**
		 * Devuelve los estilos de los targets
		 */
		self.getTargetStyles = function (target) {
			var styles = '',
				pos = target.targetPos;

			styles += "width: " + pos.w + "%;";
			styles += "height: " + pos.h + "%;";
			styles += "top: " + pos.t + "%;";
			styles += "left: " + pos.l + "%;";

			return styles;
		};

		/**
		 * Devuelve los estilos de los targets
		 */
		self.getTargetInnerStyles = function (target) {
			var styles = '',
				pos = target.innerPos;

			styles += "width: " + pos.w + "%;";
			styles += "height: " + pos.h + "%;";

			// Usamos margin, debido a que el padre mide 0x0
			styles += "margin-top: " + pos.t + "%;"; 
			styles += "margin-left: " + pos.l + "%;";

			return styles;
		};


	};

	/**
	 * Inicializa la instancia del ViewModel creado con dropImageSampleActivity.create
	 *
	 * @param {object} instance Intancia del VM de knockout
	 */
	dropImageSampleActivity.run = function (instance) {
		ko.cleanNode($('#main-container')[0]);
		ko.bindingHandlers.sortable.beforeMove = instance.verifyAnswer;
		ko.applyBindings(instance, $('#main-container')[0]);
	};

	return dropImageSampleActivity;

});

lizDropImageSample.directive('dropImageSample', function  (dropImageSampleActivity) {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			audio: '@',
			description: '@'
		},
		templateUrl: '../views/activities/drop_image_sample.html',
		link: function postLink(scope, element, attrs) {
			// Añadimos el audio a options
			scope.options.audio = typeof scope.audio !== "undefined" ? scope.audio : false;

			// Corremos la aplicación
			var vm = dropImageSampleActivity.create(scope.options);
			dropImageSampleActivity.run(vm);
		}
	}; 
});

var lizDropOut = angular.module('lizDropOut', []);

lizDropOut.factory('dropOutActivity', function ($rootScope) {
    
	var dropOutActivity = {};

	/**
	 * Crea el ViewModel
	 */
	dropOutActivity.create = function (options) {
		return new dropOutActivity._ViewModel(options);
	}

    /**
     * Genera el ViewModel de las parejas con sus funcionalidades
     *
     * Recibe un objeto con las siguientes propiedades
     *
     * @param {object}		options						Opciones a utilizar.
     *
     * @param {integer}		options.chances				Número de posibilidades que tiene el usuario de hacer la actividad
     * @param {integer}		options.minRightAnswers		Número mínimo de respuestas correctas
     * @param {function}	options.successCallback		Función que se llama cuando se termina la actividad de forma satisfactoria
     * @param {function}	options.rightAnswerCallback	Función que se llama cuando la respuesta es correcta
     *
      */
    dropOutActivity._ViewModel = function (options) {
        var self = this;

        // Variables para sortables
        self.items = ko.observableArray(options.items);
        self.outside = ko.observableArray();

		ko.utils.arrayForEach(self.items(), function (item) {
			if(! item.hasOwnProperty('answer')) item.answer = true;
		});

        // Ruta a la carpeta de imágenes
        self.resources = $rootScope.resources;

		// Disparador de preguntas correctas/incorrectas
        self.rightAnswer = ko.observable();
        self.wrongAnswer = ko.observable();

        self.success = ko.observable(false);
        self.failure = ko.observable(false);

        self.rightAnswers = 0;

        self.chances = options.chances ? options.chances : options.items.length;

        /**
         * Obtiene los estilos de cada elemento
         */
		self.getStyles = function (item) {
			var styles = '';

			styles += 'width: ' + item.w + '%;';
			styles += 'height: ' + item.h + '%;';
			styles += 'top: ' + item.t + '%;';
			styles += 'left: ' + item.l + '%;';

        	return styles;
        }

		/**
		 *	Función que se ejecuta al soltar el objeto dentro del contenedor
		 */
        self.verifyAnswer = function (arg) {

            // No hacer nada y salir de la función, si el elemento se soltó en el mismo grupo inicial
            if(arg.sourceParent() == arg.targetParent()) return;

            // Calculamos si la respuesta es correcta o no usando la propiedad 'answer'
            if (arg.item.answer) {
                // Respuesta correcta
                self.rightAnswer(arg.item);
                self.rightAnswers++;

                // Llama a la función de respuesta buena
				if (typeof options.rightAnswerCallback !== "undefined") options.rightAnswerCallback();

            } else {
                // Respuesta Incorrecta
                self.wrongAnswer(arg.item);
                arg.cancelDrop = true; // Devuelve el elemento a su posición origina
            }

            // Reducimos las posibilidades
            self.chances--;

            // Fin de la actividad
            if (self.chances === 0) {
                if(self.rightAnswers >= options.minRightAnswers) {
                    // éxito
                    self.success(true);

                    // Llama a la función de éxito
                    if (typeof options.successCallback !== "undefined") options.successCallback();

                    // Activamos la siguiente ruta
					$rootScope.isNextEnabled = true;
                } else {
                    // Fracaso
                    self.failure(true);
                }
            }
        };

    };

	/**
	 * Inicializa la instancia del ViewModel creado con dropOutActivity.create
	 *
	 * @param {object} instance Intancia del VM de knockout
	 */
    dropOutActivity.run = function (instance) {
    	ko.cleanNode($('#main-container')[0]);
		ko.bindingHandlers.sortable.beforeMove = instance.verifyAnswer;
		ko.applyBindings(instance, $('#main-container')[0]);
    };

	return dropOutActivity;
});

lizDropOut.directive('dropOut', function  (dropOutActivity) {
    return {
        restrict: 'E',
		scope: {
			options: '=',
			description: '@'
		},
        templateUrl: '../views/activities/drop_out.html',
		link: function postLink(scope, element, attrs) {
			dropOutActivity.run(dropOutActivity.create(scope.options));
        }
    }; 
});


var lizGiraffe = angular.module('lizGiraffe', ['factories']);

lizGiraffe.directive('giraffe', function  (shuffleArrayFactory) {
	return {
		restrict: 'E',
		scope: {
			audio: '@',
			description: '@'
		},
		templateUrl: '../views/activities/giraffe.html',
		link: function postLink(scope, element, attrs) {

			// Vamos contando el número de respuestas incorrectas
			// Con el fin de tener una forma de reiniciar la tabla
			var wrongAnswers = 0; 

			scope.number = 0; // Número que se multiplica con el valor actual de la tabla
			scope.balloons = []; // Posibles respuestas
			scope.answers = []; // Array de respuestas. Usado para mostrar cuantas respuestas lleva

			// Si existe la sesión, se asigna a table
			if(sessionStorage.getItem('table')){
				scope.table = sessionStorage.getItem('table');
			} else {
				scope.table = 2; // Tabla actual
			}

			// Calificaciones
			scope.success = false;
			scope.failure = false;
			scope.rightAnswer = false;

			// Guardamos el número usando sessionStorage
			sessionStorage.setItem('table', scope.table);

			/**
			 * Genera la nueva operación.
			 */
			scope.generateOperation = function () {
				var balloonSeed = 0; // Usado para alimentar el array balloons

				scope.balloons.length = 0; // Reinicia el array

				// Fin de la actividad
				if(scope.number === 9 && scope.table === 9){
					scope.$root.isNextEnabled = true;
					scope.success = true;

					// Removemos el elemento de sessionStorage
					sessionStorage.removeItem('table'); // Actualiza sessionStorage
				}

				// Cuando llegue a ser 9, se reinicia a 0 y se cambia de tabla
				if(scope.number === 9){
					scope.rightAnswer = Math.random(); // Dispara el ícono de respuesta correcta
					scope.number = 0;
					scope.table++;
					wrongAnswers = 0; 
					sessionStorage.setItem('table', scope.table); // Actualiza sessionStorage

					// Reinicia las respuestas
					scope.answers.length = 0;
				}

				// Aumentamos el número en 1
				scope.number++;

				// Generamos inicialmente la respuesta y la añadimos
				scope.balloons.push({
					number: scope.table * scope.number
				});

				// Luego, añadimos otros 6 elementos, generados aleatoriamente
				for(var i = 0; i < 6; i++){
					// Generamos números, teniendo en cuenta que el número no puede
					// ser igual a la respuesta
					do{
						balloonSeed = Math.floor( Math.random() * (100 - 2) + 2 );
					} while(balloonSeed === scope.balloons[0].number);

					// Añadimos el elemento
					scope.balloons.push({ number: balloonSeed });
				}

				// Después, se baraja el array
				shuffleArrayFactory.run(scope.balloons);
				
			};

			// Generamos el primer valor a mostrar
			scope.generateOperation();

			/**
			 * Verifica la operación
			 */
			scope.verify = function (balloon) {

				if(balloon.number === scope.number * scope.table){
					// Respuesta Correcta
					scope.answers.push({
						right: true
					});
				} else {
					// Respuesta Incorrecta
					wrongAnswers++;

					scope.answers.push({
						right: false
					});
				}

				// Si tiene al menos 4 respuestas incorrectas, reinicia la actividad
				if(wrongAnswers === 4){
					scope.failure = true;
				}

				// Al final de la verificación, se genera nuevamente la operación
				scope.generateOperation();
			};

		}
	}; 
});

var lizGreaterLowerMat = angular.module('lizGreaterLowerMat', ['factories']);

lizGreaterLowerMat.factory('greaterLowerMatActivity', function ($rootScope, shuffleArrayFactory) {

	var greaterLowerMatActivity = {};

	/**
	 * Crea el ViewModel
	 */
	greaterLowerMatActivity.create = function (options) {
		return new greaterLowerMatActivity._ViewModel(options);
	};

	greaterLowerMatActivity._ViewModel = function (options) {
		var self = this,
			opt = options, // Alias de options
			newPair = {}, // Variable auxiliar para alimentar a self.numbers
			chances = opt.hasOwnProperty('chances') ? opt.chances : opt.numbers.length,
			minRightAnswers = opt.minRightAnswers;
		


		self.playAudio = function () {
			$('#audio-instruction')[0].play();
		};

		// Contantes para comparar
		var GREATER = 1,
			LOWER = 2;

		// Parejas de números
		self.numbers = ko.observableArray([]);

		// Símbolos a arrastrar
		self.greaterSymbol = ko.observable({ id: GREATER, symbol: 'Contando: 4, 6, 8;' });
		self.lowerSymbol = ko.observable({ id: LOWER, symbol: 'Contando: 4, 6, 8;' });

		// Constructor de las parejas de números
		opt.numbers.forEach(function(number){
			newPair = {
				sortable: ko.observableArray([]),
				left: number[0],
				right: number[1]
			};

			newPair.sortable.id = (number[0] > number[1]) ? GREATER : LOWER// tomamos en cuenta solamente si left es mayor a right
			self.numbers.push(newPair); // Añadimos al array
		});

		// Carpeta de recursos desde angular
		self.resources = $rootScope.resources;

		self.maximumElements = 1; // IMPORTANTE: Requerido para que los sortables no acepten más de un elemento
		self.rightAnswers = 0; // Inicializamos el número de respuestas buenas a 0

		// Triggers que se activan cuando la respuesta es correcta/incorrecta
		self.rightAnswer = ko.observable();
		self.wrongAnswer = ko.observable();

		// Triggers cuando la actividad termina satisfactoria y/o insatisfactoriamente
		self.failure = ko.observable(false);
		self.success = ko.observable(false);

		// Define si el target esta lleno utilizando self.maximumElements
		self.isContainerFull = function (parent) {
			return parent().length < self.maximumElements;
		};
          

         

		// Función que se ejecuta cuando se suelta el elemento y hace toda la funcionalidad
		self.verifyAnswer = function (arg) {
			var parent = arg.targetParent,
			item = arg.item;

			if(parent.id === item.id){
				// RESPUESTA CORRECTA
				self.rightAnswers++;
				self.rightAnswer(item);

				// Si se definió una función cuando la respuesta es correcta, se corre
				if(typeof opt.rightAnswerCallback !== "undefined" ) opt.rightAnswerCallback(item);
			} else {
				// RESPUESTA INCORRECTA
				self.wrongAnswer(item);
			}

			// Reducimos en 1 las posibilidades
			chances--;

			// La actividad termina cuando el número de posibilidades se termina
			if(chances === 0) {
				// Si el número de respuestas correctas es mayor o igual al requerido inicialmente
				if(self.rightAnswers >= minRightAnswers) {
					self.success(true); // Trigger de éxito

					// Se llama la función de éxito, definida por el desarrollador
					if (typeof opt.successCallback !== "undefined") opt.successCallback();

					$rootScope.isNextEnabled = true; // Activamos el siguiente
				} else {
					self.failure(true); // Trigger de fracaso
				}
			}

		};

	};

	/**
	 * Inicializa la instancia del ViewModel creado con greaterLowerThanActivity.create
	 *
	 * @param {object} instance Intancia del VM de knockout
	 */
	greaterLowerMatActivity.run = function (instance) {
		ko.cleanNode($('#main-container')[0]);
		ko.bindingHandlers.sortable.beforeMove = instance.verifyAnswer;
		ko.applyBindings(instance, $('#main-container')[0]);
	};

	return greaterLowerMatActivity;

});

lizGreaterLowerMat.directive('greaterLowerMat', function  (greaterLowerMatActivity) {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			description: '@',
			img: '@',
			alt: '@',
			audio:'@',
			theme: '@'

		},
		templateUrl: '../views/activities/greater_lower_mat.html',
		link: function postLink(scope, element, attrs) {
			// Corremos la aplicación
			var vm = greaterLowerMatActivity.create(scope.options);
			greaterLowerMatActivity.run(vm);

			attrs.$observe( 'theme', function(val) {
				if ( !angular.isDefined( val ) ) {
					scope.theme = 'default';
				}
			});
		}
	}; 
});

var lizGreaterLowerThan = angular.module('lizGreaterLowerThan', ['factories']);

lizGreaterLowerThan.factory('greaterLowerThanActivity', function ($rootScope, shuffleArrayFactory) {

	var greaterLowerThanActivity = {};

	/**
	 * Crea el ViewModel
	 */
	greaterLowerThanActivity.create = function (options) {
		return new greaterLowerThanActivity._ViewModel(options);
	};

	greaterLowerThanActivity._ViewModel = function (options) {
		var self = this,
			opt = options, // Alias de options
			newPair = {}, // Variable auxiliar para alimentar a self.numbers
			chances = opt.hasOwnProperty('chances') ? opt.chances : opt.numbers.length,
			minRightAnswers = opt.minRightAnswers;

		self.playAudio = function () {
			$('#audio-instruction')[0].play();
		};

		// Contantes para comparar
		var GREATER = 1,
			LOWER = 2;

		// Parejas de números
		self.numbers = ko.observableArray([]);

		// Símbolos a arrastrar
		self.greaterSymbol = ko.observable({ id: GREATER, symbol: '&gt;' });
		self.lowerSymbol = ko.observable({ id: LOWER, symbol: '&lt;' });

		// Constructor de las parejas de números
		opt.numbers.forEach(function(number){
			newPair = {
				sortable: ko.observableArray([]),
				left: number[0],
				right: number[1]
			};

			newPair.sortable.id = (number[0] > number[1]) ? GREATER : LOWER// tomamos en cuenta solamente si left es mayor a right
			self.numbers.push(newPair); // Añadimos al array
		});

		// Carpeta de recursos desde angular
		self.resources = $rootScope.resources;

		self.maximumElements = 1; // IMPORTANTE: Requerido para que los sortables no acepten más de un elemento
		self.rightAnswers = 0; // Inicializamos el número de respuestas buenas a 0

		// Triggers que se activan cuando la respuesta es correcta/incorrecta
		self.rightAnswer = ko.observable();
		self.wrongAnswer = ko.observable();

		// Triggers cuando la actividad termina satisfactoria y/o insatisfactoriamente
		self.failure = ko.observable(false);
		self.success = ko.observable(false);

		// Define si el target esta lleno utilizando self.maximumElements
		self.isContainerFull = function (parent) {
			return parent().length < self.maximumElements;
		};


		// Función que se ejecuta cuando se suelta el elemento y hace toda la funcionalidad
		self.verifyAnswer = function (arg) {
			var parent = arg.targetParent,
			item = arg.item;

			if(parent.id === item.id){
				// RESPUESTA CORRECTA
				self.rightAnswers++;
				self.rightAnswer(item);

				// Si se definió una función cuando la respuesta es correcta, se corre
				if(typeof opt.rightAnswerCallback !== "undefined" ) opt.rightAnswerCallback(item);
			} else {
				// RESPUESTA INCORRECTA
				self.wrongAnswer(item);
			}

			// Reducimos en 1 las posibilidades
			chances--;

			// La actividad termina cuando el número de posibilidades se termina
			if(chances === 0) {
				// Si el número de respuestas correctas es mayor o igual al requerido inicialmente
				if(self.rightAnswers >= minRightAnswers) {
					self.success(true); // Trigger de éxito

					// Se llama la función de éxito, definida por el desarrollador
					if (typeof opt.successCallback !== "undefined") opt.successCallback();

					$rootScope.isNextEnabled = true; // Activamos el siguiente
				} else {
					self.failure(true); // Trigger de fracaso
				}
			}

		};

	};

	/**
	 * Inicializa la instancia del ViewModel creado con greaterLowerThanActivity.create
	 *
	 * @param {object} instance Intancia del VM de knockout
	 */
	greaterLowerThanActivity.run = function (instance) {
		ko.cleanNode($('#main-container')[0]);
		ko.bindingHandlers.sortable.beforeMove = instance.verifyAnswer;
		ko.applyBindings(instance, $('#main-container')[0]);
	};

	return greaterLowerThanActivity;

});

lizGreaterLowerThan.directive('greaterLowerThan', function  (greaterLowerThanActivity) {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			description: '@',
			audio: '@'
		},
		templateUrl: '../views/activities/greater_lower_than.html',
		link: function postLink(scope, element, attrs) {
			// Corremos la aplicación
			var vm = greaterLowerThanActivity.create(scope.options);
			greaterLowerThanActivity.run(vm);
		}
	}; 
});

var lizGroupChoiceWords = angular.module('lizGroupChoiceWords', []);

lizGroupChoiceWords.directive('groupChoiceWords', function  (shuffleArrayFactory) {
    return {
        restrict: 'E',
        templateUrl: '../views/activities/group_choice_words.html',
		scope: {
			options: '=',
			description: '@',
			audio:'@',
			titleBlock: '@',
			blockText: '@',
			style: '@',
			mainimg: '@',
			titletop:'@'
		},

		link: function (scope, element, attrs) {
			// Corremos la aplicación
			scope.items = scope.options.items;
			scope.examples = scope.options.examples;
			scope.itemsrow = scope.options.itemsrow;
			scope.pattern = scope.items.pattern;
			scope.customClass = (scope.options.customClass) ? scope.options.customClass : "";
			scope.words = [];
			minRightAnswers = scope.options.minRightAnswers
			rightAnswers = 0, // Contador de preguntas buenas
			chances = scope.options.chances,
			scope.success = false;
			scope.failure = false;
			scope.block = false;
			random = scope.options.hasOwnProperty('random') ? scope.options.random : true; // Verdadero por defecto


			var items = scope.items;

		   // Constructor de palabras
		   for(var j=0; j < items.length; j++){

		   	var string = items[j].text;
			var words = string.split(" ");

			scope.items[j].words = [];
			
				
				for(var i=0; i < words.length; i++){

					if( scope.items[j].pattern.indexOf(i) > -1 ){
							
							if(random) shuffleArrayFactory.run(scope.items[j]["answers"+i]); // baraja
							scope.items[j]["answers"+i].unshift({
						          	text: "Elige una respuesta",
						          	default: true
							      });
							scope.items[j].words.push({
								  isInput: true,
							      chances: 2,
							      answers: scope.items[j]["answers"+i],
							      rightAnswer: scope.items[j]["answers"+i].filter(function (answer) {
							          return answer.answer;
						          })[0],
						          selectedAnswer: scope.items[j]["answers"+i][0] // elige la primera, en este caso, "elige una respuesta"
					      	});	
					      	 if(scope.items[j].hasOwnProperty('default')){
					      	 	item =  scope.items[j].words[i];
					      	 	  scope.rightAnswer = Math.random();
						          rightAnswers += 1;
						          item.right = true
						          item.wrong = false
						          item.completed = true;
						          item.selectedAnswer = item.rightAnswer;
						      }

					}else{
						scope.items[j].words.push({
								 isInput: false,
							     word: (words[i])
						});
					}

				}

			}


		/**
		 * Verifica si el input cumple con las condiciones del número 
		 */
		scope.verify = function (item,q) {
	        if(item.selectedAnswer.default) return; // Es "Elige una respuesta"

	        if(item.selectedAnswer.answer) {
	          scope.rightAnswer = Math.random();
	          rightAnswers += 1;
	          item.right = true
	          item.wrong = false
	          item.completed = true;
	        } else {
	          scope.wrongAnswer = Math.random();
	          item.chances -= 1;
	          item.right = false
	          item.wrong = true
	          if(item.chances === 0) {item.completed = true;q.callback = item.rightAnswer.text;}
	        }

	        // Contamos los elementos terminados
	        var questions = 0
	        var completedItems = 0
	        scope.items.forEach(function(q) {
			   q.words.forEach(function(w) {
			   		if(w.hasOwnProperty('answers')){
	        			questions ++
	          		};
			    	if(w.hasOwnProperty('completed')){
	        			completedItems ++
	          		};
				});
			});
	        
	        if(completedItems === questions) {
	          if(rightAnswers >= minRightAnswers) {
		          scope.$root.isNextEnabled = true;
		          scope.success = true;
		          return true;
		        }

		        scope.failure = true;
		        return false;
	        }
     	};



		}


    }; 
});


var lizGroupClassifyTable = angular.module('lizGroupClassifyTable', []);

lizGroupClassifyTable.directive('groupClassifyTable', function  () {
    return {
        restrict: 'E',
        templateUrl: '../views/activities/group_classify_table.html',
		scope: {
			options: '=',
			description: '@',
			audio:'@',
			titleBlock: '@',
			blockText: '@',
			mainimg: '@'
		},

		link: function (scope, element, attrs) {
			// Corremos la aplicación
			scope.items = scope.options.items;
			scope.list = scope.options.list;
			scope.words = [];
			scope.wordIn = false;
			scope.count = false;
			minRightAnswers = scope.options.minRightAnswers
			rightAnswers = 0, // Contador de preguntas buenas
			chances = scope.options.chances,
			scope.itemsStyle = scope.options.itemsStyle;
			scope.success = false;
			scope.failure = false;
			scope.block = false;

			

			var items = scope.items;

		   // Constructor de palabras
		   for(var j=0; j < items.length; j++){

			   	var string = items[j].text;
				var words = string.split(" ");

				scope.items[j].words = [];

			
				
				for(var i=0; i < words.length; i++){

							scope.items[j].words.push({
								  isInput: true,
							      input: '',
							      word: (words[i]),
							});
				}

			}

			/**
			 * Verifica si el input cumple con las condiciones del número 
			 */
			
			scope.verify = function (item,word,pattern,items) {
				var chancesPerItem = 1
				if(word.wrong === true){chancesPerItem = 0}
				
					// Recorremos el grupo y sus items
			        pattern.forEach(function (wordx) {
			        	
			        	if(item === wordx.input && item != ''){
			        		scope.count ++
		          		}				      
					  
			        });			     

			      	if(scope.count >= 2){
	          			scope.wordIn = true
	          			scope.count = 0
	          		}else{scope.wordIn = false;scope.count = 0}

				if(item === '' || scope.wordIn === true) return; 
				
				// Verificamos la respuesta. Añadimos una propiedad right o wrong para definir si el item es correcto o no
				for(var i=0; i < pattern.length; i++){
					if( item.indexOf(pattern[i].word) > -1 ){
						rightAnswers++;
						chances--;
						word.wrong = false;
						word.right = true;
						word.completed = true; // marcamos el item como completo, para desactivar el input
						break
					} else {
						
						if(items.hasOwnProperty('answer2')){
							if(item === items.answer2){
								chances--;
								word.wrong = false;
								word.right = true;
								word.completed = true; // marcamos el item como completo, para desactivar el input
								break
							}else{
							       	word.right = false;
									word.wrong = true;
	                    		}
						}else {
						
							word.right = false;
							word.wrong = true;
                    	}
					}

				}
					
					if(word.wrong === true && chancesPerItem === 0){
						word.completed = true; // marcamos el item como completo, para desactivar el input
						chancesPerItem = 1
						chances--;
						item ="";
					}else{chancesPerItem = 0 ;}

					// fin de la actividad
					if(chances === 0){
						if(rightAnswers >= minRightAnswers){
							scope.$root.isNextEnabled = true;
							scope.success = true;
						} else {
							scope.failure = true;
						}
					} 
					
			}; // verify()



		}


    }; 
});


var lizGroupCompleteFreeConditions = angular.module('lizGroupCompleteFreeConditions', []);

lizGroupCompleteFreeConditions.directive('groupCompleteFreeConditions', function  () {
    return {
        restrict: 'E',
        templateUrl: '../views/activities/group_complete_free_conditions.html',
		scope: {
			options: '=',
			description: '@',
			audio:'@',
			addicon: '@',
			instruction: '@'


		},

		link: function (scope, element, attrs) {
			// Corremos la aplicación
			scope.items = scope.options.items;
			scope.examples = scope.options.examples;
			scope.pattern = scope.items.pattern;
			scope.success = false;
			scope.failure = false;
			/**
			 * Para obtener los estilos de los elementos, específicamente el ancho
			 */
			scope.getStyles = function function_name(argument) {
				var styles = "";

				if(scope.itemsPerRow){
					styles += "width: " + (100 / scope.itemsPerRow) + "%;";
					styles += "margin-left: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-top: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-right: " + (10 / scope.itemsPerRow) + "%!important;";
				} else {
					styles += "width: " + (100 / scope.items.length) + "%;";
					styles += "margin-left: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-top: " + (10 / scope.itemsPerRow) + "%;";
				}
				
				return styles;

				
			};

				
			/**
			 * Definimos nuestra función beforeGoNext para que muestre el cuadro de felicitaciones
			 */
			scope.$root.beforeGoNext = function () {
				scope.success = true;
				return true; 
			};
		   
			/**
			 * Verifica si el todos los inputs cumplen la longitud minima de caracteres 
			 */
			 
			scope.verify = function (item) {
				// Filtramos el array buscando los inputs que cumplen los requisitos y los contamos
				
			  
				   	var string = item.input;
					var words = string.split(" ");

					item.words = [];
					item.complete = [];
				
					
					for(var i=0; i < words.length; i++){

						if( item.pattern.indexOf(words[i]) > -1 ){
								item.words.push({
									  isInput: true,								      
								});
								

						} 

						else{
							
						}

					}

				


				// Si se han completado todos

				if ((item.words.length >= item.pattern.length || item.pattern[0] === "free" ) && item.input.length >= item.length) {

					/*item.complete.push({
									  complete: true,								      
								});*/
					item.wrong = false;
					item.right = true;
					var completedInputs = scope.items.filter(function(item){
						return item.right === true && item.input.length >= item.length;
					}).length;

					// Si se han completado todos
						if (completedInputs === scope.items.length) {
							scope.$root.isNextEnabled = true; // Activamos el siguiente vínculo
						} else {
							scope.$root.isNextEnabled = false; // Desactivamos el siguiente vínculo
						}	
				}else{
							if(item.right === true){
							item.right = false;
							item.wrong = true;}
							var completedInputs = scope.items.filter(function(item){
							return item.right === true && item.input.length >= item.length;
							}).length;

							// Si se han completado todos
								if (completedInputs === scope.items.length) {
									scope.$root.isNextEnabled = true; // Activamos el siguiente vínculo
								} else {
									scope.$root.isNextEnabled = false; // Desactivamos el siguiente vínculo
								}	
						}	

			}; // verify()

		}


    }; 
});


var lizGroupCompleteImages = angular.module('lizGroupCompleteImages', []);

lizGroupCompleteImages.directive('groupCompleteImages', function  () {
    return {
        restrict: 'E',
        templateUrl: '../views/activities/group_complete_images.html',
		scope: {
			options: '=',
			description: '@',
			audio:'@',
			titleBlock: '@',
			blockText: '@',
			mainimg: '@'
		},

		link: function (scope, element, attrs) {
			// Corremos la aplicación
			scope.items = scope.options.items;
			scope.itemsPerRow = scope.options.itemsPerRow;
			scope.pattern = scope.items.pattern;
			scope.images = scope.items.images;
			scope.words = [];
			minRightAnswers = scope.options.minRightAnswers
			rightAnswers = 0, // Contador de preguntas buenas
			chances = scope.options.chances,
			scope.success = false;
			scope.failure = false;
			scope.block = false;
			/**
			 * Para obtener los estilos de los elementos, específicamente el ancho
			 */
			scope.getStyles = function function_name(argument) {
				var styles = "";

				if(scope.itemsPerRow){
					styles += "width: " + (100 / scope.itemsPerRow) + "%;";
					styles += "margin-left: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-top: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-right: " + (10 / scope.itemsPerRow) + "%!important;";
				} else {
					styles += "width: " + (100 / scope.items.length) + "%;";
					styles += "margin-left: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-top: " + (10 / scope.itemsPerRow) + "%;";
				}
				
				return styles;

				
			};

			var items = scope.items;

		   // Constructor de palabras
		   for(var j=0; j < items.length; j++){

		   	var x = -1
		   	var string = items[j].text;
			var words = string.split(" ");

			scope.items[j].words = [];

			
				
				for(var i=0; i < words.length; i++){
					if( scope.items[j].pattern.indexOf(i) > -1 ){
						x++
						console.log(x);
						if(scope.items[j].hasOwnProperty('answer2')){
							if(scope.items[j].answer2[x] !=''){
								scope.items[j].words.push({
									  isInput: true,
								      input: '',
								      word: (words[i]),
								      answer2: (scope.items[j].answer2[x]),
								      img: (scope.items[j].images[x])
								});
							}else{
							scope.items[j].words.push({
								  isInput: true,
							      input: '',
							      word: (words[i]),
							      img: (scope.items[j].images[x])
					      	});

						}

						}else{
							scope.items[j].words.push({
								  isInput: true,
							      input: '',
							      word: (words[i]),
							      img: (scope.items[j].images[x])
					      	});

						}

						console.log(scope.items[j].words);
					 

					} 

					else{
						scope.items[j].words.push({
								 isInput: false,
							     word: (words[i])
						});
					}

				}

			}

			/**
			 * Verifica si el input cumple con las condiciones del número 
			 */
			 var chancesPerItem = 1

			scope.verify = function (item) {
				if(item.input === '') return; 

				// Verificamos la respuesta. Añadimos una propiedad right o wrong para definir si el item es correcto o no
					if(item.input === item.word){
						rightAnswers++;
						chances--;
						item.wrong = false;
						item.right = true;
						item.completed = true; // marcamos el item como completo, para desactivar el input
					} else {
						
						if(item.hasOwnProperty('answer2')){
							
							if(item.input === item.answer2){
								rightAnswers++;
								chances--;
								item.wrong = false;
								item.right = true;
								item.completed = true; // marcamos el item como completo, para desactivar el input
							}else {
						
							item.wrong ? chancesPerItem = 0: chancesPerItem = 1;
							item.wrong = true;
							
									if(chancesPerItem === 0){
			                    	item.completed = true;
			                    	chances--;
			                    	chancesPerItem = 1;
			                    	}else{item.input="";}
                    	}

						}else {
						
							item.wrong ? chancesPerItem = 0: chancesPerItem = 1;
							item.wrong = true;
							
									if(chancesPerItem === 0){
			                    	item.completed = true;
			                    	chances--;
			                    	chancesPerItem = 1;
			                    	}else{item.input="";}
                    	}
					}

					
					

					// fin de la actividad
					if(chances === 0){
						if(rightAnswers >= minRightAnswers){
							scope.$root.isNextEnabled = true;
							scope.success = true;
						} else {
							scope.failure = true;
						}
					} 
					
			}; // verify()



		}


    }; 
});


var lizGroupCompleteLetters = angular.module('lizGroupCompleteLetters', []);

lizGroupCompleteLetters.directive('groupCompleteLetters', function  () {
    return {
        restrict: 'E',
        templateUrl: '../views/activities/group_complete_letters.html',
		scope: {
			options: '=',
			description: '@',
			audio:'@',
			titleBlock: '@',
			blockText: '@',
			mainimg: '@'
		},

		link: function (scope, element, attrs) {
			// Corremos la aplicación
			scope.items = scope.options.items;
			scope.itemsPerRow = scope.options.itemsPerRow;
			scope.chancesPerItem = scope.options.chancesPerItem ? scope.options.chancesPerItem : 1 ;
			scope.pattern = scope.items.pattern;
			scope.words = [];
			minRightAnswers = scope.options.minRightAnswers
			rightAnswers = 0, // Contador de preguntas buenas
			chances = scope.options.chances,
			scope.success = false;
			scope.failure = false;
			scope.block = false;

			/**
			 * Para obtener los estilos de los elementos, específicamente el ancho
			 */
			scope.getStyles = function function_name(argument) {
				var styles = "";

				if(scope.itemsPerRow){
					styles += "width: " + (96 / scope.itemsPerRow) + "%;";
					
				} 
				
				return styles;

				
			};

			
			var items = scope.items;

		   // Constructor de palabras
		   for(var j=0; j < items.length; j++){

		   	var string = items[j].text;
			var words = string.split(" ");

			scope.items[j].words = [];

			
				
				for(var i=0; i < words.length; i++){

					if( scope.items[j].pattern.indexOf(i) > -1 ){
						if(scope.items[j].hasOwnProperty('answer2')){
							scope.items[j].words.push({
								  isInput: true,
							      input: '',
							      word: (words[i]),
							      chances: (scope.chancesPerItem),
							      answer2: (scope.items[j].answer2)
							});
						}else{
							scope.items[j].words.push({
								  isInput: true,
							      input: '',
							      word: (words[i]),
							      chances: (scope.chancesPerItem)
					      	});

						}

					} 

					else{
						scope.items[j].words.push({
								 isInput: false,
							     word: (words[i])
						});
					}

				}

			}

			/**
			 * Verifica si el input cumple con las condiciones del número 
			 */
			 var chancesPerItem = 0

			scope.verify = function (item,group) {
				if(item.input === '') return; 

				// Verificamos la respuesta. Añadimos una propiedad right o wrong para definir si el item es correcto o no
					if(item.input === item.word){
						rightAnswers++;
						chances--;
						item.wrong = false;
						item.right = true;
						item.completed = true; // marcamos el item como completo, para desactivar el input
					} else {
						
						if(item.hasOwnProperty('answer2')){
							
							if(item.input === item.answer2){
								rightAnswers++;
								chances--;
								item.wrong = false;
								item.right = true;
								item.completed = true; // marcamos el item como completo, para desactivar el input
							}else {
								
							item.chances--
							item.wrong = true;
							
									if(item.chances === 0){
			                    	item.completed = true;
			                    	chances--;
			                    	chancesPerItem = 0;
			                    	group.feedback = typeof group.feedback !== "undefined" ? item.answer2 : group.feedback + ", " + item.answer2 ;
			                    	}else{item.input="";}
                    	}

						}else {
						
							item.chances--
							item.wrong = true;
							
									if(item.chances === 0){
			                    	item.completed = true;
			                    	chances--;
			                    	chancesPerItem = 0;
									group.feedback = typeof group.feedback === "undefined" ? item.word : group.feedback + ", " + item.word ;
			                    	}else{item.input="";}
                    	}
					}

					
					

					// fin de la actividad
					if(chances === 0){
						if(rightAnswers >= minRightAnswers){
							scope.$root.isNextEnabled = true;
							scope.success = true;
						} else {
							scope.failure = true;
						}
					} 
					
			}; // verify()



		}


    }; 
});


var lizGroupCompleteSound = angular.module('lizGroupCompleteSound', []);

lizGroupCompleteSound.directive('groupCompleteSound', function  () {
    return {
        restrict: 'E',
        templateUrl: '../views/activities/group_complete_sound.html',
		scope: {
			options: '=',
			description: '@',
			audio:'@',
			addicon:'@' 
		},

		link: function (scope, element, attrs) {
			// Corremos la aplicación
			scope.items = scope.options.items;
			scope.itemsPerRow = scope.options.itemsPerRow;
			scope.selectedItem = false; // elemento seleccionado
			scope.pattern = scope.items.pattern;
			scope.text = scope.items.text;
			minRightAnswers = scope.options.minRightAnswers;
			scope.nodisabled = scope.options.nodisabled;//desactiva el bloqueo del input
			rightAnswers = 0, // Contador de preguntas buenas
			chances = scope.options.chances,
			scope.success = false;
			scope.failure = false;
			scope.block = false;
			completedItems = 0;

			/**
			 * Para obtener los estilos de los elementos, específicamente el ancho
			 */
			scope.getStyles = function function_name(argument) {
				var styles = "";

				if(scope.itemsPerRow === 2){
					styles += "width: " + (98 / scope.itemsPerRow) + "%;";
				} 
				if (scope.itemsPerRow === 3) {
					styles += "width: " + (97 / scope.itemsPerRow) + "%;";
				}
				if (scope.itemsPerRow === 5) {
					styles += "width: " + (97 / scope.itemsPerRow) + "%;";
				}
				if (scope.itemsPerRow === 1) {
					styles += "width: " + (100 / scope.items.length) + "%;";
					/*styles += "margin-left: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-top: " + (10 / scope.itemsPerRow) + "%;";*/
				}
				
				return styles;

				
			};

			/**
			 * Para obtener los estilos de los elementos, específicamente el ancho
			 */
			scope.getStyles2 = function function_name(argument) {
				var styles = "";

				if(scope.itemsPerRow === 2){
					styles += "width: 22%";
				} 
				if (scope.itemsPerRow === 3) {
					styles += "width: 35%";
					/*styles += "margin-left: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-top: " + (10 / scope.itemsPerRow) + "%;";*/
				}
				if (scope.itemsPerRow === 5) {
					styles += "width: 35%";
					/*styles += "margin-left: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-top: " + (10 / scope.itemsPerRow) + "%;";*/
				}
				if (scope.itemsPerRow === 1) {
					styles += "width: " + (100 / scope.items.length) + "%;";
					/*styles += "margin-left: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-top: " + (10 / scope.itemsPerRow) + "%;";*/
				}
				
				return styles;

				
			};
			/*margin-top: -7%;
			left: 44%;*/

			/**
			 * Para obtener los estilos de los elementos, específicamente el ancho
			 */
			scope.getStyles3 = function function_name(argument) {
				var styles = "";

				if(scope.itemsPerRow === 2){
					styles += "width: 76%";
				}
				if (scope.itemsPerRow === 3) {
					styles += "width: 62%";
				}
				if (scope.itemsPerRow === 5) {
					styles += "width: 62%";
				}
				if (scope.itemsPerRow === 1) {
					styles += "width: " + (100 / scope.items.length) + "%;";
				}
				
				return styles;

				
			};
				
			/**
			 * Selecciona el elemento indicado
			 */
			scope.selectItem = function (item) {

				scope.selectedItem = item; // seleccionamos el objeto

				// Contamos los elementos completos
				if(!item.hasOwnProperty('isCompleted')){
					item.isCompleted = true; // marcamos el elemento, para no volver a seleccionarlo
					completedItems++;
				}

				// Fin de la actividad
				if(completedItems === scope.items.length){
		
				}
			};
		   
			/**
			 * Verifica si el input cumple con las condiciones del número 
			 */
			 var chancesPerItem = 1


			scope.verify = function (item) {
				
				if((item.input === '' ) || ! item.hasOwnProperty('input')) return; 

				
					if ( (item.input === item.text) || (item.text === "free" && item.input.length >= item.length) || ( item.hasOwnProperty('answer2') && item.input === item.answer2 && item.input.length >= item.length) ){						
							
							if(!item.completed){
								rightAnswers++;
								chances--;
							}
							item.wrong = false;
							item.right = true;
							item.completed = true; // marcamos el item como completo, para desactivar el input
							
					} 
					else {
								
							item.wrong ? chancesPerItem = 0: chancesPerItem = 1;
							item.wrong = true;
							
								if(chancesPerItem === 0){
		                    	item.input = "La respuesta correcta es: " + item.text;
		                    	item.completed = true;
		                    	chances--;
		                    	chancesPerItem = 1;
		                    	}
		                    	else{item.input ="";}

					}

					// fin de la actividad
					if(chances === 0){
						if(rightAnswers >= minRightAnswers){
							scope.$root.isNextEnabled = true;
							scope.success = true;
						} else {
							scope.failure = true;
						}
					} 					
			}; // verify()

		}


    }; 
});


var lizGroupCompleteSounds = angular.module('lizGroupCompleteSounds', []);

lizGroupCompleteSounds.directive('groupCompleteSounds', function  () {
    return {
        restrict: 'E',
        templateUrl: '../views/activities/group_complete_sounds.html',
		scope: {
			options: '=',
			description: '@',
			audio:'@',
			addicon:'@' 
		},

		link: function (scope, element, attrs) {
			// Corremos la aplicación
			scope.items = scope.options.items;
			scope.itemsPerRow = scope.options.itemsPerRow;
			scope.selectedItem = false; // elemento seleccionado
			scope.pattern = scope.items.pattern;
			scope.text = scope.items.text;
			minRightAnswers = scope.options.minRightAnswers;
			scope.nodisabled = scope.options.nodisabled;//desactiva el bloqueo del input
			rightAnswers = 0, // Contador de preguntas buenas
			chances = scope.options.chances,
			scope.success = false;
			scope.failure = false;
			scope.block = false;
			completedItems = 0;

			/**
			 * Para obtener los estilos de los elementos, específicamente el ancho
			 */
			scope.getStyles = function function_name(argument) {
				var styles = "";

				if(scope.itemsPerRow === 2){
					styles += "width: " + (98 / scope.itemsPerRow) + "%;";
				} 
				if (scope.itemsPerRow === 3) {
					styles += "width: " + (97 / scope.itemsPerRow) + "%;";
				}
				if (scope.itemsPerRow === 5) {
					styles += "width: " + (97 / scope.itemsPerRow) + "%;";
				}
				if (scope.itemsPerRow === 1) {
					styles += "width: " + (100 / scope.items.length) + "%;";
					/*styles += "margin-left: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-top: " + (10 / scope.itemsPerRow) + "%;";*/
				}
				
				return styles;

				
			};

			/**
			 * Para obtener los estilos de los elementos, específicamente el ancho
			 */
			scope.getStyles2 = function function_name(argument) {
				var styles = "";

				if(scope.itemsPerRow === 2){
					styles += "width: 22%";
				} 
				if (scope.itemsPerRow === 3) {
					styles += "width: 35%";
					/*styles += "margin-left: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-top: " + (10 / scope.itemsPerRow) + "%;";*/
				}
				if (scope.itemsPerRow === 5) {
					styles += "width: 35%";
					/*styles += "margin-left: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-top: " + (10 / scope.itemsPerRow) + "%;";*/
				}
				if (scope.itemsPerRow === 1) {
					styles += "width: " + (100 / scope.items.length) + "%;";
					/*styles += "margin-left: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-top: " + (10 / scope.itemsPerRow) + "%;";*/
				}
				
				return styles;

				
			};
			/*margin-top: -7%;
			left: 44%;*/

			/**
			 * Para obtener los estilos de los elementos, específicamente el ancho
			 */
			scope.getStyles3 = function function_name(argument) {
				var styles = "";

				if(scope.itemsPerRow === 2){
					styles += "width: 76%";
				}
				if (scope.itemsPerRow === 3) {
					styles += "width: 62%";
				}
				if (scope.itemsPerRow === 5) {
					styles += "width: 62%";
				}
				if (scope.itemsPerRow === 1) {
					styles += "width: " + (100 / scope.items.length) + "%;";
				}
				
				return styles;

				
			};
				
			/**
			 * Selecciona el elemento indicado
			 */
			scope.selectItem = function (item) {

				scope.selectedItem = item; // seleccionamos el objeto

				// Contamos los elementos completos
				if(!item.hasOwnProperty('isCompleted')){
					item.isCompleted = true; // marcamos el elemento, para no volver a seleccionarlo
					completedItems++;
				}

				// Fin de la actividad
				if(completedItems === scope.items.length){
		
				}
			};
		   
			/**
			 * Verifica si el input cumple con las condiciones del número 
			 */
			 var chancesPerItem = 1


			scope.verify = function (item) {
				
				if((item.input === '' ) || ! item.hasOwnProperty('input')) return; 

				
					if ( (item.input === item.text) || (item.text === "free" && item.input.length >= item.length) || ( item.hasOwnProperty('answer2') && item.input === item.answer2 && item.input.length >= item.length) ){						
							
							if(!item.completed){
								rightAnswers++;
								chances--;
							}
							item.wrong = false;
							item.right = true;
							item.completed = true; // marcamos el item como completo, para desactivar el input
							
					} 
					else {
								
							item.wrong ? chancesPerItem = 0: chancesPerItem = 1;
							item.wrong = true;
							
								if(chancesPerItem === 0){
		                    	item.input = "La respuesta correcta es: " + item.text;
		                    	item.completed = true;
		                    	chances--;
		                    	chancesPerItem = 1;
		                    	}
		                    	else{item.input ="";}

					}

					// fin de la actividad
					if(chances === 0){
						if(rightAnswers >= minRightAnswers){
							scope.$root.isNextEnabled = true;
							scope.success = true;
						} else {
							scope.failure = true;
						}
					} 					
			}; // verify()

		}


    }; 
});


var lizGroupCompleteText = angular.module('lizGroupCompleteText', []);

lizGroupCompleteText.directive('groupCompleteText', function  () {
    return {
        restrict: 'E',
        templateUrl: '../views/activities/group_complete_text.html',
		scope: {
			options: '=',
			description: '@',
			audio:'@'
		},

		link: function (scope, element, attrs) {
			// Corremos la aplicación
			scope.items = scope.options.items;
			scope.itemsPerRow = scope.options.itemsPerRow;
			scope.pattern = scope.items.pattern;
			scope.text = scope.items.text;
			minRightAnswers = scope.options.minRightAnswers
			rightAnswers = 0, // Contador de preguntas buenas
			chances = scope.options.chances,
			chancesPerItem = scope.options.chancesPerItem ? scope.options.chancesPerItem : 1
			scope.success = false;
			scope.failure = false;
			scope.block = false;
			/**
			 * Para obtener los estilos de los elementos, específicamente el ancho
			 */
			scope.getStyles = function function_name(argument) {
				var styles = "";

				if(scope.itemsPerRow){
					styles += "width: " + (100 / scope.itemsPerRow) + "%;";
					styles += "margin-left: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-top: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-right: " + (10 / scope.itemsPerRow) + "%!important;";
				} else {
					styles += "width: " + (100 / scope.items.length) + "%;";
					styles += "margin-left: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-top: " + (10 / scope.itemsPerRow) + "%;";
				}
				
				return styles;

				
			};

				

		   
			/**
			 * Verifica si el input cumple con las condiciones del número 
			 */
			scope.verify = function (item) {
				
				if((item.input === '' ) || ! item.hasOwnProperty('input')) return; 

				

					if (item.input === item.text || (item.hasOwnProperty('answer2') && item.input === item.answer2)){						
							rightAnswers++;
							chances--;
							item.wrong = false;
							item.right = true;
							item.completed = true; // marcamos el item como completo, para desactivar el input
							
					} 
					else {
							item.wrong ? chancesPerItem = scope.options.chancesPerItem ? scope.options.chancesPerItem - 1 : chancesPerItem = 1 : chancesPerItem = scope.options.chancesPerItem ? scope.options.chancesPerItem : chancesPerItem = 1 ;
							chancesPerItem--	
							item.wrong = true;
							
								if(chancesPerItem === 0){
		                    	item.completed = true;
		                    	chances--;
		                    	chancesPerItem = scope.options.chancesPerItem ? scope.options.chancesPerItem : 1
		                    	}
		                    	else{item.input="";}

					}

					// fin de la actividad
					if(chances === 0){
						if(rightAnswers >= minRightAnswers){
							scope.$root.isNextEnabled = true;
							scope.success = true;
						} else {
							scope.failure = true;
						}
					} 					
			}; // verify()

		}


    }; 
});


var lizGroupCompleteTextFree = angular.module('lizGroupCompleteTextFree', []);

lizGroupCompleteTextFree.directive('groupCompleteTextFree', function  () {
    return {
        restrict: 'E',
        templateUrl: '../views/activities/group_complete_text_free.html',
		scope: {
			options: '=',
			description: '@',
			audio:'@',
			titleBlock: '@',
			blockText: '@',
			mainimg: '@'
		},

		link: function (scope, element, attrs) {
			// Corremos la aplicación
			scope.items = scope.options.items;
			scope.itemsPerRow = scope.options.itemsPerRow;
			scope.pattern = scope.items.pattern;
			scope.text = scope.items.text;
			minRightAnswers = scope.options.minRightAnswers
			rightAnswers = 0, // Contador de preguntas buenas
			chances = scope.options.chances,
			scope.success = false;
			scope.failure = false;
			scope.block = false;
			/**
			 * Para obtener los estilos de los elementos, específicamente el ancho
			 */
			scope.getStyles = function function_name(argument) {
				var styles = "";

				if(scope.itemsPerRow){
					styles += "width: " + (100 / scope.itemsPerRow) + "%;";
					styles += "margin-left: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-top: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-right: " + (10 / scope.itemsPerRow) + "%!important;";
				} else {
					styles += "width: " + (100 / scope.items.length) + "%;";
					styles += "margin-left: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-top: " + (10 / scope.itemsPerRow) + "%;";
				}
				
				return styles;

				
			};

				
			/**
			 * Definimos nuestra función beforeGoNext para que muestre el cuadro de felicitaciones
			 */
			scope.$root.beforeGoNext = function () {
				scope.success = true;
				return true; 
			};
		   
			/**
			 * Verifica si el todos los inputs cumplen la longitud minima de caracteres 
			 */
			 
			scope.verify = function (item) {
				// Filtramos el array buscando los inputs que cumplen los requisitos y los contamos
				
				var completedInputs = scope.items.filter(function(item){
					return item.input.length >= item.length && item.input;
				}).length;

				// Si se han completado todos
				if (completedInputs === scope.items.length) {
					scope.$root.isNextEnabled = true; // Activamos el siguiente vínculo
				} else {
					scope.$root.isNextEnabled = false; // Desactivamos el siguiente vínculo
				}	
			}; // verify()

		}


    }; 
});


var lizGroupCompleteWords = angular.module('lizGroupCompleteWords', []);

lizGroupCompleteWords.directive('groupCompleteWords', function  () {
    return {
        restrict: 'E',
        templateUrl: '../views/activities/group_complete_words.html',
		scope: {
			options: '=',
			description: '@',
			audio:'@',
			titleBlock: '@',
			blockText: '@',
			style: '@',
			mainimg: '@'
		},

		link: function (scope, element, attrs) {
			// Corremos la aplicación
			scope.items = scope.options.items;
			scope.itemsPerRow = scope.options.itemsPerRow;
			scope.examples = scope.options.examples;
			scope.itemsrow = scope.options.itemsrow;
			scope.pattern = scope.items.pattern;
			scope.customClass = (scope.options.customClass) ? scope.options.customClass : "";
			scope.words = [];
			minRightAnswers = scope.options.minRightAnswers
			rightAnswers = 0, // Contador de preguntas buenas
			chances = scope.options.chances,
			scope.success = false;
			scope.failure = false;
			scope.block = false;

			/**
			 * Para obtener los estilos de los elementos, específicamente el ancho
			 */
			scope.getStyles = function () {
				var styles = "";

				if(scope.itemsPerRow){
					styles += "width: " + (100 / scope.itemsPerRow) + "%;";
					styles += "margin-left: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-top: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-right: " + (10 / scope.itemsPerRow) + "%!important;";
				} else {
					styles += "width: " + (100 / scope.items.length) + "%;";
					styles += "margin-left: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-top: " + (10 / scope.itemsPerRow) + "%;";
				}
				styles += "float: left;";
				
				return styles;

				
			};

			var items = scope.items;

		   // Constructor de palabras
		   for(var j=0; j < items.length; j++){

		   	var string = items[j].text;
			var words = string.split(" ");

			scope.items[j].words = [];

			
				
				for(var i=0; i < words.length; i++){

					if( scope.items[j].pattern.indexOf(i) > -1 ){
						if(scope.items[j].hasOwnProperty('answer2')){
							scope.items[j].words.push({
								  isInput: true,
							      input: '',
							      word: (words[i]),
							      answer2: (scope.items[j].answer2)
							});
						}else{
							scope.items[j].words.push({
								  isInput: true,
							      input: '',
							      word: (words[i])
					      	});

						}
					 

					} 

					else{
						scope.items[j].words.push({
								 isInput: false,
							     word: (words[i])
						});
					}

				}

			}

			/**
			 * Verifica si el input cumple con las condiciones del número 
			 */
			 var chancesPerItem = 
			 		(scope.options.hasOwnProperty("chancesPerItem")) ? scope.options.chancesPerItem : 1;

			scope.verify = function (item,q) {
				if(item.input === '') return; 

				// Verificamos la respuesta. Añadimos una propiedad right o wrong para definir si el item es correcto o no
					if(item.input.toLowerCase() === item.word.toLowerCase()){
						rightAnswers++;
						chances--;
						item.wrong = false;
						item.right = true;
						item.completed = true; // marcamos el item como completo, para desactivar el input
					} else {
						
						if(item.hasOwnProperty('answer2')){
							
							if(item.input.toLowerCase() === item.answer2.toLowerCase()){
								rightAnswers++;
								chances--;
								item.wrong = false;
								item.right = true;
								item.completed = true; // marcamos el item como completo, para desactivar el input
							}else {
						
							item.wrong ? chancesPerItem = 0: chancesPerItem = 1;
							item.wrong = true;
							
									if(chancesPerItem === 0){
			                    	item.completed = true;
			                    	item.input = item.word;
			                    	q.callback = item.answer2 ? 'Las respuestas correctas son: ' + item.word + ' Ó ' + item.answer2 : 'La respuesta correcta es: ' + item.word;
			                    	chances--;
			                    	chancesPerItem = (scope.options.hasOwnProperty("chancesPerItem")) ? scope.options.chancesPerItem : 1;;
			                    	}else{item.input="";}
                    	}

						}else {
						
							item.wrong ? chancesPerItem = 0: chancesPerItem = 1;
							item.wrong = true;
							
									if(chancesPerItem === 0){
			                    	item.completed = true;
			                    	item.input = item.word;
			                    	q.callback = item.answer2 ? 'Las respuestas correctas son: ' + item.word + ' Ó ' + item.answer2 : 'La respuesta correcta es: ' + item.word;
			                    	chances--;
			                    	chancesPerItem = (scope.options.hasOwnProperty("chancesPerItem")) ? scope.options.chancesPerItem : 1;;
			                    	}else{item.input="";}
                    	}
					}

					
					

					// fin de la actividad
					if(chances === 0){
						if(rightAnswers >= minRightAnswers){
							scope.$root.isNextEnabled = true;
							scope.success = true;
						} else {
							scope.failure = true;
						}
					} 
					
			}; // verify()



		}


    }; 
});


var lizGroupCompleteYesNot = angular.module('lizGroupCompleteYesNot', []);

lizGroupCompleteYesNot.directive('groupCompleteYesNot', function  () {
    return {
        restrict: 'E',
        templateUrl: '../views/activities/group_complete_yes_not.html',
		scope: {
			options: '=',
			description: '@',
			audio:'@'
		},

		link: function (scope, element, attrs) {
			// Corremos la aplicación
			scope.items = scope.options.items;
			scope.itemsPerRow = scope.options.itemsPerRow;
			scope.pattern = scope.items.pattern;
			scope.text = scope.items.text;
			minRightAnswers = scope.options.minRightAnswers
			rightAnswers = 0, // Contador de preguntas buenas
			chances = scope.options.chances,
			scope.success = false;
			scope.failure = false;
			scope.block = false;
			/**
			 * Para obtener los estilos de los elementos, específicamente el ancho
			 */
			scope.getStyles = function function_name(argument) {
				var styles = "";

				if(scope.itemsPerRow){
					styles += "width: " + (100 / scope.itemsPerRow) + "%;";
					styles += "margin-left: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-top: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-right: " + (10 / scope.itemsPerRow) + "%!important;";
				} else {
					styles += "width: " + (100 / scope.items.length) + "%;";
					styles += "margin-left: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-top: " + (10 / scope.itemsPerRow) + "%;";
				}
				
				return styles;

				
			};

				

		   
			/**
			 * Verifica si el input cumple con las condiciones del número 
			 */
			 var chancesPerItem = 0


			scope.verify = function (item) {console.log(item.input)
				
				if((item.input === '' ) || ! item.hasOwnProperty('input')) return; 

				

					if (item.input === item.text){						
							rightAnswers++;
							chances--;
							item.wrong = false;
							item.right = true;
							item.completed = true; // marcamos el item como completo, para desactivar el input
							
					} 
					else {
								
							item.wrong ? chancesPerItem = 0: chancesPerItem = 0;
							item.wrong = true;
							
								if(chancesPerItem === 0){
		                    	item.completed = true;
		                    	chances--;
		                    	chancesPerItem = 0;
		                    	}
		                    	else{item.input="";}

					}

					// fin de la actividad
					if(chances === 0){
						if(rightAnswers >= minRightAnswers){
							scope.$root.isNextEnabled = true;
							scope.success = true;
						} else {
							scope.failure = true;
						}
					} 					
			}; // verify()

		}


    }; 
});


var lizGroupInputs = angular.module('lizGroupInputs', ['factories']);

lizGroupInputs.directive('groupInputs', function  (shuffleArrayFactory) {

	return {
		restrict: 'E',
		scope: {
			options: '=',
			audio: '@',
			description: '@',
			mainimg: '@',
			mainalt: '@',
			maintitle: '@'
		},
		templateUrl: '../views/activities/group_inputs.html',
		link: function (scope, element, attrs) {
			var opt = scope.options, // Alias de options
				tempInput = {}, // variable temporal para la creación de inputs
				countInputs = 0, // número total de inputs
				inputsArray = []; // array usado para tener una referencia de todos los inputs 

			scope.groups = opt.groups;
			scope.hasExample = (opt.hasExample) ? true : false;

			// Creamos un array para hacer el foreach en cada grupo, basado en el número de inputs
			// Por otro lado, insertamos el mismo elemento en un array donde estarán todos los inputs
			// con el fin de filtrarlo posteriormente
			scope.groups.forEach(function(group){
				group.inputs = [];

				countInputs += group.numInputs; // Contamos los inputs

				for(var i = 0; i < group.numInputs; i++){
                    if  (i === 0) {
                        var example = (group.example) ? group.example : "";
                        tempInput = { value: '', example: example }; // Creamos un nuevo objeto a insertar
                    } else {
                        tempInput = { value: '' }; // Creamos un nuevo objeto a insertar
                    }
					group.inputs.push(tempInput); // inserta el input en su grupo respectivo
					inputsArray.push(tempInput); // inserta el input en el array general
				}

			});

			/**
			 * Definimos nuestra función beforeGoNext para que muestre el cuadro de felicitaciones
			 */
			scope.$root.beforeGoNext = function () {
				scope.success = true;
				return true; 
			};

            scope.checkHasExample = function (index, input) {
                if (index === 0 && scope.hasExample) {
                    input.value = scope.example;
                    return true;
                }

                return false;
            };

			/**
			 * Verifica el estado actual de los inputs para definir el final de la actividad
			 */
			scope.verify = function (input) {
				// Filtramos el array buscando los inputs que cumplen los requisitos y los contamos
				var completedInputs = inputsArray.filter(function(item){
					return item.value !== '' && !/[\d]/.test(input.value);
				}).length;
				// Si se han completado todos
				if (completedInputs === countInputs) {
					scope.$root.isNextEnabled = true; // Activamos el siguiente vínculo
				} else {
					scope.$root.isNextEnabled = false; // Desactivamos el siguiente vínculo
				}
				
			};

		}
	}; 

});

var lizGroupPuzzleWord = angular.module('lizGroupPuzzleWord', ['ngDragDrop']);

lizGroupPuzzleWord.directive('groupPuzzleWord', function  ($compile) {
  return {
    restrict: 'E',
    scope: {
      options: '=',
      audio: '@',
      description: '@'
    },
    templateUrl: '../views/activities/group_puzzle_word.html',
    link: function (scope, element, attrs) {
      var opt = scope.options,
        replaceArray = [], // array con los índices de los targets
        targetCounter = 0, // Variable temporal usada como contador
        rightAnswers = 0, // contador de respuestas correctas
        minRightAnswers = opt.minRightAnswers, // respuestas correctas mínimas para pasar
        template = opt.template;

      // Models
      // --------------------------------------------------------------------
      scope.groups = opt.groups;
      scope.itemsPerRow = opt.itemsPerRow;
      scope.preserveOriginal = opt.preserveOriginal;

      scope.groups.forEach(function (g,index) {
        g.id = index;
        g.itemsAux = [];
        g.targets = [];
        g.rightAnswers = 0;

        for(var i=0; i < g.items.length; i++){
          targetCounter++ //incrementamos el contador para saber cuantos targets hay en total 

            // Creación de item y target
            g.itemsAux.push({
              text: g.items[i],
              drag: true,
            });

            g.targets.push({
              drop: true,
              textAccept: (g.items[(i === 0 ? 1 : 0)]),
              accept: g.id,
              chances: 1,
              model: {} // droppable
            });

            /**
            * auqui se busca la propiedad default en el grupo para completarlo y sea el ejemplo de la actividad.
            */
            if(g.default){

              // Respuesta correcta
              g.targets[i].model.text = g.items[(i === 0 ? 1 : 0)];
              g.targets[i].drop = false; // deshabilita el drop
              g.targets[i].disabled = true;
              g.targets[i].right = true;
              g.rightAnswers++
              if(g.rightAnswers === g.items.length){
                rightAnswers += 1;
              }

               g.itemsAux[i].drag = false

            }


        };

        g.items = g.itemsAux;
      });

      
      scope.dropCallback = function (e, ui, target,group) {
        var completedTargets = 0;
        // revisa el modelo interno y compara
        if(target.model.text === target.textAccept) {

          // Respuesta correcta
          target.drop = false; // deshabilita el drop
          target.disabled = true;
          target.wrong = false;
          target.right = true;
          group.rightAnswers++
          if(group.rightAnswers === group.items.length){
            rightAnswers += 1;
          }
          group.items.forEach(function (i) {
              if(i.text === target.model.text){i.drag = false}
          });
        } else {
          // Respuesta incorrecta
          target.chances -= 1;

          if(target.chances === 0) {
            group.items.forEach(function (i) {
                if(i.text === target.model.text){i.drag = false}
            });
            target.model = {}; // limpia el interno
            target.disabled = true;
            target.wrong = true;
          }
        }

        // Fin de la actividad
        scope.groups.forEach(function (g) {
            g.items.forEach(function (i) {
                  if(i.drag === false){completedTargets++}
            });
        });


        if(completedTargets === targetCounter) {
          scope.$root.isNextEnabled = true;
        }
      };

      scope.stopCallback = function (e, ui, item,group) {
       
      }

      /**
       * Función que se ejecuta al dar click en la flecha de siguiente.
       */
      scope.$root.beforeGoNext = function () {
        if(rightAnswers >= minRightAnswers) {
          scope.success = true;
          return true;
        } else {
          scope.failure = true;
          return true;
        }
      };


    }
  };
});

var lizGroupSelectMultiplesWords = angular.module('lizGroupSelectMultiplesWords', []);

lizGroupSelectMultiplesWords.directive('groupSelectMultiplesWords', function  () {
    return {
        restrict: 'E',
        templateUrl: '../views/activities/group_select_multiples_words.html',
		scope: {
			options: '=',
			description: '@',
			audio:'@',
			titleBlock: '@',
			blockText: '@',
			style: '@',
		},

		link: function (scope, element, attrs) {
			// Corremos la aplicación
			scope.items = scope.options.items;
			scope.images = scope.options.images;
			scope.chancesPerItem = scope.options.chancesPerItem;
			scope.itemswidth = scope.options.itemswidth ? scope.options.itemswidth : '100%' ;
			scope.examples = scope.options.examples;
			scope.pattern = scope.items.pattern;
			scope.words = [];
			minRightAnswers = scope.options.minRightAnswers
			rightAnswers = 0, // Contador de preguntas buenas
			chances = scope.options.chances,
			scope.success = false;
			scope.failure = false;
			scope.block = false;

			var items = scope.items;

		   	// Constructor de palabras
		   	for(var j=0; j < items.length; j++){

			   	var string = items[j].text;
				var words = string.split(" ");

				scope.items[j].words = [];

			
				
				for(var i=0; i < words.length; i++){

					if( scope.items[j].pattern.indexOf(i) > -1 ){
						scope.items[j].words.push({
							  isInput: true,
						      input: '',
						      word: (words[i])
				      	});					 

					} 
					else{
						scope.items[j].words.push({
								 isInput: false,
							     word: (words[i])
						});
					}

				}

			}

			/**
			 * Verifica si el input cumple con las condiciones del número 
			 */
			 var chancesPerItem = 1

			scope.verify = function (item,group) {
				if(group.hasOwnProperty('isCompleted')) return; 
				
				// Verificamos la respuesta. Añadimos una propiedad right o wrong para definir si el item es correcto o no
					if(item.isInput === true){
						
						rightAnswers++;
						item.wrong = false;
						item.right = true;
						item.completed = true; // marcamos el item como completo, para desactivar el input

						if(!group.hasOwnProperty('rightAnswers')){
		                    			group.rightAnswers = 1;
                		}else{group.rightAnswers += 1;}        

						if(group.rightAnswers === group.pattern.length){
	                    	group.isCompleted = true; // marcamos el elemento, para no volver a seleccionarlo
	                    	group.right = true
	                    	chances--;
	                    }				
						
					} else {
							
							if(!group.hasOwnProperty('chances')){
	                    			group.chances = 1;
                    		}else{group.chances += 1;}

							if(group.chances === scope.chancesPerItem){
		                    	group.isCompleted = true; // marcamos el elemento, para no volver a seleccionarlo
		                    	chances--;
		                    	group.wrong = true
	                    	}
	                    	
                			item.wrong = true;
							item.right = false;              	
					}

					
					

					// fin de la actividad
					if(chances === 0){
						if(rightAnswers >= minRightAnswers){
							scope.$root.isNextEnabled = true;
							scope.success = true;
						} else {
							scope.failure = true;
						}
					} 
					
			}; // verify()



		}


    }; 
});


var lizGroupSelectWords = angular.module('lizGroupSelectWords', []);

lizGroupSelectWords.directive('groupSelectWords', function  () {
    return {
        restrict: 'E',
        templateUrl: '../views/activities/group_select_words.html',
		scope: {
			options: '=',
			description: '@',
			audio:'@'
			
		},

		link: function (scope, element, attrs) {
			// Corremos la aplicación
			scope.items = scope.options.items;
			scope.itemsPerRow = scope.options.itemsPerRow;
			scope.pattern = scope.items.pattern;
			scope.answer2 = scope.items.answer2;
			scope.selectedItem = false; // elemento seleccionado
			scope.selectedItem2 = false; // elemento seleccionado
			scope.selectedItemAux = false; // elemento seleccionado
			scope.words = [];
			scope.words.word = [];
			minRightAnswers = scope.options.minRightAnswers
			rightAnswers = 0, // Contador de preguntas buenas
			chances = scope.options.chances,
			scope.success = false;
			scope.failure = false;
			scope.block = false;
			completedItems = 0;
			/**
			 * Para obtener los estilos de los elementos, específicamente el ancho
			 */
			scope.getStyles = function function_name(argument) {
				var styles = "";

				if(scope.itemsPerRow){
					styles += "width: " + (100 / scope.itemsPerRow) + "%;";
					styles += "margin-left: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-top: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-right: " + (10 / scope.itemsPerRow) + "%!important;";
				} else {
					styles += "width: " + (100 / scope.items.length) + "%;";
					styles += "margin-left: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-top: " + (10 / scope.itemsPerRow) + "%;";
				}
				
				return styles;

				
			};

			var items = scope.items;

		   // Constructor de palabras
		   for(var j=0; j < items.length; j++){

		   	var counter = 0;
		   	var string = items[j].text;
			var words = string.split(" ");

			scope.items[j].words = [];

			
				
				for(var i=0; i < words.length; i++){

					if( scope.items[j].pattern.indexOf(i) > -1 ){
						if(scope.items[j].answer2[i]!=""){
							scope.items[j].words.push({
								  isInput: true,
							      input: (words[i]),
							      word: (words[i]),
							      answer2: (scope.items[j].answer2[counter])
							});
							counter++
						}else{
							scope.items[j].words.push({
								  isInput: true,
							      input: (words[i]),
							      word: (words[i])
					      	});

						}
					 

					} 

					else{
						scope.items[j].words.push({
								 isInput: false,
							     word: (words[i])
						});
					}

				}

			}

			/**
			 * Selecciona el elemento indicado
			 */
			scope.selectItem = function (item) {
				console.log(scope.selectedItem2);
				scope.selectedItemAux.select = [];
				scope.selectedItem = item; // seleccionamos el objeto
				scope.selectedItem.select = [];
				
			};

			/**
			 * Selecciona el objetivo indicado
			 */
			scope.selectItem2 = function (item) {
				console.log(item);
				console.log(scope.selectedItem);
			if(scope.selectedItem === false ) return;

				scope.selectedItemAux = item; // seleccionamos el objeto

				if (scope.selectedItem.word === scope.selectedItemAux.word){
						scope.selectedItem2 = item;
						item.word = [];
						item.word.right = true;		
					
						// Contamos los elementos completos
						if(!item.hasOwnProperty('isCompleted')){
							item.isCompleted = true; // marcamos el elemento, para no volver a seleccionarlo
							completedItems++;
							rightAnswers++
						}
					

				}else{
					
					item.select = [];
					item.select.wrong = true;

					if(scope.selectedItem.word.wrong === true){
						// Contamos los elementos completos
						if(!scope.selectedItem.hasOwnProperty('isCompleted')){
							
							completedItems++;
							scope.selectedItem.isCompleted = true; // marcamos el elemento, para no volver a seleccionarlo
							scope.selectedItem = false; // elemento seleccionado
							
						}
					}else{
						scope.selectedItem.word = [];
						scope.selectedItem.word.wrong = true;
						scope.selectedItem = false; // elemento seleccionado
						
					}
				}


				// Fin de la actividad
				if(completedItems === chances){

					if (rightAnswers >= minRightAnswers){
						scope.$root.isNextEnabled = true;
							scope.success = true;
						} else {
							scope.failure = true;
						}
				}

				
			};	

			scope.random = function(){
    			return 0.5 - Math.random();
			};	

		}

		


    }; 
});




var lizGroupTableCompleteWords = angular.module('lizGroupTableCompleteWords', []);

lizGroupTableCompleteWords.directive('groupTableCompleteWords', function  () {
    return {
        restrict: 'E',
        templateUrl: '../views/activities/group_table_complete_words.html',
		scope: {
			options: '=',
			description: '@',
			audio:'@',
			altimg: '@',
			style: '@',
			mainimg: '@'
		},

		link: function (scope, element, attrs) {
			// Corremos la aplicación
			scope.items = scope.options.items;
			scope.itemsPerRow = scope.options.itemsPerRow;
			scope.examples = scope.options.examples;
			scope.pattern = scope.items.pattern;
			scope.customClass = (scope.options.customClass) ? scope.options.customClass : "";
			minRightAnswers = scope.options.minRightAnswers
			rightAnswers = 0, // Contador de preguntas buenas
			chances = scope.options.chances,
			scope.success = false;
			scope.failure = false;
			scope.block = false;

			// Empezamos a recorrer todas las palabras y sumando
				scope.items.forEach(function(item){
					item.input = '';
				});

			/**
			 * Para obtener los estilos de los elementos, específicamente el ancho
			 */
			scope.getStyles = function () {
				var styles = "";

				if(scope.itemsPerRow){
					styles += "width: " + (100 / scope.itemsPerRow) + "%;";
					
				} else {
					styles += "width: " + (100 / 3) + "%;";
					
				}
								
				return styles;

				
			};

			/**
			 * Definimos nuestra función beforeGoNext para que muestre el cuadro de felicitaciones
			 */
			scope.$root.beforeGoNext = function () {

				var completedInputs = scope.items.filter(function(item){
							return item.right === true;
							}).length;
				if(completedInputs >= minRightAnswers){
					scope.success = true;
					return true; 
				}else{
					scope.failure = true;
					return true; 
				}
			};

			
			/**
			 * Verifica si el input cumple con las condiciones del número 
			 */

			scope.verify = function () {

				// Empezamos a recorrer todas las palabras y sumando
				scope.items.forEach(function(item){

					if (item.input === item.answer){

						item.completed = true;
						item.right = true;
						item.wrong = false;
					}else{

						item.completed = true;
						item.right = false;
						item.wrong = true;

					}

					console.log(item);
				});	

				scope.$root.isNextEnabled = true; // Activamos el siguiente vínculo		
					
			}; // verify()



		}


    }; 
});


var lizGroupTableTextConditions = angular.module('lizGroupTableTextConditions', []);

lizGroupTableTextConditions.directive('groupTableTextConditions', function  ($sce) {
    return {
        restrict: 'E',
        templateUrl: '../views/activities/group_table_text_conditions.html',
		scope: {
			options: '=',
			description: '@',
			audio:'@',
			blockText: '@',
			mainimg: '@',
			addicon: '@'
		},

		link: function (scope, element, attrs) {
			// Corremos la aplicación
			scope.items = scope.options.items;
			scope.titles = scope.options.titles;
			scope.chancesPerItem = scope.options.chancesPerItem;
			scope.itemsPerRow = scope.options.itemsPerRow;
			scope.minRightAnswers = scope.options.minRightAnswers;
			scope.pattern = scope.items.pattern ? scope.items.pattern : ['N/A'];
			scope.options = scope.items.options ? scope.items.options : [];
			scope.text = scope.items.text;
			rightAnswers = 0, // Contador de preguntas buenas
			scope.success = false;
			scope.failure = false;

			// Recorremos todos los items
			if(scope.chancesPerItem){
		        scope.items.forEach(function (item) {
		          // agregamos cada item el numero de oportunidades

		          item.chances = scope.chancesPerItem						      
				  
		        });
		      }
			
			/**
			 * Para obtener los estilos de los elementos, específicamente el ancho
			 */
			scope.getStyles = function function_name(rows) {
				var styles = "";
				

				if(rows === undefined ){
					styles += "height: " + (108) + "px;";
					
				} 
				else{
					styles += "height: " + (40 * rows) + "px;";
					styles += "padding-top: " + (5 * rows) + "px;";
				}
				
				
				return styles;

				
			};

			// Para usar el html en angular
		      scope.sanitize = function (item) {
		        return $sce.trustAsHtml(item);
		      }

				
			/**
			 * Definimos nuestra función beforeGoNext para que muestre el cuadro de felicitaciones
			 */
			scope.$root.beforeGoNext = function () {

				var completedItems = 0 + scope.items.filter(function(item){
							return item.right === true ;
						}).length;

				if(completedItems >= scope.minRightAnswers){
					scope.success = true;
				}else{scope.failure = true;}
				return true; 
			};
		   
			/**
			 * Verifica si el todos los inputs cumplen la longitud minima de caracteres 
			 */
			 
			scope.verify = function (item) {
				if(item.input === '' || !item.hasOwnProperty('input') ){return}
				// Filtramos el array buscando los inputs que cumplen los requisitos y los contamos
				
			  
				   	var string = item.input;
					var words = string.split(" ");

					item.words = [];
					item.complete = [];
				

					for(var i=0; i < words.length; i++){

						if(item.hasOwnProperty('pattern')){

							if( item.pattern.indexOf(words[i]) > -1 ){
									item.words.push({
										  isInput: true,								      
									});
									

							} 
						}else{

							if( item.options.indexOf(words[i]) > -1 ){
									item.words.push({
										  isInput: true,								      
									});
									

							} 
						}
							

					}

				


				// Si se han completado todos
				if(item.hasOwnProperty('pattern')){
				
					if ( item.words.length >= item.pattern.length || item.pattern[0] === "free" && item.input.length >= item.length) {

						
						item.wrong = false;
						item.right = true;
						if(scope.chancesPerItem){item.completed = true};

						var completedInputs = scope.items.filter(function(item){
							return (item.right === true || item.completed === true ) && item.input.length >= item.length;
						}).length;

						// Si se han completado todos
							if (completedInputs === scope.items.length) {
								scope.$root.isNextEnabled = true; // Activamos el siguiente vínculo
							} else {
								scope.$root.isNextEnabled = false; // Desactivamos el siguiente vínculo
							}	
					}else{		
								if(scope.chancesPerItem){
									item.right = false;
									item.wrong = true;
									item.chances -= 1
									if(item.chances === 0){item.completed = true;item.input = item.pattern }
								};

								if(item.right === true){
									item.right = false;
									item.wrong = true;
								}

								var completedInputs = scope.items.filter(function(item){
								return (item.right === true || item.completed === true ) && item.input.length >= item.length;
								}).length;

								// Si se han completado todos
									if (completedInputs === scope.items.length) {
										scope.$root.isNextEnabled = true; // Activamos el siguiente vínculo
									} else {
										scope.$root.isNextEnabled = false; // Desactivamos el siguiente vínculo
									}	
							}
				}else{

					if ( (item.words.length >= 1 && item.hasOwnProperty('options') ) && item.input.length >= item.length) {

						
						item.wrong = false;
						item.right = true;
						var completedInputs = scope.items.filter(function(item){
							return item.right === true && item.input.length >= item.length;
						}).length;

						// Si se han completado todos
							if (completedInputs === scope.items.length) {
								scope.$root.isNextEnabled = true; // Activamos el siguiente vínculo
							} else {
								scope.$root.isNextEnabled = false; // Desactivamos el siguiente vínculo
							}	
					}else{
								if(item.right === true){
								item.right = false;
								item.wrong = true;}
								var completedInputs = scope.items.filter(function(item){
								return item.right === true && item.input.length >= item.length;
								}).length;

								// Si se han completado todos
									if (completedInputs === scope.items.length) {
										scope.$root.isNextEnabled = true; // Activamos el siguiente vínculo
									} else {
										scope.$root.isNextEnabled = false; // Desactivamos el siguiente vínculo
									}	
							}
				}	

			}; // verify()

		}


    }; 
});


var lizGroupTableTextConditionsOptions = angular.module('lizGroupTableTextConditionsOptions', []);

lizGroupTableTextConditionsOptions.directive('groupTableTextConditionsOptions', function  () {
    return {
        restrict: 'E',
        templateUrl: '../views/activities/group_table_text_conditions_options.html',
		scope: {
			options: '=',
			description: '@',
			audio:'@',
			addicon: '@'
		},

		link: function (scope, element, attrs) {
			// Corremos la aplicación
			scope.groups = scope.options.groups;
			scope.items = [];
			/*scope.itemsPerRow = scope.options.itemsPerRow;
			scope.pattern = scope.groups.items.pattern ? scope.groups.items.pattern : ['N/A'];
			scope.options = scope.groupsitems.options ? scope.groupsitems.options : [];*/
			minRightAnswers = scope.options.minRightAnswers
			rightAnswers = 0, // Contador de preguntas buenas
			chances = scope.options.chances,
			scope.success = false;
			scope.failure = false;
			scope.block = false;
			
			// Recorremos todas las grupos y sus items
			      scope.groups.forEach(function (group) {
			        group.items.forEach(function (item) {
			          // agregamos cada item a el array de items
			          scope.items.push({
							item: item,								      
					  });

			        });
			      });
			
			/**
			 * Para obtener los estilos de los elementos, específicamente el ancho
			 */
			scope.getStyles = function function_name(rows) {
				var styles = "";
				

				if(rows === undefined ){
					styles += "height: " + (108) + "px;";
					
				} 
				else{
					styles += "height: " + (40 * rows) + "px;";
					styles += "padding-top: " + (5 * rows) + "px;";
				}
				
				
				return styles;

				
			};
	
			/**
			 * Definimos nuestra función beforeGoNext para que muestre el cuadro de felicitaciones
			 */
			scope.$root.beforeGoNext = function () {
				scope.success = true;
				return true; 
			};
		   
			/**
			 * Verifica si el todos los inputs cumplen la longitud minima de caracteres 
			 */
			 
			scope.verify = function (item) {
				// Filtramos el array buscando los inputs que cumplen los requisitos y los contamos
				
			  
				   	var string = item.input;
					var words = string.split(" ");

					item.words = [];
					item.complete = [];
				
					for(var i=0; i < words.length; i++){

						if(item.hasOwnProperty('pattern')){

							if( item.pattern.indexOf(words[i]) > -1 ){
									item.words.push({
										  isInput: true,								      
									});
									

							} 
						}else{

							if( item.options.indexOf(words[i]) > -1 ){
									item.words.push({
										  isInput: true,								      
									});
									

							} 
						}
							

					}

				


				// Si se han completado todos
				if(item.hasOwnProperty('pattern')){
					if ( item.words.length >= item.pattern.length || item.pattern[0] === "free" && item.input.length >= item.length) {

						/*item.complete.push({
										  complete: true,								      
									});*/
						item.wrong = false;
						item.right = true;
						var completedInputs = scope.items.filter(function(item){
							return item.item.right === true && item.item.input.length >= item.item.length;
						}).length;

						// Si se han completado todos
							if (completedInputs === chances) {
								scope.$root.isNextEnabled = true; // Activamos el siguiente vínculo
							} else {
								scope.$root.isNextEnabled = false; // Desactivamos el siguiente vínculo
							}	
					}else{
								if(item.right === true){
								item.right = false;
								item.wrong = true;}
								var completedInputs = scope.items.filter(function(item){
								return item.item.right === true && item.item.input.length >= item.item.length;
								}).length;

								// Si se han completado todos
									if (completedInputs === chances) {
										scope.$root.isNextEnabled = true; // Activamos el siguiente vínculo
									} else {
										scope.$root.isNextEnabled = false; // Desactivamos el siguiente vínculo
									}	
							}
				}else{

					if ( (item.words.length >= 1 && item.hasOwnProperty('options') ) && item.input.length >= item.length) {

						/*item.complete.push({
										  complete: true,								      
									});*/
						item.wrong = false;
						item.right = true;
						var completedInputs = scope.items.filter(function(item){
							return item.item.right === true && item.item.input.length >= item.item.length;
						}).length;

						// Si se han completado todos
							if (completedInputs === chances) {
								scope.$root.isNextEnabled = true; // Activamos el siguiente vínculo
							} else {
								scope.$root.isNextEnabled = false; // Desactivamos el siguiente vínculo
							}	
					}else{
								if(item.right === true){
								item.right = false;
								item.wrong = true;}
								var completedInputs = scope.items.filter(function(item){
									return item.item.right === true && item.item.input.length >= item.item.length;
								}).length;

								// Si se han completado todos
									if (completedInputs === chances) {
										scope.$root.isNextEnabled = true; // Activamos el siguiente vínculo
									} else {
										scope.$root.isNextEnabled = false; // Desactivamos el siguiente vínculo
									}	
							}
				}	

			}; // verify()

		}


    }; 
});


var lizGroupTableTextFree = angular.module('lizGroupTableTextFree', []);

lizGroupTableTextFree.directive('groupTableTextFree', function  () {
    return {
        restrict: 'E',
        templateUrl: '../views/activities/group_table_text_free.html',
		scope: {
			options: '=',
			description: '@',
			audio:'@',
			blockText: '@',
			mainimg: '@'
		},

		link: function (scope, element, attrs) {
			// Corremos la aplicación
			scope.items = scope.options.items;
			scope.itemsPerRow = scope.options.itemsPerRow;
			scope.pattern = scope.items.pattern;
			scope.text = scope.items.text;
			minRightAnswers = scope.options.minRightAnswers
			rightAnswers = 0, // Contador de preguntas buenas
			chances = scope.options.chances,
			scope.success = false;
			scope.failure = false;
			scope.block = false;
			/**
			 * Para obtener los estilos de los elementos, específicamente el ancho
			 */
			scope.getStyles = function function_name(argument) {
				var styles = "";

				if(scope.itemsPerRow){
					styles += "width: " + (100 / scope.itemsPerRow) + "%;";
					styles += "margin-left: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-top: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-right: " + (10 / scope.itemsPerRow) + "%!important;";
				} else {
					styles += "width: " + (100 / scope.items.length) + "%;";
					styles += "margin-left: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-top: " + (10 / scope.itemsPerRow) + "%;";
				}
				
				return styles;

				
			};

				
			/**
			 * Definimos nuestra función beforeGoNext para que muestre el cuadro de felicitaciones
			 */
			scope.$root.beforeGoNext = function () {
				scope.success = true;
				return true; 
			};
		   
			/**
			 * Verifica si el todos los inputs cumplen la longitud minima de caracteres 
			 */
			 
			scope.verify = function (item) {
				// Filtramos el array buscando los inputs que cumplen los requisitos y los contamos
				
				var completedInputs = scope.items.filter(function(item){
					return item.input.length >= item.length && item.input;
				}).length;

				// Si se han completado todos
				if (completedInputs === scope.items.length) {
					scope.$root.isNextEnabled = true; // Activamos el siguiente vínculo
				} else {
					scope.$root.isNextEnabled = false; // Desactivamos el siguiente vínculo
				}	
			}; // verify()

		}


    }; 
});


var lizGroupTableTextOptions = angular.module('lizGroupTableTextOptions', []);

lizGroupTableTextOptions.directive('groupTableTextOptions', function  () {
    return {
        restrict: 'E',
        templateUrl: '../views/activities/group_table_text_options.html',
		scope: {
			options: '=',
			description: '@',
			audio:'@',
			blockText: '@',
			mainimg: '@',
			addicon: '@'
		},

		link: function (scope, element, attrs) {
			// Corremos la aplicación
			scope.items = scope.options.items;
			scope.titles = scope.options.titles;
			scope.itemsPerRow = scope.options.itemsPerRow;
			scope.pattern = scope.items.pattern;
			scope.text = scope.items.text;
			minRightAnswers = scope.options.minRightAnswers
			rightAnswers = 0, // Contador de preguntas buenas
			chances = scope.options.chances,
			chancesPerItem = scope.options.chancesPerItem ? scope.options.chancesPerItem : 1
			scope.success = false;
			scope.failure = false;
			scope.block = false;
			
			/**
			 * Para obtener los estilos de los elementos, específicamente el ancho
			 */
			scope.getStyles = function function_name(rows) {
				var styles = "";
				

				if(rows === undefined ){
					styles += "height: " + (108) + "px;";
					
				} 
				else{
					styles += "height: " + (40 * rows) + "px;";
					styles += "padding-top: " + (5 * rows) + "px;";
				}
				
				
				return styles;

				
			};

				
			/**
			 * Definimos nuestra función beforeGoNext para que muestre el cuadro de felicitaciones
			 */
			scope.$root.beforeGoNext = function () {
				scope.success = true;
				return true; 
			};
		   
			/**
			 * Verifica si el todos los inputs cumplen la longitud minima de caracteres 
			 */
			 
			scope.verify = function (item) {

				if((item.input === '' ) || ! item.hasOwnProperty('input')) return;

				// Filtramos el array buscando los inputs que cumplen los requisitos y los contamos
				
					item.complete = [];
				
						if( item.pattern.indexOf(item.input) > -1 ){
								
								item.complete.push({
									  complete: true,								      
								});
								

						} 

						else{
							
						}

					

				


				// Si se han completado todos
					
				if (item.complete.length >= 1) {
							
							rightAnswers++;
							chances--;
							item.wrong = false;
							item.right = true;
							item.completed = true; // marcamos el item como completo, para desactivar el input
							
					} 
					else {
							item.wrong ? chancesPerItem = scope.options.chancesPerItem ? scope.options.chancesPerItem - 1 : chancesPerItem = 1 : chancesPerItem = scope.options.chancesPerItem ? scope.options.chancesPerItem : chancesPerItem = 1 ;
							chancesPerItem--	
							item.wrong = true;
						
								if(chancesPerItem === 0){
		                    	item.completed = true;
		                    	chances--;
		                    	chancesPerItem = scope.options.chancesPerItem ? scope.options.chancesPerItem : 1
		                    	}
		                    	else{item.input="";}

					}

					// fin de la actividad
					if(chances === 0){
						if(rightAnswers >= minRightAnswers){
							scope.$root.isNextEnabled = true;
							scope.success = true;
						} else {
							scope.failure = true;
						}
					} 					
			}; // verify()

		}


    }; 
});


var lizImageGroupDrop = angular.module('lizImageGroupDrop', ['factories']);

// Knockout Pairs Factory
lizImageGroupDrop.factory('imageGroupDropActivity', function ($rootScope, shuffleArrayFactory) {

	var imageGroupDropActivity = {};

	/**
	 * Crea el ViewModel
	 */
	imageGroupDropActivity.create = function (options) {
		return new imageGroupDropActivity._ViewModel(options);
	}

	/**
	 * Genera el ViewModel de las parejas con sus funcionalidades
	 */
	imageGroupDropActivity._ViewModel = function (opt) {
		var self = this,
			newGroup = false,
			totalItems = 0, // Número total de elementos
			chances = opt.chances,
			minRightAnswers = opt.minRightAnswers,
			rightAnswers = 0;

		function Group (opt) {
			this.sortable = ko.observableArray();
			this.sortable.id = (Math.random() + 1).toString(36).substring(7); // Creamos una cadena aleatoria

			// Medidas
			this.t = opt.t;
			this.l = opt.l;
			this.w = opt.w;
			this.h = opt.h;
		}

		// Imagen de fondo del conjunto
		self.bg = {
			src: opt.src,
			alt: opt.alt
		};

		// textos
		self.topText = opt.topText;
		self.bottomText = opt.bottomText;

		// Formación de grupos
		self.groups = ko.observableArray(); // Observable de grupos
		self.stack = ko.observableArray(); // pila de elementos

		opt.groups.forEach(function(group){
			newGroup = new Group(group);

			self.groups.push(newGroup);

			// añadimos cada item a la pila, añadiendole la referencia a su padre (grupo)
			group.items.forEach(function(item){
				item.id = newGroup.sortable.id;
				self.stack.push(item);
			});
		});

		

		// barajamos la pila
		shuffleArrayFactory.run(self.stack());

		totalItems = self.stack().length;

		// audio
		self.audio = ko.observable(opt.audio);

		// Carpeta de recursos desde angular
		self.resources = $rootScope.resources;

		// Calificaciones
		self.rightAnswer = ko.observable();
		self.wrongAnswer = ko.observable();
		self.failure = ko.observable(false);
		self.success = ko.observable(false);

		/**
		 * Reproduce el audio de la instrucción.
		 */
		self.playAudio = function () {
			$('#audio-instruction')[0].play();
		};


		/**
		 * Devuelve los estilos de los grupos
		 */
		self.getGroupStyles = function (group) {
			var styles = '';

			styles += "top: " + group.t + "%;";
			styles += "left: " + group.l + "%;";
			styles += "width: " + group.w + "%;";
			styles += "height: " + group.h + "%;";
			
			return styles;
		};

		/**
		 * Devuelve los estilos de los grupos
		 */
		self.getItemStyles = function (item) {
			var styles = '';

			styles += "top: " + item.t + "%;";
			styles += "left: " + item.l + "%;";
			
			return styles;
		};

		/**
		 * Verifica la respuesta cada vez que se suelta el elemento.
		 */
		self.verifyAnswer = function (arg) {
			var parent = arg.targetParent,
				item = arg.item;

			if(arg.sourceParent === parent) return;

			// Respuesta correcta
			if(item.id === parent.id) {
				self.rightAnswer(Math.random());
				rightAnswers++;
			} else {
				self.wrongAnswer(Math.random());
				arg.cancelDrop = true;
			}

			chances--;

			if (rightAnswers === totalItems || chances === 0) {
				if (rightAnswers >= minRightAnswers) {
					$rootScope.isNextEnabled = true;
					self.success(true);
				} else {
					self.failure(true);
				}
				// éxito
			} 
		};



	};

	/**
	 * Inicializa la instancia del ViewModel creado con imageGroupDropActivity.create
	 *
	 * @param {object} instance Intancia del VM de knockout
	 */
	imageGroupDropActivity.run = function (instance) {
		ko.cleanNode($('#main-container')[0]);
		ko.bindingHandlers.sortable.beforeMove = instance.verifyAnswer;
		ko.applyBindings(instance, $('#main-container')[0]);
	};

	return imageGroupDropActivity;

});

lizImageGroupDrop.directive('imageGroupDrop', function  (imageGroupDropActivity) {
	return {
		restrict: 'E',
		transclude: true,
		scope: {
			options: '=',
			description: '@',
			audio:'@'
		},
		templateUrl: '../views/activities/image_group_drop.html',
		link: function postLink(scope, element, attrs) {
			// Añadimos el audio a options
			scope.options.audio = scope.hasOwnProperty('audio') ? scope.audio : false;

			// Corremos la aplicación
			var vm = imageGroupDropActivity.create(scope.options);
			imageGroupDropActivity.run(vm);
		}
	}; 
});

var lizImageMapSelect = angular.module('lizImageMapSelect', []);

lizImageMapSelect.directive('imageMapSelect', function  () {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			audio: '@',
			description: '@'
		},
		templateUrl: '../views/activities/image_map_select.html',
		link: function (scope, element, attrs) {
			var opt = scope.options,
				rightAnswers = 0,
				completedAnswers = 0;
				minRightAnswers = opt.minRightAnswers;

			// Asignación
			scope.items = opt.items;
			scope.img = opt.img;
			scope.alt = opt.alt;

			// Calificación
			scope.success = false;
			scope.failure = false;
			scope.wrongAnswer = false;

			scope.selectedItem = false;

			// Recorremos los items y añadimos el número de oportunidades por item
			scope.items.forEach(function(item){
				item.chances = 2;
			});


			/**
			 * Selecciona el item al dar click
			 */
			scope.selectItem = function (item) {
				scope.selectedItem = item;
			};


			/**
			 * Verifica la respuesta
			 */
			scope.verify = function (item) {
				// si no se ha seleccionado ningún elemento
				if(!scope.selectedItem) return;

				// validación
				if(scope.selectedItem === item) {
					// Respuesta correcta
					completedAnswers++; // Aumentamos el contador de respuestas terminadas
					rightAnswers++; // Aumenta el número de respuestas correctas

					scope.selectedItem.isRight = true;
					scope.selectedItem.completed = true; // marca el elemento como completo

					scope.selectedItem = false; // reinicia el objeto seleccionado
				} else {
					// Respuesta Incorrecta
					scope.selectedItem.chances--;

					// mostramos el ícono de error, solo la primera vez
					if(scope.selectedItem.chances === 1) scope.wrongAnswer = Math.random();
					
					// Desactivamos el elemento seleccionado
					if(scope.selectedItem.chances === 0) {
						completedAnswers++; // Aumentamos el contador de respuestas terminadas

						scope.selectedItem.isWrong = true;
						scope.selectedItem.completed = true;
						scope.selectedItem = false; // reinicia el objeto seleccionado
					}
				}

				// fin de la actividad
				if(scope.items.length === completedAnswers) {
					if(rightAnswers >= minRightAnswers) {
						// Éxito
						scope.$root.isNextEnabled = true;
						scope.success = true;
					} else {
						// Fracaso
						scope.failure = true;
					}
				}
			};

			/**
			 * Obtiene la posición de los elementos
			 */
			scope.getStyles = function (item) {
				var styles = '';

				styles += "top: " + item.t + "%;";
				styles += "left: " + item.l + "%;";
				
				return styles;
			};

		}
	}; 
});

var lizInputsAndTable = angular.module('lizInputsAndTable', []);

lizInputsAndTable.directive('inputsTable', function () {
	return {
		restrict: 'E',
		templateUrl: '../views/activities/inputs_and_table.html',
		scope: {
			options: "=",
			instruction: '@',
			audio: '@',
			description: '@'
		},
		link: function (scope) {
			var opt = scope.options,
				rightAnwers = 0, // Respuestas correctas
				backCounter = opt.inputs.length + opt.table.body.length; // total de inputs

			// Si la descripción o el título están, entonces la instrucción va al fondo
			scope.isBottom = scope.title || scope.description;
			scope.inputs = opt.inputs;
			scope.table = opt.table;

			// calificación
			scope.rightAnswer = false;
			scope.wrongAnswer = false;
			scope.success = false;
			scope.failure = false;

			// Se añade el input a inputs y a table
			scope.inputs.forEach(function (i) { 
				i.input = ''; 
				i.chances = opt.chancesPerInput; // Se definen las posibilidades para cada input
			});

			scope.table.body.forEach(function (i) { 
				i.input = ''; 
				i.chances = opt.chancesPerInput; // Se definen las posibilidades para cada input
			});

			console.log(scope.table);

			/**
			 * Compara el valor ingresado por el usuario con el especificado en el objeto
			 */
			scope.verify = function (item) {
				// Valida solamente si tiene el mismo número de letras
				if(item.input.length !== item.expects.length) return;

				// respuesta correcta/incorrecta
				if(item.input === item.expects){
					scope.rightAnswer = Math.random(); // Dispara el flash
					item.disabled = true; // Deshabilita el input

					rightAnwers++;
					backCounter--; // Reduce el contador para finalizar la actividad
				} else {
					scope.wrongAnswer = Math.random();
					item.chances--; // Reducimos las posibilidades
					item.input = ''; // Limpia el input

					// Deshabilita el input si se acaban las posibilidades
					if(item.chances === 0){
						item.disabled = true; 
						backCounter--; // Reduce el contador para finalizar la actividad
					} 
				}

				console.log(backCounter);

				// Fin de la actividad
				if(backCounter === 0)	{
					if(rightAnwers >= opt.minRightAnswers){
						scope.$root.isNextEnabled = true;
						scope.success = true;
					} else {
						scope.failure = true;
					}
				}
			};
			
			/**
			 * Devuelve los estilos para los inputs.
			 * Usado principalmente para definir el width de cada elemento.
			 */
			scope.getInputStyles = function () {
				var styles = '';
				styles += "width: " + (100 / scope.inputs.length) + "%;";

				return styles;
			};


		}
	};
});

var lizJoiningLines = angular.module('lizJoiningLines', []);

lizJoiningLines.directive('joiningLines', function () {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			title: '@',
			description: '@',
			audio:'@',
			instruction: '@',
			alt: '@',
			mainimg: '@'
		},
		templateUrl: '../views/activities/joining_lines.html',
		link: function (scope, element, attrs) {

			var opt = scope.options;
				

			scope.items = opt.items;
			scope.answers = opt.answers;
			scope.selectedItem = false; // elemento seleccionado
			scope.selectedItem2 = false; // elemento seleccionado
			minRightAnswers = opt.minRightAnswers;
			var chancesPerItem = opt.chancesPerItem ? opt.chancesPerItem : 1;
			scope.linesContainer = opt.linesContainer;
			var rightAnswers = 0; // Contador de preguntas buenas
			scope.success = false;
			scope.failure = false;
			scope.block = false;
			var completedItems = 0;

			
			/**
			 * Selecciona el elemento indicado
			 */
			scope.selectItem = function (item) {
				if(item.isCompleted === true) return;

				scope.selectedItem2.wrong = false;
				scope.selectedItem2 = false;
				scope.selectedItem = item; // seleccionamos el objeto

				

				// Fin de la actividad
				if(completedItems === (scope.items.length) ){
					scope.$root.isNextEnabled = true;
				}
			};

			scope.selectItem2 = function (item) {
				if(item.isCompleted === true || scope.selectedItem === false) return;

				scope.selectedItem2.wrong = false;
				scope.selectedItem2 = item; // seleccionamos el objeto

				if(scope.selectedItem.answer === scope.selectedItem2.answer){

					rightAnswers++;
					scope.selectedItem2 = false;
					scope.selectedItem.wrong = false;
					scope.selectedItem.right = true;
					item.wrong = false;
					item.right = true;
					
					if(!item.hasOwnProperty('isCompleted')){
						scope.selectedItem.isCompleted = true;// marcamos el elemento, para no volver a seleccionarlo
						item.isCompleted = true; // marcamos el elemento, para no volver a seleccionarlo
						scope.selectedItem = false;
						completedItems++;
					}

				}else{

					if(scope.selectedItem.chances === 1){
						scope.selectedItem.isCompleted = true// marcamos el elemento, para no volver a seleccionarlo
						scope.selectedItem.wrong = true;
						scope.selectedItem = false;
						completedItems++;
					}
					
					scope.selectedItem.flash = true;
					scope.selectedItem.chances = 1;
					scope.selectedItem.right = false;
					item.wrong = true;
					item.right = false;
					console.log(scope.selectedItem);

					

				}


				// Fin de la actividad
				if(completedItems === (scope.items.length) ){
					if(rightAnswers >= minRightAnswers) {
						scope.$root.isNextEnabled = true;
			          scope.success = true;
			          return true;
			        }

			        scope.failure = true;
			        return false;
				}
			};

		 /**
		 * Devuelve los estilos según el elemento
		 */
		scope.getTargetsStyles = function (item) {
			var styles = '';
			styles += 'width: ' + item.w + '%;';
			styles += 'height: ' + item.h + '%;';
			styles += 'top: ' + item.t + '%;';
			styles += 'left: ' + item.l + '%;';
			styles += '-webkit-transform:rotate(' + item.r + 'deg);';
			styles += '-moz-transform:rotate(' + item.r + 'deg);';
			styles += '-o-transform:rotate(' + item.r + 'deg);';
			styles += '-ms-transform:rotate(' + item.r + 'deg);';
			styles += 'transform:rotate(' + item.r + 'deg);';

			return styles;
		};

		}
	}; 
});


var lizLetterSoup = angular.module('lizLetterSoup', ['factories']);

lizLetterSoup.directive('letterSoup', function () {
  return {
    restrict: 'E',
    scope: {
      options: '=',
      audio: '@',
      description: '@',
      instruction: '@'
    },
    templateUrl: '../views/activities/letter_soup.html',
    link: function (scope, element, attrs) {
      var opt = scope.options, // Alias de opciones
        chances = opt.chances, // Oportunidades totales
        minRightAnswers = opt.minRightAnswers, // Número mínimo de respuestas correctas
        totalWords = 0, // Número total de palabras
        rightAnswers = 0; // contador de preguntas correctas

      scope.groupStyle = opt.groupStyle ? opt.groupStyle : false; // estilos que define com se ven los grupos de palbras
      scope.tableStyle = opt.tableStyle ? opt.tableStyle : false; // estilos que define com se ve la tabla con las letras
      console.log(scope.groupStyle);
      scope.table = []; // Array para la tabla
      scope.startPoint = false; // punto inicial
      scope.wordGroups = opt.wordGroups;

      scope.inverted = opt.inverted; // Define si las pistas y la sopa de letra intercambian espacios

      // variables de calificación
      scope.rightAnswer = false;
      scope.wrongAnswer = false;
      scope.success = false;
      scope.failure = false;

      // Recorremos todas las palabras
      scope.wordGroups.forEach(function (group) {
        group.items.forEach(function (word) {
          // Contamos el número total de palabras
          totalWords++;

          // Si no tiene propiedad front, usamos la propiedad back
          if (!word.hasOwnProperty('front')) word.front = word.back;
        });
      });


      // ------------------------------------------
      // Constructor de table
      // ------------------------------------------
      // Recorremos el array en opciones y creamos un nuevo array multidimensional,
      // añadiendo objetos para cada celda
      for (var i = 0; i < opt.table.length; i++) {
        var temp = [];

        // Añadimos a cada uno el índice (x - y) y la letra (obviamente)
        for (var j = 0; j < opt.table[i].length; j++) {
          temp.push({
            x: j,
            y: i,
            letter: opt.table[i][j]
          });
        }

        scope.table.push(temp);
      }

      /**
       * Busca la palabra en base a las coordenadas (índices)
       */
      scope.searchWord = function (cell) {
        if (!scope.startPoint) {
          // Define el punto inicial
          scope.startPoint = cell;
        } else {
          // ============================================================================
          // Validación y calificación
          // ============================================================================
          var str = '', // cadena encontrada
            rightSelection = false, // define si la selección fue bien realizada
            found = false; // Variable que alberga la palabra encontrada, si es el caso

          // Recorremos las celdas y recuperamos la palabra formada
          rightSelection = scope.forEachCell(scope.startPoint, cell, function (cell) {
            str += cell.letter;
          });

          // Si la selección no se hizo bien, entonces termina la función
          if (!rightSelection) {
            scope.startPoint = false; // vuelve al estado inicial
            return;
          }

          scope.wordGroups.forEach(function (group) {
            group.items.forEach(function (word) {
              // Verificamos la palabra, tanto de una forma, como al revés
              if (word.back === str || word.back === str.split("").reverse().join("")) {
                found = word;
              }
            });
          });

          // Si la palabra ha sido encontrada y no ha sido completada anteriormente, la completamos
          if (found) {
            if (!found.completed) {
              found.completed = true; // la marcamos como completada
              scope.rightAnswer = Math.random(); // Disparamos el evento de respuesta correcta

              rightAnswers++;

              // Recorremos nuevamente las celdas para marcarlas como terminadas
              scope.forEachCell(scope.startPoint, cell, function (cell) {
                cell.completed = true;
              });
            }
          } else {
            // Respuesta incorrecta
            scope.wrongAnswer = Math.random();
          }

          chances--; // Reducimos las posibilidades
          scope.startPoint = false; // vuelve al estado inicial

          // Si se acaban las oportunidades, o se terminan todas las palabras
          if (chances === 0 || rightAnswers === totalWords) {
            if (rightAnswers >= minRightAnswers) {
              scope.$root.isNextEnabled = true;
              scope.success = true;
            } else {
              scope.failure = true;
            }
          }
        }

        scope.cleanTable(); // Limpia la tabla
      };


      /**
       * Muestra el camino en caso de que sea correcto
       */
      scope.showPath = function (cell) {
        if (scope.startPoint) {
          scope.cleanTable(); // Limpia la tabla

          scope.forEachCell(scope.startPoint, cell, function (cell) {
            cell.selected = true;
          });
        }
      };


      /**
       * Limpia la tabla
       */
      scope.cleanTable = function () {
        for (var i = 0; i < opt.table.length; i++) {
          for (var j = 0; j < opt.table[i].length; j++) {
            scope.table[i][j].selected = false;
          }
        }
      };

      /**
       * Recorre las celdas desde el punto de inicio al punto final.
       *
       * @return boolean Selección correcta o no
       */
      scope.forEachCell = function (start, end, callback) {
        var rightSelection = false;

        // Horizontales
        if (end.x === start.x) {

          rightSelection = true;

          if (end.y > start.y) {
            for (var i = start.y; i <= end.y; i++) {
              callback(scope.table[i][end.x]);
            }
          } else {
            for (var i = start.y; i >= end.y; i--) {
              callback(scope.table[i][end.x]);
            }
          }
        } //fin Horizontales

        // Verticales
        if (end.y === start.y) {

          rightSelection = true;

          if (end.x > start.x) {
            for (var i = start.x; i <= end.x; i++) {
              callback(scope.table[end.y][i]);
            }
          } else {
            for (var i = start.x; i >= end.x; i--) {
              callback(scope.table[end.y][i]);
            }
          }
        } //fin Verticales

        // abajo - derecha
        if (start.x < end.x && start.y < end.y && (start.x - end.x === start.y - end.y)) {

          rightSelection = true;

          for (var y = start.y; y <= end.y; y++) {
            for (var x = start.x; x <= end.x; x++) {
              if (start.x - x === start.y - y) {
                callback(scope.table[y][x]);
              }
            }
          }
        } // fin abajo - derecha

        // arriba - derecha
        if (start.x < end.x && start.y > end.y && (start.x - end.x === end.y - start.y)) {

          rightSelection = true;

          for (var y = end.y; y <= start.y; y++) {
            for (var x = start.x; x <= end.x; x++) {
              if (start.x - x === y - start.y) {
                callback(scope.table[y][x]);
              }
            }
          }
        } // fin arriba - derecha

        // abajo - izquierda
        if (start.x > end.x && start.y < end.y && (end.x - start.x === start.y - end.y)) {

          rightSelection = true;

          for (var y = start.y; y <= end.y; y++) {
            for (var x = end.x; x <= start.x; x++) {
              if (x - start.x === start.y - y) {
                callback(scope.table[y][x]);
              }
            }
          }
        } // fin abajo - izquierda

        // arriba - izquierda
        if (start.x > end.x && start.y > end.y && (end.x - start.x === end.y - start.y)) {

          rightSelection = true;

          for (var y = end.y; y <= start.y; y++) {
            for (var x = end.x; x <= start.x; x++) {
              if (x - start.x === y - start.y) {
                callback(scope.table[y][x]);
              }
            }
          }
        } // fin arriba - izquierda

        return rightSelection;
      };

      /**
       * Devuelve los estilos personalizados de las pistas.
       */
      scope.getClueStyles = function () {
        return opt.clueStyle ? opt.clueStyle : '';
      };


    }
  };
});


;var lizMultipleMark = angular.module('lizMultipleMark', []);

// Knockout Pairs Factory
lizMultipleMark.factory('multipleMarkActivity', function ($rootScope) {

	var multipleMarkActivity = {};

	/**
	 * Crea el ViewModel
	 */
	multipleMarkActivity.create = function (options) {
		return new multipleMarkActivity._ViewModel(options);
	}

	/**
	 * Genera el ViewModel de las parejas con sus funcionalidades
	 *
	 * Recibe un objeto con las siguientes propiedades
	 *
	 * @param {object}		options						Opciones a utilizar.
	 * @param {Array}		options.items				Elementos donde se suelta la marca. Deben tener la propiedad bool "answer"
	 * @param {integer}		options.chances				Número de posibilidades que tiene el usuario de hacer la actividad
	 * @param {integer}		options.minRightAnswers		Número mínimo de respuestas correctas
	 * @param {function}	options.successCallback		Función que se llama cuando se termina la actividad de forma satisfactoria
	 * @param {function}	options.rightAnswerCallback	Función que se llama cuando la respuesta es correcta
	 *
	 */
	multipleMarkActivity._ViewModel = function (options) {
		var self = this,
				rightAnswers = 0,
				chances = typeof options.chances !== "undefined" ? options.chances : options.items.length,
				minRightAnswers = options.minRightAnswers,
				maximumElements = 1;


		self.answers = ko.observableArray(options.answers);
		self.items = ko.observableArray(options.items);

		// Añadimos a cada item un observableArray para que puedan recibir las marcas
		ko.utils.arrayForEach(self.items(), function(item){
			item._target = ko.observableArray();
			item._target._ids = item.answers; // para poder identificar si esta bueno o malo
		});

		// Carpeta de recursos desde angular
		self.resources = $rootScope.resources;

		// Triggers que se activan cuando la respuesta es correcta/incorrecta
		self.rightAnswer = ko.observable();
		self.wrongAnswer = ko.observable();

		// Triggers cuando la actividad termina satisfactoria y/o insatisfactoriamente
		self.failure = ko.observable(false);
		self.success = ko.observable(false);

		/**
		 * Define si el target esta lleno utilizando self.maximumElements
		 */
		self.isContainerFull = function (parent) {
			return parent().length < maximumElements;
		};

		/**
		 * Función que se ejecuta al soltar los elementos
		 */
		self.verifyAnswer = function (arg) {
			var item = arg.item,
			parent = arg.targetParent;

			// Buscamos el id dentro de las respuestas
			if(parent._ids.indexOf(item.id) >= 0){
				// respuesta correcta
				self.rightAnswer(item);
				rightAnswers++;

				if(typeof options.rightAnswerCallback !== "undefined") options.rightAnswerCallback(item);
			} else {
				// respuesta incorrecta
				self.wrongAnswer(item);
				arg.cancelDrop = true; // Devuelve el elemento
			}

			chances--;


			// Final de la actividad
			if(chances === 0){
				if(rightAnswers >= minRightAnswers){
					// éxito
					self.success(true);

					$rootScope.isNextEnabled = true; // Activamos la siguiente ruta en angular

					if(typeof options.successCallback !== "undefined") options.successCallback();

				} else {
					// Fracaso
					self.failure(true);
				}
			}
		}
	};

	/**
	 * Inicializa la instancia del ViewModel creado con multipleMarkActivity.create
	 *
	 * @param {object} instance Intancia del VM de knockout
	 */
	multipleMarkActivity.run = function (instance) {
		ko.cleanNode($('#main-container')[0]);
		ko.bindingHandlers.sortable.beforeMove = instance.verifyAnswer;
		ko.applyBindings(instance, $('#main-container')[0]);
	};

	return multipleMarkActivity;

});

lizMultipleMark.directive('multipleMark', function  (multipleMarkActivity) {
	return {
		restrict: 'E',
		transclude: true,
		scope: {
			options: '=',
			description: '@'
		},
		templateUrl: '../views/activities/multiple_mark.html',
		link: function postLink(scope, element, attrs) {
			// Corremos la aplicación
			multipleMarkActivity.run(multipleMarkActivity.create(scope.options));
		}
	}; 
});

var lizMultipleSelection = angular.module('lizMultipleSelection', ['factories']);

lizMultipleSelection.directive('multipleSelection', function  (shuffleArrayFactory) {
    return {
        restrict: 'E',
		scope: {
			options: '=',
			description: '@'
		},
        templateUrl: '../views/activities/multiple_selection.html',
		link: function postLink(scope, element, attrs) {

			scope.items = shuffleArrayFactory.run(scope.options.items);
			scope.optionsPerRow = scope.options.hasOwnProperty('optionsPerRow') ? scope.options.optionsPerRow : false;

			// Revolvemos las opciones
			angular.forEach(scope.items, function(item){
				item.options = shuffleArrayFactory.run(item.options);
			});

			// Variables de éxito - fracaso
			scope.success = false;
			scope.failure = false;

			scope.chances = typeof scope.options.chances !== "undefined" ? scope.options.chances : scope.items.length; // Posibilidades de realizar la actividad
			scope.rightAnswers = 0; // contador de respuestas buenas
			scope.minRightAnswers = scope.options.minRightAnswers; // número mínimo de respuestas

			// Disparadores para las preguntas buenas y malas
			scope.rightAnswer = false;
			scope.wrongAnswer = false;

			/**
			 * Verifica la respuesta
			 */
			scope.verify = function (item, option) {

				if (option.answer) {
					// respuesta buena
					item.isRight = true;

					scope.rightAnswers++;
				} else {
					// Respuesta incorrecta
					item.isWrong = true;
				}

				scope.chances--;

				//// Fin de la actividad
				if(scope.chances === 0) {
					if (scope.rightAnswers >= scope.minRightAnswers) {
						scope.success = true;

						// Activamos la siguiente
						scope.$root.isNextEnabled = true;
					} else {
						scope.failure = true;
					}
				}
			};	

			/**
			 * Estilos de las opciones
			 */
			scope.getOptionsStyles = function () {

				// Si se define el número de elementos por ronda, devolvemos los estilos definidos
				if(scope.optionsPerRow)
					return "width: " + (100 / scope.optionsPerRow) + "%; float: left";

				// Por defecto
				return "";

			};

		}
	}; 
});

var lizNumericSequences = angular.module('lizNumericSequences', []);

lizNumericSequences.directive('numericSequences', function  () {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			description: '@',
			audio: '@'
		},
		templateUrl: '../views/activities/numeric_sequences.html',
		link: function (scope, element, attrs) {

			var opt = scope.options,
				rightAnswers = 0, // Contador de preguntas buenas
				minRightAnswers = opt.minRightAnswers,
				chances = 0, // Contador de posibilidades
				sequences = opt.sequences;

			scope.sequences = [];

			// Disparadores para las preguntas buenas/malas
			scope.rightAnswer = false;
			scope.wrongAnswer = false;

			scope.success = false;
			scope.failure = false;
			
			// Constructor de sequences
			sequences.forEach(function(s){
				scope.sequences.push([]); // Añadimos el nuevo array

				var temp = scope.sequences[ scope.sequences.length - 1 ], // Puntero del último array
					number = {}; // variable temporal para los números

				for(var i=0; i < s.sequence.length; i++){
					number = { number: s.sequence[i] }; // Creamos el nuevo elemento

					// si el elemento definido esta lleno, entonces solo se muestra. En caso contrario
					// se crea un input (html)
					if(s.toFill.indexOf(i) >= 0) {
						chances++; // alimentamos el número de posibilidades
						number.filled = false;  
					} else {
						number.filled = true;
					} 

					// añadimos el elemento
					temp.push(number); 
				}
			}); // END forEach

			/**
			 * Verifica la respuesta en el item
			 */
			scope.verify = function (item) {
				if(item.input === '') return; 

				// Si no es un número, borramos el último caractér
				if(!opt.allowAll) {
					if(!item.input.match(/^\d+$/)){
						item.input = item.input.slice(0, -1);
						return;
					}		
				}

				// Si se ha llenado el input con los dígitos necesarios
				if(item.input.length === item.number.length){
					// Verificamos la respuesta
					if(item.input === item.number){
						scope.rightAnswer = item.number;
						rightAnswers++;
					} else {
						scope.wrongAnswer = item.number;
					}

					item.completed = true; // marcamos el item como completo, para desactivar el input
					chances--;

					// fin de la actividad
					if(chances === 0){
						if(rightAnswers >= minRightAnswers){
							scope.$root.isNextEnabled = true;
							scope.success = true;
						} else {
							scope.failure = true;
						}
					} // if 
				} // if
			}; // verify()

		}
	}; 
});

var lizOneGroup = angular.module('lizOneGroup', []);

// Knockout Pairs Factory
lizOneGroup.factory('oneGroupActivity', function ($rootScope) {

	var oneGroupActivity = {};

	/**
	 * Crea el ViewModel
	 */
	oneGroupActivity.create = function (options) {
		return new oneGroupActivity._ViewModel(options);
	}

	/**
	 * Genera el ViewModel de las parejas con sus funcionalidades
	 *
	 * Recibe un objeto con las siguientes propiedades
	 *
	 * @param {object}		opt						Opciones a utilizar.
	 * @param {Array}		opt.data				Información de los elementos. Es necesario que cada una tenga la propiedad:
	 *
	 * 	answer: {boolean} define si la respuesta es correcta o incorrecta y puede ser soltada en el contenedor
	 * 	src: {string} imagen para el elemento
	 * 	alt: {string} texto alternativo
	 *
	 * @param {integer}		opt.chances				Número de posibilidades que tiene el usuario de hacer la actividad
	 * @param {integer}		opt.minRightAnswers		Número mínimo de respuestas correctas
	 * @param {function}	opt.successCallback		Función que se llama cuando se termina la actividad de forma satisfactoria
	 * @param {function}	opt.rightAnswerCallback	Función que se llama cuando la respuesta es correcta
	 * @param {integer}		opt.itemsPerRow			Número de elementos por fila. 3 por defecto
	 * @param {boolean}		opt.priority			Define si el botón de siguiente estará activo desde el inicio
	 *
	 */
	oneGroupActivity._ViewModel = function (opt) {
		var self = this;

		self.groupImg = opt.hasOwnProperty('groupImg') ? opt.groupImg : false;
		self.groupAlt = opt.hasOwnProperty('groupAlt') ? opt.groupAlt : false;

		// Observables 
		self.items = ko.observableArray(opt.data);
		self.target = ko.observableArray();

		// Propiedades por defecto, si no existen
		ko.utils.arrayForEach(self.items(), function(item){
			if(! item.hasOwnProperty('answer')) item.answer = true;
			if(! item.hasOwnProperty('title')) item.title = ''; 
			if(! item.hasOwnProperty('text')) item.text = false; 
		});

		// Ruta a la carpeta de imágenes
		self.resources = $rootScope.resources;
		self.itemsPerRow = typeof opt.itemsPerRow !== "undefined" ? opt.itemsPerRow : 3;

		// Disparador de preguntas correctas/incorrectas
		self.rightAnswer = ko.observable();
		self.wrongAnswer = ko.observable();

		self.success = ko.observable(false);
		self.failure = ko.observable(false);

		self.rightAnswers = 0;

		self.chances = opt.chances ? opt.chances : opt.data.length;
		self.totalRightAnswer = opt.totalRightAnswer ? opt.totalRightAnswer : opt.data.length;
		self.priority = opt.priority

		// audio
		self.audio = ko.observable(opt.audio);

		/**
		 * Reproduce el audio de la instrucción.
		 */
		self.playAudio = function () {
			$('#audio-instruction')[0].play();
		};

		/**
		 *	Función que se ejecuta al soltar el objeto dentro del contenedor
		 */
		self.verifyAnswer = function (arg) {

			// No hacer nada y salir de la función, si el elemento se soltó en el mismo grupo inicial
			if(arg.sourceParent() == arg.targetParent()) return;

			// Calculamos si la respuesta es correcta o no usando la propiedad 'answer'
			if (arg.item.answer) {
				// Respuesta correcta
				self.rightAnswer(arg.item);
				self.rightAnswers++;

				// Llama a la función de respuesta buena
				if (typeof opt.rightAnswerCallback !== "undefined") opt.rightAnswerCallback();

			} else {
				// Respuesta Incorrecta
				self.wrongAnswer(arg.item);
				arg.cancelDrop = true; // Devuelve el elemento a su posición origina
			}

			// Reducimos las posibilidades
			self.chances--;

			// Fin de la actividad
			if (self.chances === 0 || self.rightAnswers >= self.totalRightAnswer ) {
				if(self.rightAnswers >= opt.minRightAnswers) {
					// éxito
					self.success(true);

					// Llama a la función de éxito
					if (typeof opt.successCallback !== "undefined") opt.successCallback();

					// Eliminamos beforeGoNext, si existe
					if(self.priority){
						$rootScope.beforeGoNext = undefined; // Limpiamos la función	
					}

					// Activamos la siguiente ruta
					$rootScope.isNextEnabled = true;

				} else {
					// Fracaso
					self.failure(true);
				}
			}

			// Si hay prioridad, activa/desactiva el botón de siguiente
			if(self.priority){
				if(self.rightAnswers >= opt.minRightAnswers) $rootScope.isNextEnabled = true;
				else $rootScope.isNextEnabled = false;

				$rootScope.$apply();
			}
		};

		// ===========================================================================
		// Si se a decidido usar la prioridad
		// ===========================================================================
		if(self.priority){

			$rootScope.beforeGoNext = function () {
				// Si el número de elementos es mayor al número de respuestas requeridas: ÉXITO!!!
				if(self.target().length >= opt.minRightAnswers){

					if (typeof opt.successCallback !== "undefined") opt.successCallback();
					self.success(true);
					return true; 

				} else {

					self.failure(true);
					return false; 

				}
			};

		}

	};

	/**
	 * Inicializa la instancia del ViewModel creado con oneGroupActivity.create
	 *
	 * @param {object} instance Intancia del VM de knockout
	 */
	oneGroupActivity.run = function (instance) {
		ko.cleanNode($('#main-container')[0]);
		ko.bindingHandlers.sortable.beforeMove = instance.verifyAnswer;
		ko.applyBindings(instance, $('#main-container')[0]);
	};

	return oneGroupActivity;

});

lizOneGroup.directive('oneGroup', function  (oneGroupActivity) {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			audio: '@',
			description: '@',
			title: '@'
		},
		templateUrl: '../views/activities/one_group.html',
		link: function postLink(scope, element, attrs) {
			// Añadimos el audio a options
			scope.options.audio = typeof scope.audio !== "undefined" ? scope.audio : false;

			oneGroupActivity.run(oneGroupActivity.create(scope.options));
		}
	}; 
});


var lizOneGroupRule = angular.module('lizOneGroupRule', []);

// Knockout Pairs Factory
lizOneGroupRule.factory('oneGroupRuleActivity', function ($rootScope) {

	var oneGroupRuleActivity = {};

	/**
	 * Crea el ViewModel
	 */
	oneGroupRuleActivity.create = function (options) {
		return new oneGroupRuleActivity._ViewModel(options);
	}

	/**
	 * Genera el ViewModel de las parejas con sus funcionalidades
	 *
	 * Recibe un objeto con las siguientes propiedades
	 *
	 * @param {object}		opt						Opciones a utilizar.
	 * @param {Array}		opt.data				Información de los elementos. Es necesario que cada una tenga la propiedad:
	 *
	 * 	answer: {boolean} define si la respuesta es correcta o incorrecta y puede ser soltada en el contenedor
	 * 	src: {string} imagen para el elemento
	 * 	alt: {string} texto alternativo
	 *
	 * @param {integer}		opt.chances				Número de posibilidades que tiene el usuario de hacer la actividad
	 * @param {integer}		opt.minRightAnswers		Número mínimo de respuestas correctas
	 * @param {function}	opt.successCallback		Función que se llama cuando se termina la actividad de forma satisfactoria
	 * @param {function}	opt.rightAnswerCallback	Función que se llama cuando la respuesta es correcta
	 * @param {integer}		opt.itemsPerRow			Número de elementos por fila. 3 por defecto
	 * @param {boolean}		opt.priority			Define si el botón de siguiente estará activo desde el inicio
	 *
	 */
	oneGroupRuleActivity._ViewModel = function (opt) {
		var self = this;

		self.groupImg = opt.hasOwnProperty('groupImg') ? opt.groupImg : false;
		self.groupAlt = opt.hasOwnProperty('groupAlt') ? opt.groupAlt : false;

		// Observables 
		self.items = ko.observableArray(opt.data);
		self.target = ko.observableArray();

		// Propiedades por defecto, si no existen
		ko.utils.arrayForEach(self.items(), function(item){
			if(! item.hasOwnProperty('answer')) item.answer = true;
			if(! item.hasOwnProperty('title')) item.title = ''; 
			if(! item.hasOwnProperty('text')) item.text = false; 
		});

		// Ruta a la carpeta de imágenes
		self.resources = $rootScope.resources;
		self.itemsPerRow = typeof opt.itemsPerRow !== "undefined" ? opt.itemsPerRow : 3;

		// Disparador de preguntas correctas/incorrectas
		self.rightAnswer = ko.observable();
		self.wrongAnswer = ko.observable();

		self.success = ko.observable(false);
		self.failure = ko.observable(false);

		self.rightAnswers = 0;

		self.chances = opt.chances ? opt.chances : opt.data.length;
		self.totalRightAnswer = opt.totalRightAnswer ? opt.totalRightAnswer : opt.data.length;
		self.priority = opt.priority

		// audio
		self.audio = ko.observable(opt.audio);

		/**
		 * Reproduce el audio de la instrucción.
		 */
		self.playAudio = function () {
			$('#audio-instruction')[0].play();
		};

		/**
		 *	Función que se ejecuta al soltar el objeto dentro del contenedor
		 */
		self.verifyAnswer = function (arg) {

			// No hacer nada y salir de la función, si el elemento se soltó en el mismo grupo inicial
			if(arg.sourceParent() == arg.targetParent()) return;

			// Calculamos si la respuesta es correcta o no usando la propiedad 'answer'
			if (arg.item.answer) {
				// Respuesta correcta
				self.rightAnswer(arg.item);
				self.rightAnswers++;

				// Llama a la función de respuesta buena
				if (typeof opt.rightAnswerCallback !== "undefined") opt.rightAnswerCallback();

			} else {
				// Respuesta Incorrecta
				self.wrongAnswer(arg.item);
				arg.cancelDrop = true; // Devuelve el elemento a su posición origina
			}

			// Reducimos las posibilidades
			self.chances--;

			// Fin de la actividad
			if (self.chances === 0 || self.rightAnswers >= self.totalRightAnswer ) {
				if(self.rightAnswers >= opt.minRightAnswers) {
					// éxito
					self.success(true);

					// Llama a la función de éxito
					if (typeof opt.successCallback !== "undefined") opt.successCallback();

					// Eliminamos beforeGoNext, si existe
					if(self.priority){
						$rootScope.beforeGoNext = undefined; // Limpiamos la función	
					}

					// Activamos la siguiente ruta
					$rootScope.isNextEnabled = true;

				} else {
					// Fracaso
					self.failure(true);
				}
			}

			// Si hay prioridad, activa/desactiva el botón de siguiente
			if(self.priority){
				if(self.rightAnswers >= opt.minRightAnswers) $rootScope.isNextEnabled = true;
				else $rootScope.isNextEnabled = false;

				$rootScope.$apply();
			}
		};

		// ===========================================================================
		// Si se a decidido usar la prioridad
		// ===========================================================================
		if(self.priority){

			$rootScope.beforeGoNext = function () {
				// Si el número de elementos es mayor al número de respuestas requeridas: ÉXITO!!!
				if(self.target().length >= opt.minRightAnswers){

					if (typeof opt.successCallback !== "undefined") opt.successCallback();
					self.success(true);
					return true; 

				} else {

					self.failure(true);
					return false; 

				}
			};

		}

	};

	/**
	 * Inicializa la instancia del ViewModel creado con oneGroupActivity.create
	 *
	 * @param {object} instance Intancia del VM de knockout
	 */
	oneGroupRuleActivity.run = function (instance) {
		ko.cleanNode($('#main-container')[0]);
		ko.bindingHandlers.sortable.beforeMove = instance.verifyAnswer;
		ko.applyBindings(instance, $('#main-container')[0]);
	};

	return oneGroupRuleActivity;

});

lizOneGroupRule.directive('oneGroupRule', function  (oneGroupRuleActivity) {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			audio: '@',
			description: '@',
			title: '@',
		},
		templateUrl: '../views/activities/one_group_rule.html',
		link: function postLink(scope, element, attrs) {
			// Añadimos el audio a options
			scope.options.audio = typeof scope.audio !== "undefined" ? scope.audio : false;

			oneGroupRuleActivity.run(oneGroupRuleActivity.create(scope.options));
		}
	}; 
});


var lizOneGroupShape = angular.module('lizOneGroupShape', []);

lizOneGroupShape.factory('oneGroupShapeActivity', function ($rootScope) {

	var oneGroupShapeActivity = {};

	/**
	 * Crea el ViewModel
	 */
	oneGroupShapeActivity.create = function (options) {
		return new oneGroupShapeActivity._ViewModel(options);
	}

	/**
	 * Genera el ViewModel de las parejas con sus funcionalidades
	 *
	 * Recibe un objeto con las siguientes propiedades
	 *
	 * @param {object}		options						Opciones a utilizar.
	 *
	 * @param {integer}		options.chances				Número de posibilidades que tiene el usuario de hacer la actividad
	 * @param {integer}		options.minRightAnswers		Número mínimo de respuestas correctas
	 * @param {function}	options.successCallback		Función que se llama cuando se termina la actividad de forma satisfactoria
	 * @param {function}	options.rightAnswerCallback	Función que se llama cuando la respuesta es correcta
	 *
	 */
	oneGroupShapeActivity._ViewModel = function (options) {
		var self = this;

		self.items = ko.observableArray(options.items); // Elementos a arrastrar
		self.canvas = options.canvas; // Forma del grupo
		self.canvasAlt = options.canvasAlt; // texto alternativo de la forma

		ko.utils.arrayForEach(self.items(), function (item) {
			if(! item.hasOwnProperty('answer')) item.answer = true; // Define si el objeto es una respuesta correcta
			if(! item.hasOwnProperty('startsInGroup')) item.startsInGroup = false; // Define si el objeto empieza insertado en el grupo
		});

		// Insertamos los elementos marcados en el grupo, removiéndolos de self.items
		self.group = ko.observableArray(self.items.remove(function(item){
			return item.startsInGroup;
		}));

		// Ruta a la carpeta de imágenes
		self.resources = $rootScope.resources;

		// Disparador de preguntas correctas/incorrectas
		self.rightAnswer = ko.observable();
		self.wrongAnswer = ko.observable();

		self.success = ko.observable(false);
		self.failure = ko.observable(false);

		self.rightAnswers = 0;

		self.chances = options.chances ? options.chances : options.items.length;

		/**
		 * Obtiene los estilos de cada elemento
		 */
		self.getStyles = function (item) {
			var styles = '';

			if(! item.answer) return;

			styles += 'width: ' + item.w + '%;';
			styles += 'height: ' + item.h + '%;';
			styles += 'top: ' + item.t + '%;';
			styles += 'left: ' + item.l + '%;';

			return styles;
		}

		/**
		 *	Función que se ejecuta al soltar el objeto dentro del contenedor
		 */
		self.verifyAnswer = function (arg) {

			// No hacer nada y salir de la función, si el elemento se soltó en el mismo grupo inicial
			if(arg.sourceParent() == arg.targetParent()) return;

			// Calculamos si la respuesta es correcta o no usando la propiedad 'answer'
			if (arg.item.answer) {
				// Respuesta correcta
				self.rightAnswer(arg.item);
				self.rightAnswers++;

				// Llama a la función de respuesta buena
				if (typeof options.rightAnswerCallback !== "undefined") options.rightAnswerCallback();

			} else {
				// Respuesta Incorrecta
				self.wrongAnswer(arg.item);
				arg.cancelDrop = true; // Devuelve el elemento a su posición origina
			}

			// Reducimos las posibilidades
			self.chances--;

			// Fin de la actividad
			if (self.chances === 0) {
				if(self.rightAnswers >= options.minRightAnswers) {
					// éxito
					self.success(true);

					// Llama a la función de éxito
					if (typeof options.successCallback !== "undefined") options.successCallback();

					// Activamos la siguiente ruta
					$rootScope.isNextEnabled = true;
				} else {
					// Fracaso
					self.failure(true);
				}
			}
		};

		};

		/**
		 * Inicializa la instancia del ViewModel creado con oneGroupShapeActivity.create
		 *
		 * @param {object} instance Intancia del VM de knockout
		 */
		oneGroupShapeActivity.run = function (instance) {
			ko.cleanNode($('#main-container')[0]);
			ko.bindingHandlers.sortable.beforeMove = instance.verifyAnswer;
			ko.applyBindings(instance, $('#main-container')[0]);
		};

		return oneGroupShapeActivity;
});

lizOneGroupShape.directive('oneGroupShape', function  (oneGroupShapeActivity) {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			description: '@'
		},
		templateUrl: '../views/activities/one_group_shape.html',
		link: function postLink(scope, element, attrs) {
			oneGroupShapeActivity.run(oneGroupShapeActivity.create(scope.options));
		}
	}; 
});


var lizOneGroupToogle = angular.module('lizOneGroupToogle', []);

// Knockout Pairs Factory
lizOneGroupToogle.factory('oneGroupActivity', function ($rootScope) {

	var oneGroupActivity = {};

	/**
	 * Crea el ViewModel
	 */
	oneGroupActivity.create = function (options) {
		return new oneGroupActivity._ViewModel(options);
	}

	/**
	 * Genera el ViewModel de las parejas con sus funcionalidades
	 *
	 * Recibe un objeto con las siguientes propiedades
	 *
	 * @param {object}		opt						Opciones a utilizar.
	 * @param {Array}		opt.data				Información de los elementos. Es necesario que cada una tenga la propiedad:
	 *
	 * 	answer: {boolean} define si la respuesta es correcta o incorrecta y puede ser soltada en el contenedor
	 * 	src: {string} imagen para el elemento
	 * 	alt: {string} texto alternativo
	 *
	 * @param {integer}		opt.chances				Número de posibilidades que tiene el usuario de hacer la actividad
	 * @param {integer}		opt.minRightAnswers		Número mínimo de respuestas correctas
	 * @param {function}	opt.successCallback		Función que se llama cuando se termina la actividad de forma satisfactoria
	 * @param {function}	opt.rightAnswerCallback	Función que se llama cuando la respuesta es correcta
	 * @param {integer}		opt.itemsPerRow			Número de elementos por fila. 3 por defecto
	 * @param {boolean}		opt.priority			Define si el botón de siguiente estará activo desde el inicio
	 *
	 */
	oneGroupActivity._ViewModel = function (opt) {
		var self = this;

		self.groupImg = opt.hasOwnProperty('groupImg') ? opt.groupImg : false;
		self.groupAlt = opt.hasOwnProperty('groupAlt') ? opt.groupAlt : false;

		// Observables 
		self.items = ko.observableArray(opt.data);
		self.target = ko.observableArray();

		// Propiedades por defecto, si no existen
		ko.utils.arrayForEach(self.items(), function(item){
			if(! item.hasOwnProperty('answer')) item.answer = true;
			if(! item.hasOwnProperty('title')) item.title = ''; 
			if(! item.hasOwnProperty('text')) item.text = false; 
		});

		// Ruta a la carpeta de imágenes
		self.resources = $rootScope.resources;
		self.itemsPerRow = typeof opt.itemsPerRow !== "undefined" ? opt.itemsPerRow : 3;

		// Disparador de preguntas correctas/incorrectas
		self.rightAnswer = ko.observable();
		self.wrongAnswer = ko.observable();

		self.success = ko.observable(false);
		self.failure = ko.observable(false);

		self.rightAnswers = 0;

		self.chances = opt.chances ? opt.chances : opt.data.length;
		self.totalRightAnswer = opt.totalRightAnswer ? opt.totalRightAnswer : opt.data.length;
		self.priority = opt.priority

		// audio
		self.audio = ko.observable(opt.audio);

		/**
		 * Reproduce el audio de la instrucción.
		 */
		self.playAudio = function () {
			$('#audio-instruction')[0].play();
		};

		/**
		 *	Función que se ejecuta al soltar el objeto dentro del contenedor
		 */
		self.verifyAnswer = function (arg) {

			// No hacer nada y salir de la función, si el elemento se soltó en el mismo grupo inicial
			if(arg.sourceParent() == arg.targetParent()) return;

			// Calculamos si la respuesta es correcta o no usando la propiedad 'answer'
			if (arg.item.answer) {
				// Respuesta correcta
				self.rightAnswer(arg.item);
				self.rightAnswers++;

				// Llama a la función de respuesta buena
				if (typeof opt.rightAnswerCallback !== "undefined") opt.rightAnswerCallback();

			} else {
				// Respuesta Incorrecta
				self.wrongAnswer(arg.item);
				arg.cancelDrop = true; // Devuelve el elemento a su posición origina
			}

			// Reducimos las posibilidades
			self.chances--;

			// Fin de la actividad
			if (self.chances === 0 || self.rightAnswers >= self.totalRightAnswer ) {
				if(self.rightAnswers >= opt.minRightAnswers) {
					// éxito
					self.success(true);

					// Llama a la función de éxito
					if (typeof opt.successCallback !== "undefined") opt.successCallback();

					// Eliminamos beforeGoNext, si existe
					if(self.priority){
						$rootScope.beforeGoNext = undefined; // Limpiamos la función	
					}

					// Activamos la siguiente ruta
					$rootScope.isNextEnabled = true;

				} else {
					// Fracaso
					self.failure(true);
				}
			}

			// Si hay prioridad, activa/desactiva el botón de siguiente
			if(self.priority){
				if(self.rightAnswers >= opt.minRightAnswers) $rootScope.isNextEnabled = true;
				else $rootScope.isNextEnabled = false;

				$rootScope.$apply();
			}
		};

		// ===========================================================================
		// Si se a decidido usar la prioridad
		// ===========================================================================
		if(self.priority){

			$rootScope.beforeGoNext = function () {
				// Si el número de elementos es mayor al número de respuestas requeridas: ÉXITO!!!
				if(self.target().length >= opt.minRightAnswers){

					if (typeof opt.successCallback !== "undefined") opt.successCallback();
					self.success(true);
					return true; 

				} else {

					self.failure(true);
					return false; 

				}
			};

		}

	};

	/**
	 * Inicializa la instancia del ViewModel creado con oneGroupActivity.create
	 *
	 * @param {object} instance Intancia del VM de knockout
	 */
	oneGroupActivity.run = function (instance) {
		ko.cleanNode($('#main-container')[0]);
		ko.bindingHandlers.sortable.beforeMove = instance.verifyAnswer;
		ko.applyBindings(instance, $('#main-container')[0]);
	};

	return oneGroupActivity;

});

lizOneGroupToogle.directive('oneGroupToogle', function  (oneGroupActivity) {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			audio: '@',
			description: '@',
			title: '@'
		},
		templateUrl: '../views/activities/one_group_toogle.html',
		link: function postLink(scope, element, attrs) {
			// Añadimos el audio a options
			scope.options.audio = typeof scope.audio !== "undefined" ? scope.audio : false;

			oneGroupActivity.run(oneGroupActivity.create(scope.options));
		}
	}; 
});


var lizOperationInput = angular.module('lizOperationInput', []);

lizOperationInput.directive('operationInput', function  () {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			audio: '@',
			description: '@'
		},
		templateUrl: '../views/activities/operation_input.html',
		link: function postLink(scope, element, attrs) {
			var opt = scope.options,
				minRightAnswers = opt.minRightAnswers,
				rightAnswers = 0,
				completedInputs = 0, // Contador para encontrar el fin de la actividad
				totalInputs = opt.units.length + 1, // Unidades + total
				inputWidth = opt.hasOwnProperty('inputWidth') ? opt.inputWidth : false;

			// Remotamos las variables desde el controlador
			scope.units = opt.units;
			scope.total = opt.total;

			scope.rightAnswer = false; 
			scope.wrongAnswer = false; 
			scope.success = false; 
			scope.failure = false;

			// Constructor de items
			scope.units.forEach(function (item) {
				item._input = ''; // Modelo que se vincula al input 
				item.chances = opt.chancesPerInput; // Posibilidades por cada input
			});

			/**
			 * Verifica si el input cumple con las condiciones del número 
			 */
			scope.verify = function (item) {
				if(item._input === '') return; 

				// Si se ha llenado el input con los dígitos necesarios
				if(item.input.length === item._input.length){

					// Verificamos la respuesta. Añadimos una propiedad right o wrong para definir si el item es correcto o no
					if(item.input === item._input){
						rightAnswers++; // aumenta las respuestas correctas
						scope.rightAnswer = Math.random(); // Disparador de respuesta
						item.right = true;
					} else {
						item._input = '';
						scope.wrongAnswer = Math.random(); // Disparador de respuesta
						item.chances--;
					}

					// Termina y bloquea
					if(item.chances === 0 || item.right){
						item.completed = true; // marcamos el item como completo, para desactivar el input
						completedInputs++;
					}
					
					// fin de la actividad
					if(totalInputs === completedInputs){
						if(rightAnswers >= minRightAnswers){
							scope.$root.isNextEnabled = true;
							scope.success = true;
						} else {
							scope.failure = true;
						}
					} 
					
				} // if
			}; // verify()


			/*
			 * Devuelve los estilos de los inputs
			 */
			scope.getInputStyles = function () {
				var styles = '';

				if(inputWidth){
					styles += "width: " + inputWidth + ';';
				}

				return styles;
			};

		}
	}; 
});

var lizPairs = angular.module('lizPairs', []);

// Knockout Pairs Factory
lizPairs.factory('pairsActivity', function ($rootScope) {

	var pairsActivity = {};

  /**
   * Crea el ViewModel
   */
  pairsActivity.create = function (options) {
    return new pairsActivity._ViewModel(options);
  };

	/**
	 * Genera el ViewModel de las parejas con sus funcionalidades
	 *
	 * Recibe un objeto con las siguientes propiedades
	 *
	 * @param {object}		opt						Opciones a utilizar.
	 * @param {Array}			opt.data				Información de los elementos. Dentro de cada objeto, se pueden definir las propiedades:
	 *
	 *	target: Permite darle un orden apropiado a los targets. Debe empezar desde 0 y la propiedad opt.randomTargets debe estar desactivada
	 *
	 * @param {integer}		opt.chances				Número de posibilidades que tiene el usuario de hacer la actividad
	 * @param {integer}		opt.minRightAnswers		Número mínimo de respuestas correctas
	 * @param {boolean}		opt.randomItems			Define si los elementos deben ser puestos en forma aleatoria
	 * @param {boolean}		opt.randomTargets		Define si los objetivos debe ser puestos en forma aleatoria
	 * @param {function}	opt.successCallback		Función que se llama cuando se termina la actividad de forma satisfactoria
	 * @param {function}	opt.rightAnswerCallback	Función que se llama cuando la respuesta es correcta
	 *
	 */
	pairsActivity._ViewModel = function (opt) {
		var self = this;

		// ordena el array de forma aleatoria usando el algoritmo de Fisher-Yates
		self.shuffleArray = function(array) {
			for (var i = array.length - 1; i > 0; i--) {
				var j = Math.floor(Math.random() * (i + 1));
				var temp = array[i];
				array[i] = array[j];
				array[j] = temp;
			}
			return array;
		};

		// Inicializa las opciones
		var data = opt.data,
      minRightAnswers = opt.minRightAnswers ? opt.minRightAnswers : data.length,
      randomItems = opt.randomItems ? true : false,
      randomTargets = opt.randomTargets ? true : false,
      chances = opt.chances ? opt.chances : data.length,
      targets_data = data.slice(0),   // Clonamos el array para empezar a trabajar
      completedItems = 0, // contador de elementos completos
      border = opt.hasOwnProperty('border') ? opt.border : true,
      padding = opt.hasOwnProperty('padding') ? opt.padding : true;

		// Objetos aleatorios
		if(randomItems) {
			data = self.shuffleArray(data);
		}

		// Creamos los índices para la posición absoluta
		for(var i = 0; i < data.length; i++){
			data[i]._index = i;
		}

		self.itemsPerRow = (opt.hasOwnProperty("itemsPerRow")) ? opt.itemsPerRow : opt.data.length;

		// audio
		self.audio = ko.observable(opt.audio);

		// Definimos los observableArrays para items y targets
		self.items = ko.observableArray(data);
		self.targets = ko.observableArray();

		// Carpeta de recursos desde angular
		self.resources = $rootScope.resources;

		self.maximumElements = 1; // IMPORTANTE: Requerido para que los sortables no acepten más de un elemento
		self.rightAnswers = 0; // Inicializamos el número de respuestas buenas a 0

		// Triggers que se activan cuando la respuesta es correcta/incorrecta
		self.rightAnswer = ko.observable();
		self.wrongAnswer = ko.observable();

		// Triggers cuando la actividad termina satisfactoria y/o insatisfactoriamente
		self.failure = ko.observable(false);
		self.success = ko.observable(false);

		// ======================================================================================
		// Constructor de los targets
		// ======================================================================================

		// Si la opción de randomTargets está activada, aplicamos el orden aleatorio
		if(randomTargets){
			targets_data = self.shuffleArray(targets_data);
		} else {
			// En caso contrario, se utiliza la propiedad target, dentro del array de data
			targets_data.sort(function (a, b) {
				return ((a.target < b.target) ? -1 : ((a.target > b.target) ? 1 : 0));
			});
		}

		var _index = 1; // índice que se le asignará a cada uno de los elementos

		ko.utils.arrayForEach(targets_data, function (item) {
			// Creamos el nuevo target. Añadimos un índice para hacer la relación 1 a 1
			item._items = ko.observableArray();
			if (opt.hasOwnProperty("chancesPerItem")) {
				item.chances = opt.chancesPerItem - 1;
			}
			item._items._id = _index++;

			self.targets.push(item);
		});
		// ======================================================================================
		// FIN Constructor
		// ======================================================================================

		/**
		 * Reproduce el audio de la instrucción.
		 */
		self.playAudio = function () {
			$('#audio-instruction')[0].play();
		};

		// Define si el target esta lleno utilizando self.maximumElements
		self.isContainerFull = function (parent) {
			return parent().length < self.maximumElements;
		};

		// Función que se ejecuta cuando se suelta el elemento y hace toda la funcionalidad
		self.verifyAnswer = function (arg) {
			var parent = arg.targetParent,
			item = arg.item;

			// Si el target es igual al contenedor inicial, se devuelve a su posición original
			if(typeof parent._id === "undefined") {
				arg.cancelDrop = true;
				return;
			} else {
				// Compara el _id para encontrar la pareja idéntica. Si es igual, la respuesta es correcta
				if(parent._id === item._items._id){

					// RESPUESTA CORRECTA
					self.rightAnswers++;
					self.rightAnswer(item);
          			completedItems += 1;
          			// Reducimos en 1 las posibilidades
					chances -= 1;

					// Si se definió una función cuando la respuesta es correcta, se corre
					if(typeof opt.rightAnswerCallback !== "undefined" ) opt.rightAnswerCallback(item);

				} else {

					// RESPUESTA INCORRECTA
					self.wrongAnswer(item);
					arg.cancelDrop = true;

					if (item.hasOwnProperty("chances")) {
						if(item.chances === 0){
							// Reducimos en 1 las posibilidades
							chances -= 1;
							$("#" + item._items._id).hide(200);
			        	}else{item.chances--;}
					} else {
						// Reducimos en 1 las posibilidades
						chances -= 1;
					}
				}
			}

			// La actividad termina cuando el número de posibilidades se termina
			if(chances === 0 || completedItems === self.targets().length) {
				// Si el número de respuestas correctas es mayor o igual al requerido inicialmente
				if(self.rightAnswers >= minRightAnswers) {
					self.success(true); // Trigger de éxito

					// Se llama la función de éxito, definida por el desarrollador
					if (typeof opt.successCallback !== "undefined") opt.successCallback();

					$rootScope.isNextEnabled = true; // Activamos el siguiente
				} else {
					self.failure(true); // Trigger de fracaso
				}
			}
		};

    /**
     * Estilos de los elementos.
     */
     var _itemIndex = 0;
    self.getItemStyles = function (item) {
      var styles = '';

     //  if (opt.hasOwnProperty("itemsPerRow")) {
     //  	if (_itemIndex === opt.itemsPerRow) {
     //  		_itemIndex = 0;
     //  	}

     //  	if (item._index >= opt.itemsPerRow) {
  			// styles += 'top: 33%;';
     //  	}
     //  	styles += 'width: ' + (100 / opt.itemsPerRow) + '%;';
     //  	styles += 'left: ' + ((100 / opt.itemsPerRow) * _itemIndex ) + '%;';
     //  	_itemIndex++
     //  } else {
      	styles += 'width: ' + (100 / self.targets().length) + '%;';
      

      
      	styles += 'left: ' + ((100 / self.targets().length) * item._index ) + '%;';
      // }
      
      styles += 'position: absolute;';
      return styles;
    };

    /**
     * Estilos de cada objetivo.
     * @returns {string}
     */
    self.getTargetStyles = function () {
      var styles = '';

      if (opt.hasOwnProperty("itemsPerRow")) {
  		styles += 'width: ' + (100 / opt.itemsPerRow) + '%;';
      } else {
      	styles += 'width: ' + (100 / self.targets().length) + '%;';
      }
      
      if(typeof opt.targetStyles !== "undefined") styles += opt.targetStyles;

      return styles;
    };

		/**
		 * Estilos para elementos internos de target e item.
		 */
		self.getInnerStyles = function (item) {
			var styles = '';

			// Estilos Opcionales
			if(border) styles += 'border: 4px solid #000;';
			if(padding) styles += 'padding: 4px;';

			return styles;
		}

	};

	/**
	 * Inicializa la instancia del ViewModel creado con pairsActivity.create
	 *
	 * @param {object} instance Intancia del VM de knockout
	 */
	pairsActivity.run = function (instance) {
		ko.cleanNode($('#main-container')[0]);
		ko.bindingHandlers.sortable.beforeMove = instance.verifyAnswer;
		ko.applyBindings(instance, $('#main-container')[0]);
	};

	return pairsActivity;

});

lizPairs.directive('pairs', function  (pairsActivity) {
	return {
		restrict: 'E',
		transclude: true,
		scope: {
			options: '=',
			description: '@',
			audio:'@',
			titletop: '@',
			customClass: '@'
		},
		templateUrl: '../views/activities/pairs.html',
		link: function postLink(scope, element, attrs) {

			if(typeof scope.customClass !== "undefined"){
				scope.$root.customClass = scope.customClass;
			}

			// Definimos los contenedores y los elementos transcluídos
			var itemChildren = element.find('.transcluded item').children(),
			itemContainer = element.find('.item'),
			targetChildren = element.find('.transcluded target').children(),
			targetContainer = element.find('.target')
			itemTargetChildren = element.find('.transcluded item-target').children(),
			itemTargetContainer = element.find('.item-target');

			// Se añade cada uno de los hijos a la plantilla en la posición adecuada
			angular.forEach(itemChildren, function (elem) { itemContainer.append(elem); });
			angular.forEach(targetChildren, function (elem) { targetContainer.append(elem); });
			angular.forEach(itemTargetChildren, function (elem) { itemTargetContainer.append(elem); });

			// Se elimina el elemento transcluded del DOM
			element.find('.transcluded').remove();

			// Añadimos el audio a options
			scope.options.audio = typeof scope.audio !== "undefined" ? scope.audio : false;

			// Corremos la aplicación
			var vm = pairsActivity.create(scope.options);
			pairsActivity.run(vm);
		}
	}; 
});

var lizPairsInputs = angular.module('lizPairsInputs', []);

lizPairsInputs.directive('pairsInputs', function ($timeout) {
	return {
		restrict: 'E',
		templateUrl: '../views/activities/pairs_inputs.html',
		scope: {
			options: "=",
			title: '@',
			description: '@',
			img: '@',
			alt: '@',
			audio:'@',
			theme: '@'
		},
		link: function postLink(scope, element, attrs) {
			var opt = scope.options,
				minRightAnswers = opt.minRightAnswers,
				rightAnswers = 0,
				completedInputs = 0, // Contador para encontrar el fin de la actividad
				inputWidth = opt.hasOwnProperty('inputWidth') ? opt.inputWidth : false;

			attrs.$observe( 'theme', function(val) {
				if ( !angular.isDefined( val ) ) {
					scope.theme = 'default';
				}
			});

			scope.items = opt.items; // parejas de inputs
			scope.success = false; 
			scope.failure = false;

			// Constructor de items
			scope.items.forEach(function (item) {
				item._input = ''; // Modelo que se vincula al input 
				item.chances = opt.chancesPerInput; // Posibilidades por cada input
			});

			/**
			 * Verifica si el input cumple con las condiciones del número 
			 */
			scope.verify = function (item) {
				if(item._input === '') return; 

				// Si se ha llenado el input con los dígitos necesarios
				if(item.input.length === item._input.length){

					// Verificamos la respuesta. Añadimos una propiedad right o wrong para definir si el item es correcto o no
					if(item.input === item._input){
						rightAnswers++; // aumenta las respuestas correctas
						item.wrong = false; // Pasa a falso, para ocultarlo
						item.right = true; 
					} else {
						item.wrong = true;
						item._input = '';
						item.chances--;
					}

					// Termina y bloquea
					if(item.chances === 0 || item.right){
						item.completed = true; // marcamos el item como completo, para desactivar el input
						completedInputs++;
					}
					
					// fin de la actividad
					if(scope.items.length === completedInputs){
						if(rightAnswers >= minRightAnswers){
							scope.$root.isNextEnabled = true;
							scope.success = true;
						} else {
							scope.failure = true;
						}
					} 
					
				} // if
			}; // verify()


			/*
			 * Devuelve los estilos de los inputs
			 */
			scope.getInputStyles = function () {
				var styles = '';

				if(inputWidth){
					styles += "width: " + inputWidth + ';';
				}

				return styles;
			};

		}
	};
});

var lizPairsSquares = angular.module('lizPairsSquares', []);

// Knockout Pairs Factory
lizPairsSquares.factory('pairsSquaresActivity', function ($rootScope, shuffleArrayFactory) {

	var pairsSquaresActivity = {};

	/**
	 * Crea el ViewModel
	 */
	pairsSquaresActivity.create = function (options) {
		return new pairsSquaresActivity._ViewModel(options);
	}

	/**
	 * Genera el ViewModel de las parejas con sus funcionalidades
	 *
	 * Recibe un objeto con las siguientes propiedades
	 *
	 * @param {object}		options						Opciones a utilizar.
	 * @param {Array}		options.data				Información de los elementos. Dentro de cada objeto, se pueden definir las propiedades:
	 *
	 *	target: Permite darle un orden apropiado a los targets. Debe empezar desde 0 y la propiedad options.randomTargets debe estar desactivada
	 *
	 * @param {integer}		options.pairs				Número de parejas a colocar
	 * @param {integer}		options.chances				Número de posibilidades que tiene el usuario de hacer la actividad
	 * @param {integer}		options.minRightAnswers		Número mínimo de respuestas correctas
	 * @param {function}	options.successCallback		Función que se llama cuando se termina la actividad de forma satisfactoria
	 * @param {function}	options.rightAnswerCallback	Función que se llama cuando la respuesta es correcta
	 *
	 */
	pairsSquaresActivity._ViewModel = function (options) {
		var self = this;

		/**
		 * Usamos una clase especial para poder definir las parejas
		 */
		self.Pair = function (options) {
			this.container1 = ko.observableArray();
			this.container2 = ko.observableArray();

			this.container1._id = 1;
			this.container2._id = 2;

			this.container1._parent = this;
			this.container2._parent = this;
		}

		// Inicializa las opciones
		var chances = options.chances ? options.chances : options.items.lenght,
			counter = 0, // Contador para poner los id en los elementos de stack
			pairs = options.pairs,
			item_clone = {}, // Variable auxiliar para clonar el índice
			tempStack = []; // array temporal para stack

		self.pairsArray = ko.observableArray(); // Conjunto de parejas

		self.stack = ko.observableArray(); // Pila de elementos arrastrables

		// Alimentamos el array de parejas
		for (var i=0; i < pairs; i++) {
			self.pairsArray.push(new self.Pair({}));
		}

		// tomamos los items para crear el stack
		ko.utils.arrayForEach(options.items, function(item){
			// Si no tiene la propiedad answer, se define en falso
			if(! item.hasOwnProperty('answer')) item.answer = false;


			if(item.answer){
				item._id = ++counter;

				// Creamos un clon del elemento para añadirlo con otro serial
				item_clone = $.extend(true, {}, item);

				delete item_clone.answer;
				item_clone.serial = (Math.random() + 1).toString(36).substring(7);
				tempStack.push(item_clone); // Debemos agregarlo dos veces para así crear la pareja

			} else {
				item._id = -1;
			}

			delete item.answer; // Elimina el elemento answer
			item.serial = (Math.random() + 1).toString(36).substring(7); // añade una clave única
			tempStack.push(item);

		});

		// Añadimos los elementos al stack (observableArray)
		self.stack(shuffleArrayFactory.run(tempStack));

		// Carpeta de recursos desde angular
		self.resources = $rootScope.resources;

		self.maximumElements = 1; // IMPORTANTE: Requerido para que los sortables no acepten más de un elemento
		self.rightAnswers = 0; // Inicializamos el número de respuestas buenas a 0

		// Triggers que se activan cuando la respuesta es correcta/incorrecta
		self.rightAnswer = ko.observable();
		self.wrongAnswer = ko.observable();

		// Triggers cuando la actividad termina satisfactoria y/o insatisfactoriamente
		self.failure = ko.observable(false);
		self.success = ko.observable(false);

		// Define si el target esta lleno utilizando self.maximumElements
		self.isContainerFull = function (parent) {
			return parent().length < self.maximumElements;
		};

		// Función que se ejecuta cuando se suelta el elemento y hace toda la funcionalidad
		self.verifyAnswer = function (arg) {
			var item = arg.item,
			parent = arg.targetParent._parent,
			comparedItem = {};

			// Si se trata del stack, salimos
			if(arg.targetParent === arg.sourceParent) return;

			// si el elemento pertenece a una pareja
			if(item._id > 0){
				// Si ambos cuadros tienen elementos
				if(parent.container1().length || parent.container2().length){
					// Aquí, comparamos los elementos para ver si la respuesta es correcta o incorrecta
					if(parent.container1().length) comparedItem = parent.container1()[0];
					if(parent.container2().length) comparedItem = parent.container2()[0];

					if(comparedItem._id === item._id){
						// Respuesta Correcta
						self.rightAnswer(item);
						self.rightAnswers++;
					} else {
						// Respuesta Incorrecta
						self.wrongAnswer(item);
						arg.cancelDrop = true;
					}
				}
			} else {
				// respuesta mala desde el inicio
				self.wrongAnswer(item);
				arg.cancelDrop = true;
			}

			// Reducimos en 1 las posibilidades
			chances--;

			// La actividad termina cuando el número de posibilidades se termina
			if(chances === 0) {
				// Si el número de respuestas correctas es mayor o igual al requerido inicialmente
				if(self.rightAnswers >= options.minRightAnswers) {
					// Trigger de éxito
					self.success(true);

					// Se llama la función de éxito, definida por el desarrollador
					if (typeof options.successCallback !== "undefined") options.successCallback();

					// Activamos el siguiente
					$rootScope.isNextEnabled = true;

				} else {
					// Trigger de fracaso
					self.failure(true);
				}
			}


		};

};

	/**
	 * Inicializa la instancia del ViewModel creado con pairsSquaresActivity.create
	 *
	 * @param {object} instance Intancia del VM de knockout
	 */
	pairsSquaresActivity.run = function (instance) {
		ko.cleanNode($('#main-container')[0]);
		ko.bindingHandlers.sortable.beforeMove = instance.verifyAnswer;
		ko.applyBindings(instance, $('#main-container')[0]);
	};

	return pairsSquaresActivity;

});


lizPairsSquares.directive('pairsSquares', function  (pairsSquaresActivity) {
	return {
		restrict: 'E',
		transclude: true,
		scope: {
			options: '=',
			description: '@'
		},
		templateUrl: '../views/activities/pairs_squares.html',
		link: function postLink(scope, element, attrs) {

			// Definimos los contenedores y los elementos transcluídos
			var square1Container = element.find('.square1 .item'),
			square2Container = element.find('.square2 .item'),
			itemContainer = element.find('.stack .item');

			// Se añade cada uno de los hijos a la plantilla en la posición adecuada
			angular.forEach(element.find('.transcluded item').clone().children(), function (elem) { square1Container.append(elem); });
			angular.forEach(element.find('.transcluded item').clone().children(), function (elem) { square2Container.append(elem); });
			angular.forEach(element.find('.transcluded item').clone().children(), function (elem) { itemContainer.append(elem); });

			// Se elimina el elemento transcluded del DOM
			element.find('.transcluded').remove();

			// Corremos la aplicación
			var vm = pairsSquaresActivity.create(scope.options);
			pairsSquaresActivity.run(vm);
		}
	}; 
});

var lizPairsWithMessage = angular.module('lizPairsWithMessage', []);

// Knockout Pairs Factory
lizPairsWithMessage.factory('pairsActivity', function ($rootScope) {

    var pairsActivity = {};

    /**
     * Crea el ViewModel
     */
    pairsActivity.create = function (options) {
        return new pairsActivity._ViewModel(options);
    };

    /**
     * Genera el ViewModel de las parejas con sus funcionalidades
     *
     * Recibe un objeto con las siguientes propiedades
     *
     * @param {object}		opt						Opciones a utilizar.
     * @param {Array}			opt.data				Información de los elementos. Dentro de cada objeto, se pueden definir las propiedades:
     *
     *	target: Permite darle un orden apropiado a los targets. Debe empezar desde 0 y la propiedad opt.randomTargets debe estar desactivada
     *
     * @param {integer}		opt.chances				Número de posibilidades que tiene el usuario de hacer la actividad
     * @param {integer}		opt.minRightAnswers		Número mínimo de respuestas correctas
     * @param {boolean}		opt.randomItems			Define si los elementos deben ser puestos en forma aleatoria
     * @param {boolean}		opt.randomTargets		Define si los objetivos debe ser puestos en forma aleatoria
     * @param {function}	opt.successCallback		Función que se llama cuando se termina la actividad de forma satisfactoria
     * @param {function}	opt.rightAnswerCallback	Función que se llama cuando la respuesta es correcta
     *
     */
    pairsActivity._ViewModel = function (opt) {
        var self = this;

        // ordena el array de forma aleatoria usando el algoritmo de Fisher-Yates
        self.shuffleArray = function(array) {
            for (var i = array.length - 1; i > 0; i--) {
                var j = Math.floor(Math.random() * (i + 1));
                var temp = array[i];
                array[i] = array[j];
                array[j] = temp;
            }
            return array;
        };

        // Inicializa las opciones
        var data = opt.data,
            minRightAnswers = opt.minRightAnswers ? opt.minRightAnswers : data.length,
            randomItems = opt.randomItems ? true : false,
            randomTargets = opt.randomTargets ? true : false,
            chances = opt.chances ? opt.chances : data.length,
            targets_data = data.slice(0),   // Clonamos el array para empezar a trabajar
            completedItems = 0, // contador de elementos completos
            border = opt.hasOwnProperty('border') ? opt.border : true,
            padding = opt.hasOwnProperty('padding') ? opt.padding : true;

        // Objetos aleatorios
        if(randomItems) {
            data = self.shuffleArray(data);
        }

        // Creamos los índices para la posición absoluta
        for(var i = 0; i < data.length; i++){
            data[i]._index = i;
        }

        self.itemsPerRow = (opt.hasOwnProperty("itemsPerRow")) ? opt.itemsPerRow : opt.data.length;

        // audio
        self.audio = ko.observable(opt.audio);

        // Definimos los observableArrays para items y targets
        self.items = ko.observableArray(data);
        self.targets = ko.observableArray();

        // Carpeta de recursos desde angular
        self.resources = $rootScope.resources;

        self.maximumElements = 1; // IMPORTANTE: Requerido para que los sortables no acepten más de un elemento
        self.rightAnswers = 0; // Inicializamos el número de respuestas buenas a 0

        // Triggers que se activan cuando la respuesta es correcta/incorrecta
        self.rightAnswer = ko.observable();
        self.wrongAnswer = ko.observable();

        // Triggers cuando la actividad termina satisfactoria y/o insatisfactoriamente
        self.failure = ko.observable(false);
        self.success = ko.observable(false);

        // ======================================================================================
        // Constructor de los targets
        // ======================================================================================

        // Si la opción de randomTargets está activada, aplicamos el orden aleatorio
        if(randomTargets){
            targets_data = self.shuffleArray(targets_data);
        } else {
            // En caso contrario, se utiliza la propiedad target, dentro del array de data
            targets_data.sort(function (a, b) {
                return ((a.target < b.target) ? -1 : ((a.target > b.target) ? 1 : 0));
            });
        }

        var _index = 1; // índice que se le asignará a cada uno de los elementos

        ko.utils.arrayForEach(targets_data, function (item) {
            // Creamos el nuevo target. Añadimos un índice para hacer la relación 1 a 1
            item._items = ko.observableArray();
            if (opt.hasOwnProperty("chancesPerItem")) {
                item.chances = opt.chancesPerItem - 1;
            }
            item._items._id = _index++;

            self.targets.push(item);
        });
        // ======================================================================================
        // FIN Constructor
        // ======================================================================================

        /**
         * Reproduce el audio de la instrucción.
         */
        self.playAudio = function () {
            $('#audio-instruction')[0].play();
        };

        // Define si el target esta lleno utilizando self.maximumElements
        self.isContainerFull = function (parent) {
            return parent().length < self.maximumElements;
        };

        // Función que se ejecuta cuando se suelta el elemento y hace toda la funcionalidad
        self.verifyAnswer = function (arg) {

            var parent = arg.targetParent,
                item = arg.item;

            // Si el target es igual al contenedor inicial, se devuelve a su posición original
            if(typeof parent._id === "undefined") {
                arg.cancelDrop = true;
                return;
            } else {
                // Compara el _id para encontrar la pareja idéntica. Si es igual, la respuesta es correcta
                if(parent._id === item._items._id){

                    // RESPUESTA CORRECTA
                    self.rightAnswers++;
                    self.rightAnswer(item);
                    completedItems += 1;
                    // Reducimos en 1 las posibilidades
                    chances -= 1;

                    // Si se definió una función cuando la respuesta es correcta, se corre
                    if(typeof opt.rightAnswerCallback !== "undefined" ) opt.rightAnswerCallback(item);

                } else {

                    // RESPUESTA INCORRECTA
                    self.wrongAnswer(item);
                    arg.cancelDrop = true;

                    if (item.hasOwnProperty("chances")) {
                        if(item.chances === 0){
                            // Reducimos en 1 las posibilidades
                            chances -= 1;
                            $("#" + item._items._id).hide(200);
                        }else{item.chances--;}
                    } else {
                        // Reducimos en 1 las posibilidades
                        chances -= 1;
                    }
                }
            }

            // La actividad termina cuando el número de posibilidades se termina
            if(chances === 0 || completedItems === self.targets().length) {
                // Si el número de respuestas correctas es mayor o igual al requerido inicialmente
                if(self.rightAnswers >= minRightAnswers) {
                    self.success(true); // Trigger de éxito

                    // Se llama la función de éxito, definida por el desarrollador
                    if (typeof opt.successCallback !== "undefined") opt.successCallback();

                    $rootScope.isNextEnabled = true; // Activamos el siguiente
                } else {
                    self.failure(true); // Trigger de fracaso
                }
            }
        };

        /**
         * Estilos de los elementos.
         */
        var _itemIndex = 0;
        self.getItemStyles = function (item) {
            var styles = '';

            //  if (opt.hasOwnProperty("itemsPerRow")) {
            //  	if (_itemIndex === opt.itemsPerRow) {
            //  		_itemIndex = 0;
            //  	}

            //  	if (item._index >= opt.itemsPerRow) {
            // styles += 'top: 33%;';
            //  	}
            //  	styles += 'width: ' + (100 / opt.itemsPerRow) + '%;';
            //  	styles += 'left: ' + ((100 / opt.itemsPerRow) * _itemIndex ) + '%;';
            //  	_itemIndex++
            //  } else {
            styles += 'width: ' + (100 / self.targets().length) + '%;';



            styles += 'left: ' + ((100 / self.targets().length) * item._index ) + '%;';
            // }

            styles += 'position: absolute;';
            return styles;
        };

        /**
         * Estilos de cada objetivo.
         * @returns {string}
         */
        self.getTargetStyles = function () {
            var styles = '';

            if (opt.hasOwnProperty("itemsPerRow")) {
                styles += 'width: ' + (100 / opt.itemsPerRow) + '%;';
            } else {
                styles += 'width: ' + (100 / self.targets().length) + '%;';
            }

            if(typeof opt.targetStyles !== "undefined") styles += opt.targetStyles;

            return styles;
        };

        /**
         * Estilos para elementos internos de target e item.
         */
        self.getInnerStyles = function (item) {
            var styles = '';

            // Estilos Opcionales
            if(border) styles += 'border: 4px solid #000;';
            if(padding) styles += 'padding: 4px;';

            return styles;
        }

    };

    /**
     * Inicializa la instancia del ViewModel creado con pairsActivity.create
     *
     * @param {object} instance Intancia del VM de knockout
     */
    pairsActivity.run = function (instance) {
        ko.cleanNode($('#main-container')[0]);
        ko.bindingHandlers.sortable.beforeMove = instance.verifyAnswer;
        ko.applyBindings(instance, $('#main-container')[0]);
    };

    return pairsActivity;

});

lizPairsWithMessage.directive('pairsWithMessage', function  (pairsActivity) {
    return {
        restrict: 'E',
        transclude: true,
        scope: {
            options: '=',
            description: '@',
            audio:'@',
            titletop: '@',
            customClass: '@'
        },
        templateUrl: '../views/activities/pairs_with_message.html',
        link: function postLink(scope, element, attrs) {

            if(typeof scope.customClass !== "undefined"){
                scope.$root.customClass = scope.customClass;
            }

            // Definimos los contenedores y los elementos transcluídos
            var itemChildren = element.find('.transcluded item').children(),
                itemContainer = element.find('.item'),
                targetChildren = element.find('.transcluded target').children(),
                targetContainer = element.find('.target')
            itemTargetChildren = element.find('.transcluded item-target').children(),
                itemTargetContainer = element.find('.item-target');

            // Se añade cada uno de los hijos a la plantilla en la posición adecuada
            angular.forEach(itemChildren, function (elem) { itemContainer.append(elem); });
            angular.forEach(targetChildren, function (elem) { targetContainer.append(elem); });
            angular.forEach(itemTargetChildren, function (elem) { itemTargetContainer.append(elem); });

            // Se elimina el elemento transcluded del DOM
            element.find('.transcluded').remove();

            // Añadimos el audio a options
            scope.options.audio = typeof scope.audio !== "undefined" ? scope.audio : false;

            // Corremos la aplicación
            var vm = pairsActivity.create(scope.options);
            pairsActivity.run(vm);
        }
    };
});

var lizPuzzle1 = angular.module('lizPuzzle1', []);

// Knockout Puzzle1 Factory
lizPuzzle1.factory('puzzle1Activity', function ($rootScope) {

  var puzzle1Activity = {};

  /**
   * Crea el ViewModel
   */
  puzzle1Activity.create = function (options) {
    return new puzzle1Activity._ViewModel(options);
  }

  /**
   * Genera el ViewModel de las parejas con sus funcionalidades
   *
   * Recibe un objeto con las siguientes propiedades
   *
   * @param {object}    options            Opciones a utilizar.
   * @param {Array}    options.data        Información de los elementos. Dentro de cada objeto, se pueden definir las propiedades:
   *
   *  target: Permite darle un orden apropiado a los targets. Debe empezar desde 0 y la propiedad options.randomTargets debe estar desactivada
   *
   * @param {integer}    options.chances        Número de posibilidades que tiene el usuario de hacer la actividad
   * @param {integer}    options.minRightAnswers    Número mínimo de respuestas correctas
   * @param {boolean}    options.randomItems      Define si los elementos deben ser puestos en forma aleatoria
   * @param {boolean}    options.randomTargets    Define si los objetivos debe ser puestos en forma aleatoria
   * @param {function}  options.successCallback    Función que se llama cuando se termina la actividad de forma satisfactoria
   * @param {function}  options.rightAnswerCallback  Función que se llama cuando la respuesta es correcta
   *
   */
  puzzle1Activity._ViewModel = function (options) {
    var self = this;

    // Inicializa las opciones
    var items = options.items,
      minRightAnswers = options.minRightAnswers ? options.minRightAnswers : items.length,
      chances = options.chances ? options.chances : items.length;

    // Definimos los observableArrays para items
    self.items = ko.observableArray(items);

    // Añadimos a cada item la propiedad answer: true si no está definida. (por defecto)
    ko.utils.arrayForEach(self.items(), function (item) {
      if (typeof item.answer === "undefined")
        item.answer = true;
    });

    self.canvas = ko.observableArray(); // Donde caen las imágenes

    self.rightAnswers = 0; // Inicializamos el número de respuestas buenas a 0

    self.resources = $rootScope.resources;
    self.audio = ko.observable(options.audio);

    // Triggers que se activan cuando la respuesta es correcta/incorrecta
    self.rightAnswer = ko.observable();
    self.wrongAnswer = ko.observable();

    // Triggers cuando la actividad termina satisfactoria y/o insatisfactoriamente
    self.failure = ko.observable(false);
    self.success = ko.observable(false);

    /**
     * Reproduce el audio de la instrucción.
     */
    self.playAudio = function () {
      $('#audio-instruction')[0].play();
    };

    // Función que se ejecuta cuando se suelta el elemento y hace toda la funcionalidad
    self.verifyAnswer = function (arg) {
      var item = arg.item;

      if (arg.sourceParent === arg.targetParent) return;

      if (item.answer === true) {

        // RESPUESTA CORRECTA
        self.rightAnswers++;
        self.rightAnswer(item);

        // Si se definió una función cuando la respuesta es correcta, se corre
        if (typeof options.rightAnswerCallback !== "undefined") options.rightAnswerCallback(item);

      } else {

        // RESPUESTA INCORRECTA
        self.wrongAnswer(item);
        arg.cancelDrop = true;

      }

      // Reducimos en 1 las posibilidades
      chances--;

      // La actividad termina cuando el número de posibilidades se termina
      if (chances === 0) {
        // Si el número de respuestas correctas es mayor o igual al requerido inicialmente
        if (self.rightAnswers >= minRightAnswers) {

          // Trigger de éxito
          self.success(true);

          $rootScope.isNextEnabled = true;

          // Se llama la función de éxito, definida por el desarrollador
          if (typeof options.successCallback !== "undefined") options.successCallback();

        } else {

          // Trigger de fracaso
          self.failure(true);

        }
      }
    };
  };

  /**
   * Inicializa la instancia del ViewModel creado con puzzle1Activity.create
   *
   * @param {object} instance Intancia del VM de knockout
   */
  puzzle1Activity.run = function (instance) {
    ko.cleanNode($('#main-container')[0]);
    ko.bindingHandlers.sortable.beforeMove = instance.verifyAnswer;
    ko.applyBindings(instance, $('#main-container')[0]);
  };

  return puzzle1Activity;

});


lizPuzzle1.directive('puzzle1', function (puzzle1Activity) {
  return {
    restrict: 'E',
    transclude: true,
    scope: {
      options: '=',
      description: '@',
      audio: '@'
    },
    templateUrl: '../views/activities/puzzle1.html',
    link: function postLink(scope, element, attrs) {
      // Añadimos el audio a options
      scope.options.audio = typeof scope.audio !== "undefined" ? scope.audio : false;

      // Corremos la aplicación
      puzzle1Activity.run(puzzle1Activity.create(scope.options));
    }
  };
});



var lizPuzzle2 = angular.module('lizPuzzle2', []);

// Knockout Puzzle2 Factory
lizPuzzle2.factory('puzzle2Activity', function ($rootScope) {

	var puzzle2Activity = {};

	/**
	 * Crea el ViewModel
	 */
	puzzle2Activity.create = function (options) {
		return new puzzle2Activity._ViewModel(options);
	}

	/**
	 * Genera el ViewModel de las parejas con sus funcionalidades
	 *
	 * Recibe un objeto con las siguientes propiedades
	 *
	 * @param {object}		options						Opciones a utilizar.
	 * @param {Array}		options.data				Información de los elementos. Dentro de cada objeto, se pueden definir las propiedades:
	 *
	 *	target: Permite darle un orden apropiado a los targets. Debe empezar desde 0 y la propiedad options.randomTargets debe estar desactivada
	 *
	 * @param {integer}		options.chances				Número de posibilidades que tiene el usuario de hacer la actividad
	 * @param {integer}		options.minRightAnswers		Número mínimo de respuestas correctas
	 * @param {boolean}		options.randomItems			Define si los elementos deben ser puestos en forma aleatoria
	 * @param {boolean}		options.randomTargets		Define si los objetivos debe ser puestos en forma aleatoria
	 * @param {function}	options.successCallback		Función que se llama cuando se termina la actividad de forma satisfactoria
	 * @param {function}	options.rightAnswerCallback	Función que se llama cuando la respuesta es correcta
	 *
	 */
	puzzle2Activity._ViewModel = function (options) {
		var self = this;

		// Inicializa las opciones
		var targets = options.targets,
				minRightAnswers = options.minRightAnswers ? options.minRightAnswers : targets.length,
				chances = options.chances ? options.chances : targets.length;

		// Main Observables
		self.trap = ko.observableArray([]); // Capa base donde caen los elementos si no aciertan los targets
		self.trap._id = 'trap';

		self.canvas = options.canvas; // La imagen en sí
		self.items = ko.observableArray(options.targets); // Sortable de círculos arrastrar
		self.targets = ko.observableArray(options.targets); // Sortable de targets

		// Constructor para los targets
		ko.utils.arrayForEach(self.targets(), function(target){
				target._targets = ko.observableArray();
				target._targets._id = 'target';
		});

		self.rightAnswers = 0; // Inicializamos el número de respuestas buenas a 0
		self.maximumElements = 1; // Número máximo de elementos

		self.resources = $rootScope.resources;

		// Triggers que se activan cuando la respuesta es correcta/incorrecta
		self.rightAnswer = ko.observable();
		self.wrongAnswer = ko.observable();

		// Triggers cuando la actividad termina satisfactoria y/o insatisfactoriamente
		self.failure = ko.observable(false);
		self.success = ko.observable(false);

		/**
		 * Previene la posibilidad de lanzar más de un elemento
		 */
		self.isContainerFull = function (parent) {
			return parent().length < self.maximumElements;
		};

		/**
		 * Devuelve los estilos según el elemento
		 */
		self.getStyles = function (item) {
			var styles = '';

			styles += 'width: ' + item.w + '%;';
			styles += 'height: ' + item.h + '%;';
			styles += 'top: ' + item.t + '%;';
			styles += 'left: ' + item.l + '%;';

			return styles;
		}

		// Función que se ejecuta cuando se suelta el elemento y hace toda la funcionalidad
		self.verifyAnswer = function (arg) {
			var item = arg.item;

			// Si es el mismo elemento inicial, salimos de la función
			if(arg.sourceParent === arg.targetParent) return;

			// Si cae en la trampa, esta malo
			if(arg.targetParent._id === 'trap'){
				// RESPUESTA INCORRECTA
				self.wrongAnswer(item);
				arg.cancelDrop = true;
			}

			// Si cae en un target, es correcto
			if(arg.targetParent._id === 'target'){
				// RESPUESTA CORRECTA
				self.rightAnswers++;
				self.rightAnswer(item);

				// Si se definió una función cuando la respuesta es correcta, se corre
				if(typeof options.rightAnswerCallback !== "undefined" ) options.rightAnswerCallback(item);
			}

			// Reducimos en 1 las posibilidades
			chances--;

			// La actividad termina cuando el número de posibilidades se termina
			if(chances === 0) {
				// Si el número de respuestas correctas es mayor o igual al requerido inicialmente
				if(self.rightAnswers >= minRightAnswers) {
					self.success(true); // Trigger de éxito
					$rootScope.isNextEnabled = true;
					if (typeof options.successCallback !== "undefined") options.successCallback(); // Se llama la función de éxito, definida por el desarrollador
				} else {
					// Trigger de fracaso
					self.failure(true);
				}
			}
		};

		};

		/**
		 * Inicializa la instancia del ViewModel creado con puzzle2Activity.create
		 *
		 * @param {object} instance Intancia del VM de knockout
		 */
		puzzle2Activity.run = function (instance) {
			ko.cleanNode($('#main-container')[0]);
			ko.bindingHandlers.sortable.beforeMove = instance.verifyAnswer;
			ko.applyBindings(instance, $('#main-container')[0]);
		};

		return puzzle2Activity;

});


lizPuzzle2.directive('puzzle2', function  (puzzle2Activity) {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			description: '@',
			audio: '@'
		},
		templateUrl: '../views/activities/puzzle2.html',
		link: function postLink(scope, element, attrs) {

			// Corremos la aplicación
			puzzle2Activity.run(puzzle2Activity.create(scope.options));
		}
	}; 
});



var lizPuzzle3 = angular.module('lizPuzzle3', []);

// Knockout Puzzle2 Factory
lizPuzzle3.factory('puzzle3Activity', function ($rootScope, shuffleArrayFactory) {

	var puzzle3Activity = {};

	/**
	 * Crea el ViewModel
	 */
	puzzle3Activity.create = function (options) {
		return new puzzle3Activity._ViewModel(options);
	}

    /**
     * Genera el ViewModel de las parejas con sus funcionalidades
     *
     * Recibe un objeto con las siguientes propiedades
     *
     * @param {object}		options						Opciones a utilizar.
     * @param {Array}		options.data				Información de los elementos. Dentro de cada objeto, se pueden definir las propiedades:
     *
     *	target: Permite darle un orden apropiado a los targets. Debe empezar desde 0 y la propiedad options.randomTargets debe estar desactivada
     *
     * @param {integer}		options.chances				Número de posibilidades que tiene el usuario de hacer la actividad
     * @param {integer}		options.minRightAnswers		Número mínimo de respuestas correctas
     * @param {boolean}		options.randomItems			Define si los elementos deben ser puestos en forma aleatoria
     * @param {boolean}		options.randomTargets		Define si los objetivos debe ser puestos en forma aleatoria
     * @param {function}	options.successCallback		Función que se llama cuando se termina la actividad de forma satisfactoria
     * @param {function}	options.rightAnswerCallback	Función que se llama cuando la respuesta es correcta
     *
      */
    puzzle3Activity._ViewModel = function (options) {
        var self = this,
			coordinates = [],
			rows = options.rows,
			cols = options.cols,
			cells = rows * cols;

		/**
		 * Clase para los sortables
		 */
		self.Sortable = function (row, col) {
			this.row = row;
			this.col = col;
			this.puzzleBlock = ko.observableArray([ { row: i, col: j } ]);
			this.puzzleBlock._id = 'sortable';
		}

		/**
		 * Clase para los sortables
		 */
		self.Target = function (row, col) {
			this.row = row;
			this.col = col;
			this.puzzleBlock = ko.observableArray([]);

			// Necesarios para la comparación en beforeMove
			this.puzzleBlock.row = row;
			this.puzzleBlock.col = col;
		}

        // Inicializa las opciones
		var minRightAnswers = options.minRightAnswers ? options.minRightAnswers : cells,
			chances = options.chances ? options.chances : cells;

		// Constructor para las celdas
		self.items = ko.observableArray();
		self.targets = ko.observableArray();
		self.image = options.image;

		// Creamos los objetos para definir su posición en cada fila
		for(var i = 0; i < rows; i++){
			for(var j = 0; j < cols; j++){
				// Las propiedades son fila y columna, usadas para definir posteriormente los estilos
				self.items.push(new self.Sortable(i, j));
				self.targets.push(new self.Target(i, j));

				// almacenamos las coordenadas en un array que después desorganizaremos
				coordinates.push({ row: i, col: j });
			}
		}

		// Organizamos aleatoriamente el array
		coordinates = shuffleArrayFactory.run(coordinates);

		// Procedemos a cambiar las coordenadas
		for(var i = 0; i < self.items().length; i++){
			self.items()[i].row = coordinates[i].row;
			self.items()[i].col = coordinates[i].col;
		}


        self.rightAnswers = 0; // Inicializamos el número de respuestas buenas a 0
        self.maximumElements = 1; // Número máximo de elementos

        self.resources = $rootScope.resources;

		// Triggers que se activan cuando la respuesta es correcta/incorrecta
        self.rightAnswer = ko.observable();
        self.wrongAnswer = ko.observable();

		// Triggers cuando la actividad termina satisfactoria y/o insatisfactoriamente
        self.failure = ko.observable(false);
        self.success = ko.observable(false);

		/**
		 * Previene la posibilidad de lanzar más de un elemento
		 */
        self.isContainerFull = function (parent) {
            return parent().length < self.maximumElements;
        };

        /**
         * Devuelve los estilos del sortable
         */
        self.getSortableStyles = function (sortable) {
        	var styles = '';

			// El tamaño se divide según el número de columnas y filas
        	styles += 'width: ' + (100 / cols) + '%;';
        	styles += 'height: ' + (100 / rows) + '%;';

			// Top y Left
        	styles += 'left: ' + (sortable.col * (100 / cols)) + '%;';
        	styles += 'top: ' + (sortable.row * (100 / rows)) + '%;';

        	return styles;
        }

        /**
         * Devuelve los estilos según el elemento
         */
        self.getItemStyles = function (item) {
        	var styles = '';

        	styles += 'background: url(../' + self.resources + '/' + self.image  + '.png) no-repeat;'; // Recurso
            //styles += 'background-size: ' + (100 * cols) + '% ' + (100 * rows) + '%;'; // porcentajes según el número de elementos
        	
            //styles += 'background-position: ' + (( item.col + 1 ) * (100 / cols)) + '% ' + (( item.row + 1 ) * (100 / rows)) + '%;';
        	styles += 'background-position: ';

			if(item.col === 0){
				styles += '0% ';
			} else {
				styles += (item.col * (100 / (cols - 1) )) + '% ';
			}

			if(item.row === 0){
				styles += '0%;';
			} else {
				styles += (item.row * (100 / (rows - 1) )) + '%;';
			}
        	
        	return styles;
        }

		/**
		 * Función que se ejecuta cuando se suelta el elemento y hace toda la funcionalidad
		 */
		self.verifyAnswer = function (arg) {
			var item = arg.item,
				parent = arg.targetParent;

			// Si es el mismo elemento inicial, salimos de la función
			if(arg.sourceParent === parent) return;

			// Si se trata de los elementos iniciales, que vuelvan al padre
			if(parent._id === 'sortable'){
				arg.cancelDrop = true;
				return;
			}

			// Si es target, comparamos los valores
			if (parent.row === item.row && parent.col === item.col) {
				
				// RESPUESTA CORRECTA
				self.rightAnswers++;
				self.rightAnswer(item);

				// Si se definió una función cuando la respuesta es correcta, se corre
				if(typeof options.rightAnswerCallback !== "undefined" ) options.rightAnswerCallback(item);
				
			} else {

				// RESPUESTA INCORRECTA
				self.wrongAnswer(item);
				arg.cancelDrop = true;

			}

			// Reducimos en 1 las posibilidades
			chances--;

			// La actividad termina cuando el número de posibilidades se termina
			if(chances === 0 || self.rightAnswers === self.items.length) {
				// Si el número de respuestas correctas es mayor o igual al requerido inicialmente
				if(self.rightAnswers >= minRightAnswers) {

					// Trigger de éxito
					self.success(true);

					$rootScope.isNextEnabled = true;

					// Se llama la función de éxito, definida por el desarrollador
					if (typeof options.successCallback !== "undefined") options.successCallback();

				} else {

					// Trigger de fracaso
					self.failure(true);

				}
			}
		};
    };

	/**
	 * Inicializa la instancia del ViewModel creado con puzzle3Activity.create
	 *
	 * @param {object} instance Intancia del VM de knockout
	 */
    puzzle3Activity.run = function (instance) {
    	ko.cleanNode($('#main-container')[0]);
		ko.bindingHandlers.sortable.beforeMove = instance.verifyAnswer;
		ko.applyBindings(instance, $('#main-container')[0]);
    };

	return puzzle3Activity;
    
});


lizPuzzle3.directive('puzzle3', function  (puzzle3Activity) {
    return {
        restrict: 'E',
		scope: {
			options: '=',
			description: '@'
		},
        templateUrl: '../views/activities/puzzle3.html',
		link: function postLink(scope, element, attrs) {

			// Corremos la aplicación
			puzzle3Activity.run(puzzle3Activity.create(scope.options));
        }
    }; 
});



var lizPuzzle4 = angular.module('lizPuzzle4', []);

// Knockout Puzzle2 Factory
lizPuzzle4.factory('puzzle4Activity', function ($rootScope,$sce) {

	var puzzle4Activity = {};

	/**
	 * Crea el ViewModel
	 */
	puzzle4Activity.create = function (options) {
		return new puzzle4Activity._ViewModel(options);
	}

	/**
	 * Genera el ViewModel de las parejas con sus funcionalidades
	 *
	 * Recibe un objeto con las siguientes propiedades
	 *
	 * @param {object}		opt						Opciones a utilizar.
	 * @param {Array}		opt.data				Información de los elementos. Dentro de cada objeto, se pueden definir las propiedades:
	 *
	 *	target: Permite darle un orden apropiado a los targets. Debe empezar desde 0 y la propiedad opt.randomTargets debe estar desactivada
	 *
	 * @param {integer}		opt.chances				Número de posibilidades que tiene el usuario de hacer la actividad
	 * @param {integer}		opt.minRightAnswers		Número mínimo de respuestas correctas
	 * @param {boolean}		opt.randomItems			Define si los elementos deben ser puestos en forma aleatoria
	 * @param {boolean}		opt.randomTargets		Define si los objetivos debe ser puestos en forma aleatoria
	 * @param {function}	opt.successCallback		Función que se llama cuando se termina la actividad de forma satisfactoria
	 * @param {function}	opt.rightAnswerCallback	Función que se llama cuando la respuesta es correcta
	 *
	 */
	puzzle4Activity._ViewModel = function (opt) {
		var self = this;

		// Inicializa las opciones
		var targets = opt.targets,
				minRightAnswers = opt.minRightAnswers ? opt.minRightAnswers : targets.length,
				chances = opt.chances ? opt.chances : targets.length;

		// audio
		self.audio = ko.observable(opt.audio);

		self.canvas = opt.canvas ? opt.canvas : false; // La imagen en sí
		self.extcanvas = opt.extcanvas ? opt.extcanvas : '.png'; // La imagen en sí
		self.altcanvas = opt.altcanvas ? opt.altcanvas : false;//texto alternativo de la imagen principal 
		self.maintext = opt.maintext ? opt.maintext : false; // el texto q remplaza la imagen 
		self.maintextstyle = opt.maintextstyle ? opt.maintextstyle : opt.maintext ? false : 'display: none;';
		self.items = ko.observableArray(opt.targets); // Sortable de targets
		self.targets = ko.observableArray(opt.targets); // Sortable de targets
		self.noDrag = opt.noDrag ? opt.noDrag : false;
		self.preserveText = ko.observable(opt.hasOwnProperty('preserveText') ? true : false);
		self.preserveimg = opt.preserveimg ? true : false;

    // Recorremos los items para definir los valores
    self.items().forEach(function (item) {
      item.text = item.hasOwnProperty('text') ? item.text : false;
      item.img = item.hasOwnProperty('img') ? item.img : false;
      item.alt = item.hasOwnProperty('alt') ? item.alt : false;
    });

		// Constructor para los targets
		ko.utils.arrayForEach(self.targets(), function(target){
				target._id = (Math.random() + 1).toString(36).substring(7); // Genera un código aleatorio como id
				target.preserveimg = self.preserveimg;
				
				// Creamos el lugar a donde cae el elemento
				target._targets = ko.observableArray();
				target._targets._id = target._id;
				target._targets._acept= target.acept ? target.acept : false;

		});

		self.rightAnswers = 0; // Inicializamos el número de respuestas buenas a 0
		self.targetslength= targets.length - self.noDrag; // numero de items 
		self.maximumElements = 1; // Número máximo de elementos

		self.resources = $rootScope.resources;

		// Triggers que se activan cuando la respuesta es correcta/incorrecta
		self.rightAnswer = ko.observable();
		self.wrongAnswer = ko.observable();

		// Triggers cuando la actividad termina satisfactoria y/o insatisfactoriamente
		self.failure = ko.observable(false);
		self.success = ko.observable(false);


		/**
		 * Reproduce el audio de la instrucción.
		 */
		self.playAudio = function () {
			$('#audio-instruction')[0].play();
		};

		// Para usar el html en angular
		self.sanitize = function (item) {
			return $sce.trustAsHtml(item);
		}

		/**
		 * Previene la posibilidad de lanzar más de un elemento
		 */
		self.isContainerFull = function (parent) {
			return parent().length < self.maximumElements;
		};


		/**
		 * Devuelve los estilos según el elemento
		 */
		self.getItemsContainerStyles = function () {
			var styles = '';

			if(opt.hasOwnProperty('itemsWidth')) styles += "width: " + opt.itemsWidth + ";";

			return styles;
		}


		/**
		 * Devuelve los estilos según el elemento
		 */
		self.getItemsStyles = function (item) {
			var styles = '';

			if(opt.hasOwnProperty('itemsPerRow')){
				styles += "width: " + (98 / opt.itemsPerRow) + "%;";
			} 

			if(opt.hasOwnProperty('itemCustomStyles')) styles += opt.itemCustomStyles;
     		if(item.hasOwnProperty('style')) styles += item.style;

			return styles;
		}


		self.getDroppedStyles = function () {
			var styles = '';

			if(!self.preserveText()) styles += "color: transparent;";
			// agrega solo el tamaño de la fuente de los estilos personalizados (debe estar la propiedad font-size al final de la cadena)
			if(opt.hasOwnProperty('customStyles')){
				if(/font-size/.test(opt.customStyles)) styles += 'font-size:'+ opt.customStyles.substring(opt.customStyles.length - 5,opt.customStyles.length);
			};

			return styles;
		}

		/**
		 * Devuelve los estilos según el elemento
		 */
		self.getTargetsStyles = function (item) {
			var styles = '';

			if(opt.hasOwnProperty('borderColor')) styles += "box-shadow: 0px 0px 0px 3px " + opt.borderColor + ";";
			styles += 'width: ' + item.w + '%;';
			styles += 'height: ' + item.h + '%;';
			styles += 'top: ' + item.t + '%;';
			styles += 'left: ' + item.l + '%;';
			if(item.hasOwnProperty('z')) styles += 'z-index: ' + item.z + ';';

			// estilos personalizados
			if(opt.hasOwnProperty('customStyles')) styles += opt.customStyles;

			return styles;
		}


		/**
		 * Función que se ejecuta cuando se suelta el elemento y hace toda la funcionalidad
		 */
		self.verifyAnswer = function (arg) {
			var item = arg.item,
				parent = arg.targetParent;
				console.log(parent._acept);
			// Si es el mismo elemento inicial, salimos de la función
			if(arg.sourceParent === arg.targetParent) return;

			// Si cae en el mismo elemento, es correcto
			if(parent._id === item._id || (parent._acept!= false && parent._acept.indexOf(item.text) > -1)){
				// RESPUESTA CORRECTA
				self.rightAnswers++;
				self.rightAnswer(item);
				console.log(arg);

				// Si se definió una función cuando la respuesta es correcta, se corre
				if(typeof opt.rightAnswerCallback !== "undefined" ) opt.rightAnswerCallback(item);
			} else {
				// RESPUESTA INCORRECTA
				self.wrongAnswer(item);
				arg.cancelDrop = true;
			}

			// Reducimos en 1 las posibilidades
			chances--;
			// La actividad termina cuando el número de posibilidades se termina
			if(chances === 0 || (self.rightAnswers === self.targetslength)) {
				// Si el número de respuestas correctas es mayor o igual al requerido inicialmente
				if(self.rightAnswers >= minRightAnswers) {
					self.success(true); // Trigger de éxito
					$rootScope.isNextEnabled = true;
					if (typeof opt.successCallback !== "undefined") opt.successCallback(); // Se llama la función de éxito, definida por el desarrollador
				} else {
					// Trigger de fracaso
					self.failure(true);
				}
			}
		};
	};

	/**
	 * Inicializa la instancia del ViewModel creado con puzzle4Activity.create
	 *
	 * @param {object} instance Intancia del VM de knockout
	 */
	puzzle4Activity.run = function (instance) {
		ko.cleanNode($('#main-container')[0]);
		ko.bindingHandlers.sortable.beforeMove = instance.verifyAnswer;
		ko.applyBindings(instance, $('#main-container')[0]);
	};

	return puzzle4Activity;

});

lizPuzzle4.directive('puzzle4', function  (puzzle4Activity) {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			description: '@',
			titletop: '@',
			audio:'@',
		},
		templateUrl: '../views/activities/puzzle4.html',
		link: function postLink(scope, element, attrs) {
			// Añadimos el audio a options
			scope.options.audio = typeof scope.audio !== "undefined" ? scope.audio : false;

			// Corremos la aplicación
			puzzle4Activity.run(puzzle4Activity.create(scope.options));
		}
	}; 
});



var lizPuzzle5 = angular.module('lizPuzzle5', []);

// Knockout Puzzle2 Factory
lizPuzzle5.factory('puzzle5Activity', function ($rootScope) {

	var puzzle5Activity = {};

	/**
	 * Crea el ViewModel
	 */
	puzzle5Activity.create = function (options) {
		return new puzzle5Activity._ViewModel(options);
	}

	/**
	 * Genera el ViewModel de las parejas con sus funcionalidades
	 *
	 * Recibe un objeto con las siguientes propiedades
	 *
	 * @param {object}		options						Opciones a utilizar.
	 * @param {Array}		options.data				Información de los elementos. Dentro de cada objeto, se pueden definir las propiedades:
	 *
	 *	target: Permite darle un orden apropiado a los targets. Debe empezar desde 0 y la propiedad options.randomTargets debe estar desactivada
	 *
	 * @param {integer}		options.chances				Número de posibilidades que tiene el usuario de hacer la actividad
	 * @param {integer}		options.minRightAnswers		Número mínimo de respuestas correctas
	 * @param {boolean}		options.randomItems			Define si los elementos deben ser puestos en forma aleatoria
	 * @param {boolean}		options.randomTargets		Define si los objetivos debe ser puestos en forma aleatoria
	 * @param {function}	options.successCallback		Función que se llama cuando se termina la actividad de forma satisfactoria
	 * @param {function}	options.rightAnswerCallback	Función que se llama cuando la respuesta es correcta
	 *
	 */
	puzzle5Activity._ViewModel = function (options) {
		var self = this,
			tempItem = {}, // variable auxiliar para añadir nuevos elementos al stack
			stackCounter = 0, // Variable para poner Id's a elementos clonados
			tempStack = []; // Array auxiliar que después será ordenado aleatoriamente

		// Inicializa las opciones
		var targets = options.targets,
				minRightAnswers = options.minRightAnswers ? options.minRightAnswers : targets.length,
				chances = options.chances ? options.chances : targets.length;

		self.canvas = options.canvas; // La imagen en sí
		self.canvasAlt = options.canvasAlt;
		self.items = ko.observableArray(options.targets); // Sortable de targets
		self.targets = ko.observableArray(options.targets); // Sortable de targets

		ko.utils.arrayForEach(self.items(), function (item) {
			item.chances = options.chancesPerItem - 1;
		});
		

		// Constructor para los targets
		ko.utils.arrayForEach(self.targets(), function(target){
				target._id = (Math.random() + 1).toString(36).substring(7); // Genera un código aleatorio como id

				// Creamos el lugar a donde cae el elemento
				target._targets = ko.observableArray();
				target._targets._id = target._id;
		});

		self.rightAnswers = 0; // Inicializamos el número de respuestas buenas a 0
		self.maximumElements = 1; // Número máximo de elementos

		self.resources = $rootScope.resources;

		// Triggers que se activan cuando la respuesta es correcta/incorrecta
		self.rightAnswer = ko.observable();
		self.wrongAnswer = ko.observable();

		// Triggers cuando la actividad termina satisfactoria y/o insatisfactoriamente
		self.failure = ko.observable(false);
		self.success = ko.observable(false);

		/**
		 * Previene la posibilidad de lanzar más de un elemento
		 */
		self.isContainerFull = function (parent) {
			return parent().length < self.maximumElements;
		};

		self.playAudio = function () {
			$('#puzzle5-instruction')[0].play();
		};

		/**
		 * Devuelve los estilos según el elemento
		 */
		self.getStyles = function (item) {
			var styles = '';
			var itemWidth = (item.hasOwnProperty("w")) ? item.w + '%;' : "auto;";
			var itemHeight = (item.hasOwnProperty("h")) ? item.h + '%;' : "auto;";
			styles += 'width: ' + itemWidth;
			styles += 'height: ' + itemHeight;
			styles += 'top: ' + item.t + '%;';
			styles += 'left: ' + item.l + '%;';

			return styles;
		};

		var counter = 0,
			numItems = self.items().length;
		// Función que se ejecuta cuando se suelta el elemento y hace toda la funcionalidad
		self.verifyAnswer = function (arg) {;
			var item = arg.item,
				parent = arg.targetParent;

			// Si es el mismo elemento inicial, salimos de la función
			if(arg.sourceParent === arg.targetParent) return;

			// Si cae en el mismo elemento, es correcto
			if(parent._id === item._id){
				// RESPUESTA CORRECTA
				self.rightAnswers++;
				self.rightAnswer(item);
				counter++;
				// Si se definió una función cuando la respuesta es correcta, se corre
				if(typeof options.rightAnswerCallback !== "undefined" ) options.rightAnswerCallback(item);
			} else {
				// RESPUESTA INCORRECTA
				self.wrongAnswer(item);
				arg.cancelDrop = true;

				if(item.chances === 0){
	            	counter++;
	            	$('#' + item._id).hide(200);
            	}else{item.chances--;}
			}

			// La actividad termina cuando el número de posibilidades se termina
			if(numItems === counter) {
				// Si el número de respuestas correctas es mayor o igual al requerido inicialmente
				if(self.rightAnswers >= minRightAnswers) {
					self.success(true); // Trigger de éxito
					$rootScope.isNextEnabled = true;
					if (typeof options.successCallback !== "undefined") options.successCallback(); // Se llama la función de éxito, definida por el desarrollador
				} else {
					// Trigger de fracaso
					self.failure(true);
				}
			}
		};
	};

	/**
	 * Inicializa la instancia del ViewModel creado con puzzle5Activity.create
	 *
	 * @param {object} instance Intancia del VM de knockout
	 */
	puzzle5Activity.run = function (instance) {
		ko.cleanNode($('#main-container')[0]);
		ko.bindingHandlers.sortable.beforeMove = instance.verifyAnswer;
		ko.applyBindings(instance, $('#main-container')[0]);
	};

	return puzzle5Activity;

});


lizPuzzle5.directive('puzzle5', function  (puzzle5Activity) {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			audio: "@",
			description: '@'
		},
		templateUrl: '../views/activities/puzzle5.html',
		link: function postLink(scope, element, attrs) {

			// Corremos la aplicación
			puzzle5Activity.run(puzzle5Activity.create(scope.options));
		}
	}; 
});



/**
 * Actividad donde se arma una palabra en orden y luego se valida usando un botón.
 */
var lizPuzzleWord = angular.module('lizPuzzleWord', ['factories']);

// Knockout Pairs Factory
lizPuzzleWord.factory('puzzleWordActivity', function ($rootScope, shuffleArrayFactory) {

  var puzzleWordActivity = {};

  /**
   * Crea el ViewModel
   */
  puzzleWordActivity.create = function (options) {
    return new puzzleWordActivity._ViewModel(options);
  };

  /**
   * Modelo de la actividad.
   */
  puzzleWordActivity._ViewModel = function (opt) {
    var self = this,
      chances = opt.hasOwnProperty('chances') ? opt.chances : opt.word.length,
      minRightAnswers = opt.hasOwnProperty('minRightAnswers') ? opt.minRightAnswers : opt.word.length,
      rightAnswers = 0,
      word = opt.word.split("");


    self.Letter = function (id) {
      this.sortable = ko.observableArray();
      this.sortable.id = id;
    };

    self.audio = ko.observable(opt.audio); // audio
    self.resources = $rootScope.resources; // Carpeta de recursos desde angular
    self.maximumElements = 1; // número máximo de elementos

    self.rightAnswer = ko.observable();
    self.wrongAnswer = ko.observable();
    self.failure = ko.observable(false);
    self.success = ko.observable(false);

    self.img = opt.img; // imagen adicional
    self.letters = ko.observableArray([]);
    self.finalWord = ko.observableArray([]);

    // Constructor
    word.forEach(function (l) {
      var id = (Math.random() + 1).toString(36).substring(7);

      // añadimos cada una de las letras (stack)
      self.letters.push({
        id: id,
        letter: l
      });

      self.finalWord.push(new self.Letter(l));
    });

    // Barajamos el array de letras, mientras que las letras sea diferentes a la respuesta
    var shuffledWord = '';

    do {
      shuffleArrayFactory.run(self.letters());
      shuffledWord = self.letters().map(function (l) {
        return l.letter;
      });
    } while(shuffledWord.join("") === word.join(""));

    /**
     * Reproduce el audio de la instrucción.
     */
    self.playAudio = function () {
      $('#audio-instruction')[0].play();
    };

    /**
     * Define si el target esta lleno utilizando self.maximumElements
     */
    self.isContainerFull = function (parent) {
      return parent().length < self.maximumElements;
    };

    /**
     * Verifica la respuesta después de soltar cada uno de los elementos.
     */
    self.verifyAnswer = function (arg) {
      var parent = arg.targetParent,
        item = arg.item;

      // Si es el mismo padre
      if(parent === arg.sourceParent) return;

      // Si el target es igual al contenedor inicial, se devuelve a su posición original
      // Compara el _id para encontrar la pareja idéntica. Si es igual, la respuesta es correcta
      if(parent.id === item.letter){
        // RESPUESTA CORRECTA
        rightAnswers += 1;
        self.rightAnswer(item);
      } else {
        // RESPUESTA INCORRECTA
        self.wrongAnswer(item);
        arg.cancelDrop = true;
      }

      // Reducimos en 1 las posibilidades
      chances -= 1;

      // La actividad termina cuando el número de posibilidades se termina
      if(chances === 0 || word.length === rightAnswers) {
        // Si el número de respuestas correctas es mayor o igual al requerido inicialmente
        if(rightAnswers >= minRightAnswers) {
          self.success(true); // Trigger de éxito
          $rootScope.isNextEnabled = true; // Activamos el siguiente
        } else {
          self.failure(true); // Trigger de fracaso
        }
      }
    };

  };

  /**
   * Inicializa la instancia del ViewModel creado con puzzleWordActivity.create
   *
   * @param {object} instance Intancia del VM de knockout
   */
  puzzleWordActivity.run = function (instance) {
    ko.cleanNode($('#main-container')[0]);
    ko.bindingHandlers.sortable.beforeMove = instance.verifyAnswer;
    ko.applyBindings(instance, $('#main-container')[0]);
  };

  return puzzleWordActivity;

});

lizPuzzleWord.directive('puzzleWord', function  (puzzleWordActivity) {
  return {
    restrict: 'E',
    scope: {
      options: '=',
      description: '@',
      audio:'@',
      customClass: '@'
    },
    templateUrl: '../views/activities/puzzle_word.html',
    link: function postLink(scope, element, attrs) {
      // Añadimos el audio a options
      scope.options.audio = typeof scope.audio !== "undefined" ? scope.audio : false;

      // Corremos la aplicación
      puzzleWordActivity.run(puzzleWordActivity.create(scope.options));
    }
  };
});

var lizQuestionsImages = angular.module('lizQuestionsImages', ['factories']);

lizQuestionsImages.directive('questionsImages', function  (shuffleArrayFactory) {
    return {
        restrict: 'E',
        scope: {
            options: '=',
            audio: '@',
            description: '@'
        },
        templateUrl: '../views/activities/questions_images.html',
        link: function (scope, element, attrs) {

            var opt = scope.options,
                rightAnswers = 0;


            // variables básicas de la acividad de angular
            scope.rightAnswer = false;
            scope.wrongAnswer = false;
            scope.success = false;
            scope.failure = false;
            scope.$root.isNextEnabled = false;
            scope.imgwidth = (opt.imgwidth) ? opt.imgwidth : 60;
            scope.chancesPerItem = (opt.chancesPerItem) ? opt.chancesPerItem : 2;
            scope.minRightAnwers = opt.minRightAnwers;
            scope.randomItems = (scope.options.randomItems) ? true:false;

            // Imagen principal
            scope.src = opt.src;
            scope.alt = opt.alt;

            // Preguntas
            scope.questions = opt.questions;

            // añadimos el número de posibilidades
            scope.questions.forEach(function (q) {
                q.chances = scope.chancesPerItem;
                if (scope.randomItems === true) {
                    shuffleArrayFactory.run(q.answers);
                }
            });

            /**
             * Verifica la respuesta.
             */
            scope.verify = function (item, select) {

                console.log("item ");
                console.log(item);

                if ( item.completed) return ;

                if (select.answer)    {
                    console.log("bien");

                    scope.rightAnswer = Math.random();
                    item.wrong = false;
                    item.right = true;
                    rightAnswers += 1;
                    item.completed = true;
                }
                else {
                    item.wrong = true;
                    scope.wrongAnswer = Math.random();
                    item.chances -= 1;
                    if(item.chances === 0) {item.completed = true;console.log(item);item.feedback = item.answers.filter(function (a) {
                        return a.answer;
                    })[0].text}
                }

                /*

                if(item.selectedAnswer.answer) {
                    scope.rightAnswer = Math.random();
                    item.wrong = false;
                    item.right = true;
                    rightAnswers += 1;
                    item.completed = true;
                } else {
                    item.wrong = true;
                    scope.wrongAnswer = Math.random();
                    item.chances -= 1;
                    if(item.chances === 0) {item.completed = true;console.log(item);item.feedback = item.answers.filter(function (a) {
                        return a.answer;
                    })[0].text}
                }*/

                // Contamos los elementos terminados
                var completedItems = scope.questions.filter(function (q) {
                    return q.completed;
                }).length;

                if(completedItems === scope.questions.length) {
                    scope.$root.isNextEnabled = true;

                    scope.$root.beforeGoNext = function () {
                        // solo pasa la actividad si todas las respuestas son correctas
                        if(rightAnswers === scope.questions.length || rightAnswers >= scope.minRightAnwers) {
                            scope.success = true;
                            return true;
                        } else {
                            scope.failure = true;
                            return true;
                        }

                    };

                }

            };
        }
    };
});

var lizRadioQuestions = angular.module('lizRadioQuestions', ['factories']);

lizRadioQuestions.directive('radioQuestions', function  (shuffleArrayFactory,$sce) {
  return {
    restrict: 'E',
    scope: {
      options: '=',
      audio: '@',
      description: '@'
    },
    templateUrl: '../views/activities/radio_questions.html',
    link: function (scope, element, attrs) {
      var opt = scope.options,
        rightAnswers = 0;

      // variables básicas de la acividad de angular
      scope.rightAnswer = false;
      scope.wrongAnswer = false;
      scope.success = false;
      scope.failure = false;
      scope.$root.isNextEnabled = false;
      scope.imgwidth = (opt.imgwidth) ? opt.imgwidth : 60;
      scope.chancesPerItem = (opt.chancesPerItem) ? opt.chancesPerItem : 2;
      scope.minRightAnwers = opt.minRightAnwers;
      scope.randomItems = (scope.options.randomItems) ? true:false;

      // Imagen principal
      scope.src = opt.src;
      scope.alt = opt.alt;
      scope.imgTitle = opt.imgTitle ? opt.imgTitle : false;
      scope.maintext = opt.maintext ? opt.maintext : false;

      // Preguntas
      scope.questions = opt.questions;

      // añadimos el número de posibilidades
      scope.questions.forEach(function (q) {
        q.chances = scope.chancesPerItem;
        if (scope.randomItems === true) {
          shuffleArrayFactory.run(q.answers);
        }
      });

      // Para usar el html en angular
      scope.sanitize = function (item) {
        return $sce.trustAsHtml(item);
      }

      /**
       * Verifica la respuesta.
       */
      scope.verify = function (item) {
        if(item.selectedAnswer.answer) {
          scope.rightAnswer = Math.random();
          item.wrong = false;
          item.right = true;
          rightAnswers += 1;
          item.completed = true;
        } else {
          item.wrong = true;
          scope.wrongAnswer = Math.random();
          item.chances -= 1;
          if(item.chances === 0) {item.completed = true;console.log(item);item.feedback = item.answers.filter(function (a) {
          return a.answer;
          })[0].text}
        }

        // Contamos los elementos terminados
        var completedItems = scope.questions.filter(function (q) {
          return q.completed;
        }).length;

        if(completedItems === scope.questions.length) {
          scope.$root.isNextEnabled = true;

          scope.$root.beforeGoNext = function () {
            // solo pasa la actividad si todas las respuestas son correctas
            if(rightAnswers === scope.questions.length || rightAnswers >= scope.minRightAnwers) {
              scope.success = true;
              return true;
            } else {
              scope.failure = true;
              return true;
            }
           
          };
          
        }

      };
    }
  };
});

var lizRadioQuestionsImages = angular.module('lizRadioQuestionsImages', ['factories']);

lizRadioQuestionsImages.directive('radioQuestionsImages', function  (shuffleArrayFactory) {
    return {
        restrict: 'E',
        scope: {
            options: '=',
            audio: '@',
            description: '@'
        },
        templateUrl: '../views/activities/radio_questions_images.html',
        link: function (scope, element, attrs) {

            console.log("hola");
            var opt = scope.options,
                rightAnswers = 0;


            // variables básicas de la acividad de angular
            scope.rightAnswer = false;
            scope.wrongAnswer = false;
            scope.success = false;
            scope.failure = false;
            scope.$root.isNextEnabled = false;
            scope.imgwidth = (opt.imgwidth) ? opt.imgwidth : 60;
            scope.chancesPerItem = (opt.chancesPerItem) ? opt.chancesPerItem : 2;
            scope.minRightAnwers = opt.minRightAnwers;
            scope.randomItems = (scope.options.randomItems) ? true:false;

            // Imagen principal
            scope.src = opt.src;
            scope.alt = opt.alt;

            // Preguntas
            scope.questions = opt.questions;

            // añadimos el número de posibilidades
            scope.questions.forEach(function (q) {
                q.chances = scope.chancesPerItem;
                if (scope.randomItems === true) {
                    shuffleArrayFactory.run(q.answers);
                }
            });

            /**
             * Verifica la respuesta.
             */
            scope.verify = function (item) {
                if(item.selectedAnswer.answer) {
                    scope.rightAnswer = Math.random();
                    item.wrong = false;
                    item.right = true;
                    rightAnswers += 1;
                    item.completed = true;
                } else {
                    item.wrong = true;
                    scope.wrongAnswer = Math.random();
                    item.chances -= 1;
                    if(item.chances === 0) {item.completed = true;console.log(item);item.feedback = item.answers.filter(function (a) {
                        return a.answer;
                    })[0].text}
                }

                // Contamos los elementos terminados
                var completedItems = scope.questions.filter(function (q) {
                    return q.completed;
                }).length;

                if(completedItems === scope.questions.length) {
                    scope.$root.isNextEnabled = true;

                    scope.$root.beforeGoNext = function () {
                        // solo pasa la actividad si todas las respuestas son correctas
                        if(rightAnswers === scope.questions.length || rightAnswers >= scope.minRightAnwers) {
                            scope.success = true;
                            return true;
                        } else {
                            scope.failure = true;
                            return true;
                        }

                    };

                }

            };
        }
    };
});

var lizReplaceWithInputs = angular.module('lizReplaceWithInputs', []);

lizReplaceWithInputs.directive('replaceWithInputs', function  ($compile) {
  return {
    restrict: 'E',
    scope: {
      options: '=',
      audio: '@',
      description: '@'
    },
    templateUrl: '../views/activities/replace_with_inputs.html',
    link: function postLink(scope, element, attrs) {
      var opt = scope.options,
        rightAnswers = 0,
        minRightAnswers = opt.minRightAnswers,
        cnt = opt.content, // Content to process
        placeholders = [], // Array con los placeholders
        placeholderCounter = 0; // Contador para crear scope.answers

      // imagen - audio
      scope.src = opt.src;
      scope.alt = opt.alt;
      scope.addAudio = opt.audio;

      scope.title = opt.title;
      scope.answers = [];

      // Busca los placeholders
      cnt.replace(/\$\{(\d+)\}/g, function (a, b) {
        a = a.substr(2, a.length - 3); // Remueve los elementos que producen la interpolación
        placeholders.push(a);
      });

      // En base a los placeholders, creamos cada uno de los targets
      placeholders.forEach(function (p) {
        var a = {},
          _data = null,
          answer = opt.answers[p];

        a.input = ''; // modelo
        a.chances = 2; // oportunidades

        if(typeof answer === 'object') {
          _data = answer.data
        } else {
          _data = answer;
        }

        if(_data instanceof Array) {
          a.answer = _data;
        } else {
          a.answer = _data.toString();
        }

        a.customClass = answer.hasOwnProperty('customClass') ? answer.customClass : '';
        a.placeholder = answer.hasOwnProperty('placeholder') ? answer.placeholder : '';

        scope.answers.push(a); // Añade a las respuestas
      });

      // Reemplaza los placeholders con los elementos funcionales (inputs)
      cnt = cnt.replace(/\$\{(\d+)\}/g, function (a, b) {
        a = "answers[" + placeholderCounter + "]";
        placeholderCounter += 1;

        var elem = '<span class="input-container">\n    <input style="_s_" class="input-primary {{ _x_.customClass }}" type="text" ng-model="_x_.input" ng-disabled="_x_.completed" ng-blur="verify(_x_)" placeholder="{{ _x_.placeholder }}"/>\n    <span class="icon-right" ng-show="_x_.right"></span>\n    <span class="icon-wrong" ng-show="_x_.wrong"></span>\n</span>\n';

        elem = elem.replace(/_s_/g, opt.inputStyles);
        return elem.replace(/_x_/g, a);
      });

      // Compilación
      element.find('.operation-content').append($compile(cnt)(scope));

      /**
       * Verifica cada campo de texto. Si hay errores, lo limpia instantáneamente.
       * @param item
       */
      scope.verify = function (item) {
        // Si esta completo o si el input no tiene el tamaño de la respuesta, salimos
        if(item.completed || item.input.trim() === "") return false;

        var completedItems = null,
          condition = null;

        if(item.answer instanceof Array) {
          condition = item.answer.indexOf(item.input.trim()) >= 0;
        } else {
          condition = item.answer === item.input.trim();
        }

        if(condition) {
          // Respuesta correcta
          delete item.wrong;

          item.right = true;
          item.completed = true; // Marca el item como terminado
          rightAnswers += 1; // Incrementa las respuestas correctas
        } else {
          // Respuesta incorrecta
          item.wrong = true;
          item.chances -= 1;

          if(item.chances === 0) {
            item.completed = true;
          } else {
            item.input = ''; // Limpia el input
          }
        }

        // Contamos los elementos completos
        completedItems = scope.answers.filter(function (a) {
          return a.completed;
        }).length;

        // Fin de la actividad
        if(completedItems === scope.answers.length) {
          // Hacemos la realimentación, poniendo todas las respuestas correctas
          scope.answers.forEach(function (answer) {
            answer.input = answer.answer;
          });

          scope.$root.isNextEnabled = true;
        }

      };

      // Función especial que se ejecuta al dar click en la flecha de siguiente
      scope.$root.beforeGoNext = function () {
        if(rightAnswers >= minRightAnswers) {
          scope.success = true;
          return true;
        } else {
          scope.failure = true;
          return false;
        }
      };

    }
  };
});

var lizReplaceWithInputsMat = angular.module('lizReplaceWithInputsMat', []);

lizReplaceWithInputsMat.directive('replaceWithInputsMat', function  ($compile) {
  return {
    restrict: 'E',
    scope: {
      options: '=',
      audio: '@',
      description: '@',
    },
    templateUrl: '../views/activities/replace_with_inputs_mat.html',
    link: function postLink(scope, element, attrs) {
      var opt = scope.options,
        rightAnswers = 0,
        minRightAnswers = opt.minRightAnswers,
        cnt = opt.content, // Content to process
        placeholders = [], // Array con los placeholders
        placeholderCounter = 0; // Contador para crear scope.answers

      // imagen - audio
      scope.src = opt.src;
      scope.alt = opt.alt;
      scope.addAudio = opt.audio;

      scope.title = opt.title;
      scope.answers = [];

      // Busca los placeholders
      cnt.replace(/\$\{(\d+)\}/g, function (a, b) {
        a = a.substr(2, a.length - 3); // Remueve los elementos que producen la interpolación
        placeholders.push(a);
      });
      // En base a los placeholders, creamos cada uno de los targets
      placeholders.forEach(function (p) {
        var a = {},
          _data = null,
          answer = opt.answers[p];

        a.input = ''; // modelo
        a.chances = 2; // oportunidades

        if(typeof answer === 'object') {
          _data = answer.data
        } else {
          _data = answer;
        }

        if(_data instanceof Array) {
          a.answer = _data;
        } else {
          a.answer = _data.toString();
        }

        a.customClass = answer.hasOwnProperty('customClass') ? answer.customClass : '';
        a.placeholder = answer.hasOwnProperty('placeholder') ? answer.placeholder : '';

        scope.answers.push(a); // Añade a las respuestas
      });

      // Reemplaza los placeholders con los elementos funcionales (inputs)
      cnt = cnt.replace(/\$\{(\d+)\}/g, function (a, b) {
        a = "answers[" + placeholderCounter + "]";
        placeholderCounter += 1;

        var elem = '<span class="input-container">\n    <input style="_s_" class="input-primary {{ _x_.customClass }}" type="text" ng-model="_x_.input" ng-disabled="_x_.completed" ng-blur="verify(_x_)" placeholder="{{ _x_.placeholder }}"/>\n    <span class="icon-right" ng-show="_x_.right"></span>\n    <span class="icon-wrong" ng-show="_x_.wrong"></span>\n</span>\n';

        elem = elem.replace(/_s_/g, opt.inputStyles);
        return elem.replace(/_x_/g, a);
      });
       cnt = cnt.replace(/\$\{(\d+)\}/g, function (a, b) {
        a = "answers[" + placeholderCounter + "]";
        placeholderCounter += 1;

        var elem = '<span class="input-container">\n    <input style="_s_" class="input-primary {{ _x_.customClass }}" type="text" ng-model="_x_.input" ng-disabled="_x_.completed" ng-blur="verify(_x_)" placeholder="{{ _x_.placeholder }}"/>\n    <span class="icon-right" ng-show="_x_.right"></span>\n    <span class="icon-wrong" ng-show="_x_.wrong"></span>\n</span>\n';

        elem = elem.replace(/_s_/g, opt.inputStyles);
        return elem.replace(/_x_/g, a);
      });

       


      // Compilación
      element.find('.operation-content').append($compile(cnt)(scope));
       

      /**
       * Verifica cada campo de texto. Si hay errores, lo limpia instantáneamente.
       * @param item
       */
      scope.verify = function (item) {
        // Si esta completo o si el input no tiene el tamaño de la respuesta, salimos
        if(item.completed || item.input.trim() === "") return false;

        var completedItems = null,
          condition = null;

        if(item.answer instanceof Array) {
          condition = item.answer.indexOf(item.input.trim()) >= 0;
        } else {
          condition = item.answer === item.input.trim();
        }

        if(condition) {
          // Respuesta correcta
          delete item.wrong;

          item.right = true;
          item.completed = true; // Marca el item como terminado
          rightAnswers += 1; // Incrementa las respuestas correctas
        } else {
          // Respuesta incorrecta
          item.wrong = true;
          item.chances -= 1;

          if(item.chances === 0) {
            item.completed = true;
          } else {
            item.input = ''; // Limpia el input
          }
        }

        // Contamos los elementos completos
        completedItems = scope.answers.filter(function (a) {
          return a.completed;
        }).length;

        // Fin de la actividad
        if(completedItems === scope.answers.length) {
          // Hacemos la realimentación, poniendo todas las respuestas correctas
          scope.answers.forEach(function (answer) {
            answer.input = answer.answer;
          });

          scope.$root.isNextEnabled = true;
        }

      };

      // Función especial que se ejecuta al dar click en la flecha de siguiente
      scope.$root.beforeGoNext = function () {
        if(rightAnswers >= minRightAnswers) {
          scope.success = true;
          return true;
        } else {
          scope.failure = true;
          return false;
        }
      };

    }
  };
});

/**
 * La actividad permite seleccionar varias opciones hubicadas en una o varias imagenes.
 */
var lizSelectAllCorrectImageOption = angular.module('lizSelectAllCorrectImageOption', []);

lizSelectAllCorrectImageOption.directive('selectAllCorrectImageOption', function () {
	return {
		restrict: 'E',
        templateUrl: '../views/activities/select_all_correct_image_option.html',
        scope: {
            options: '=',
            instruction: '@',
            title: '@',
            description: '@',
            audio: '@'
        },
		link: function ($scope, iElement, iAttrs) {

			$scope.items = $scope.options.items;

			$scope.rightAnswers = 0;
			$scope.complete = false; // Cuando termina la actividad
			$scope.block = false;
			$scope.success = false;
			$scope.failure = false;
			$scope.rightAnswer = false;
  			$scope.wrongAnswer = false;
  			$scope.classComplete = $scope.options.classComplete;
			$scope.itemsPerRow = $scope.options.itemsPerRow;
			$scope.minRightAnswers = $scope.options.minRightAnswers;


			angular.forEach($scope.items, function (value, key) {
				value.chances = $scope.options.chancesPerItem;
			});

			// watch if the activity is finished
			$scope.$watch('complete', function(complete) {
				if (complete) {
					if ($scope.rightAnswers >= $scope.minRightAnswers) {
						// éxito
						$scope.success = true;

						// Activamos la siguiente actividad o ruta
						$scope.$root.isNextEnabled = true;
					} else {
						// fracaso
						$scope.failure = true;
					}
				} 
			});
			// Si la descripción o el título están, entonces la instrucción va al fondo
			$scope.isBottom = $scope.title || $scope.description;

			var counter = 0;

			$scope.verify = function (item, opt) {
			if (opt.complete){return}

				if (true === opt.correct) {
					$scope.rightAnswers++;
					$scope.rightAnswer = Math.random();
					opt.complete = true; // marcamos el item como completo
					opt.right = true
					
				} else {
					// obj.wrong ? obj.chances=$scope.options.chancesPerItem-2: obj.chances=$scope.options.chancesPerItem-1;

                	item.wrong = true;
                	$scope.wrongAnswer = Math.random();
                	opt.complete = true; // marcamos el item como completo
                	opt.wrong = true

                    	
				}

				if(item.chances === 1 || $scope.rightAnswers === $scope.minRightAnswers){
                    	counter++;
                }else{item.chances--;}

				if(counter === $scope.items.length){
                    $scope.complete = true;
                }
			}

			/**
			 * Para obtener los estilos de los elementos, específicamente el ancho
			 */
			$scope.getStyles = function (item) {
				var styles = "";

				if($scope.itemsPerRow){
					styles += "width: " + (100 / $scope.itemsPerRow) + "%;";
				} else {
					styles += "width: " + (100 / $scope.items.length) + "%;";
				}

				if(item.style){
					styles += item.style;
				}
				
				return styles;
			};

			/**
			 * Devuelve los estilos de cada elemento
			 */
			$scope.getOptionStyles = function (opt) {
				var styles = '';

				styles += "width: " + opt.w + "px;";
				styles += "height: " + opt.h + "px;";
				styles += "top: " + opt.t + "%;";
				styles += "left: " + opt.l + "%;";
				
				return styles;
			};
		}
	};
});
var lizSelectCheckbox = angular.module('lizSelectCheckbox', []);

lizSelectCheckbox.directive('selectCheckbox', function ($sce) {
  return {
    restrict: 'E',
    scope: {
      options: '=',
      audio: '@',
      title: '@',
      description: '@'
    },
    templateUrl: '../views/activities/select_checkbox.html',
    link: function (scope, element, attrs) {
      var opt = scope.options,
        rightAnswers = 0,
        chances = opt.chances,
        minRightAnswers = opt.minRightAnswers;

      scope.rightAnswers = false;
      scope.wrongAnswer = false;
      scope.success = false;
      scope.failure = false;

      scope.showFeedback = false; // Realimentación

      scope.questions = opt.questions;
      scope.answerwidth = opt.answerwidth;

      //configuramos las opciones para cada pregunta
      scope.questions.forEach(function (q) {

        q.maxRightAnswers = q.items.filter(function (i) {
          return i.answer;
        }).length;//numero de respustas buenas
        q.chances = opt.chancesperitem // posibilidades por pregunta
         q.showFeedback = false; // Realimentación
         q.feedback = "Las respuestas correctas son:";
         
      });


      scope.$root.beforeGoNext = function () {
        if (rightAnswers >= minRightAnswers) {
          scope.success = true;
          return true;
        } else {
          scope.failure = true;
          return true;
        }
      };

      // Permite el uso de html
      scope.sanitize = function (item) {
        return $sce.trustAsHtml(item);
      };

      /**
       * Verifica el elemento.
       * @param item
       */
      scope.verify = function (item,q) {
        if(item.answer === item.selectedAnswer) {
          scope.rightAnswer = Math.random();
          rightAnswers += 1;
          q.maxRightAnswers -= 1;
        } else {
          scope.wrongAnswer = Math.random();
        }

        item.completed = true;
        q.chances -= 1;

        if (q.chances === 0 || q.maxRightAnswers === 0) {
          q.items.forEach(function (i,index) {
            if(i.answer){
              var coma = index > 1 ? ',' : ''
              q.feedback += coma + " " + '<strong>'+i.text+'<strong>'
            }
          }); 
          q.disableAll = true;
          q.showFeedback = true;
          chances -= 1;
        }

        if (chances === 0) {
          scope.$root.isNextEnabled = true;
        }

      };

    }
  };
});

/**
 * La actividad permite seleccionar varias opciones hubicadas en una o varias imagenes.
 */
var lizSelectCorrectImageOption = angular.module('lizSelectCorrectImageOption', []);

lizSelectCorrectImageOption.directive('selectCorrectImageOption', function () {
	return {
		restrict: 'E',
        templateUrl: '../views/activities/select_correct_image_option.html',
        scope: {
            options: '=',
            instruction: '@',
            title: '@',
            description: '@',
            audio: '@'
        },
		link: function ($scope, iElement, iAttrs) {

			$scope.items = $scope.options.items;

			$scope.rightAnswers = 0;
			$scope.complete = false; // Cuando termina la actividad
			$scope.block = false;
			$scope.success = false;
			$scope.failure = false;
			$scope.itemsPerRow = $scope.options.itemsPerRow;
			$scope.minRightAnswers = $scope.options.minRightAnswers;

			angular.forEach($scope.items, function (value, key) {
				value.chances = $scope.options.chancesPerItem-1;
			});

			// watch if the activity is finished
			$scope.$watch('complete', function(complete) {
				if (complete) {
					if ($scope.rightAnswers >= $scope.minRightAnswers) {
						// éxito
						$scope.success = true;

						// Activamos la siguiente actividad o ruta
						$scope.$root.isNextEnabled = true;
					} else {
						// fracaso
						$scope.failure = true;
					}
				} 
			});

			// Si la descripción o el título están, entonces la instrucción va al fondo
			$scope.isBottom = $scope.title || $scope.description;

			var counter = 0;

			$scope.verify = function (item, opt) {

				if (true === opt.correct) {
					$scope.rightAnswers++;
					item.wrong = false;
					item.right = true;
					item.block = true; // marcamos el item como completo
					counter++;
				} else {
					// obj.wrong ? obj.chances=$scope.options.chancesPerItem-2: obj.chances=$scope.options.chancesPerItem-1;

                	item.wrong = true;
                	

                    	if(item.chances === 0){
                    	item.block = true;
                    	counter++;
                    	}else{chances--;}
				}

				if(counter === $scope.items.length){
                    $scope.complete = true;
                }
			}

			/**
			 * Para obtener los estilos de los elementos, específicamente el ancho
			 */
			$scope.getStyles = function (item) {
				var styles = "";

				if($scope.itemsPerRow){
					styles += "width: " + (100 / $scope.itemsPerRow) + "%;";
				} else {
					styles += "width: " + (100 / $scope.items.length) + "%;";
				}

				if(item.style){
					styles += item.style;
				}
				
				return styles;
			};

			/**
			 * Devuelve los estilos de cada elemento
			 */
			$scope.getOptionStyles = function (opt) {
				var styles = '';

				styles += "width: " + opt.w + "px;";
				styles += "height: " + opt.h + "px;";
				styles += "top: " + opt.t + "%;";
				styles += "left: " + opt.l + "%;";
				
				return styles;
			};
		}
	};
});
/**
 * La actividad permite completar palabras en inputs
 */
var lizSelectOptionsImg = angular.module('lizSelectOptionsImg', ['factories']);

lizSelectOptionsImg.directive('selectOptionsImg', function(shuffleArrayFactory){
	return {
		restrict: 'E',
		templateUrl: '../views/activities/select_options_img.html',
		scope: {
			options: "=",
			title: '@',
			correctAnswer: '@',
			description: '@',
			instruction: '@',
			audio:'@'
		},
		link: function(scope, element, attrs){
			var opt = scope.options, // alias
        random = opt.hasOwnProperty('random') ? opt.random : true,
				minRightAnswers = opt.minRightAnswers,
				rightAnswers = 0; // contador de respuestas correctas

			// Inputs procesados
			scope.words = [];
			scope.extension = opt.extension ? opt.extension : '.png';

			// Procesamos cada elemento del array entrante
			angular.forEach(scope.inputs, function (input) {
				scope.words.push({ word: input, right: false, wrong: false });
			});

			scope.chancesPerItem = opt.chancesPerItem;
			scope.hideDescription = opt.hideDescription;
			scope.itemsPerRow = opt.itemsPerRow;
			scope.items = opt.items;
			scope.block = false;

			scope.success = false;
			scope.failure = false;

			// Si la descripción o el título están, entonces la instrucción va al fondo
			scope.isBottom = scope.title || scope.description;


			// Añadimos las variables necesarias para la funcionalidad
			scope.items.forEach(function(item){

        if(random) shuffleArrayFactory.run(item.options); // Barajamos las opciones

				item.options.unshift({
					text: 'Elige una repuesta',
					firstElement: true
				});

				item.selected = item.options[0];

				item.chances = scope.chancesPerItem; // ponemos el número de oportunidades de cada pregunta
			});


			/**
			 * Verifica cada una de las respuestas
			 */
			scope.verify = function (item) {
				// Si es el primer elemento, ocultamos los íconos de respuesta
				if(item.selected.firstElement) {
					delete item.right;
					delete item.wrong;

					return;
				}

				if(item.selected.answer) {
					// respuesta correcta
					delete item.wrong;

					item.right = true;
					item.disabled = true;
					rightAnswers += 1;
				} else {
					// respuesta incorrecta
					item.wrong = true;
					item.chances -= 1;
					if (item.chances === 0) item.disabled = true;
				}

				// Hay que mirar que la actividad haya sido completada
				var completedItems = scope.items.filter(function(item){
					return item.disabled;
				}).length;

				if(completedItems === scope.items.length) {
					if(rightAnswers >= minRightAnswers) {
						// éxito
						scope.$root.isNextEnabled = true;
						scope.success = true;
					} else {
						scope.failure = true;
					}
				}
			};


			/**
			 * Para obtener los estilos de los elementos, específicamente el ancho
			 */
			scope.getStyles = function () {
				var styles = "";

				if(scope.itemsPerRow){
					styles += "width: " + (100 / scope.itemsPerRow) + "%;";
				} else {
					styles += "width: " + (100 / (scope.options.data.length + 2)) + "%;";
					styles += "margin-left: " + (100 / (scope.options.data.length * 4)) + "%;";
				}
				
				return styles;
			}

		}
	};
});


var lizSelectOptionsPositions = angular.module('lizSelectOptionsPositions', ['factories']);

lizSelectOptionsPositions.directive('selectOptionsPositions', function  (shuffleArrayFactory) {
    return {
        restrict: 'E',
        templateUrl: '../views/activities/select_options_positions.html',
		scope: {
			options: '=',
			description: '@',
			audio:'@'
			
		},

		link: function (scope, element, attrs) {
			// Corremos la aplicación
			scope.items = scope.options.items;
			scope.canvas = scope.options.canvas; // La imagen principal
			scope.canvasStyle = scope.options.canvasStyle; // La imagen principal
			scope.titlecanvas = scope.options.titlecanvas; // title de La imagen principal
			minRightAnswers = scope.options.minRightAnswers
			scope.selectindividual = scope.options.selectindividual //separa cada respuesta en un recuadro individual
			rightAnswers = 0, // Contador de preguntas buenas
			chances = scope.options.chances,
			scope.success = false;
			scope.failure = false;
			scope.block = false;
			completedItems = 0;

			/**
			 * Definimos nuestra función beforeGoNext para que muestre el cuadro de felicitaciones
			 */
			scope.$root.beforeGoNext = function () {
				console.log(rightAnswers);
				if(rightAnswers >= minRightAnswers){
					scope.success = true;
					return true; 
				}else{scope.failure = true;}

				return true; 
			};


			/**
			 * Para obtener los estilos de los elementos, específicamente el ancho
			 */
			scope.getTargetsStyles = function (item) {
				var styles = '';

				styles += 'width: ' + item.w + 'px;';
				styles += 'height: ' + item.h + 'px;';
				styles += 'top: ' + item.t + '%;';
				styles += 'left: ' + item.l + '%;';

				/*// estilos personalizados
				if(opt.hasOwnProperty('customStyles')) styles += opt.customStyles;*/

				return styles;
			};
			/**
			 * Para obtener los estilos las calificaciones de los targets 
			 */
			scope.getTargetsStyles2 = function (item) {
				var styles = '';

				styles += 'width: ' + item.w + 'px;';
				styles += 'height: ' + item.h + 'px;';
				styles += 'top: ' + item.t + '%;';
				styles += 'left: ' + item.l + '%;';
				styles += 'background-size: ' + item.w + 'px;' + item.w + 'px;';
				/*// estilos personalizados
				if(opt.hasOwnProperty('customStyles')) styles += opt.customStyles;*/

				return styles;
			};

		

      // añadimos algunas opciones
      scope.items.forEach(function (q) {
        q.chances = scope.options.chances; // posibilidades por pregunta

        if(scope.options.optionsrandom){
        shuffleArrayFactory.run(q.options); // baraja
    	}
    	if(!scope.selectindividual){
	        q.options.unshift({
	          text: "Elige una respuesta",
	          default: true
	        });
        }

        q.selectedAnswer = q.options[0]; // elige la primera, en este caso, "elige una respuesta"

        q.rightAnswer = q.options.filter(function (answer) {
          return answer.answer;
        })[0];
      });

			/**
			 * Marca los elementos y verifica el final
			 */
			scope.verify = function (item) {
								
				 if(item.selectedAnswer.default) return; // Es "Elige una respuesta"
				
				if(item.selectedAnswer.answer) {
		          /*scope.rightAnswer = Math.random();*/
		          if(item.freeanswer){
			          	if(item.chances === scope.options.chances){
			          		item.wrong = false;
							item.right = true;
			          		rightAnswers += 1;
			          		item.chances -= 1;
			          	}else{item.chances -= 1;}

				          	if(item.chances === 0){
				          		 item.completed = true;
				          	}
			        }else{
			        	item.wrong = false;
						item.right = true;
				        rightAnswers += 1;
				        item.completed = true;
		     		}

	       		} else {
		          scope.wrongAnswer = Math.random();
		          item.chances -= 1;
		          item.wrong = true;
		          	if(item.chances === 0){
				        item.completed = true;
				        item.right = false;
						item.wrong = true;				        
					}
	        	}

				var countCompleted = scope.items.filter(function(item){
					return item.completed;
				}).length;
		
				if(countCompleted === scope.items.length || rightAnswers === scope.items.length ) {
					scope.$root.isNextEnabled = true; // Activa la flecha de siguiente
				}
			};

			/**
			 * Marca los elementos y verifica el final
			 */
			scope.verify2 = function (a,item) {

				if(item.completed) return; // Es "Elige una respuesta"
				console.log(item);	

				if(a.answer) {
		          
			        	item.wrong = false;
						item.right = true;
				        rightAnswers += 1;
				        item.completed = true;
				        a.istrue = true

	       		} else {
		          scope.wrongAnswer = Math.random();
		          item.chances -= 1;
		          item.wrong = true;
		          	if(item.chances === 0){
				        item.completed = true;
				        item.right = false;
						item.wrong = true;	
						 a.isfalse = true			        
					}
	        	}

				var countCompleted = scope.items.filter(function(item){
					return item.completed;
				}).length;
		
				if(countCompleted === scope.items.length || rightAnswers === scope.items.length ) {
					scope.$root.isNextEnabled = true; // Activa la flecha de siguiente
				}
			};

		}

    }; 
});





var lizSelectOptionsTable = angular.module('lizSelectOptionsTable', []);

lizSelectOptionsTable.directive('selectOptionsTable', function  () {
    return {
        restrict: 'E',
        templateUrl: '../views/activities/select_options_table.html',
		scope: {
			options: '=',
			description: '@',
			audio:'@',
			title:'@'
		},

		link: function (scope, element, attrs) {
			// Corremos la aplicación
			scope.items = scope.options.items;
			scope.itemsPerRow = scope.options.itemsPerRow;
			scope.rowsstyle = scope.options.rowsstyle;
			scope.mainimg = scope.options.mainimg;
			scope.minRightAnswers = scope.options.minRightAnswers
			rightAnswers = 0, // Contador de preguntas buenas
			scope.chancesPerItem = (scope.options.chancesPerItem)
			scope.success = false;
			scope.failure = false;
			scope.block = false;
			
			scope.questions = [];

			// añadimos el número de posibilidades
		    scope.items.forEach(function (q) {
		      q.list.forEach(function (i) {
			       if(i.hasOwnProperty('answers')) {

			       		scope.questions.push({
							item: i.answers,								      
					  	});

			       	if(i.default){
			       		i.answers.completed = true
			       		i.answers.right = true
			       		rightAnswers += 1
			       		i.answers.forEach(function (a) {

			       			if (a.answer) {

			       				i.answers.selectedAnswer = a
			       			};

		       			});
			       	}
			       	i.answers.chances = scope.chancesPerItem;
			       }
		       });
		    });

			/**
			 * Para obtener los estilos de los elementos, específicamente el ancho
			 */
			scope.getStyles = function function_name(argument) {
				var styles = "";

				if(scope.itemsPerRow){
					styles += "width: " + (100 / scope.itemsPerRow) + "%;";
					styles += "margin-left: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-top: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-right: " + (10 / scope.itemsPerRow) + "%!important;";
				} else {
					styles += "width: " + (100 / scope.items.length) + "%;";
					styles += "margin-left: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-top: " + (10 / scope.itemsPerRow) + "%;";
				}
				
				return styles;

				
			};

			/**
	       * Verifica la respuesta.
	       */
		    scope.verify = function (item,a) {
		        if(item.selectedAnswer.answer) {
		          rightAnswers += 1;
		          item.right = true;
		          item.wrong = false;
		          item.completed = true;
		        } else {
		          item.chances -= 1;
		          item.right = false;
		          item.wrong = true;
		          if(item.chances === 0){ item.completed = true };
		        }

		        // Contamos los elementos terminados
		        var completedItems = scope.questions.filter(function (q) {
		          return q.item.completed;
		        }).length;

		        if(completedItems === scope.questions.length) {
		          // solo pasa la actividad si todas las respuestas son correctas
		          console.log(rightAnswers,scope.minRightAnswers);
		          if(rightAnswers === scope.questions.length || rightAnswers >= scope.minRightAnswers) {
		            scope.$root.isNextEnabled = true;
		            scope.success = true;
		          } else {
		            scope.failure = true;
		          }
		        }
		    };


		}


    }; 
});


var lizSelectQuestions = angular.module('lizSelectQuestions', ['factories']);

lizSelectQuestions.directive('selectQuestions', function  (shuffleArrayFactory,$sce) {
  return {
    restrict: 'E',
    scope: {
      options: '=',
      audio: '@',
      description: '@',
      titletop: '@'
    },
    templateUrl: '../views/activities/select_questions.html',
    link: function (scope, element, attrs) {
      var opt = scope.options,
        rightAnswers = 0,
        minRightAnswers = opt.minRightAnswers,
        random = opt.hasOwnProperty('random') ? opt.random : true; // Verdadero por defecto

      // variables básicas de la acividad de angular
      scope.rightAnswer = false;
      scope.wrongAnswer = false;
      scope.success = false;
      scope.failure = false;

      // Imagen principal
      scope.src = opt.hasOwnProperty('src') ? opt.src : false;
      scope.text = opt.hasOwnProperty('text') ? opt.text : false;
      scope.bigImg = opt.hasOwnProperty('bigImg') ? opt.bigImg : false;
      scope.alt = opt.alt;
      scope.title = opt.title;
      scope.stylequestions = opt.stylequestions;

      // Preguntas
      scope.questions = opt.questions;

      // añadimos algunas opciones
      scope.questions.forEach(function (q) {
        q.chances = 2; // posibilidades por pregunta

        if(random) shuffleArrayFactory.run(q.answers); // baraja

        q.answers.unshift({
          text: "Elige una respuesta",
          default: true
        });

        q.selectedAnswer = q.answers[0]; // elige la primera, en este caso, "elige una respuesta"

        q.rightAnswer = q.answers.filter(function (answer) {
          return answer.answer;
        })[0];

      });

      /**
       * Cuando se da click en la flecha de siguiente
       */
      scope.$root.beforeGoNext = function () {
        if(rightAnswers >= minRightAnswers) {
          scope.success = true;
          return true;
        }

        scope.failure = true;
        return true;
      };

      // Para usar el html en angular
      scope.sanitize = function (item) {
        return $sce.trustAsHtml(item);
      }
      
      /**
       * abre el zoom 
       */
      scope.zoom = function () {
        if(scope.bigImg){
          scope.showBig = true;
        }
      };

      /**
       * Cierra el zoom 
       */
      scope.complete = function () {
        
          scope.showBig = false;
      };

      /**
       * Verifica la respuesta.
       */
      scope.verify = function (item) {
        if(item.selectedAnswer.default) return; // Es "Elige una respuesta"

        if(item.selectedAnswer.answer) {
          scope.rightAnswer = Math.random();
          rightAnswers += 1;
          item.completed = true;
        } else {
          scope.wrongAnswer = Math.random();
          item.chances -= 1;
          if(item.chances === 0){ item.completed = true;item.feedback = true;console.log(item);}
        }

        // Contamos los elementos terminados
        var completedItems = scope.questions.filter(function (q) {
          return q.completed;
        }).length;

        if(completedItems === scope.questions.length) {
          scope.$root.isNextEnabled = true;
          scope.feedback = true; // muestra la realimentación
        }
      };
    }
  };
});

/**
 * La actividad permite seleccionar varias opciones hubicadas en imagenes
 * de acuerdo a una imagen principal.
 */
var lizSelectTableImageMultiple = angular.module('lizSelectTableImageMultiple', []);

lizSelectTableImageMultiple.directive('selectTableImageMultiple', function () {
	return {
		restrict: 'E',
        templateUrl: '../views/activities/select_table_image_multiple.html',
        scope: {
            options: '=',
            instruction: '@',
            title: '@',
            description: '@',
            audio: '@'
        },
		link: function ($scope, iElement, iAttrs) {

			$scope.items = $scope.options.items;

			$scope.mainImageTitle = $scope.options.mainImageTitle;
			$scope.imageTitle2 = $scope.options.imageTitle2;
			$scope.imageTitle3 = $scope.options.imageTitle3;
			$scope.itemsLength = 0;
			$scope.rightAnswers = 0;
			$scope.complete = false; // Cuando termina la actividad
			$scope.block = false;
			$scope.success = false;
			$scope.failure = false;
			$scope.minRightAnswers = $scope.options.minRightAnswers;

			angular.forEach($scope.items, function (value, key) {
				$scope.itemsLength += value.cols.length;

				angular.forEach(value.cols, function (v, k) {
					v.chances = $scope.options.chancesPerItem-1;
				})
			})

			// watch if the activity is finished
			$scope.$watch('complete', function(complete) {
				if (complete) {
					if ($scope.rightAnswers >= $scope.minRightAnswers) {
						// éxito
						$scope.success = true;

						// Activamos la siguiente actividad o ruta
						$scope.$root.isNextEnabled = true;
					} else {
						// fracaso
						$scope.failure = true;
					}
				} 
			});

			// Si la descripción o el título están, entonces la instrucción va al fondo
			$scope.isBottom = $scope.title || $scope.description;

			var counter = 0,
				chances = $scope.options.chancesPerItem-1;

			$scope.verify = function (obj, item) {

				if (true === item.correct) {
					$scope.rightAnswers++;
					obj.wrong = false;
					obj.right = true;
					obj.disabled = true; // marcamos el item como completo
					counter++;
				} else {
					// obj.wrong ? obj.chances=$scope.options.chancesPerItem-2: obj.chances=$scope.options.chancesPerItem-1;

                	obj.wrong = true;
                	

                    	if(obj.chances === 0){
                    	obj.disabled = true;
                    	counter++;
                    	}else{chances--;}
				}

				console.log(obj);

				if(counter === $scope.itemsLength){
                    $scope.complete = true;
                }
			};

			/**
			 * Devuelve los estilos de cada elemento
			 */
			$scope.getStyles = function (opt) {
				var styles = '';

				styles += "-webkit-border-radius: " + opt.bdrs + ";"
				styles += "-moz-border-radius: " + opt.bdrs + ";"
				styles += "border-radius: " + opt.bdrs + ";"
				styles += "width: " + opt.w + "px;";
				styles += "height: " + opt.h + "px;";
				styles += "top: " + opt.t + "%;";
				styles += "left: " + opt.l + "%;";
				
				return styles;
			};
		}
	};
});
var lizSelectWords = angular.module('lizSelectWords', ['factories']);

lizSelectWords.directive('selectWords', function  (shuffleArrayFactory) {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			description: '@',
			audio: '@',
			img: '@',
			alt: '@'
		},
		templateUrl: '../views/activities/select_words.html',
		link: function postLink(scope, element, attrs) {

			var opt = scope.options,
				text = opt.text.split(" "), // texto inicial
				changeWords = opt.words.slice(0), // Palabras a reemplazar
				rightAnswers = 0, // Contador de respuestas correctas
				minRightAnswers = opt.minRightAnswers, // Número mínimo de respuestas correctas
				chances = opt.chances; // posibilidades de realizar la actividad

			scope.words = []; // Palabras que se usarán al final
			scope.wordsOptions = []; // Opciones a usar en cada uno de los desplegables

			// variables de calificación
			scope.rightAnswer = false;
			scope.wrongAnswer = false;
			scope.success = false;
			scope.failure = false;

			// ============================================================================
			// Constructor de wordsOptions
			// ============================================================================
			// Añadimos la opción por defecto
			scope.wordsOptions.push({
				id: 0,
				text: "Elige una respuesta"
			});

			// Cargamos las demás opciones
			for(var i=0; i < changeWords.length; i++){
				scope.wordsOptions.push({
					id: i,
					text: changeWords[i]
				});
			}

			// ============================================================================
			// Constructor de scope.words
			// ============================================================================
			for(var i=0; i < text.length; i++){
				// Encuentra la expresión ${x}, donde x es el índice dentro del array de palabras
				if( text[i].match(/(^\$\{)\d(\}$)/) ){
					// Input
					// Recuperamos el índice del patrón
					var index = text[i].replace(/\D/g,'');

					scope.words.push({
						isInput: true,
						input: scope.wordsOptions[0],  // Se pone como valor inicial la respuesta
						word: changeWords[index] // Palabra a comparar
					});
				} else {
					// Palabra normal
					scope.words.push({
						isInput: false,
						word: text[i] + " "
					});
				}
			}

			// ============================================================================
			// Función de verificación
			// ============================================================================
			scope.verify = function (item) {

				if(item.word === item.input.text){
					// Respuesta Correcta
					scope.rightAnswer = Math.random(); // Disparador de respuesta
					item.completed = true;
					rightAnswers++;
				} else {
					// Respuesta Incorrecta
					scope.wrongAnswer = Math.random(); // Disparador de respuesta
				}

				chances--;

				// Si se acaban las oportunidades o 
				if(chances === 0 || changeWords.length === rightAnswers){
					if(rightAnswers >= minRightAnswers){
						// Éxito
						scope.$root.isNextEnabled = true;
						scope.success = true;
					} else {
						// Fracaso
						scope.failure = true;
					}
				}

			};
			
		}
	}; 
});

var lizSequences = angular.module('lizSequences', []);

// Knockout Pairs Factory
lizSequences.factory('sequencesActivity', function ($rootScope, shuffleArrayFactory) {

	var sequencesActivity = {};

	/**
	 * Crea el ViewModel
	 */
	sequencesActivity.create = function (options) {
		return new sequencesActivity._ViewModel(options);
	}

	/**
	 * Genera el ViewModel de las parejas con sus funcionalidades
	 *
	 * Recibe un objeto con las siguientes propiedades
	 *
	 * @param {object}		options						Opciones a utilizar.
	 *
	 *
	 * @param {integer}		options.chances				Número de posibilidades que tiene el usuario de hacer la actividad
	 * @param {integer}		options.minRightAnswers		Número mínimo de respuestas correctas
	 * @param {function}	options.successCallback		Función que se llama cuando se termina la actividad de forma satisfactoria
	 * @param {function}	options.rightAnswerCallback	Función que se llama cuando la respuesta es correcta
	 *
	 */
	sequencesActivity._ViewModel = function (options) {
		var self = this;

		// Clase para sortables en la secuencia
		self.sequenceSortable = function (id) {
			this._sortable = ko.observableArray([]);
			this._sortable._id = id;
		};

		// Inicializa las opciones
		var chances = options.hasOwnProperty('chances') ? options.chances : options.spaces,
		 minRightAnswers = options.hasOwnProperty('minRightAnswers') ? options.minRightAnswers : options.spaces,
		 sequence = options.sequence,
		 tempId = 0, // id temporal que se añade a la secuencia
		 tempSequenceSortable = {}, // Variable Auxiliar
		 spaces = options.spaces; // Espacios en blanco


		// Antes que nada, debemos generar los id de los items
		options.items.forEach(function(item, index){
			item._id = index;
		});

		self.draggables = ko.observableArray( shuffleArrayFactory.run(options.items.slice(0)) ); // Elementos usados para el arrastre
		self.sequence = ko.observableArray([]);

		// Configuramos la secuencia
		for(var i=0; i < self.draggables().length + spaces; i++){
			// Alargamos la secuencia, usando tempId
			tempId = sequence[i - (sequence.length * Math.floor(i / sequence.length))];

			// Creamos el objeto
			tempSequenceSortable = new self.sequenceSortable(tempId);

			// Añadimos la muestra
			if(sequence.length > i){
				tempSequenceSortable._sortable.push( options.items[i] );
			}
			
			self.sequence.push(tempSequenceSortable); // añadimos a la secuencia
		}

		// Carpeta de recursos desde angular
		self.resources = $rootScope.resources;

		self.maximumElements = 1; // IMPORTANTE: Requerido para que los sortables no acepten más de un elemento
		self.rightAnswers = 0; // Inicializamos el número de respuestas buenas a 0

		// Triggers que se activan cuando la respuesta es correcta/incorrecta
		self.rightAnswer = ko.observable();
		self.wrongAnswer = ko.observable();

		// Triggers cuando la actividad termina satisfactoria y/o insatisfactoriamente
		self.failure = ko.observable(false);
		self.success = ko.observable(false);


		/**
		 * Define si el target esta lleno utilizando self.maximumElements
		 */
		self.isContainerFull = function (parent) {
			return parent().length < self.maximumElements;
		};

		/**
		 * Estilos de los items de secuencia
		 */
		self.getItemStyles = function () {
			return "width: " + (100 / self.sequence().length) + "%;";
		};

		/**
		 * Función que se ejecuta cuando se suelta el elemento y hace toda la funcionalidad
		 */
		self.verifyAnswer = function (arg) {

			var parent = arg.targetParent,
				item = arg.item;

			if(parent._id === item._id){
				// RESPUESTA CORRECTA
				self.rightAnswers++;
				self.rightAnswer(item);

				spaces--; // Reducimos los espacios para poder definir el fin de la actividad

				// Si se definió una función cuando la respuesta es correcta, se corre
				if(typeof options.rightAnswerCallback !== "undefined" ) options.rightAnswerCallback(item);

			} else {
				// RESPUESTA INCORRECTA
				self.wrongAnswer(item);
				arg.cancelDrop = true;
			}

			// Reducimos en 1 las posibilidades
			chances--;

			// La actividad termina cuando el número de posibilidades se termina
			if(chances === 0 || spaces === 0) {

				// Si el número de respuestas correctas es mayor o igual al requerido inicialmente
				if(self.rightAnswers >= minRightAnswers) {
					self.success(true); // Trigger de éxito
					$rootScope.isNextEnabled = true; // Activamos el siguiente

					// Se llama la función de éxito, definida por el desarrollador
					if (typeof options.successCallback !== "undefined") options.successCallback();
				} else {
					self.failure(true); // Trigger de fracaso
				}

			}

		};
	};

	/**
	 * Inicializa la instancia del ViewModel creado con sequencesActivity.create
	 *
	 * @param {object} instance Intancia del VM de knockout
	 */
	sequencesActivity.run = function (instance) {
		ko.cleanNode($('#main-container')[0]);
		ko.bindingHandlers.sortable.beforeMove = instance.verifyAnswer;
		ko.applyBindings(instance, $('#main-container')[0]);
	};

	return sequencesActivity;

});


lizSequences.directive('sequences', function  (sequencesActivity) {
	return {
		restrict: 'E',
		transclude: true,
		scope: {
			options: '=',
			description: '@'
		},
		templateUrl: '../views/activities/sequences.html',
		link: function postLink(scope, element, attrs) {

			// Corremos la aplicación
			var vm = sequencesActivity.create(scope.options);
			sequencesActivity.run(vm);
		}
	}; 
});

var lizSideNumbers = angular.module('lizSideNumbers', []);

lizSideNumbers.directive('sideNumbers', function  () {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			description: '@',
			audio: '@'
		},
		templateUrl: '../views/activities/side_numbers.html',
		link: function (scope, element, attrs) {

			var opt = scope.options,
				totalNumbers = opt.numbers.length,
				rightAnswers = 0, // Contador de preguntas buenas
				chances = totalNumbers * 2, // el doble, ya que es izquierda y derecha
				minRightAnswers = opt.minRightAnswers;

			scope.numbers = []; // Listado de números

			scope.success = false;
			scope.failure = false;
			scope.example = opt.example;

			// Constructor de numbers
			opt.numbers.forEach(function(num){
				// Anadimos un objeto con prev y next. Cada uno tiene una variable para el modelo y el número a comparar
				if (opt.allowAll) {
					var prev = '';
					var next = '';

					for(i=0; i <= num.length-1; i = i+1){
					if(i === num.length-1){prev = prev + (parseInt(num.charAt(i)) - 1).toString()}else{prev = prev + num.charAt(i)};
					if(i === num.length-1){next = next + (parseInt(num.charAt(i)) + 1).toString()}else{next = next + num.charAt(i)};  
				};

					scope.numbers.push({
						prev: {
							input: '',
							number: (prev).toString()
						},
						central: num,
						next: {
							input: '',
							number: (next).toString()
						}
					});
				}else{
					scope.numbers.push({
						prev: {
							input: '',
							number: (parseInt(num) - 1).toString()
						},
						central: num,
						next: {
							input: '',
							number: (parseInt(num) + 1).toString()
						}
					});
				};

				//si se nesecita q el primer item sea el ejemplo 
				var index = 0
				if(index === 0 && scope.example === true){

					rightAnswers++;
					scope.numbers[index].prev.right = true;
					scope.numbers[index].next.right = true;
					scope.numbers[index].prev.input = scope.numbers[index].prev.number;
					scope.numbers[index].next.input = scope.numbers[index].next.number;
					scope.numbers[index].prev.completed = true; // marcamos el item como completo, para desactivar el input
					scope.numbers[index].next.completed = true; // marcamos el item como completo, para desactivar el input
					chances -= 1;
					rightAnswers++;
					index ++;


				};

			});

			/**
			 * Verifica si el input cumple con las condiciones del número 
			 */
			scope.verify = function (item) {
				if(item.input === '') return;

				// Si no es un número, borramos el último caractér
				if(!opt.allowAll) {
					if(!item.input.match(/^\d+$/)){
						item.input = item.input.slice(0, -1);
						return;
					}		
				}

				// Si se ha llenado el input con los dígitos necesarios
				if(item.input.length === item.number.length){

					// Verificamos la respuesta. Añadimos una propiedad right o wrong para definir si el item es correcto o no
					if(item.input === item.number){
						rightAnswers++;
						item.right = true; 
					} else {
						item.wrong = true;
					}

					item.completed = true; // marcamos el item como completo, para desactivar el input
					chances -= 1;

					// fin de la actividad
					if(chances === 0){
						if(rightAnswers >= minRightAnswers){
							scope.$root.isNextEnabled = true;
							scope.success = true;
						} else {
							scope.failure = true;
						}
					} 
					
				} // if
			}; // verify()

		}
	}; 
});

var lizSoundGroup = angular.module('lizSoundGroup', []);

lizSoundGroup.factory('soundGroupActivity', function ($rootScope) {

	var soundGroupActivity = {};

	/**
	 * Crea el ViewModel
	 */
	soundGroupActivity.create = function (options) {
		return new soundGroupActivity._ViewModel(options);
	}

	/**
	 * Genera el ViewModel de las parejas con sus funcionalidades
	 *
	 * Recibe un objeto con las siguientes propiedades
	 *
	 * @param {object}		options						Opciones a utilizar.
	 *
	 * @param {integer}		options.chances				Número de posibilidades que tiene el usuario de hacer la actividad
	 * @param {integer}		options.minRightAnswers		Número mínimo de respuestas correctas
	 * @param {function}	options.successCallback		Función que se llama cuando se termina la actividad de forma satisfactoria
	 * @param {function}	options.rightAnswerCallback	Función que se llama cuando la respuesta es correcta
	 *
	 */
	soundGroupActivity._ViewModel = function (options) {
		var self = this;

	// Sonido de grupo
	self.sound = ko.observable(options.sound);

	// Variables para sortables
	self.items = ko.observableArray(options.items);

	ko.utils.arrayForEach(self.items(), function (item) {
		if(! item.hasOwnProperty('answer')) item.answer = true;
		if(! item.hasOwnProperty('startsInGroup')) item.startsInGroup = false;
	});

	self.group = ko.observableArray(self.items.remove(function(item){
		return item.startsInGroup;
	}));

	// Ruta a la carpeta de imágenes
	self.resources = $rootScope.resources;

	// Disparador de preguntas correctas/incorrectas
	self.rightAnswer = ko.observable();
	self.wrongAnswer = ko.observable();

	self.success = ko.observable(false);
	self.failure = ko.observable(false);

	self.rightAnswers = 0;

	self.chances = options.chances ? options.chances : options.items.length;

	/**
	 * reproducir sonido
	 */
	self.playSound = function () {
		$('#audio-group')[0].play();
	};


	/**
	 * Obtiene los estilos de cada elemento
	 */
	self.getStyles = function (item) {
		var styles = '';

		if(! item.answer) return;

		styles += 'width: ' + item.w + '%;';
		styles += 'height: ' + item.h + '%;';
		styles += 'top: ' + item.t + '%;';
		styles += 'left: ' + item.l + '%;';

		return styles;
	}

/**
 *	Función que se ejecuta al soltar el objeto dentro del contenedor
 */
self.verifyAnswer = function (arg) {

	// No hacer nada y salir de la función, si el elemento se soltó en el mismo grupo inicial
	if(arg.sourceParent() == arg.targetParent()) return;

	// Calculamos si la respuesta es correcta o no usando la propiedad 'answer'
	if (arg.item.answer) {
		// Respuesta correcta
		self.rightAnswer(arg.item);
		self.rightAnswers++;

		// Llama a la función de respuesta buena
		if (typeof options.rightAnswerCallback !== "undefined") options.rightAnswerCallback();

	} else {
		// Respuesta Incorrecta
		self.wrongAnswer(arg.item);
		arg.cancelDrop = true; // Devuelve el elemento a su posición origina
	}

	// Reducimos las posibilidades
	self.chances--;

	// Fin de la actividad
	if (self.chances === 0) {
		if(self.rightAnswers >= options.minRightAnswers) {
			// éxito
			self.success(true);

			// Llama a la función de éxito
			if (typeof options.successCallback !== "undefined") options.successCallback();

			// Activamos la siguiente ruta
			$rootScope.isNextEnabled = true;
		} else {
			// Fracaso
			self.failure(true);
		}
	}
};

		};

		/**
		 * Inicializa la instancia del ViewModel creado con soundGroupActivity.create
		 *
		 * @param {object} instance Intancia del VM de knockout
		 */
		soundGroupActivity.run = function (instance) {
			ko.cleanNode($('#main-container')[0]);
			ko.bindingHandlers.sortable.beforeMove = instance.verifyAnswer;
			ko.applyBindings(instance, $('#main-container')[0]);
		};

		return soundGroupActivity;
});

lizSoundGroup.directive('soundGroup', function  (soundGroupActivity) {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			description: '@'
		},
		templateUrl: '../views/activities/sound_group.html',
		link: function postLink(scope, element, attrs) {
			soundGroupActivity.run(soundGroupActivity.create(scope.options));
		}
	}; 
});


var lizSoundGroups = angular.module('lizSoundGroups', []);

lizSoundGroups.factory('soundGroupsActivity', function ($rootScope) {

	var soundGroupsActivity = {};

	/**
	 * Crea el ViewModel
	 */
	soundGroupsActivity.create = function (options) {
		return new soundGroupsActivity._ViewModel(options);
	}

	/**
	 * Genera el ViewModel de las parejas con sus funcionalidades
	 *
	 * Recibe un objeto con las siguientes propiedades
	 *
	 * @param {object}		options						Opciones a utilizar.
	 *
	 * @param {integer}		options.chances				Número de posibilidades que tiene el usuario de hacer la actividad
	 * @param {integer}		options.minRightAnswers		Número mínimo de respuestas correctas
	 * @param {function}	options.successCallback		Función que se llama cuando se termina la actividad de forma satisfactoria
	 * @param {function}	options.rightAnswerCallback	Función que se llama cuando la respuesta es correcta
	 *
	 */
	soundGroupsActivity._ViewModel = function (options) {
		var self = this;

	// Sonido de grupo
	self.sound = ko.observable(options.sound);

	// Variables para sortables
	self.items = ko.observableArray(options.items);

	ko.utils.arrayForEach(self.items(), function (item) {
		if(! item.hasOwnProperty('answer')) item.answer = true;
		if(! item.hasOwnProperty('startsInGroup')) item.startsInGroup = false;
	});

	self.group = ko.observableArray(self.items.remove(function(item){
		return item.startsInGroup;
	}));

	// Ruta a la carpeta de imágenes
	self.resources = $rootScope.resources;

	// Disparador de preguntas correctas/incorrectas
	self.rightAnswer = ko.observable();
	self.wrongAnswer = ko.observable();

	self.success = ko.observable(false);
	self.failure = ko.observable(false);

	self.rightAnswers = 0;

	self.chances = options.chances ? options.chances : options.items.length;

	/**
	 * reproducir sonido
	 */
	self.playSound = function () {
		$('#audio-group')[0].play();
	};


	/**
	 * Obtiene los estilos de cada elemento
	 */
	self.getStyles = function (item) {
		var styles = '';

		if(! item.answer) return;

		styles += 'width: ' + item.w + '%;';
		styles += 'height: ' + item.h + '%;';
		styles += 'top: ' + item.t + '%;';
		styles += 'left: ' + item.l + '%;';

		return styles;
	}

/**
 *	Función que se ejecuta al soltar el objeto dentro del contenedor
 */
self.verifyAnswer = function (arg) {

	// No hacer nada y salir de la función, si el elemento se soltó en el mismo grupo inicial
	if(arg.sourceParent() == arg.targetParent()) return;

	// Calculamos si la respuesta es correcta o no usando la propiedad 'answer'
	if (arg.item.answer) {
		// Respuesta correcta
		self.rightAnswer(arg.item);
		self.rightAnswers++;

		// Llama a la función de respuesta buena
		if (typeof options.rightAnswerCallback !== "undefined") options.rightAnswerCallback();

	} else {
		// Respuesta Incorrecta
		self.wrongAnswer(arg.item);
		arg.cancelDrop = true; // Devuelve el elemento a su posición origina
	}

	// Reducimos las posibilidades
	self.chances--;

	// Fin de la actividad
	if (self.chances === 0) {
		if(self.rightAnswers >= options.minRightAnswers) {
			// éxito
			self.success(true);

			// Llama a la función de éxito
			if (typeof options.successCallback !== "undefined") options.successCallback();

			// Activamos la siguiente ruta
			$rootScope.isNextEnabled = true;
		} else {
			// Fracaso
			self.failure(true);
		}
	}
};

		};

		/**
		 * Inicializa la instancia del ViewModel creado con soundGroupActivity.create
		 *
		 * @param {object} instance Intancia del VM de knockout
		 */
		soundGroupsActivity.run = function (instance) {
			ko.cleanNode($('#main-container')[0]);
			ko.bindingHandlers.sortable.beforeMove = instance.verifyAnswer;
			ko.applyBindings(instance, $('#main-container')[0]);
		};

		return soundGroupsActivity;
});

lizSoundGroups.directive('soundGroups', function  (soundGroupsActivity) {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			description: '@'
		},
		templateUrl: '../views/activities/sound_groups.html',
		link: function postLink(scope, element, attrs) {
			soundGroupsActivity.run(soundGroupsActivity.create(scope.options));
		}
	}; 
});


/**
 * Actividad donde los elementos pueden ser arrastrados en múltiples grupos desde una pila definida
 */
var lizStackMultiple = angular.module('lizStackMultiple', []);

lizStackMultiple.factory('stackMultipleActivity', function ($rootScope, shuffleArrayFactory) {

	var stackMultipleActivity = {};

  /**
   * Crea el ViewModel
   */
  stackMultipleActivity.create = function (options) {
    return new stackMultipleActivity._ViewModel(options);
  };

	/**
	 * Genera el ViewModel de la actividad con las siguientes opciones
	 *
	 *
	 */
	stackMultipleActivity._ViewModel = function (options) {
		var self = this,
			tempItem = {}, // variable auxiliar para añadir nuevos elementos al stack
			stackCounter = 0, // Variable para poner Id's a elementos clonados
			tempStack = []; // Array auxiliar que después será ordenado aleatoriamente

		self.groups = ko.observableArray([]);
		self.stack = ko.observableArray([]);
		self.resources = $rootScope.resources; // Carpeta de recursos desde angular
		self.maxElementsPerGroup = options.hasOwnProperty('maxElementsPerGroup') ? options.maxElementsPerGroup : 2;

		// Triggers que se activan cuando la respuesta es correcta/incorrecta
		self.rightAnswer = ko.observable();
		self.wrongAnswer = ko.observable();

		// Triggers cuando la actividad termina satisfactoria y/o insatisfactoriamente
		self.success = ko.observable(false);

		/**
		 * Clase para los grupos
		 */
		self.Group = function (options) {
			this.name = options.name;
			this.sortable = ko.observableArray([]);
			this.sortable._array = this.sortable;

			this.min = options.hasOwnProperty('min') ? options.min : 0;
			this.max = options.hasOwnProperty('max') ? options.max : 99;
		};

		// Constructor de los grupos
		ko.utils.arrayForEach(options.groups, function(group){
			self.groups.push(new self.Group(group));
		});

		// Constructor del stack
		ko.utils.arrayForEach(options.stack, function(item){

			// Procesamos cada elemento para pasarlo al stack
			if(! item.hasOwnProperty('copies')) item.copies = 1;

			stackCounter++;

			// Creamos las copias
			for(var i=0; i < item.copies; i++){

				tempItem = $.extend(true, {}, item);

				tempItem._id = stackCounter; // definimos un id idéntico a las copias
				tempItem.serial = (Math.random() + 1).toString(36).substring(7); // Clave primaria

				tempStack.push(tempItem); // Añade el elemento

			}

		});

		// Añadimos el array a self.stack
		self.stack(shuffleArrayFactory.run(tempStack));

		/**
		 * Función que se ejecuta cada vez que se suelta un elemento
		 * El objetivo es revisar los elementos para definir las condiciones 
		 * propuestas por el desarrollador en cada grupo
		 */
		self.verifyAfter = function (arg) {
			var item = arg.item,
				filteredArray = [], // variable que recibe los elementos filtrados del array
				wrongElement = {}, // elemento removido en caso de que ya exista el elemento en la lista
				arrayTarget = arg.targetParent._array; // Puntero al arreglo de objetos del objetivo


			// Cuando es el mismo destino
			if(arg.sourceParent === arg.targetParent) return;


			// Filtramos el array en busca de elementos repetidos
			filteredArray = arrayTarget().filter(function(elem){
				return elem._id === item._id;
			});


			// Si es mayor a 1, entonces hay elementos repetidos
			if(filteredArray.length > 1){
				// Respuesta Incorrecta	
				self.wrongAnswer(item);

				// Removemos el elemento y lo lanzamos de nuevo al stack
				wrongElement = arrayTarget.remove(function(elem){
					return elem.serial === item.serial;
				})[0];

				// Devolvemos el elemento al stack
				self.stack.push(wrongElement);

			} else {
				// Respuesta Correcta
				self.rightAnswer(item);
			}

			// Analizamos las condiciones para así activar el botón de siguiente
			var condition = true;

			ko.utils.arrayForEach(self.groups(), function(group){
				// mínimos
				if(group.sortable().length >= group.min )
					condition = condition && true; 
				else
					condition = condition && false; 

				// máximos
				if(group.sortable().length <= group.max)
					condition = condition && true; 
				else
					condition = condition && false; 
			});

			// Activamos / desactivamos el botón de siguiente 
			if(condition) 
				$rootScope.isNextEnabled = true;
			else 
				$rootScope.isNextEnabled = false;

			// Aplicamos el cambio del scope
			$rootScope.$apply();

		}

		/**
		 * Función que se ejecuta al dar click en siguiente
		 */
		$rootScope.beforeGoNext = function () {
			self.success(true);
			return true;
		};

		/**
		 * Define si el target esta lleno utilizando self.maximumElements
		 */
		self.isContainerFull = function (parent) {
			return parent().length < self.maxElementsPerGroup;
		};

		/**
		 * Estilos de los grupos
		 */
		self.getGroupStyles = function () {
			 return "width: " + (100 / self.groups().length) + "%;";
		}

	};

	/**
	 * Inicializa la instancia del ViewModel creado con stackMultipleActivity.create
	 *
	 * @param {object} instance Intancia del VM de knockout
	 */
	stackMultipleActivity.run = function (instance) {
		ko.cleanNode($('#main-container')[0]);
		ko.bindingHandlers.sortable.afterMove = instance.verifyAfter;
		ko.applyBindings(instance, $('#main-container')[0]);
	};

	return stackMultipleActivity;

});

lizStackMultiple.directive('stackMultiple', function  (stackMultipleActivity) {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			description: '@',
			audio: '@'
		},
		transclude: true,
		templateUrl: '../views/activities/stack_multiple.html',
		link: function postLink(scope, element, attrs) {
			// Definimos los contenedores y los elementos transcluídos
			var groupContainer = element.find('.group .item'),
				itemContainer = element.find('.stack .item');

			// Se añade cada uno de los hijos a la plantilla en la posición adecuada
			angular.forEach(element.find('.transcluded item').clone().children(), function (elem) { groupContainer.append(elem); });
			angular.forEach(element.find('.transcluded item').clone().children(), function (elem) { itemContainer.append(elem); });

			// Se elimina el elemento transcluded del DOM
			element.find('.transcluded').remove();

			// Iniciar Knockout
			stackMultipleActivity.run(stackMultipleActivity.create(scope.options));
		}
	}; 
});

var lizTablePath = angular.module('lizTablePath', []);

lizTablePath.directive('tablePath', function  () {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			imgLeft: '@',
			imgLeftAlt: '@',
			imgRight: '@',
			imgRightAlt: '@',
			titlehead: '@',
			audio: '@',
			instruction: '@',
			description: '@'
		},
		templateUrl: '../views/activities/table_path.html',
		link: function (scope, element, attrs) {
			var opt = scope.options,
				path = opt.path.slice(0), // Camino a elegir por el estudiante
				rightAnswers = 0, // Contador de respuestas correctas
				chances = opt.chances, // Se puede equivocar este número de eces
				rows = opt.table.length, 
				cols = opt.table[0].length;

			// Si la descripción o el título están, entonces la instrucción va al fondo
			scope.isBottom = scope.title || scope.description;

			// Calificación
			scope.rightAnswer = false;
			scope.wrongAnswer = false;
			scope.success = false;
			scope.failure = false;

			scope.table = [];

			// Llenamos la tabla
			for(var i = 0; i < rows; i++) {
				scope.table.push([]); // Añade el nuevo array

				for(var j = 0; j < cols; j++) {
					scope.table[i].push({
						x: j,
						y: i,
						text: opt.table[i][j]
					});
				}
			}

			/** 
			 * Verifica si la celda pertenece al camino.
			 */
			scope.verify = function (cell) {
				// Si hay elementos en el path
				if(cell.x === path[0][0] && cell.y === path[0][1]) {
					// Respuesta correcta
					cell.completed = true; // Marcamos la casilla como completa
					scope.rightAnswer = Math.random(); // Disparador de respuesta
					path.shift(); // Eliminamos el primer elemento
				} else {
					scope.wrongAnswer = Math.random(); // Disparador de respuesta
					chances --;

					if(chances === 0) {
						scope.failure = true;
					}
				}

				// Fin de la actividad exitoso
				if(path.length === 0) {
					scope.$root.isNextEnabled = true;
					scope.success = true;
				}
			};
			

		}
	}; 
});

var lizTablePathInstruction = angular.module('lizTablePathInstruction', []);

lizTablePathInstruction.directive('tablePathInstruction', function  () {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			img: '@',
			imgAlt: '@',
			titlehead: '@',
			audio: '@',
			instruction: '@',
			description: '@'
		},
		templateUrl: '../views/activities/table_path_instruction.html',
		link: function (scope, element, attrs) {
			var opt = scope.options,
				path = opt.path.slice(0), // Camino a elegir por el estudiante
				rightAnswers = 0, // Contador de respuestas correctas
				chances = opt.chances, // Se puede equivocar este número de eces
				rows = opt.table.length, 
				cols = opt.table[0].length;

			// Si la descripción o el título están, entonces la instrucción va al fondo
			scope.isBottom = scope.title || scope.description;
			scope.instructions = opt.instructions; // las intrucciones a seguir 
			// Calificación
			scope.rightAnswer = false;
			scope.wrongAnswer = false;
			scope.success = false;
			scope.failure = false;

			scope.table = [];

			// Llenamos la tabla
			for(var i = 0; i < rows; i++) {
				scope.table.push([]); // Añade el nuevo array

				for(var j = 0; j < cols; j++) {
					scope.table[i].push({
						x: j,
						y: i,
						text: opt.table[i][j]
					});
				}
			}

			/** 
			 * Verifica si la celda pertenece al camino.
			 */
			scope.verify = function (cell) {
				// Si hay elementos en el path
				if(cell.x === path[0][0] && cell.y === path[0][1]) {
					// Respuesta correcta
					cell.completed = true; // Marcamos la casilla como completa
					scope.rightAnswer = Math.random(); // Disparador de respuesta
					path.shift(); // Eliminamos el primer elemento
				} else {
					scope.wrongAnswer = Math.random(); // Disparador de respuesta
					chances --;

					if(chances === 0) {
						scope.failure = true;
					}
				}

				// Fin de la actividad exitoso
				if(path.length === 0) {
					scope.$root.isNextEnabled = true;
					scope.success = true;
				}
			};
			

		}
	}; 
});

var lizTangram = angular.module('lizTangram', []);

lizTangram.directive('tangram', function  (shuffleArrayFactory) {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			description: '@'
		},
		templateUrl: '../views/activities/tangram.html',
		link: function postLink(scope, element, attrs) {

			var opt = scope.options;

			// variables básicas de la acividad de angular
			scope.rightAnswer = false;
			scope.wrongAnswer = false;
			scope.success = false;
			scope.failure = false;
			
			scope.started = false;

			/**
			 * Muestra el canvas
			 */
			scope.start = function () {
				scope.started = true;
				scope.startCanvas();
			};


			/**
			 * Inicializa el canvas
			 */
			scope.startCanvas = function () {
				var tempPos = {}, // Posición temporal que tiene el objeto
					bs = 50, // blockSize: tamaño de los lados del bloque http://www.logicville.com/tangram1.htm
					hypotenuse = Math.sqrt( 2 * Math.pow(bs, 2) ), // tamaño de la hipotenusa
					finalFigure = {}, // Figura a armar
					figs = [], // Contenedor temporal para el array de figuras
					chances = opt.chances, // número total de posibilidades
					TOTAL_FIGURES = 7, // Número total de figuras
					completedFigures = 0; // Contador para figuras completas

				// Plantillas de las figuras. Basado en http://www.logicville.com/tangram1.htm
				var templates = {
					"bigTriangle": {
						"points": [ 
							0, 0,		
							bs*2, bs*2,		
							0, bs*4 
						],
						"offset": { x: bs, y: bs * 2 }
					},
					"mediumTriangle": {
						"points": [ 
							0, 0,		
							bs*2, 0,		
							0, bs*2
						],
						"offset": { x: hypotenuse / 2, y: hypotenuse / 2 }
					},
					"smallTriangle": {
						"points": [ 
							0, 0,		
							bs*2, 0,
							bs, bs
						],
						"offset": { x: bs, y: bs / 2 }
					},
					"square": {
						"points": [ 
							0, 0,		
							hypotenuse, 0,
							hypotenuse, hypotenuse,
							0, hypotenuse
						],
						"offset": { x: hypotenuse / 2, y: hypotenuse / 2 }
					},
					"rhomboid": {
						"points": [ 
							0, 0,
							bs, bs,
							bs*3, bs,
							bs*2, 0,
						],
						"offset": { x: bs * 1.5, y: bs * 0.5 }
					},
				};

				var stage = new Kinetic.Stage({
					container: 'kinetic-container',
					width: 960,
					height: 650
				});

				var layer = new Kinetic.Layer();

				var tangramFigures = new Kinetic.Group({ x: 0, y: 0 }); // Figuras iniciales
				var macros = new Kinetic.Group({ x: 0, y: 0 }); // Macros

				// rectángulos donde van la muestra y la figura objetivo
				var leftRect = new Kinetic.Rect({
					width: 455,
					height: 410,
					stroke: opt.color,
					strokeWidth: 2
				});
				macros.add(leftRect);

				// Rectángulo derecho
				macros.add(new Kinetic.Rect({
					x: 475,
					width: 455,
					height: 410,
					stroke: opt.color,
					strokeWidth: 2
				}));

				// Nombre de la figura
				var tangramName = new Kinetic.Text({
					text: opt.name,
					fontFamily: 'century_gothic',
					fontSize: 20,
					x: leftRect.getX(),
					y: leftRect.getY(),
					width: leftRect.getWidth(),
					padding: 10,
					align: 'center',
					fill: 'white'
				});

				// Fondo del nombre
				macros.add(new Kinetic.Rect({
					x: leftRect.getX(),
					y: leftRect.getY(),
					width: leftRect.getWidth(),
					height: tangramName.getHeight(),
					fill: opt.color
				}));

				macros.add(tangramName); // Agregamos el nombre sobre el rectángulo



				// Cuadro de texto con la descripción
				var descriptionGroup = new Kinetic.Group({ x: 0, y: 0 });

				var descriptionText = new Kinetic.Text({
					text: 'Arrastra hasta el recuadro las piezas del tangram y arma la figura que tienes como muestra.',
					fontFamily: 'century_gothic',
					fontSize: 20,
					width: stage.getWidth(),
					padding: 10,
					align: 'center',
					fill: 'white'
				});

				descriptionGroup.add(new Kinetic.Rect({
					width: stage.getWidth(),
					height: descriptionText.getHeight(),
					fill: opt.color
				}));

				descriptionGroup.add(descriptionText);

				// ===========================================================================
				// Inicio - creación de figuras
				// ===========================================================================
				// triángulo naranja
				tangramFigures.add(new Kinetic.Line({
					points: templates.bigTriangle.points,
					offset: templates.bigTriangle.offset,
					fill: '#F19700',
					id: 'triangleOrange',
					closed: true
				}));

				// triángulo verde
				tangramFigures.add(new Kinetic.Line({
					points: templates.bigTriangle.points,
					offset: templates.bigTriangle.offset,
					fill: '#70A83B',
					id: 'triangleGreen',
					closed: true
				}));

				// Romboide morado
				var rhomboid = new Kinetic.Line({
					points: templates.rhomboid.points,
					offset: templates.rhomboid.offset,
					fill: '#BA007C',
					id: 'rhomboid',
					closed: true
				});

				// para manejar imágenes espejadas
				if(opt.pos[2].scale){
					rhomboid.scale( opt.pos[2].scale );
				}
				tangramFigures.add(rhomboid);
				
				// triángulo amarillo
				tangramFigures.add(new Kinetic.Line({
					points: templates.mediumTriangle.points,
					offset: templates.mediumTriangle.offset,
					fill: '#FEEE00',
					id: 'triangleYellow',
					closed: true
				}));

				// cuadro rojo
				tangramFigures.add(new Kinetic.Line({
					points: templates.square.points,
					offset: templates.square.offset,
					fill: '#BF0411',
					id: 'square',
					closed: true
				}));

				// triángulo azul 1
				tangramFigures.add(new Kinetic.Line({
					points: templates.smallTriangle.points,
					offset: templates.smallTriangle.offset,
					fill: '#009BDB',
					id: 'triangleBlue1',
					closed: true
				}));

				// triángulo azul 2
				tangramFigures.add(new Kinetic.Line({
					points: templates.smallTriangle.points,
					offset: templates.smallTriangle.offset,
					fill: '#009BDB',
					id: 'triangleBlue2',
					closed: true
				}));

				// Clonamos el grupo de figuras para poder armar la figura final
				finalFigure = tangramFigures.clone();


				// ===========================================================================
				// Configuración de cada elemento - propiedades comunes
				// ===========================================================================
				tangramFigures.getChildren().forEach(function (f) {
					// Definimos los atributos comunes
					f.setAttrs({
						draggable: true, 
						stroke: 'black',
						strokeWidth: 1
					});


					// ===========================================================================
					// Eventos
					// ===========================================================================
					f.on('mouseover', function () {
						// Guardamos la posición temporal, por si es necesario retornar el elemento al punto
						tempPos.x = this.getX();
						tempPos.y = this.getY();
					});

					f.on('dragstart', function (e) {
						this.moveToTop(); // Cuando se empieza a arrastrar el elemento, se pone al tope
						layer.draw(); // Redibujamos la capa
					});

					/**
					 * La idea es identificar la figura en base al punto de intersección y luego verificar si
					 * la respuesta es correcta o incorrecta
					 */
					f.on('dragend', function (e) {
						var pos = this.getAbsolutePosition(); // Obtenemos la posición absoluta

						// Movemos el elemento, para poder obtener la intersección que deseamos
						this.setAttrs({ x: tempPos.x, y: tempPos.y });
						layer.draw();

						// Buscamos el elemento con la intersección de puntos
						var shape = this.getStage().getIntersection({ x: pos.x, y: pos.y });

						if(!shape) return; // no hay figura
						if(shape.getAttr('_type') !== 'target') return; // No es un objetivo

						if(this.getId() === shape.getId()){
							// Respuesta Correcta
							this.setAbsolutePosition( shape.getAbsolutePosition() ); // Ponemos el elemento exactamente sobre el objetivo
							this.setDraggable(false); // desactivamos el draggable
							layer.draw(); 

							scope.rightAnswer = Math.random();
							completedFigures++;
						} else {
							// Respuesta Incorrecta
							scope.wrongAnswer = Math.random();
						}

						chances--; // Reducimos las posibilidades

						/**
						 * Evaluamos si la actividad se ha terminado
						 */
						if(chances === 0 || completedFigures === TOTAL_FIGURES){
							if(completedFigures === TOTAL_FIGURES){
								// éxito
								scope.success = true;
								scope.$root.isNextEnabled = true;
							} else {
								// fracaso
								scope.failure = true;
							}
						}

						scope.$apply(); // Aplicamos el scope para poder ver los íconos de correcto / incorrecto

					});
				});

				/**
				 * Propiedades del puntero al pasar el mouse por encima
				 */
				tangramFigures.on('mouseover', function () {
					document.body.style.cursor = 'pointer';
				});

				tangramFigures.on('mouseout', function () {
					document.body.style.cursor = 'default';
				});

				// ===========================================================================
				// Configuración personal de la actividad
				// ===========================================================================
				figs = tangramFigures.getChildren(); // Array con las figuras del tangram

				// Configuración de las figuras
				for(var i=0; i < opt.pos.length; i++){
					// Movemos cada figura según la posición
					figs[i].move({
						x: opt.pos[i].x,
						y: opt.pos[i].y
					});

					if(opt.pos[i].hasOwnProperty('rot')){
						figs[i].setRotation(opt.pos[i].rot); // rotamos la figura
					}
				}

				// ===========================================================================
				// Configuración de la figura final
				// ===========================================================================
				figs = finalFigure.getChildren(); // Array con las figuras del tangram

				for(var i=0; i < opt.figure.length; i++){
					// Añadimos el borde a cada una
					figs[i].setAttrs({
						stroke: 'black',
						strokeWidth: 1
					});

					// Movemos cada figura según la posición
					figs[i].move({
						x: opt.figure[i].x,
						y: opt.figure[i].y
					});

					if(opt.figure[i].hasOwnProperty('rot')){
						figs[i].setRotation(opt.figure[i].rot); // rotamos la figura
					}
				}

				// ===========================================================================
				// Configuración de la figura objetivo
				// ===========================================================================
				targetFigure = finalFigure.clone(); // Clonamos de la figura final

				targetFigure.getChildren().forEach(function (child) {
					child.setFill('white'); // Quitamos el fondo de cada figura
					child.setAttr('_type', 'target'); // Definimos un tipo especial para identificar los targets
				});

				// ===========================================================================
				// Configuración Final
				// ===========================================================================
				// Movemos los grupos
				macros.move({ x: 15, y: 220 });
				finalFigure.move({ x: 160, y: 400 });
				targetFigure.move({ x: 660, y: 400 });
				tangramFigures.move({ x: 90, y: 130 });

				// Agregamos todo
				layer.add(macros);
				layer.add(descriptionGroup);
				layer.add(targetFigure);
				layer.add(finalFigure);
				layer.add(tangramFigures);
				stage.add(layer);
				
			};
			
		}
	}; 
});

var lizTenThousandNumbers = angular.module('lizTenThousandNumbers', ['factories']);

lizTenThousandNumbers.directive('tenThousandNumbers', function  (shuffleArrayFactory) {
	return {
		restrict: 'E',
		scope: {
			description: '@',
			audio: '@'
		},
		templateUrl: '../views/activities/ten_thousand_numbers.html',
		link: function (scope, element, attrs) {
			scope.numberText = ''; // número convertido a texto
			scope.chances = 10;

			scope.selectedRange = 0; // Rango seleccionado
			scope.selectedBigRange = false; // gran rango seleccionado
			scope.bigRanges = [
				[1000, 1999],
				[2000, 2999],
				[3000, 3999],
				[4000, 4999],
				[5000, 5999],
				[6000, 6999],
				[7000, 7999],
				[8000, 8999],
				[9000, 9999],
			];

			scope.numberMatrix = []; // array multidimensional para la tabla
			scope.rangesLeft = [];
			scope.rangesRight = [];

			// Calificación
			scope.success = false;

			/**
			 * Selecciona el gran rango
			 */
			scope.selectBigRange = function (range) {
				scope.selectedBigRange = range;
			};

			// cada vez que cambia, se generan los rangos de izquierda y derecha
			scope.$watch('selectedBigRange', function (val) {
				if(val) {
					scope.rangesLeft.length = 0;
					scope.rangesRight.length = 0;

					for(var i = 0; i < 5; i++) {
						scope.rangesLeft.push([
							val[0] + (100 * i),
							val[0] + (100 * (i + 1)) - 1,
						]);
					}

					for(var i = 5; i <= 9; i++) {
						scope.rangesRight.push([
							val[0] + (100 * i),
							val[0] + (100 * (i + 1)) - 1,
						]);
					}
				}
			});

			/**
			 * Define el rango seleccionado
			 */
			scope.selectRange = function (range) {
				scope.numberMatrix.length = 0; // Se vacía el array
				scope.selectedRange = range; // seleccionamos el rango

				var temp = [],
					arrayIndex = 0,
					counter = 0;

				// Llenamos el array con los números
				scope.numberMatrix.push([]); // Añadimos el primer array
				temp = scope.numberMatrix[arrayIndex];

				for(var i = range[0]; i <= range[1]; i++){
					temp.push(i);
					counter++;

					// Cada 10, cambiamos de array. Además, si es el último número, no añadimos un nuevo array
					if(counter === 10 && (i !== range[1])){
						counter = 0;	
						arrayIndex++;

						// Añadimos el array nuevo y cambiamos el índice
						scope.numberMatrix.push([]); // Añadimos el primer array
						temp = scope.numberMatrix[arrayIndex];
					}
				}
			};

			
			/**
			 * Convierte un número en palabras.
			 *
			 * Para hacerlo, la función va filtrando el número desde la mayor cifra (centenas, decenas... hasta unidades)
			 * después de cada filtro, se elimina la última cifra para poder pasar el número por siguiente filtro hasta
			 * llegar a las unidades.
			 *
			 * Rango actual: 1 al 999
			 *
			 * @param {integer} number número a convertir
			 * @return {Object} con 2 propiedades: text y intervals
			 *
			 */
			function numberToWords(number) {
				var res = ''; // Número en palabras

				number = parseInt(number);

				var units = ['', 'uno', 'dos', 'tres', 'cuatro', 'cinco', 'seis', 'siete', 'ocho', 'nueve'];
				var tens = ['', '', 'veinti', 'treinta', 'cuarenta', 'cincuenta', 'sesenta', 'setenta', 'ochenta', 'noventa'];

				// =============================
				// Unidades de mil
				// =============================
				var uc = Math.floor(number / 1000);

				if(uc > 0) {
					if(uc === 1) {
						res += "mil "
					} else {
						res += units[uc] + " mil ";
					}

					number = number - (uc * 1000); // Eliminamos las unidades de mil
				}

				// =============================
				// Centenas
				// =============================
				var c = Math.floor(number / 100);

				// Cien
				if(number === 100){ 
					res += 'cien'; 
				} 
				else if(c > 0){
					if(c === 1){ 
						res += 'ciento '; 
					} else{
						// Casos especiales
						if(c === 5){ res += 'quinientos';  }
						else if(c === 7){ res += 'setecientos';  }
						else if(c === 9){ res += 'novecientos';  }
						else { 
							// Para el resto de centenas, se añaden las unidades al inicio
							res += units[c] + 'cientos';
						} 

						if(number % 100 !== 0){ res += ' ' } // Si el número no es redondo, añadimos un espacio
					}

					number = number - (c * 100); // Eliminamos las centenas
				}

				// =============================
				// Decenas
				// =============================
				var t = Math.floor(number / 10);

				if(number === 20) {
					res += 'veinte';
				} else if(t >= 2 && t <= 9){
					res += tens[t]; // Añadimos la cadena de decenas

					// Agregamos el " y " si es mayor a 2
					if(t > 2 && number % 10 !== 0){ 
						res += ' y '; 
					} 

					number = number % 10; // Eliminamos las decenas del número
				}

				// =============================
				// Unidades y números hasta el veinte
				// =============================
				if(number < 10){
					res += units[number];
				} else if(number >= 10 && number < 20) {
					// del diez al quince
					if(number === 10) { res += 'diez'; }
					if(number === 11) { res += 'once'; }
					if(number === 12) { res += 'doce'; }
					if(number === 13) { res += 'trece'; }
					if(number === 14) { res += 'catorce'; }
					if(number === 15) { res += 'quince'; }

					// Deiciseis en adelante
					if(number > 15 && number < 20){ 
						res += 'dieci' + units[number % 10]; 
					} 
				} 

				return {
					text: res
				};

			}; // numberToWords()
			

			/**
			 * Función pricipal. Recibe un número, define el texto y lo reproduce
			 */
			scope.chooseNumber = function (number) {
				var result = numberToWords(number);

				scope.numberText = result.text; // Muestra el texto
				scope.chances--;

				// Reducimos las posibilidades, para llegar al final de la actividad
				if(scope.chances === 0){
					scope.$root.isNextEnabled = true;
					scope.$root.beforeGoNext = function () {
						scope.success = true;
						return true;
					}
				}

			};

			console.log(
				numberToWords(1099),
				numberToWords(1199),
				numberToWords(3199)
			);


		}
	}; 
});

/**
 * La actividad para escribir textos largos.
 */

 var lizTextActivity = angular.module('lizTextActivity', []);

 lizTextActivity.directive('textActivity', function () {
 	return {
 		restrict: 'E',
 		templateUrl: '../views/activities/text_activity.html',
 		scope: {
 			options: '=',
 			title: '@',
 			description: '@',
 			instruction: '@',
 			audio: '@'
 		},
 		link: function (scope, iElement, iAttrs) {
 			console.log(scope);
 			// Inputs procesados
			scope.words = [];

			// Procesamos cada elemento del array entrante
			angular.forEach(scope.inputs, function (input) {
				scope.words.push({ word: input, right: false, wrong: false });
			});

 			scope.numLines = scope.options.numLines;
 			scope.complete = false;
 			scope.success = false;
			scope.failure = false;
			scope.block = false;
			scope.right = false;
			scope.wrong = false;

			scope.$watch('complete', function(complete) {
				if (complete) {
					if (scope.numCharacters === scope.options.numCharacters) {
						// éxito
						scope.success = true;

						// Activamos la siguiente actividad o ruta
						scope.$root.isNextEnabled = true;
					} else {
						// fracaso
						scope.failure = true;
					}
				} 
			});

			// Si la descripción o el título están, entonces la instrucción va al fondo
			scope.isBottom = scope.title || scope.description;

			var chances = scope.options.chances-1;

			scope.verify = function (input) {
				var letters = /^[A-Za-z]+$/,
					value = $("#text_activity_box").text(),
					lineHeight = parseInt($("#text_activity_box").css("line-height"));

					

				if (value === "" || value === null || value === "Escribe aqui...") { return; }

				var totalHeight = parseInt($("#text_activity_box").height()),
					lineUsed = totalHeight / lineHeight;

				console.log(totalHeight);

				if((value.match(letters) !== null) && (lineUsed >= scope.numLines)) {
                    
                    	
                	scope.wrong = false;
                    scope.right = true;
                    scope.block = true;
                    scope.numCharacters = scope.options.numCharacters;
                                                                   
                } else {
	                    	
                    	scope.wrong ? chances=scope.options.chances-2: chances=scope.options.chances-1;

                    	scope.wrong = true;
                    	

	                    	if(chances === 0){
	                    	scope.block = true;
	                    	chances=scope.options.chances-1;
	                    	}else{
	                    		chances--;value = "";
	                    		$('#text_activity_box').text("");
								$("#text_activity_box").focus();
	                    	}
            	}
                    	
                if (chances === 0) {
                	if ((value.match(letters) !== null) && (lineUsed >= scope.numLines)) {
						// éxito
						scope.success = true;

						// Activamos la siguiente actividad o ruta
						scope.$root.isNextEnabled = true;
					} else {
						// fracaso
						scope.failure = true;
					}
                }

			}


 		}
 	};
 });
var lizThousandNumbers = angular.module('lizThousandNumbers', ['factories']);

lizThousandNumbers.directive('thousandNumbers', function  (shuffleArrayFactory) {
	return {
		restrict: 'E',
		scope: {
			description: '@',
			audio: '@'
		},
		templateUrl: '../views/activities/thousand_numbers.html',
		link: function postLink(scope, element, attrs) {

			scope.selectedRange = 0; // Rango seleccionado
			scope.numberMatrix = []; // array multidimensional para la tabla
			scope.numberText = ''; // número convertido a texto
			scope.chances = 20; // Debe hacer al menos este número de intentos para pasar
			
			scope.rangesLeft = [
				[100, 199],
				[200, 299],
				[300, 399],
				[400, 499]
			];
			
			scope.rangesRight = [
				[500, 599],
				[600, 699],
				[700, 799],
				[800, 899],
				[900, 999]
			];

			/**
			 * Define el rango seleccionado
			 */
			scope.selectRange = function (range) {
				scope.numberMatrix.length = 0; // Se vacía el array
				scope.selectedRange = range; // seleccionamos el rango

				var temp = [],
					arrayIndex = 0,
					counter = 0;

				// Llenamos el array con los números
				scope.numberMatrix.push([]); // Añadimos el primer array
				temp = scope.numberMatrix[arrayIndex];

				for(var i = range[0]; i <= range[1]; i++){
					temp.push(i);
					counter++;

					// Cada 10, cambiamos de array. Además, si es el último número, no añadimos un nuevo array
					if(counter === 10 && (i !== range[1])){
						counter = 0;	
						arrayIndex++;

						// Añadimos el array nuevo y cambiamos el índice
						scope.numberMatrix.push([]); // Añadimos el primer array
						temp = scope.numberMatrix[arrayIndex];
					}
				}
			};


			/**
			 * Función pricipal. Recibe un número, define el texto y lo reproduce
			 */
			scope.chooseNumber = function (number) {
				var result = numberToWords(number);

				scope.numberText = result.text; // Muestra el texto
				//playAudio(result.intervals); // Reproduce el audio

				scope.chances--;

				// Reducimos las posibilidades, para llegar al final de la actividad
				if(scope.chances === 0){
					scope.$root.isNextEnabled = true;
					scope.$root.beforeGoNext = function () {
						scope.success = true;
						return true;
					}
				}
			};


			// =============================================================================
			// LÓGICA DE SELECCIÓN DE NÚMERO, CAMBIO A PALABRAS Y REPRODUCCIÓN DE SONIDO
			// =============================================================================
			// Intérvalos 
			var intervals = {
				"uno": [0, 0.4],
				"dos": [0.8, 1.4],
				"tres": [1.8, 2.3],
				"cuatro": [2.8, 3.3],
				"cinco": [3.7, 4.3],
				"seis": [4.8, 5.4],
				"siete": [5.8, 6.4],
				"ocho": [6.9, 7.3],
				"nueve": [7.8, 8.3],
				"diez": [8.6, 9.4],
				"once": [9.8, 10.4],
				"doce": [10.8, 11.3],
				"trece": [11.7, 12.5],
				"catorce": [12.7, 13.5],
				"quince": [13.7, 14.5],
				"dieci": [14.6, 15.17],
				"veinte": [15.7, 16.4],
				"veinti": [16.6, 17.25],
				"treinta": [17.6, 18.3],
				"cuarenta": [18.7, 19.5],
				"cincuenta": [19.7, 20.5],
				"sesenta": [20.8, 21.6],
				"setenta": [21.8, 22.8],
				"ochenta": [23.2, 23.8],
				"noventa": [24.1, 24.8],
				"y": [25.2, 25.5],
				"cien": [25.8, 26.5],
				"ciento": [26.9, 27.6],
				"cientos": [28, 28.8],
				"quinientos": [29, 29.9],
				"setecientos": [30.2, 31.4],
				"novecientos": [31.6, 32.7]
			};

			/**
			 * Convierte un número en palabras.
			 *
			 * Para hacerlo, la función va filtrando el número desde la mayor cifra (centenas, decenas... hasta unidades)
			 * después de cada filtro, se elimina la última cifra para poder pasar el número por siguiente filtro hasta
			 * llegar a las unidades.
			 *
			 * Rango actual: 1 al 999
			 *
			 * @param {integer} number número a convertir
			 * @return {Object} con 2 propiedades: text y intervals
			 *
			 */
			function numberToWords(number) {
				var res = '', // Número en palabras
					intervalsArray = []; // Interválo para reproducir

				number = parseInt(number);

				var units = ['', 'uno', 'dos', 'tres', 'cuatro', 'cinco', 'seis', 'siete', 'ocho', 'nueve'];
				var tens = ['', '', 'veinti', 'treinta', 'cuarenta', 'cincuenta', 'sesenta', 'setenta', 'ochenta', 'noventa'];

				// =============================
				// Centenas
				// =============================
				var c = Math.floor(number / 100);

				// Cien
				if(number === 100){ 
					res += 'cien'; 
					intervalsArray.push(intervals.cien);
				} 
				else if(c > 0){
					if(c === 1){ 
						res += 'ciento '; 
						intervalsArray.push(intervals.ciento);
					} else{
						// Casos especiales
						if(c === 5){ res += 'quinientos'; intervalsArray.push(intervals.quinientos); }
						else if(c === 7){ res += 'setecientos'; intervalsArray.push(intervals.setecientos); }
						else if(c === 9){ res += 'novecientos'; intervalsArray.push(intervals.novecientos); }
						else { 
							// Para el resto de centenas, se añaden las unidades al inicio
							res += units[c] + 'cientos';
							intervalsArray.push(intervals[ units[c] ]);
							intervalsArray.push(intervals.cientos);
						} 

						if(number % 100 !== 0){ res += ' ' } // Si el número no es redondo, añadimos un espacio
					}

					number = number - (c * 100); // Eliminamos las centenas
				}

				// =============================
				// Decenas
				// =============================
				var t = Math.floor(number / 10);

				if(number === 20) {
					res += 'veinte';
					intervalsArray.push(intervals.veinte);
				} else if(t >= 2 && t <= 9){
					res += tens[t]; // Añadimos la cadena de decenas
					intervalsArray.push(intervals[ tens[t] ]);

					// Agregamos el " y " si es mayor a 2
					if(t > 2 && number % 10 !== 0){ 
						res += ' y '; 
						intervalsArray.push(intervals.y);
					} 

					number = number % 10; // Eliminamos las decenas del número
				}

				// =============================
				// Unidades y números hasta el veinte
				// =============================
				if(number < 10){
					res += units[number];
					intervalsArray.push(intervals[ units[number] ]);
				} else if(number >= 10 && number < 20) {
					// del diez al quince
					if(number === 10) { res += 'diez'; intervalsArray.push(intervals.diez) };
					if(number === 11) { res += 'once'; intervalsArray.push(intervals.once) };
					if(number === 12) { res += 'doce'; intervalsArray.push(intervals.doce) };
					if(number === 13) { res += 'trece'; intervalsArray.push(intervals.trece) };
					if(number === 14) { res += 'catorce'; intervalsArray.push(intervals.catorce) };
					if(number === 15) { res += 'quince'; intervalsArray.push(intervals.quince) };

					// Deiciseis en adelante
					if(number > 15 && number < 20){ 
						res += 'dieci' + units[number % 10]; 
						intervalsArray.push(intervals.dieci);
						intervalsArray.push(intervals[ units[number % 10] ]);
					} 
				} 

				return {
					text: res,
					intervals: intervalsArray
				};

			}; // numberToWords()

			/**
			 * Reproduce los intérvalos especificados uno tras otro.
			 * Para ello, usa una función recursiva basada en un array
			 *
			 * @param {array} intervals Matrix de 2 dimensiones. Cada fila tiene tiempo de inicio y final del intervalo
			 */
			function playAudio(intervals) {
				if(intervals.length === 0) return; // Termina la función recursiva

				var audio = $('#audio-numbers')[0]; // Recuperamos el audio

				var actualInterval = intervals.shift(),
					starts = actualInterval[0],
					ends = actualInterval[1];

				audio.currentTime = starts;
				audio.play();

				var interv = setInterval(function() {
					if (audio.currentTime > ends) {
						audio.pause();
						clearInterval(interv);

						if(intervals.length !== 0) playAudio(intervals);
					}
				}, 10);
			}

		}
	}; 
});

var lizThousandPatterns = angular.module('lizThousandPatterns', ['factories']);

lizThousandPatterns.directive('thousandPatterns', function  (shuffleArrayFactory) {
	return {
		restrict: 'E',
		scope: {
			description: '@',
			audio: '@'
		},
		templateUrl: '../views/activities/thousand_patterns.html',
		link: function postLink(scope, element, attrs) {

			scope.selectedRange = 0; // Rango seleccionado
			scope.numberMatrix = []; // array multidimensional para la tabla
			scope.numberText = ''; // número convertido a texto
			scope.chances = 20; // Debe hacer al menos este número de intentos para pasar
			
			scope.rangesRight = [
				[1, 91],
				[10, 91],
			];

			/**
			 * Define el rango seleccionado
			 */
			scope.selectRange = function (range) {
				scope.numberMatrix.length = 0; // Se vacía el array
				scope.selectedRange = range; // seleccionamos el rango

				var temp = [],
					arrayIndex = 0,
					counter = 0;

				// Llenamos el array con los números
				scope.numberMatrix.push([]); // Añadimos el primer array
				temp = scope.numberMatrix[arrayIndex];

				for(var i = range[0]; i <= range[1]; i++){
					temp.push(i);
					counter++;

					// Cada 10, cambiamos de array. Además, si es el último número, no añadimos un nuevo array
					if(counter === 10 && (i !== range[1])){
						counter = 0;	
						arrayIndex++;

						// Añadimos el array nuevo y cambiamos el índice
						scope.numberMatrix.push([]); // Añadimos el primer array
						temp = scope.numberMatrix[arrayIndex];
					}
				}
			};


			/**
			 * Función pricipal. Recibe un número, define el texto y lo reproduce
			 */
			scope.chooseNumber = function (number) {
				var result = numberToWords(number);

				scope.numberText = result.text; // Muestra el texto
				//playAudio(result.intervals); // Reproduce el audio

				scope.chances--;

				// Reducimos las posibilidades, para llegar al final de la actividad
				if(scope.chances === 0){
					scope.$root.isNextEnabled = true;
					scope.$root.beforeGoNext = function () {
						scope.success = true;
						return true;
					}
				}
			};


			// =============================================================================
			// LÓGICA DE SELECCIÓN DE NÚMERO, CAMBIO A PALABRAS Y REPRODUCCIÓN DE SONIDO
			// =============================================================================
			// Intérvalos 
			var intervals = {
				"uno": [0, 0.4],
				"dos": [0.8, 1.4],
				"tres": [1.8, 2.3],
				"cuatro": [2.8, 3.3],
				"cinco": [3.7, 4.3],
				"seis": [4.8, 5.4],
				"siete": [5.8, 6.4],
				"ocho": [6.9, 7.3],
				"nueve": [7.8, 8.3],
				"diez": [8.6, 9.4],
				"once": [9.8, 10.4],
				"doce": [10.8, 11.3],
				"trece": [11.7, 12.5],
				"catorce": [12.7, 13.5],
				"quince": [13.7, 14.5],
				"dieci": [14.6, 15.17],
				"veinte": [15.7, 16.4],
				"veinti": [16.6, 17.25],
				"treinta": [17.6, 18.3],
				"cuarenta": [18.7, 19.5],
				"cincuenta": [19.7, 20.5],
				"sesenta": [20.8, 21.6],
				"setenta": [21.8, 22.8],
				"ochenta": [23.2, 23.8],
				"noventa": [24.1, 24.8],
				"y": [25.2, 25.5],
				"cien": [25.8, 26.5],
				"ciento": [26.9, 27.6],
				"cientos": [28, 28.8],
				"quinientos": [29, 29.9],
				"setecientos": [30.2, 31.4],
				"novecientos": [31.6, 32.7]
			};

			/**
			 * Convierte un número en palabras.
			 *
			 * Para hacerlo, la función va filtrando el número desde la mayor cifra (centenas, decenas... hasta unidades)
			 * después de cada filtro, se elimina la última cifra para poder pasar el número por siguiente filtro hasta
			 * llegar a las unidades.
			 *
			 * Rango actual: 1 al 999
			 *
			 * @param {integer} number número a convertir
			 * @return {Object} con 2 propiedades: text y intervals
			 *
			 */
			function numberToWords(number) {
				var res = '', // Número en palabras
					intervalsArray = []; // Interválo para reproducir

				number = parseInt(number);

				var units = ['', 'uno', 'dos', 'tres', 'cuatro', 'cinco', 'seis', 'siete', 'ocho', 'nueve'];
				var tens = ['', '', 'veinti', 'treinta', 'cuarenta', 'cincuenta', 'sesenta', 'setenta', 'ochenta', 'noventa'];

				// =============================
				// Centenas
				// =============================
				var c = Math.floor(number / 100);

				// Cien
				if(number === 100){ 
					res += 'cien'; 
					intervalsArray.push(intervals.cien);
				} 
				else if(c > 0){
					if(c === 1){ 
						res += 'ciento '; 
						intervalsArray.push(intervals.ciento);
					} else{
						// Casos especiales
						if(c === 5){ res += 'quinientos'; intervalsArray.push(intervals.quinientos); }
						else if(c === 7){ res += 'setecientos'; intervalsArray.push(intervals.setecientos); }
						else if(c === 9){ res += 'novecientos'; intervalsArray.push(intervals.novecientos); }
						else { 
							// Para el resto de centenas, se añaden las unidades al inicio
							res += units[c] + 'cientos';
							intervalsArray.push(intervals[ units[c] ]);
							intervalsArray.push(intervals.cientos);
						} 

						if(number % 100 !== 0){ res += ' ' } // Si el número no es redondo, añadimos un espacio
					}

					number = number - (c * 100); // Eliminamos las centenas
				}

				// =============================
				// Decenas
				// =============================
				var t = Math.floor(number / 10);

				if(number === 20) {
					res += 'veinte';
					intervalsArray.push(intervals.veinte);
				} else if(t >= 2 && t <= 9){
					res += tens[t]; // Añadimos la cadena de decenas
					intervalsArray.push(intervals[ tens[t] ]);

					// Agregamos el " y " si es mayor a 2
					if(t > 2 && number % 10 !== 0){ 
						res += ' y '; 
						intervalsArray.push(intervals.y);
					} 

					number = number % 10; // Eliminamos las decenas del número
				}

				// =============================
				// Unidades y números hasta el veinte
				// =============================
				if(number < 10){
					res += units[number];
					intervalsArray.push(intervals[ units[number] ]);
				} else if(number >= 10 && number < 20) {
					// del diez al quince
					if(number === 10) { res += 'diez'; intervalsArray.push(intervals.diez) };
					if(number === 11) { res += 'once'; intervalsArray.push(intervals.once) };
					if(number === 12) { res += 'doce'; intervalsArray.push(intervals.doce) };
					if(number === 13) { res += 'trece'; intervalsArray.push(intervals.trece) };
					if(number === 14) { res += 'catorce'; intervalsArray.push(intervals.catorce) };
					if(number === 15) { res += 'quince'; intervalsArray.push(intervals.quince) };

					// Deiciseis en adelante
					if(number > 15 && number < 20){ 
						res += 'dieci' + units[number % 10]; 
						intervalsArray.push(intervals.dieci);
						intervalsArray.push(intervals[ units[number % 10] ]);
					} 
				} 

				return {
					text: res,
					intervals: intervalsArray
				};

			}; // numberToWords()

			/**
			 * Reproduce los intérvalos especificados uno tras otro.
			 * Para ello, usa una función recursiva basada en un array
			 *
			 * @param {array} intervals Matrix de 2 dimensiones. Cada fila tiene tiempo de inicio y final del intervalo
			 */
			function playAudio(intervals) {
				if(intervals.length === 0) return; // Termina la función recursiva

				var audio = $('#audio-numbers')[0]; // Recuperamos el audio

				var actualInterval = intervals.shift(),
					starts = actualInterval[0],
					ends = actualInterval[1];

				audio.currentTime = starts;
				audio.play();

				var interv = setInterval(function() {
					if (audio.currentTime > ends) {
						audio.pause();
						clearInterval(interv);

						if(intervals.length !== 0) playAudio(intervals);
					}
				}, 10);
			}

		}
	}; 
});

var lizTwoGroup = angular.module('lizTwoGroup', []);

// Knockout Pairs Factory
lizTwoGroup.factory('twoGroupActivity', function ($rootScope) {

	var twoGroupActivity = {};

	/**
	 * Crea el ViewModel
	 */
	twoGroupActivity.create = function (options) {
		return new  twoGroupActivity._ViewModel(options);
	}

	/**
	 * Genera el ViewModel de las parejas con sus funcionalidades
	 *
	 * Recibe un objeto con las siguientes propiedades
	 *
	 * @param {object}		opt						Opciones a utilizar.
	 * @param {Array}		opt.data				Información de los elementos. Es necesario que cada una tenga la propiedad:
	 *
	 * 	answer: {boolean} define si la respuesta es correcta o incorrecta y puede ser soltada en el contenedor
	 * 	src: {string} imagen para el elemento
	 * 	alt: {string} texto alternativo
	 *
	 * @param {integer}		opt.chances				Número de posibilidades que tiene el usuario de hacer la actividad
	 * @param {integer}		opt.minRightAnswers		Número mínimo de respuestas correctas
	 * @param {function}	opt.successCallback		Función que se llama cuando se termina la actividad de forma satisfactoria
	 * @param {function}	opt.rightAnswerCallback	Función que se llama cuando la respuesta es correcta
	 * @param {integer}		opt.itemsPerRow			Número de elementos por fila. 3 por defecto
	 * @param {boolean}		opt.priority			Define si el botón de siguiente estará activo desde el inicio
	 *
	 */
	twoGroupActivity._ViewModel = function (opt) {
		var self = this;

		self.groupImg = opt.hasOwnProperty('groupImg') ? opt.groupImg : false;
		self.groupAlt = opt.hasOwnProperty('groupAlt') ? opt.groupAlt : false;

		// Observables 
		self.items = ko.observableArray(opt.data);
		self.target = ko.observableArray();

		// Propiedades por defecto, si no existen
		ko.utils.arrayForEach(self.items(), function(item){
			if(! item.hasOwnProperty('answer')) item.answer = true;
			if(! item.hasOwnProperty('title')) item.title = ''; 
			if(! item.hasOwnProperty('text')) item.text = false; 
		});

		// Ruta a la carpeta de imágenes
		self.resources = $rootScope.resources;
		self.itemsPerRow = typeof opt.itemsPerRow !== "undefined" ? opt.itemsPerRow : 3;

		// Disparador de preguntas correctas/incorrectas
		self.rightAnswer = ko.observable();
		self.wrongAnswer = ko.observable();

		self.success = ko.observable(false);
		self.failure = ko.observable(false);

		self.rightAnswers = 0;

		self.chances = opt.chances ? opt.chances : opt.data.length;
		self.totalRightAnswer = opt.totalRightAnswer ? opt.totalRightAnswer : opt.data.length;
		self.priority = opt.priority

		// audio
		self.audio = ko.observable(opt.audio);

		/**
		 * Reproduce el audio de la instrucción.
		 */
		self.playAudio = function () {
			$('#audio-instruction')[0].play();
		};

		/**
		 *	Función que se ejecuta al soltar el objeto dentro del contenedor
		 */
		self.verifyAnswer = function (arg) {

			// No hacer nada y salir de la función, si el elemento se soltó en el mismo grupo inicial
			if(arg.sourceParent() == arg.targetParent()) return;

			// Calculamos si la respuesta es correcta o no usando la propiedad 'answer'
			if (arg.item.answer) {
				// Respuesta correcta
				self.rightAnswer(arg.item);
				arg.cancelDrop = true;
				self.rightAnswers++;
        	// Llama a la función de respuesta buena
			if (typeof opt.rightAnswerCallback !== "undefined") opt.rightAnswerCallback();
			} else {
				// Respuesta Incorrecta
				self.wrongAnswer(arg.item);
				arg.cancelDrop = true; // Devuelve el elemento a su posición origina
			}
		

			// Reducimos las posibilidades
			self.chances--;

			// Fin de la actividad
			if (self.chances === 0 || self.rightAnswers >= self.totalRightAnswer ) {
				if(self.rightAnswers >= opt.minRightAnswers) {
					// éxito
					self.success(true);

					// Llama a la función de éxito
					if (typeof opt.successCallback !== "undefined") opt.successCallback();

					// Eliminamos beforeGoNext, si existe
					if(self.priority){
						$rootScope.beforeGoNext = undefined; // Limpiamos la función	
					}

					// Activamos la siguiente ruta
					$rootScope.isNextEnabled = true;

				} else {
					// Fracaso
					self.failure(true);
				}
			}

			// Si hay prioridad, activa/desactiva el botón de siguiente
			if(self.priority){
				if(self.rightAnswers >= opt.minRightAnswers) $rootScope.isNextEnabled = true;
				else $rootScope.isNextEnabled = false;

				$rootScope.$apply();
			}
		};

		// ===========================================================================
		// Si se a decidido usar la prioridad
		// ===========================================================================
		if(self.priority){

			$rootScope.beforeGoNext = function () {
				// Si el número de elementos es mayor al número de respuestas requeridas: ÉXITO!!!
				if(self.target().length >= opt.minRightAnswers){

					if (typeof opt.successCallback !== "undefined") opt.successCallback();
					self.success(true);
					return true; 

				} else {

					self.failure(true);
					return false; 

				}
			};

		}

	};

	/**
	 * Inicializa la instancia del ViewModel creado con oneGroupActivity.create
	 *
	 * @param {object} instance Intancia del VM de knockout
	 */
	twoGroupActivity.run = function (instance) {
		ko.cleanNode($('#main-container')[0]);
		ko.bindingHandlers.sortable.beforeMove = instance.verifyAnswer;
		ko.applyBindings(instance, $('#main-container')[0]);
	};

	return twoGroupActivity;

});

lizTwoGroup.directive('twoGroup', function  (twoGroupActivity) {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			audio: '@',
			description: '@',
			title: '@'
		},
		templateUrl: '../views/activities/two_group.html',
		link: function postLink(scope, element, attrs) {
			// Añadimos el audio a options
			scope.options.audio = typeof scope.audio !== "undefined" ? scope.audio : false;

			twoGroupActivity.run(twoGroupActivity.create(scope.options));
		}
	}; 
});


var lizWriteTrueFalse = angular.module('lizWriteTrueFalse', []);

lizWriteTrueFalse.directive('writeTrueFalse', function ($sce) {
  return {
    restrict: 'E',
    scope: {
      options: '=',
      audio: '@',
      title: '@',
      description: '@'
    },
    templateUrl: '../views/activities/write_true_false.html',
    link: function (scope, element, attrs) {
      var opt = scope.options,
        rightAnswers = 0,
        minRightAnswers = opt.hasOwnProperty('minRightAnswers') ? opt.minRightAnswers : opt.items.length;
        scope.src = opt.src ? opt.src : false;
        scope.alt = opt.alt ? opt.alt : false;
        scope.bigImg = opt.hasOwnProperty('bigImg') ? opt.bigImg : false;

      scope.rightAnswers = false;
      scope.wrongAnswer = false;
      scope.success = false;
      scope.failure = false;

      scope.showFeedback = false; // Realimentación
      scope.feedback = opt.feedback;

      scope.items = opt.items;

      scope.$root.beforeGoNext = function () {
        if (rightAnswers >= minRightAnswers) {
          scope.success = true;
          return true;
        } else {
          scope.failure = true;
          return true;
        }
      };

      // Permite el uso de html
      scope.sanitize = function (item) {
        return $sce.trustAsHtml(item);
      }

      /**
       * abre el zoom 
       */
      scope.zoom = function () {
        if(scope.bigImg){
          scope.showBig = true;
        }
      };

      /**
       * Cierra el zoom 
       */
      scope.complete = function () {
        
          scope.showBig = false;
      };


      /**
       * Función de verificación
       *
       * @returns {boolean}
       */
      scope.verify = function (item) {
        item.input = item.input.toUpperCase();

        if (item.input === item.answer) {
          scope.rightAnswer = Math.random();
          rightAnswers += 1;
        } else {
          scope.wrongAnswer = Math.random();
        }

        item.completed = true;

        // Contamos los elementos completados
        var completedItems = scope.items.filter(function (item) {
          return item.completed;
        }).length;

        if (completedItems === scope.items.length) {
          scope.$root.isNextEnabled = true;
          scope.showFeedback = true;
        }
      };

    }
  };
});

var lizAnimationBase = angular.module('lizAnimationBase', []);

lizAnimationBase.directive('animationBase', function () { 
	
	return {
		restrict: 'E',
		templateUrl: '../views/animations/animation_base.html',
		transclude: true,
		scope: {
			title: '@',
			instruction: '@',
			description: '@',
			animationId: '@',
			time: '='
		},
		link: function (scope, element, attrs){

			var intervalTime = 0, // Variable que almacena los milisegundos para cada uno de los pasos
				timer = {}; // Contenedor de los timeout

			scope.isBottom = scope.title || scope.description;
			scope.animationClass = ''; // Elemento para el manejo de las clases
			scope.isRunning = false; // Variable para ver si la aplicación está corriendo
			
			/**
			 * Corre la animación 
			 */
			scope.run = function () {

				// no permitir que la animación corra nuevamente
				if(scope.isRunning) return;

				// Reiniciamos los valores
				scope.animationClass = ''; 
				intervalTime = 0;

				scope.isRunning = true; // Animación Corriendo

				// Definimos los pasos en base a los tiempos definidos
				scope.time.forEach(function (time, index) {

					// Actualizamos la clase con cada nuevo paso
					setTimeout(function() {
						scope.animationClass += ' step-' + (index + 1);
						console.log(intervalTime);
						scope.$apply();
					}, intervalTime += time * 1000);

				});

				setTimeout(function() {
					scope.isRunning = false; // Reactivamos la posibilidad de hacer la animación
					scope.$root.isNextEnabled = true; // Activamos la siguiente ruta
					scope.$apply();
				}, intervalTime);

			};

		}
	};

});

/**
* La actividad permite ver una animación tomando un video corto como fuente.
*/
var lizAnimationVideo = angular.module('lizAnimationVideo', []);

lizAnimationVideo.directive('animationVideo', function () {
	return {
		restrict: 'E',
		templateUrl: '../views/animations/animation_video.html',
		scope: {
			options: '=',
			instruction: '@',
			title: '@',
			description: '@',
			audio: '@'
		},
		link: function (scope, iElement, iAttrs) {


			scope.complete = true; // Cuando termina la actividad
			scope.block = false;
			scope.ended = false;
			scope.startButton = false;

			// watch if the activity is finished
			scope.$watch('complete', function(complete) {
				if (complete) {
					scope.$root.isNextEnabled = true;
				} 
			});

			scope.item = scope.options;

			// Si la descripción o el título están, entonces la instrucción va al fondo
			scope.isBottom = scope.title || scope.description;

			scope.animationEnded = function () {
				scope.$root.isNextEnabled = true;
				console.log("Asd");
			};
		}
	};
});
var lizBoxAnimationFigure = angular.module('lizBoxAnimationFigure', []);

lizBoxAnimationFigure.directive('boxAnimationFigure', function () {
	return {
		restrict: 'E',
		templateUrl: '../views/concepts/box_animation_figure.html',
		transclude: true,
		scope: {
			title: '@',
			description: '@',
			instruction: '@',
			audio: '@',
			arrow: '=',
			addicon: '@',
      		mouse: '='
		}
	};
});

var lizBubbleDescription = angular.module('lizBubbleDescription', []);

lizBubbleDescription.directive('bubbleDescription', function () {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			title: '@',
			description: '@',
			audio:'@',
			instruction: '@'
		},
		templateUrl: '../views/concepts/bubble_description.html',
		link: function (scope, iElement, iAttrs) {
			scope.items = scope.options.items;
			completedItems = 0;

			angular.forEach(scope.items, function (item) {
				item.hoverBubble = false
			});

			scope.onHoverBubble = function (item) {
				item.hoverBubble = true;
			};

			scope.onLeaveBubble = function (item) {
				item.hoverBubble = false;
				completedItems++;

				if(completedItems === scope.items.length){
					scope.$root.isNextEnabled = true;
				}
			}	
		}
	};
});
/**
 * La actividad consiste en varios botones que al ser presionados activan una burbuja
 * con contenido.
 */
var lizButtonBubbleDescription = angular.module('lizButtonBubbleDescription', []);

lizButtonBubbleDescription.directive('buttonBubbleDescription', function () {
  // Runs during compile
  return {
    // name: '',
    // priority: 1,
    // terminal: true,
    scope: {
      options: '=',
      title: '@',
      description: '@',
      audio: '@',
      instruction: '@',
      mainimg: '@',
      alt: '@'
    }, // {} = isolate, true = child, false/undefined = no change
    // controller: function($scope, $element, $attrs, $transclude) {},
    // require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements
    restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
    // template: '',
    templateUrl: '../views/concepts/button_bubble_description.html',
    // replace: true,
    // transclude: true,
    // compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn){ return function linking(scope, elm, attrs){}})),
    link: function (scope, iElm, iAttrs) {

      scope.bubbles = scope.options.bubbles;
      scope.complete = false; // Cuando termina la actividad

      // watch if the activity is finished
      scope.$watch('complete', function (complete) {
        if (scope.complete) {

          // Activamos la siguiente actividad o ruta
          scope.$root.isNextEnabled = true;
        }
      });

      scope.makeId = function (id) {
        var newId = id.replace(" ", "_");
        var text = newId + "_";
        var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

        for (var i = 0; i < 5; i++) {
          text += possible.charAt(Math.floor(Math.random() * possible.length));
        }

        return text;
      };

      angular.forEach(scope.bubbles, function (value, key) {
        value.btnId = scope.makeId(value.name);
        value.audioId = scope.makeId(value.audio);
        value.btnChecked = false;
        value.displayInfo = false;
        value.activeBtn = false;
      });

      // Si la descripción o el título están, entonces la instrucción va al fondo
      scope.isBottom = scope.title || scope.description;

      var counter = 0;

      scope.activateBubble = function (bubble) {

        angular.forEach(scope.bubbles, function (value, key) {
          value.displayInfo = false;
          if (value.btnId != bubble.btnId) {
            value.activeBtn = false;
          }
        });

        bubble.activeBtn = true;
        bubble.displayInfo = true;

        if (bubble.btnChecked === false) {
          counter++;
          bubble.btnChecked = true;
        }
        if (counter === scope.bubbles.length) {
          scope.complete = true;
        }
      };
    }
  };
});
var lizChangeStyleClick = angular.module('lizChangeStyleClick', []);

lizChangeStyleClick.directive('changeStyleClick', function () {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			title: '@',
			description: '@',
			audio:'@',
			instruction: '@',
			titleBlock: '@',
			bgimg: '@',
			mainimg: '@'
		},
		templateUrl: '../views/concepts/change_style_click.html',
		link: function (scope, element, attrs) {

			var opt = scope.options,
				completedItems = 0;

			scope.items = opt.items;
			scope.selectedItem = false; // elemento seleccionado
			scope.selectedItem2 = false; // elemento seleccionado
			scope.selectedItemAux = false; // elemento seleccionado
			rightAnswers = 0, // Contador de preguntas buenas
			chances = 0, // Contador de oportunidades de seleccion
			scope.limit = (opt.items.length - Math.floor(opt.items.length/2));

			
			/**
			 * Selecciona el elemento indicado
			 */
			scope.selectItem = function (item) {
				scope.selectedItem = item; // seleccionamos el objeto
			};

			/**
			 * Selecciona el objetivo indicado
			 */
			scope.selectItem2 = function (item) {
			if(item.isCompleted === true || scope.selectedItem === false ) return;

				scope.selectedItemAux = item; // seleccionamos el objeto

				if (scope.selectedItem === scope.selectedItemAux){
						scope.selectedItem2 = item;
						item.right = true;

					// Contamos los elementos completos
					if(!item.hasOwnProperty('isCompleted')){
						item.isCompleted = true; // marcamos el elemento, para no volver a seleccionarlo
						completedItems++;
						rightAnswers++
					}
				}else{
					scope.selectedItem.wrong = true;
					// Contamos los elementos completos
					if(!item.hasOwnProperty('isCompleted')){
						
						completedItems++;
						scope.selectedItem = false; // elemento seleccionado
						scope.selectedItem2 = false; // elemento seleccionado
						scope.selectedItemAux = false; // elemento seleccionado
					}
				}

				// Fin de la actividad
				if(completedItems === scope.items.length){

					if (rightAnswers >= scope.limit){
						scope.$root.isNextEnabled = true;
							scope.success = true;
						} else {
							scope.failure = true;
						}
				}

				
			};


			/**
			 * Devuelve los estilos personalizados de los items
			 */
			scope.getItemStyles = function (style) {
				var styles = "";
				styles += style;
				return styles;
			};


			/**
			 * Devuelve los estilos del item seleccionado
			 */
			scope.getItemStyles2 = function (item) {
				if(scope.selectedItem2 !== item) return;
				return item.style2;
			};

		}
	}; 
});

lizChangeStyleClick.filter('startFrom', function() {
    return function(input, start) {
        start = +start; //parse to int
        return input.slice(start);
    }
});

lizChangeStyleClick.filter('reverse', function() {
  return function(items) {
    return items.slice().reverse();
  };
});
var lizChangeStyleSelect = angular.module('lizChangeStyleSelect', []);

lizChangeStyleSelect.directive('changeStyleSelect', function () {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			title: '@',
			description: '@',
			audio:'@',
			instruction: '@',
			titleBlock: '@',
			bgimg: '@',
			mainimg: '@'
		},
		templateUrl: '../views/concepts/change_style_select.html',
		link: function (scope, element, attrs) {

			var opt = scope.options,
				completedItems = 0;

			scope.items = opt.items;
			scope.selectedItem = false; // elemento seleccionado
			scope.limit = (opt.items.length - Math.floor(opt.items.length/2));

			
			/**
			 * Selecciona el elemento indicado
			 */
			scope.selectItem = function (item) {

				scope.selectedItem = item; // seleccionamos el objeto

				// Contamos los elementos completos
				if(!item.hasOwnProperty('isCompleted')){
					item.isCompleted = true; // marcamos el elemento, para no volver a seleccionarlo
					completedItems++;
				}

				// Fin de la actividad
				if(completedItems === scope.items.length){
					scope.$root.isNextEnabled = true;
				}

				
			};

			/**
			 * Devuelve los estilos personalizados de los items
			 */
			scope.getItemStyles = function (style) {
				var styles = "";
				styles += style;
				return styles;
			};


			/**
			 * Devuelve los estilos del item seleccionado
			 */
			scope.getItemStyles2 = function (item) {
				if(scope.selectedItem !== item) return;
				return item.style2;
			};

		}
	}; 
});

lizChangeStyleSelect.filter('startFrom', function() {
    return function(input, start) {
        start = +start; //parse to int
        return input.slice(start);
    }
});
var lizClickImages = angular.module('lizClickImages', []);

lizClickImages.directive('clickImages', function () {
	return {
		restrict: 'E',
		templateUrl: '../views/concepts/click_images.html',
		scope: {
			options: "=",
			img: '@', // Imagen al lado de click images
			alt: '@',
			title: '@',
			watch: '@',
			instruction: '@',
			description: '@',
			itemsPerRow: '@',
			priority: '@',
			audio:'@'
		},
		controller: function ($scope, $sce) {
			$scope.items = $scope.options; 

			// Recorremos los elementos para definir el audio
			$scope.items.forEach(function(item){
				item.audio = item.hasOwnProperty('audio') ? item.audio : item.resource;
				item.type = item.hasOwnProperty('type') ? item.type : 'png'; // Tipo de recurso
			});

			// Si la descripción o el título están, entonces la instrucción va al fondo
			$scope.isBottom = $scope.title || $scope.description;

			// Para usar el html en angular
			$scope.sanitize = function (item) {
				return $sce.trustAsHtml(item);
			}

			// Verifica el final de la actividad, según el número de imágenes 
			// Para ello, manejamos un contador. Cada vez que se da click en una imagen,
			// se le agrega una propiedad con el fin de que se cuente una sola vez.
			// Cuando el contador es igual al número de imágenes, se termina la actividad
			$scope.verify = function (item) {
				if(typeof $scope.completeCounter === "undefined")
					$scope.completeCounter = 0;

				if(typeof item.clicked === "undefined"){
					item.clicked = true;
					$scope.completeCounter++;

					if($scope.completeCounter === $scope.options.length) {
						$scope.$root.isNextEnabled = true; // Activamos el botón de siguiente
					}
				}
			};

			/**
			 * Para obtener los estilos de los elementos, específicamente el ancho
			 */
			$scope.getStyles = function function_name(argument) {
				var styles = "";

				if($scope.itemsPerRow){
					styles += "width: " + (100 / $scope.itemsPerRow) + "%;";
				} else {
					styles += "width: " + (100 / $scope.options.length) + "%;";
				}
				
				return styles;
			}

			// En caso de prioridad, se activa el siguiente vínculo
			if($scope.priority){
				$scope.$root.isNextEnabled = true;
			}

		}
	};
});

var lizClickTransition = angular.module('lizClickTransition', []);

lizClickTransition.directive('clickTransition', function () {
	return {
		restrict: 'E',
		templateUrl: '../views/concepts/click_transition.html',
		scope: {
			options: "=",
			title: '@',
			instruction: '@',
			description: '@'
		},
		controller: function ($scope, $sce) {
			// Si la descripción o el título están, entonces la instrucción va al fondo
			$scope.isBottom = $scope.title || $scope.description;

			// Para usar el html en angular
			$scope.sanitize = function (item) {
				return $sce.trustAsHtml(item);
			}

			// Verifica el final de la actividad, según el número de imágenes 
			// Para ello, manejamos un contador. Cada vez que se da click en una imagen,
			// se le agrega una propiedad con el fin de que se cuente una sola vez.
			// Cuando el contador es igual al número de imágenes, se termina la actividad
			$scope.verify = function (item) {
				if(typeof $scope.completeCounter === "undefined")
					$scope.completeCounter = 0;

				if(typeof item.clicked === "undefined"){
					item.clicked = true;
					$scope.completeCounter++;

					if($scope.completeCounter === $scope.options.length) {
						$scope.$root.isNextEnabled = true; // Activamos el botón de siguiente
					}
				}
			};
		}
	};
});

var lizCompetences = angular.module('lizCompetences', []);

lizCompetences.directive('competencesNew', function () {
	return {
		restrict: 'E',
		templateUrl: '../views/concepts/competences.html',
		scope: {
			options: "="			
		},
		link: function (scope) {
			scope.$root.isNextEnabled = true;
		}		
	};
});

var lizConceptsTable = angular.module('lizConceptsTable', []);

lizConceptsTable.directive('conceptsTable', function  () {
    return {
        restrict: 'E',
        templateUrl: '../views/concepts/concepts_table.html',
		scope: {
			options: '=',
			description: '@',
			audio:'@',
			title:'@'
		},

		link: function (scope, element, attrs) {
			// Corremos la aplicación
			scope.items = scope.options.items;
			scope.itemsPerRow = scope.options.itemsPerRow;
			scope.rowsstyle = scope.options.rowsstyle;
			scope.mainimg = scope.options.mainimg;
			scope.alt = scope.options.alt;
			scope.words = [];
			minRightAnswers = scope.options.minRightAnswers
			rightAnswers = 0, // Contador de preguntas buenas
			chances = scope.options.chances,
			scope.success = false;
			scope.failure = false;
			scope.block = false;
			scope.$root.isNextEnabled = true;

			/**
			 * Para obtener los estilos de los elementos, específicamente el ancho
			 */
			scope.getStyles = function function_name(argument) {
				var styles = "";

				if(scope.itemsPerRow){
					styles += "width: " + (100 / scope.itemsPerRow) + "%;";
					styles += "margin-left: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-top: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-right: " + (10 / scope.itemsPerRow) + "%!important;";
				} else {
					styles += "width: " + (100 / scope.items.length) + "%;";
					styles += "margin-left: " + (10 / scope.itemsPerRow) + "%;";
					styles += "margin-top: " + (10 / scope.itemsPerRow) + "%;";
				}
				
				return styles;

				
			};


		}


    }; 
});


/**
 * Created by Maria Giraldo
 */
var lizCorrectWordInSentence = angular.module('lizCorrectWordInSentence', []);

lizCorrectWordInSentence.directive('correctWordInSentence', function ($sce, $log) {
    return {
        restrict: 'E',
        scope: {
            options: '=',
            title: '@',
            description: '@',
            audio:'@',
            instruction: '@'
        },
        templateUrl: '../views/concepts/correct_word_in_sentence.html',
        link: function (scope, iElement, iAttrs) {

            var opt = scope.options,
                rightAnswers = 0;

            // variables básicas de la acividad de angular
            scope.rightAnswer = false;
            scope.wrongAnswer = false;
            scope.success = false;
            scope.failure = false;
            scope.$root.isNextEnabled = true;
            scope.imgwidth = (opt.imgwidth) ? opt.imgwidth : 60;
            scope.chancesPerItem = (opt.chancesPerItem) ? opt.chancesPerItem : 2;
            scope.minRightAnwers = opt.minRightAnwers;
            scope.randomItems = (scope.options.randomItems) ? true:false;
            scope.$root.isNextEnabled = false;


            // Preguntas
            scope.questions = opt.questions;

            //Numero de opciones por frase
            angular.forEach(opt, function (value, key) {
                angular.forEach(value.questions, function (v, k) {
                    v.chances = scope.chancesPerItem;
                    v.completed = false;  //Initialize
                })
            })

            /**
             * Verifica la respuesta.
             * item: iem actual: frase actual
             * text: palabra seleccionada
             * n: pocision del item, sirve para concatenar el Id del elemento
             * i: pocision de cada palabra deltro del item,  sirve para concatenar el Id del elemento
             */
            scope.verify = function (item, text, n, i) {
                item.chances -= 1;  //Resta opciones de clic

                // Si tiene opciones de clic
                if (item.chances >=0 ){
                    //Validar respuesta correcta
                    if (text === item.answer){
                        item.wrong = false;
                        item.right = true;
                        rightAnswers += 1;
                        item.completed = true;
                        item.ok = true;

                        // Destaca respuesta correcta
                        var element = "#"+n+i;
                        $(element).addClass("answer_ok");
                    }
                    else
                    {
                        //Evita mostrar la X si se ha acertado anteriormente
                        if (!item.completed)    item.wrong = true;
                    }
                    //No tiene opciones de clic
                    if(item.chances === 0)item.ok = true;
                }
                else{
                    item.ok = true;
                }


                //Contamos los elementos completados por item
                var completed =  scope.options[0].questions.filter(function (q) {
                    return q.ok;
                }).length;

                // Contamos los elementos terminados
                var completedItems =  scope.options[0].questions.filter(function (q) {
                    return q.completed;
                }).length;

                // Se ha intentado en todos los items
                if (completed ===  scope.options[0].questions.length) {
                    //Se ha acertado en el minimo requerido
                    if(completedItems >= scope.options[0].minRightAnwers) {
                        scope.$root.isNextEnabled = true;
                        //Hábilita mensaje de felicitaciones
                        scope.success = true;
                    }
                    else{
                        //Habilita mensaje para volver a intentar
                        scope.failure = true;
                    }
                }
                else{
                    return;
                }
            }

            // Permite el uso de html
            scope.sanitize = function (phrase) {
                return $sce.trustAsHtml(phrase);
            };

        }
    };
});
var lizHoverShowText = angular.module('lizHoverShowText', []);

lizHoverShowText.directive('hoverShowText', function  ($sce) {
    return {
        restrict: 'E',
        templateUrl: '../views/concepts/hover_show_text.html',
		scope: {
			options: '=',
			description: '@',
			titlehead: '@',
			instruction: '@',
			audio:'@'
			
		},

		link: function (scope, element, attrs) {
			// Corremos la aplicación
			scope.items = scope.options.items;
			scope.canvas = scope.options.canvas; // La imagen principal
			scope.altcanvas = scope.options.altcanvas; // texto alternativo de La imagen principal
			scope.titlecanvas = scope.options.titlecanvas; // titulo de La imagen principal
			scope.imgStyle = scope.options.imgStyle; // estilos de La imagen principal
			scope.success = false;
			scope.event = scope.options.eventClick ? 'click' : 'mouseover';
			scope.block = false;
			completedItems = 0;
			scope.hidetext = scope.options.hidetext//activar para ocultar el popover cuando termina el evento
			scope.mainText = scope.options.mainText//agrga texto html ala actividad

			console.log(scope.mainText);

			/**
			 * Marca los elementos y verifica el final
			 */
			scope.verify = function (item) {
				if(item.completed) return;

				item.completed = true;

				var countCompleted = scope.items.filter(function(item){
					return item.completed;
				}).length;

				if(countCompleted === scope.items.length) {
					scope.$root.isNextEnabled = true; // Activa la flecha de siguiente
				}
			};

			// Para usar el html en angular
			scope.sanitize = function (item) {
				return $sce.trustAsHtml(item);
			}

			/**
			 * Para obtener los estilos de los elementos, específicamente el ancho
			 */
			scope.getTargetsStyles = function (item) {
				var styles = '';

				styles += 'width: ' + item.w + 'px;';
				styles += 'height: ' + item.h + 'px;';
				styles += 'top: ' + item.t + '%;';
				styles += 'left: ' + item.l + '%;';

				// estilos personalizados
					if(scope.options.hasOwnProperty('customStyles')) styles += scope.options.customStyles;

				return styles;
			};

		}
	}; 
});

lizHoverShowText.directive('popover', function($timeout){
	return {
	    restrict: 'A',
			scope: {
				item: '=',
				popoverText: '@',
				popoverPlacement: '@',
				popoverTitle: '@',
				popoverEvent:'@',
				hidetext: '@',

			},
	    link : function (scope, element, attrs) {
				var disable = false;

				$timeout(function(){
					$(element).popover({
						animation: true,
						placement: scope.popoverPlacement,
						title: scope.popoverTitle,
						trigger: 'manual',
						html: true,
						content: scope.popoverText//container: 'body'
					});
				});
				
				if(scope.hidetext){
					element.bind('mouseleave', function (e) {
						
						$(element).popover('hide');
					});

					element.bind(scope.popoverEvent, function (e) {
						
						$(element).popover('show');

					});
				};

					element.bind(scope.popoverEvent, function (e) {
						if(disable) return; // Solo se anima la primera vez
						
						$(element).popover('show');
						disable = true;
					});

    	}
	};
});




var lizImageMapDescription = angular.module('lizImageMapDescription', []);

lizImageMapDescription.directive('imageMapDescription', function ($sce) {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			title: '@',
			description: '@',
			audio:'@',
			instruction: '@',
			mainimg: '@'
		},
		templateUrl: '../views/concepts/image_map_description.html',
		link: function (scope, element, attrs) {
			var opt = scope.options,
				completedItems = 0;

			// Si la descripción o el título están, entonces la instrucción va al fondo
			scope.isBottom = scope.title || scope.description;

			scope.canvas = opt.canvas;
			scope.canvasAlt = opt.canvasAlt;
			scope.items = opt.items;
			scope.selectedItem = false; // elemento seleccionado

			/**
			 * Selecciona el elemento indicado
			 */
			scope.selectItem = function (item) {
				scope.selectedItem = item; // seleccionamos el objeto

				// Contamos los elementos completos
				if(!item.hasOwnProperty('isCompleted')){
					item.isCompleted = true; // marcamos el elemento, para no volver a seleccionarlo
					completedItems++;
				}

				// Fin de la actividad
				if(completedItems === scope.items.length){
					scope.$root.isNextEnabled = true;
				}
			};


			/**
			 * Devuelve los estilos de cada elemento
			 */
			scope.getStyles = function (item) {
				var styles = '';

				styles += "top: " + item.t + "%;";
				styles += "left: " + item.l + "%;";	
				return styles;
			};


      /**
       * Sanitizes the value as html
       * @param value
       * @returns String converted string
       */
      scope.sanitize = function (value) {
        return $sce.trustAsHtml(value);
      };



		}
	}; 
});


var lizImageMapMat = angular.module('lizImageMapMat', []);

lizImageMapMat.directive('imageMapMat', function ($sce) {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			title: '@',
			description: '@',
			audio:'@',
			instruction: '@',
			mainimg: '@'
		},
		templateUrl: '../views/concepts/image_map_mat.html',
		link: function (scope, element, attrs) {
			var opt = scope.options,
				completedItems = 0;

			// Si la descripción o el título están, entonces la instrucción va al fondo
			scope.isBottom = scope.title || scope.description;

			scope.canvas = opt.canvas;
			scope.canvasAlt = opt.canvasAlt;
			scope.items = opt.items;
			scope.selectedItem = false; // elemento seleccionado

			/**
			 * Selecciona el elemento indicado
			 */
			scope.selectItem = function (item) {
				scope.selectedItem = item; // seleccionamos el objeto

				// Contamos los elementos completos
				if(!item.hasOwnProperty('isCompleted')){
					item.isCompleted = true; // marcamos el elemento, para no volver a seleccionarlo
					completedItems++;
				}

				// Fin de la actividad
				if(completedItems === scope.items.length){
					scope.$root.isNextEnabled = true;
				}
			};


			/**
			 * Devuelve los estilos de cada elemento
			 */
			scope.getStyles = function (item) {
				var styles = '';

				styles += "top: " + item.t + "%;";
				styles += "left: " + item.l + "%;";	
				return styles;
			};


      /**
       * Sanitizes the value as html
       * @param value
       * @returns String converted string
       */
      scope.sanitize = function (value) {
        return $sce.trustAsHtml(value);
      };



		}
	}; 
});


var lizImageSound = angular.module('lizImageSound', []);

lizImageSound.directive('imageSound', function () {
	return {
		restrict: 'E',
		scope: {
			options: '='
		},
		templateUrl: '../views/concepts/image_sound.html',
		link: function (scope, element, attrs) {

			var opt = scope.options,
				completedItems = 0;

            if (opt.hasOwnProperty('multiple')) {
                opt.multiple = false;
            }

			scope.canvas = opt.canvas;
			scope.canvasAlt = opt.canvasAlt;
			scope.items = opt.items;

			scope.makeId = function (id) {
				var newId = id.replace(" ", "_");
                var text = newId + "_";
                var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

                for (var i = 0; i < 5; i++) {
                    text += possible.charAt(Math.floor(Math.random() * possible.length));
				}

                return text;
            };

			angular.forEach(scope.items, function (value, key) {
				value.id = scope.makeId(value.button);
			});

			/**
			 * Selecciona el elemento indicado
			 */
			/*scope.selectItem = function (item) {
				scope.selectedItem = item; // seleccionamos el objeto

				// Contamos los elementos completos
				if(!item.hasOwnProperty('isCompleted')){
					item.isCompleted = true; // marcamos el elemento, para no volver a seleccionarlo
					completedItems++;
				}

				// Fin de la actividad
				if(completedItems === scope.items.length){
					if (opt.multiple === false) {
                        scope.$root.isNextEnabled = true;
                    }
				}
			};*/

			/**
			 * Devuelve los estilos de cada elemento
			 */
			scope.getStyles = function (item) {
				var styles = '';

				styles += "top: " + item.t + "%;";
				styles += "left: " + item.l + "%;";
				
				return styles;
			};


		}
	}; 
});


var lizImagesAndText = angular.module('lizImagesAndText', []);

lizImagesAndText.directive('imagesAndText', function ($sce) {
  return {
    restrict: 'E',
    templateUrl: '../views/concepts/images_and_text.html',
    scope: {
      options: "=",
      title: '@',
      description: '@',
      audio: '@',
      noafter: '@',
      maintext: '@',
      itemswidth:'@',
      addicon: '@',
      ext: '@'
    },

    link: function (scope) {
      scope.$root.isNextEnabled = true;
      
      scope.ext = scope.ext ? scope.ext : '.png';

      // Para usar el html en angular
      scope.sanitize = function (item) {

        return $sce.trustAsHtml(item);
      }

    }
  };
});

/**
 * Muestra bloques de imagenes con o sin audio ejecutados
 * por los bloques.
 */
 var lizImagesBlockDescription = angular.module('lizImagesBlockDescription', []);

 lizImagesBlockDescription.directive('imagesBlockDescription', function ($sce){
 	// Runs during compile
 	return {
 		// name: '',
 		// priority: 1,
 		// terminal: true,
 		scope: {
 			options: "=",
 			title: "@",
      		description: '@',
      		instruction: '@',
      		audio: '@'
 		}, // {} = isolate, true = child, false/undefined = no change
 		// controller: function($$scope, $element, $attrs, $transclude) {},
 		// require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements
 		restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
 		// template: '',
 		templateUrl: '../views/concepts/images_block_description.html',
 		// replace: true,
 		// transclude: true,
 		// compile: function(tElement, tAttrs, function transclude(function($scope, cloneLinkingFn){ return function linking($scope, elm, attrs){}})),
 		link: function($scope) {

 			if (false === $scope.options.hasAudio) {
 				$scope.$root.isNextEnabled = true;
 			}

 			$scope.hasZoomImage = $scope.options.hasZoomImage || false;
 			$scope.blocks = $scope.options.blocks;
 			$scope.customClass = ($scope.options.customClass) ? $scope.options.customClass : "";
 			$scope.complete = false; // Cuando termina la actividad
      		$scope.hideDescription = $scope.options.hideDescription;
      		$scope.itemsPerRow = $scope.options.itemsPerRow;
      		// Si la descripción o el título están, entonces la instrucción va al fondo
      		$scope.isBottom = $scope.title || $scope.description;

      		$scope.$watch('complete', function (complete) {
		        if (complete) {
		          	$scope.$root.isNextEnabled = true;
		        }
	      	});

	      	$scope.sanitize = function (item) {
	      		console.log(item);
				return $sce.trustAsHtml(item);
			}

	      	/**
			 * Para obtener los estilos de los elementos, específicamente el ancho
			 */
			$scope.getStyles = function () {
				var styles = "";

				if($scope.itemsPerRow){
					styles += "width: " + (100 / $scope.itemsPerRow) + "%;";
				} else {
					styles += "width: " + (100 / $scope.blocks.length) + "%;";
				}
				
				return styles;
			}

	      	var counter = 0;

	      	$scope.verify = function (block) {
	      		counter++;

	      		if (counter === $scope.options.blocks.length) {
	      			$scope.complete = true;
	      		}
	      	}
 		}
 	};
 });
/**
 * Muestra bloques de imagenes con o sin audio ejecutados
 * por los bloques.
 */
 var lizImagesBlockMat = angular.module('lizImagesBlockMat', []);

 lizImagesBlockMat.directive('imagesBlockMat', function ($sce){
 	// Runs during compile
 	return {
 		// name: '',
 		// priority: 1,
 		// terminal: true,
 		scope: {
 			options: "=",
 			title: "@",
      		description: '@',
      		instruction: '@',
      		audio: '@'
 		}, // {} = isolate, true = child, false/undefined = no change
 		// controller: function($$scope, $element, $attrs, $transclude) {},
 		// require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements
 		restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
 		// template: '',
 		templateUrl: '../views/concepts/images_block_mat.html',
 		// replace: true,
 		// transclude: true,
 		// compile: function(tElement, tAttrs, function transclude(function($scope, cloneLinkingFn){ return function linking($scope, elm, attrs){}})),
 		link: function($scope) {

 			if (false === $scope.options.hasAudio) {
 				$scope.$root.isNextEnabled = true;
 			}

 			$scope.hasZoomImage = $scope.options.hasZoomImage || false;
 			$scope.blocks = $scope.options.blocks;
 			$scope.customClass = ($scope.options.customClass) ? $scope.options.customClass : "";
 			$scope.complete = false; // Cuando termina la actividad
      		$scope.hideDescription = $scope.options.hideDescription;
      		$scope.itemsPerRow = $scope.options.itemsPerRow;
      		// Si la descripción o el título están, entonces la instrucción va al fondo
      		$scope.isBottom = $scope.title || $scope.description;

      		$scope.$watch('complete', function (complete) {
		        if (complete) {
		          	$scope.$root.isNextEnabled = true;
		        }
	      	});

	      	$scope.sanitize = function (item) {
	      		console.log(item);
				return $sce.trustAsHtml(item);
			}

	      	/**
			 * Para obtener los estilos de los elementos, específicamente el ancho
			 */
			$scope.getStyles = function () {
				var styles = "";

				if($scope.itemsPerRow){
					styles += "width: " + (180 / $scope.itemsPerRow) + "%;";
				} else {
					styles += "width: " + (180 / $scope.blocks.length) + "%;";
				}
				
				return styles;
			}

	      	var counter = 0;

	      	$scope.verify = function (block) {
	      		counter++;

	      		if (counter === $scope.options.blocks.length) {
	      			$scope.complete = true;
	      		}
	      	}
 		}
 	};
 });
var lizImagesInfo = angular.module('lizImagesInfo', []);

lizImagesInfo.directive('imagesInfo', function () {
	return {
		restrict: 'E',
		templateUrl: '../views/concepts/images_info.html',
		scope: {
			options: "=",
      title: '@',
      description: '@',
			instruction: '@',
			audio:'@'
		},
		link: function (scope, element, attrs) {
      var opt = scope.options,
        completedImages = 0; // Contador

      scope.selectedImage = false;
      scope.images = opt.images;
      scope.isBottom = scope.title || scope.description; // Define donde va la instrucción

      scope.images.forEach(function (image) {
        image.imgExt = image.hasOwnProperty('imgExt') ? image.imgExt : 'png'
      });


      /**
       * Verificamos la imagen. Esta función define el fin de la actividad y selecciona la imagen.
       */
      scope.verify = function (image) {
        scope.selectedImage = image;

        if(image.completed) return;

        image.completed = true;
        completedImages += 1;

        if(completedImages === scope.images.length) {
          scope.$root.isNextEnabled = true;
        }
      };

		}
	};
});

var lizLetter1 = angular.module('lizLetter1', []);

lizLetter1.directive('letter1', function () {
	return {
		restrict: 'E',
		templateUrl: '../views/concepts/letter1.html',
		transclude: true,
		scope: {
			letter: "@"
		},
		link: function (scope) {
			scope.activateNext = function () {
				scope.$root.isNextEnabled = true;
			}
		}
	};
});

var lizMultipleImageMapDescription = angular.module('lizMultipleImageMapDescription', []);

lizMultipleImageMapDescription.directive('multipleImageMapDescription', function () {
    return {
        restrict: 'E',
        scope: {
            options: '=',
            title: '@',
            description: '@',
            audio:'@',
            instruction: '@',
            mainimg: '@',
            alt: '@'
        },
        templateUrl: '../views/concepts/multiple_image_map_description.html',
        link: function (scope, element, attr) {
            scope.maps = scope.options.maps;
            completedItems = 0;

            angular.forEach(scope.maps, function (value, key) {
                value.display = false;
                value.data.multiple = true;
                value.checked = false;
            });
            console.log(scope.maps);
            scope.displayOptions = true;
            scope.backEnabled = false;

            // watch if the activity is finished
            scope.$watch('complete', function(complete) {
                if (complete) {

                    // Activamos la siguiente actividad o ruta
                    scope.$root.isNextEnabled = true;
                }
            });

            scope.goBack = function () {
                angular.forEach(scope.maps, function (value, key) {
                    value.display = false;
                });

                scope.displayOptions = true;
                scope.backEnabled = false;

                if (completedItems === scope.maps.length) {
                    scope.complete = true;
                }
            };

            scope.selectMap = function (map) {
                scope.displayOptions = false;
                map.display = true;
                scope.title = map.title;
                scope.description = map.description;
                scope.audio = map.audio;
                scope.instruction = map.instruction;
                scope.backEnabled = true;

                if (map.checked === false) {
                    completedItems++;
                    map.checked = true;
                }
            };
        }
    };
});

var lizMultiplesImagesAndText = angular.module('lizMultiplesImagesAndText', []);

lizMultiplesImagesAndText.directive('multiplesImagesAndText', function ($sce) {
  return {
    restrict: 'E',
    templateUrl: '../views/concepts/multiples_images_and_text.html',
    scope: {
      options: "=",
      title: '@',
      description: '@',
      audio: '@',
      noafter: '@',
      addicon: '@'
    },

    link: function (scope) {
      // activamos las opciones
      scope.items = scope.options.items;
      scope.items2 = scope.options.items2;
      scope.itemsPerRow = scope.options.itemsPerRow;
      scope.$root.isNextEnabled = true;


      // Para usar el html en angular
      scope.sanitize = function (item) {
        console.log(item);
        return $sce.trustAsHtml(item);
      }

      console.log(scope.options);

    }
  };
});

var lizShowConcepts = angular.module('lizShowConcepts', []);

lizShowConcepts.directive('showConcepts', function () {
  return {
    restrict: 'E',
    scope: {
      options: '=',
      title: '@',
      description: '@',
      audio: '@',
      instruction: '@'
    },
    templateUrl: '../views/concepts/show_concepts.html',
    link: function (scope, element, attrs) {

      var opt = scope.options,
        completedItems = 0;

      scope.items = opt.items;
      scope.selectedItem = false; // elemento seleccionado

      /**
       * Selecciona el elemento indicado
       */
      scope.selectItem = function (item) {

        scope.selectedItem = item; // seleccionamos el objeto

        // Contamos los elementos completos
        if (!item.hasOwnProperty('isCompleted')) {
          item.isCompleted = true; // marcamos el elemento, para no volver a seleccionarlo
          completedItems++;
        }

        // Fin de la actividad
        if (completedItems === scope.items.length) {
          scope.$root.isNextEnabled = true;
        }
      };

      /**
       * Devuelve los estilos personalizados de los items
       */
      scope.getItemStyles = function () {
        var styles = "";

        styles += "width: " + (100 / scope.items.length) + "%;";

        return styles;
      };

    }
  };
});


var lizShowConceptsCharacter = angular.module('lizShowConceptsCharacter', []);

lizShowConceptsCharacter.directive('showConceptsCharacter', function () {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			title: '@',
			description: '@',
			audio:'@',
			instruction: '@',
			alt: '@',
			mainimg: '@'
		},
		templateUrl: '../views/concepts/show_concepts_character.html',
		link: function (scope, element, attrs) {

			var opt = scope.options,
				completedItems = 0;

			scope.videoLink = (opt.videoLink) ? opt.videoLink : false;
			scope.items = opt.items;
			scope.items2 = opt.items2;
			scope.selectedItem = false; // elemento seleccionado

			/**
			 * si no hay elementos que mostrar simplemente se activa el boton adelante
			 */
			if (scope.items.length === 0){
				scope.$root.isNextEnabled = true;
			}

			/**
			 * Selecciona el elemento indicado
			 */
			scope.selectItem = function (item) {

				scope.selectedItem = item; // seleccionamos el objeto

				// Contamos los elementos completos
				if(!item.hasOwnProperty('isCompleted')){
					item.isCompleted = true; // marcamos el elemento, para no volver a seleccionarlo
					completedItems++;
				}

				// Fin de la actividad
				if(completedItems === (scope.items.length + scope.items2.length) ){
					scope.$root.isNextEnabled = true;
				}
			};

			/**
			 * Devuelve los estilos personalizados de los items
			 */
			scope.getItemStyles = function () {
				var styles = "";

				styles += "width: " + (100 / 1) + "%;";

				return styles;
			};

		}
	}; 
});


var lizShowConceptsCharacters = angular.module('lizShowConceptsCharacters', []);

lizShowConceptsCharacters.directive('showConceptsCharacters', function () {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			title: '@',
			description: '@',
			audio:'@',
			instruction: '@',
			alt: '@',
			mainimg: '@'
		},
		templateUrl: '../views/concepts/show_concepts_characters.html',
		link: function (scope, element, attrs) {

			var opt = scope.options,
				completedItems = 0;

			scope.videoLink = (opt.videoLink) ? opt.videoLink : false;
			scope.items = opt.items;
			scope.items2 = opt.items2;
			scope.selectedItem = false; // elemento seleccionado

			/**
			 * si no hay elementos que mostrar simplemente se activa el boton adelante
			 */
			if (scope.items.length === 0){
				scope.$root.isNextEnabled = true;
			}

			/**
			 * Selecciona el elemento indicado
			 */
			scope.selectItem = function (item) {

				scope.selectedItem = item; // seleccionamos el objeto

				// Contamos los elementos completos
				if(!item.hasOwnProperty('isCompleted')){
					item.isCompleted = true; // marcamos el elemento, para no volver a seleccionarlo
					completedItems++;
				}

				// Fin de la actividad
				if(completedItems === (scope.items.length + scope.items2.length) ){
					scope.$root.isNextEnabled = true;
				}
			};

			/**
			 * Devuelve los estilos personalizados de los items
			 */
			scope.getItemStyles = function () {
				var styles = "";

				styles += "width: " + (100 / 1) + "%;";

				return styles;
			};

		}
	}; 
});


var lizShowConceptsGroupExamples = angular.module('lizShowConceptsGroupExamples', []);

lizShowConceptsGroupExamples.directive('showConceptsGroupExamples', function  ($sce) {
    return {
        restrict: 'E',
        templateUrl: '../views/concepts/show_concepts_group_examples.html',
		scope: {
			options: '=',
			description: '@',
			audio:'@',
			addicon: '@'
		},

		link: function (scope, element, attrs) {
			// Corremos la aplicación
			scope.groups = scope.options.groups;
			scope.items = [];
			minRightAnswers = scope.options.minRightAnswers
			rightAnswers = 0, // Contador de preguntas buenas
			chances = scope.options.chances,
			scope.success = false;
			scope.failure = false;
			scope.block = false;
			scope.customClass = (scope.options.hasOwnProperty("customClass")) ? scope.options.customClass : ""; 
			
			// Recorremos todas las grupos y sus items
			      scope.groups.forEach(function (group) {
			        if(group.items){ group.items.forEach(function (item) {
				          // agregamos cada item a el array de items
				          scope.items.push({
								item: item,								      
						  });

				        });
			        };
			      });
			
			
			scope.$root.isNextEnabled = true; // Activamos el siguiente vínculo
			
		// Para usar el html en angular
		scope.sanitize = function (item) {
			return $sce.trustAsHtml(item);
		}

		}

		


    }; 
});


var lizShowConceptsImages = angular.module('lizShowConceptsImages', []);

lizShowConceptsImages.directive('showConceptsImages', [function () {
	return {
		restrict: 'E',
		templateUrl: '../views/concepts/show_concepts_images.html',
		scope: {
			options: '=',
			description: '@',
			audio:'@',
			instruction: '@',
			mainimg: '@',
			mainalt: '@'
		},
		link: function (scope, iElement, iAttrs) {
			var opt = scope.options,
				completedItems = 0;

			scope.items = opt.items;
			console.log(scope.options);
			scope.selectedItem = false; // elemento seleccionado

			/**
			 * Selecciona el elemento indicado
			 */
			 scope.selectItem = function (item) {
			 	scope.selectedItem = item; // seleccionamos el objeto

			 	// Contamos los elementos completos
				if(!item.hasOwnProperty('isCompleted')){
					item.isCompleted = true; // marcamos el elemento, para no volver a seleccionarlo
					completedItems++;
				}

				// Fin de la actividad
				if(completedItems === scope.items.length){
					scope.$root.isNextEnabled = true;
				}
			 }
		}
	};
}])
;var lizShowConceptsImg = angular.module('lizShowConceptsImg', []);

lizShowConceptsImg.directive('showConceptsImg', [function () {
	return {
		restrict: 'E',
		templateUrl: '../views/concepts/show_concepts_img.html',
		scope: {
			options: '=',
			description: '@',
			audio:'@',
			instruction: '@',
			mainimg: '@',
			mainalt: '@',
			img:'@',
			alt: '@'
		},
		link: function (scope, iElement, iAttrs) {
			var opt = scope.options,
				completedItems = 0;

			scope.items = opt.items;
			console.log(scope.options);
			scope.selectedItem = false; // elemento seleccionado

			/**
			 * Selecciona el elemento indicado
			 */
			 scope.selectItem = function (item) {
			 	scope.selectedItem = item; // seleccionamos el objeto

			 	// Contamos los elementos completos
				if(!item.hasOwnProperty('isCompleted')){
					item.isCompleted = true; // marcamos el elemento, para no volver a seleccionarlo
					completedItems++;
				}

				// Fin de la actividad
				if(completedItems === scope.items.length){
					scope.$root.isNextEnabled = true;
				}
			 }
		}
	};
}])
;var lizShowConceptsText = angular.module('lizShowConceptsText', []);

lizShowConceptsText.directive('showConceptsText', function ($sce) {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			titletop: '@',
			titleimg: '@',
			description: '@',
			audio:'@',
			instruction: '@',
			noplay: '@',
			mainimg: '@',
			imgpre: '@',
			imgpreAlt: '@',
			alt:'@',
			itemsperrow: '@'
		},
		templateUrl: '../views/concepts/show_concepts_text.html',
		link: function (scope, element, attrs) {

			var opt = scope.options,
				completedItems = 0;

			scope.items = opt.items;
			scope.examples = opt.items.examples;
			scope.selectedItem = false; // elemento seleccionado
			scope.imgStyle = opt.imgStyle ? opt.imgStyle : '';
			scope.hasImageItems = scope.options.hasImageItems; // si los items son solo imagenes
			scope.itemsperrow2 = scope.itemsperrow ? scope.itemsperrow : 1;

			console.log(scope.itemsperrow);

			// Para usar el html en angular
			scope.sanitize = function (item) {
				return $sce.trustAsHtml(item);
			}

			/**
			 * Selecciona el elemento indicado
			 */
			scope.selectItem = function (item) {

				scope.selectedItem = item; // seleccionamos el objeto

				// Contamos los elementos completos
				if(!item.hasOwnProperty('isCompleted')){
					item.isCompleted = true; // marcamos el elemento, para no volver a seleccionarlo
					completedItems++;
				}

				// Fin de la actividad
				if(completedItems === scope.items.length){
					scope.$root.isNextEnabled = true;
				}
			};

			/**
			 * Devuelve los estilos personalizados de los items
			 */
			scope.getItemStyles = function (item) {
				var styles = "";


				if(item.hasOwnProperty('title') || scope.mainimg === undefined){


					styles += "width: " + (100 /scope.itemsperrow2) + "%;";
				}

				return styles;	
			};

			/**
			 * Devuelve los estilos personalizados de los items
			 */
			scope.getItemStyles2 = function () {
				var styles = scope.imgStyle;

				return styles;
			};

		}
	}; 
});


var lizShowdescription = angular.module('lizShowdescription', []);

lizShowdescription.directive('showDescription', function () {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			title: '@',
			description: '@'
		},
		templateUrl: '../views/concepts/show_description.html',
		link: function (scope, element, attrs) {

			var opt = scope.options,
				completedItems = 0; // Contador usado para definir el fin de la actividad

			scope.canvas = opt.canvas;
			scope.audio = opt.audio;
			scope.instruction = opt.instruction;
			scope.alt = opt.alt;
			scope.items = opt.items;
			scope.selectedItem = false; // Elemento actual

			/**
			 * Selecciona el elemento indicado
			 */
			scope.selectItem = function (item) {

				scope.selectedItem = item;

				// Contamos los elementos completos
				if(!item.hasOwnProperty('isCompleted')){
					item.isCompleted = true; // marcamos el elemento, para no volver a seleccionarlo
					completedItems++;
				}

				// Fin de la actividad
				if(completedItems === scope.items.length){
					scope.$root.isNextEnabled = true;
				}

			};

			/**
			 * Devuelve los estilos del item-title
			 */
			scope.getItemTitleStyles = function (item) {
				return "width: " + item.position.w + "em;" +
					"top: " + item.position.t + "em;" +
					"left: " + item.position.l + "em;"; 
			};
			

		}
	}; 
});

var lizShowDescriptionImagesSound = angular.module('lizShowDescriptionImagesSound', []);

lizShowDescriptionImagesSound.directive('showDescriptionImagesSound', [function () {
	return {
		restrict: 'E',
		templateUrl: '../views/concepts/show_description_images_sound.html',
		scope: {
			options: '=',
			description: '@',
			audio:'@',
			instruction: '@',
			mainimg: '@',
			mainalt: '@'
		},
		link: function (scope, iElement, iAttrs) {
			var opt = scope.options,
				completedItems = 0;

			scope.items = opt.items;
			console.log(scope.options);
			scope.selectedItem = false; // elemento seleccionado

			/**
			 * Selecciona el elemento indicado
			 */
			 scope.selectItem = function (item) {
			 	scope.selectedItem = item; // seleccionamos el objeto

			 	// Contamos los elementos completos
				if(!item.hasOwnProperty('isCompleted')){
					item.isCompleted = true; // marcamos el elemento, para no volver a seleccionarlo
					completedItems++;
				}

				// Fin de la actividad
				if(completedItems === scope.items.length){
					scope.$root.isNextEnabled = true;
				}
			 }
		}
	};
}])
;var lizShowHoverWords = angular.module('lizShowHoverWords', []);

lizShowHoverWords.directive('showHoverWords', function () {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			title: '@',
			description: '@',
			audio:'@',
			instruction: '@'
		},
		templateUrl: '../views/concepts/show_hover_words.html',
		link: function (scope, iElement, iAttrs) {
			scope.items = scope.options.items;
			scope.$root.isNextEnabled = true;

			angular.forEach(scope.items, function (value, key) {
				var	words = value.text.split(" "),
					mainWords = value.mainWord.toLowerCase().split(" ");
				value.words = [];

				if (mainWords.length > 1) {
					for (var i = 0; i < words.length; i++) {
						if (mainWords.indexOf(words[i].toLowerCase()) > -1) {
							value.words.push({
								main: true,
								title: value.mainTitle,
								word: words[i]
							});
						} else {
							value.words.push({
								main: false,
								title: "",
								word: words[i]
							});
						}
					}
				} else {
					for (var i = 0; i < words.length; i++) {
						if (words[i].toLowerCase() === value.mainWord.toLowerCase()) {
							value.words.push({
								main: true,
								title: value.mainTitle,
								word: words[i]
							});
						} else {
							value.words.push({
								main: false,
								title: "",
								word: words[i]
							});
						}
					}
				}
			});

			/**
		      * Devuelve los estilos del texto.
		      */
	      	scope.getTextStyles = function () {
	      		
	        	var styles = "";

	        	if(! scope.items[0].resource) {
        		  styles = "margin-left: 0; width: 100%;";
	        	}

	        	return styles;
	      	};

	      	scope.onWordReady = function () {
      			$("[data-toggle='tooltip']").tooltip();
	      	};	
		}
	};
});
var lizShowImagesBlockDescription = angular.module('lizShowImagesBlockDescription', []);

lizShowImagesBlockDescription.directive('showImagesBlockDescription', [function () {
	return {
		restrict: 'E',
		templateUrl: '../views/concepts/show_images_block_description.html',
		scope: {
			options: '=',
			description: '@',
			audio:'@',
			title: '@',
			instruction: '@',
		},
		link: function (scope,iElement,iAttrs,$sce) {
			var opt = scope.options,
				completedBlocks = 0;

			scope.blocks = opt.blocks;
			scope.selectedBlock = false; // elemento seleccionado

			// Para usar el html en angular
			scope.sanitize = function (item) {
				return $sce.trustAsHtml(item);
			}

			/**
			 * Selecciona el elemento indicado
			 */
			 scope.selectBlock = function (block) {
			 	console.log(block);
			 	scope.selectedBlock = block; // seleccionamos el objeto

			 	// Contamos los elementos completos
				if(!block.hasOwnProperty('isCompleted')){
					block.isCompleted = true; // marcamos el elemento, para no volver a seleccionarlo
					completedBlocks++;
				}

				// Fin de la actividad
				if(completedBlocks === scope.blocks.length){
					scope.$root.isNextEnabled = true;
				}
			 }
		}
	};
}])
;/**
 * Created by mateoquintero on 5/19/14.
 */
var lizShowMultipleHoverPhrase = angular.module('lizShowMultipleHoverPhrase', []);

lizShowMultipleHoverPhrase.directive('showMultipleHoverPhrase', function ($sce, $log) {
    return {
        restrict: 'E',
        scope: {
            options: '=',
            title: '@',
            description: '@',
            audio:'@',
            instruction: '@'
        },
        templateUrl: '../views/concepts/show_multiple_hover_phrase.html',
        link: function (scope, iElement, iAttrs) {
            $log.log(scope);
            scope.$root.isNextEnabled = true;

            // Permite el uso de html
            scope.sanitize = function (phrase) {
                return $sce.trustAsHtml(phrase);
            };
        }
    };
});
/**
 * Created by mateoquintero on 5/19/14.
 */
var lizShowMultipleHoverPhrases = angular.module('lizShowMultipleHoverPhrases', []);

lizShowMultipleHoverPhrases.directive('showMultipleHoverPhrases', function ($sce, $log) {
    return {
        restrict: 'E',
        scope: {
            options: '=',
            title: '@',
            description: '@',
            audio:'@',
            instruction: '@'
        },
        templateUrl: '../views/concepts/show_multiple_hover_phrases.html',
        link: function (scope, iElement, iAttrs) {
            $log.log(scope);
            scope.$root.isNextEnabled = true;

            // Permite el uso de html
            scope.sanitize = function (phrase) {
                return $sce.trustAsHtml(phrase);
            };
        }
    };
});
var lizShowName = angular.module('lizShowName', []);

lizShowName.directive('showName', function ($sce) {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			title: '@',
			description: '@',
			audio:'@',
			instruction: '@',
			mainimg: '@'
		},
		templateUrl: '../views/concepts/show_name.html',
		link: function (scope, element, attrs) {

			var opt = scope.options,
				completedItems = 0;

			scope.items = opt.items;
			scope.selectedItem = false; // elemento seleccionado
			scope.itemsPerRow = opt.itemsPerRow ? opt.itemsPerRow : false;

			/**
			 * Selecciona el elemento indicado
			 */
			scope.selectItem = function (item) {

				scope.selectedItem = item; // seleccionamos el objeto

				// Contamos los elementos completos
				if(!item.hasOwnProperty('isCompleted')){
					item.isCompleted = true; // marcamos el elemento, para no volver a seleccionarlo
					completedItems++;
				}

				// Fin de la actividad
				if(completedItems === scope.items.length){
					scope.$root.isNextEnabled = true;
				}
			};

			// Para usar el html en angular
			scope.sanitize = function (item) {
				return $sce.trustAsHtml(item);
			}

			/**
			 * Devuelve los estilos personalizados de los items
			 */
			scope.getItemStyles = function () {
				var styles = "";

				if(scope.itemsPerRow){
					styles += "width: " + (97 / scope.itemsPerRow) + "%;";
				}else{
				styles += "width: " + (100 / (scope.items/2)) + "%;";
				};

				return styles;
			};

		}
	}; 
});


var lizShowParts = angular.module('lizShowParts', []);

lizShowParts.directive('showParts', function () {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			title: '@',
			description: '@'
		},
		templateUrl: '../views/concepts/show_parts.html',
		link: function (scope, element, attrs) {

			var opt = scope.options,
				completedItems = 0; // Contador usado para definir el fin de la actividad

			scope.canvas = opt.canvas;
			scope.alt = opt.alt;
			scope.items = opt.items;
			scope.selectedItem = false; // Elemento actual

			/**
			 * Selecciona el elemento indicado
			 */
			scope.selectItem = function (item) {

				scope.selectedItem = item;

				// Contamos los elementos completos
				if(!item.hasOwnProperty('isCompleted')){
					item.isCompleted = true; // marcamos el elemento, para no volver a seleccionarlo
					completedItems++;
				}

				// Fin de la actividad
				if(completedItems === scope.items.length){
					scope.$root.isNextEnabled = true;
				}

			};

			/**
			 * Devuelve los estilos del item-title
			 */
			scope.getItemTitleStyles = function (item) {
				return "width: " + item.position.w + "em;" +
					"top: " + item.position.t + "em;" +
					"left: " + item.position.l + "em;"; 
			};
			

		}
	}; 
});

var lizShowTextCharacter = angular.module('lizShowTextCharacter', []);

lizShowTextCharacter.directive('showTextCharacter', function () {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			title: '@',
			description: '@',
			audio:'@',
			instruction: '@',
			alt: '@',
			mainimg: '@'
		},
		templateUrl: '../views/concepts/show_text_character.html',
		link: function (scope, element, attrs) {

			var opt = scope.options,
				completedItems = 0;
				
			scope.items = opt.items;
			scope.itemsPerRow = opt.itemsPerRow ? opt.itemsPerRow : 1;
			scope.imgStyle = opt.imgStyle ? opt.imgStyle : false;
			scope.selectedItem = false; // elemento seleccionado
			scope.itemsStyle = opt.itemsStyle

			console.log(scope.itemsPerRow);

			/**
			 * si no hay elementos que mostrar simplemente se activa el boton adelante
			 */
			if (scope.items.length === 0){
				scope.$root.isNextEnabled = true;
			}

			/**
			 * si no hay elementos que escuchar simplemente se activa el boton adelante
			 */
			if(!scope.items.src){
				scope.$root.isNextEnabled = true;
			}
			/**
			 * Selecciona el elemento indicado
			 */
			scope.selectItem = function (item) {

				scope.selectedItem = item; // seleccionamos el objeto

				// Contamos los elementos completos
				if(!item.hasOwnProperty('isCompleted')){
					item.isCompleted = true; // marcamos el elemento, para no volver a seleccionarlo
					completedItems++;
				}

				// Fin de la actividad
				if(completedItems === (scope.items.length + scope.items2.length) ){
					scope.$root.isNextEnabled = true;
				}
			};

			/**
			 * Devuelve los estilos personalizados de los items
			 */
			scope.getItemStyles = function () {
				var styles = "";

				styles += "width: " + (100 / scope.itemsPerRow) + "%;";

				return styles;
			};

		}
	}; 
});


var lizSlideShowCharacter = angular.module('lizSlideShowCharacter', []);

lizSlideShowCharacter.directive('slideShowCharacter', function () {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			title: '@',
			description: '@',
			audio:'@',
			instruction: '@',
			mainimg: '@'
		},
		templateUrl: '../views/concepts/slideshow_character.html',
		link: function (scope, element, attrs) {
			var opt = scope.options;

			scope.items = opt.items;
			scope.ext = opt.ext ? opt.ext : '.png';
			scope.customClass = opt.customClass;

			/**
			 * Devuelve los estilos personalizados de los items
			 */
			scope.getItemStyles = function () {
				var styles = "";

				styles += "width: " + (100 / 1) + "%;";

				return styles;
			};

		}
	}; 
});

lizSlideShowCharacter.directive('slides', function($timeout){
	return {
	    restrict: 'A',
			scope: {
				items: '='
			},
	    link : function (scope, element, attrs) {
				$timeout(function(){
					$(element).slidesjs({
						width: 500,
						height: 550,
						navigation: {
							active: true,
							// [boolean] Generates next and previous buttons.
							// You can set to false and use your own buttons.
							// User defined buttons must have the following:
							// previous button: class="slidesjs-previous slidesjs-navigation"
							// next button: class="slidesjs-next slidesjs-navigation"
							effect: "slide"
							// [string] Can be either "slide" or "fade".
						},
						pagination: {
							active: false,
							// [boolean] Create pagination items.
							// You cannot use your own pagination. Sorry.
						},
						callback: {
							complete: function (number) {
								// Activa el siguiente cuando llega a la última diapositiva
								if(number === scope.items.length) {
									scope.$root.isNextEnabled = true;
									scope.$apply();
								}
							}
						}
					});
				});
    	}
	};
});

var lizTable = angular.module('lizTable', []);

lizTable.directive('tableConcept', function () {
	return {
		restrict: 'E',
		templateUrl: '../views/concepts/table.html',
		scope: {
			options: "=",
			title: '@',
			audio: '@',
			instruction: '@',
			description: '@',
			buttonText: '@'
		},
		link: function (scope) {

			var opt = scope.options;

			// Si la descripción o el título están, entonces la instrucción va al fondo
			scope.isBottom = scope.title || scope.description;

			scope.head = opt.head;
			scope.body = opt.body;
			scope.buttonText = scope.buttonText;

			scope.$root.isNextEnabled = true;

		}
	};
});

var lizText1 = angular.module('lizText1', []);

lizText1.directive('text1', function ($sce) {
	return {
		restrict: 'E',
		templateUrl: '../views/concepts/text1.html',
		scope: {
			descriptionTop: '@',
			title: '@',
			description: '@',
			audio:'@',
			img: '@',
			titletop: '@',
			titlemain:'@',
			imgTitle: '@',
			alt: '@',
			click:'@',
			block: "@",
			float: '@'
		},

		link: function (scope) {
			scope.$root.isNextEnabled = true;

		// Para usar el html en angular
		scope.sanitize = function (item) {
			return $sce.trustAsHtml(item);
		}

		}
	};
});

var lizTransclusion = angular.module('lizTransclusion', []);

lizTransclusion.directive('transclusion', function ($sce) {
	return {
		restrict: 'E',
		templateUrl: '../views/concepts/transclusion.html',
		transclude: true,
		scope: {
			title: '@',
			description: '@',
			instruction: '@',
			audio: '@',
			arrow: '=',
			addicon: '@',
      		mouse: '='
		},

		link: function (scope) {

			// Para usar el html en angular
			scope.sanitize = function (item) {
				return $sce.trustAsHtml(item);
			}

		}
	};
});

var lizTransclusions = angular.module('lizTransclusions', []);

lizTransclusions.directive('transclusions', function () {
	return {
		restrict: 'E',
		templateUrl: '../views/concepts/transclusions.html',
		transclude: true,
		scope: {
			title: '@',
			description: '@',
			instruction: '@',
			audio: '@',
			arrow: '=',
			addicon: '@',
      		mouse: '='
		}
	};
   
});

var lizTwoFramesDescription = angular.module('lizTwoFramesDescription', []);

lizTwoFramesDescription.directive('twoFramesDescription', function ($timeout) {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			title: '@',
			description: '@',
			audio:'@',
			instruction: '@'
		},
		templateUrl: '../views/concepts/two_frames_description.html',
		link: function (scope, element, attrs) {
			var opt = scope.options,
				completedItems = 0;

			scope.items = opt.items;
			scope.selectedItem = false; // elemento seleccionado

			/**
			 * Selecciona el elemento indicado
			 */
			scope.selectItem = function (item) {
				scope.selectedItem = item; // seleccionamos el objeto

				// Contamos los elementos completos
				if(!item.hasOwnProperty('isCompleted')){
					item.isCompleted = true; // marcamos el elemento, para no volver a seleccionarlo
					completedItems++;
				}

				// Fin de la actividad
				if(completedItems === scope.items.length){
					scope.$root.isNextEnabled = true;
				}

				// Captura el alto de text-block
				$timeout(function(){
					var $textBlock = element.find('.text-box'),
						$mainImg = element.find('.main-img-inner');

					$mainImg.height( $textBlock.height() - ( parseInt($mainImg.css('border-width')) * 2 ) );
				}, 100);
			};


		}
	}; 
});


var lizWatch = angular.module('lizWatch', []);

lizWatch.directive('watch', function () {
	return {
		restrict: 'E',
		templateUrl: '../views/concepts/watch.html',
		scope: {
			options: "=",
			title: '@',
			description: '@',
			instruction: '@',
			audio:'@'
		},
		link: function (scope, element, attrs) {
			scope.items = scope.options; // Elementos a mostrar
			scope.$root.isNextEnabled = true; // Activamos el botón de siguiente
		}
	};
});

var lizZoom = angular.module('lizZoom', []);

lizZoom.directive('zoom', function  () {
	return {
		restrict: 'E',
		scope: {
			options: '=',
			title: '@',
			instruction: '@',
			audio: '@',
			img: '@',
			bigImg: '@',
			alt: '@',
			description: '@'
		},
		templateUrl: '../views/concepts/zoom.html',
		link: function postLink(scope, element, attrs) {
			var opt = scope.options;

							
			// Si la descripción o el título están, entonces la instrucción va al fondo
			scope.isBottom = scope.title || scope.description;

			scope.mainimgstyles = opt.mainimgstyles;
			scope.items = opt.items;
			
			scope.showBig = false;

			/**
			 * Cierra el zoom y completa la actividad
			 */
			scope.complete = function () {
				scope.showBig = false;
				scope.$root.isNextEnabled = true;
			};
			
		}
	}; 
});

var directives = angular.module('directives', []);


// ======================================================================================
// Bases para la aplicación
// ======================================================================================

// Directiva de felicitaciones
directives.directive('congratulations', function () {
	return {
		restrict: 'A',
		templateUrl: '../views/common/congratulations.html'
	};
});

// Directiva de vuelve a intentarlo
directives.directive('failure', function () {
	return {
		restrict: 'A',
		templateUrl: '../views/common/failure.html',
		controller: function ($scope, $route) {
			$scope.refresh = function () {
				$route.reload();
			}
		}
	};
});

// Competencias
directives.directive('competences', function () {
	return {
		restrict: 'E',
		scope: {
			description1: '@',
			description2: '@'
		},
		templateUrl: '../views/common/competences.html',
		link: function (scope, element, attrs) {
			scope.$root.isNextEnabled = true;
		}
	};
});

// Show Tooltip
directives.directive('showTooltip', function () {
	return {
		restrict: 'C',
		link: function (scope, iElement, iAttrs) {
			$(iElement).tooltip({
				title: scope.word.title
			});
		}
	};
});

// Show Tooltip Attribute
directives.directive('showTooltip', function () {
	return {
		restrict: 'A',
		link: function (scope, iElement, iAttrs) {
			var title = scope.$parent.group.titles[scope.$index];
			$(iElement).tooltip({
				title: title,
				placement: "bottom"
			});
		}
	};
});

// Image zoom
directives.directive('ngElevateZoom', function () {
	return {
		restrict: 'A',
		link: function (scope, iElement, iAttrs) {
			//Will watch for changes on the attribute
		    iAttrs.$observe('zoomImage',function(){
		    	linkElevateZoom();
		    });
		      
		    function linkElevateZoom(){
		    	//Check if its not empty
		        if (!iAttrs.zoomImage) return;
		        iElement.attr('data-zoom-image',iAttrs.zoomImage);
		        $(iElement).elevateZoom();
		    }
		      
		    linkElevateZoom();
		}
	};
});

// Image popup
directives.directive('ngImagePopup', function () {
	return {
		restrict: 'A',
		link: function (scope, iElement, iAttrs) {
			console.log(arguments);
			$(iElement).magnificPopup({
				items: {
					src: scope.$root.resources + "/" + scope.modalSrc
				},
				type: "image"
			});
		}
	};
});


// ======================================================================================
// Útiles
// ======================================================================================

// Reproduce un sonido en el evento definido en la directiva. Ejm: hover => mouseenter
directives.directive('play', function () {
	return function (scope, element, attrs) {
		element.bind(attrs.on, function () {
			var sound = $('#' + attrs.play)[0];

			sound.load();
			sound.play();
		});
	}
});

// Crea un pequeño fade in del elemento cuando se cambia el valor del modelo
directives.directive('flash', function () {
	return {
		restrict: 'A',
		scope: {
			flash: '=flash'
		},
		link: function (scope, element, attrs) {
			scope.$watch('flash', function (flash) {
				if(flash){
					$(element).stop().hide().text(flash).fadeIn(function() {
						clearTimeout($(element).data("timeout"));
						$(element).data("timeout", setTimeout(function() {
							$(element).fadeOut();
						}, 1000));
					});
				}
			});
		}
	};
});


var appManager = AppManager();
var esp201 = angular.module('esp201', ['activities']);

appManager.configModule(esp201, {
	resources: '../resources/02/esp/01',
	farewell: '¡Muy bien!, ahora ya sabes que es una descripción.',
	evidencesSound:true,
	evidences: 'Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, actividad de evidencia, guía 1, lección 1; descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.',
	competencesSound:true,
	competences1:'Produzco textos orales que responden a distintos propósitos  comunicativos.',
	competences2:'Hace descripciones de personas, animales, objetos y situaciones y las comparte con sus compañeros.',
	routes:[ 
		{ 
			name: '/conceptualizacion-1', 
			templateUrl: 'con1', 
			controller: 'Con1Ctrl',
			title:"Lección 1: La descripción"
		},
		{ 
			name: '/conceptualizacion-2', 
			templateUrl: 'con2', 
			controller: 'Con2Ctrl',
			title: 'Descripción física'
		},
		/*{ groups: false },*/
		{ 
			name: '/actividad-1', 
			templateUrl: 'act1', 
			controller: 'Act1Ctrl',
			title:"Actividad 1 | Lección 1"
		},
		{ 
			name: '/actividad-2-1', 
			templateUrl: 'act2-1', 
			controller: 'Act2-1Ctrl',
			title:"Actividad 2 - 1 | Lección 1"
		},
		{ 
			name: '/actividad-2-2', 
			templateUrl: 'act2-2', 
			controller: 'Act2-2Ctrl',
			title:"Actividad 2 - 2 | Lección 1"
		},
		{ 
			name: '/actividad-2-3', 
			templateUrl: 'act2-3', 
			controller: 'Act2-3Ctrl',
			title:"Actividad 2 - 3 | Lección 1"
		},
		{ 
			name: '/actividad-3-1', 
			templateUrl: 'act3-1', 
			controller: 'Act3-1Ctrl',
			title:"Actividad 3 - 1 | Lección 1"
		},
		{ 
			name: '/actividad-3-2', 
			templateUrl: 'act3-2', 
			controller: 'Act3-2Ctrl',
			title:"Actividad 3 - 2 | Lección 1"
		},
		{ 
			name: '/actividad-3-3', 
			templateUrl: 'act3-3', 
			controller: 'Act3-3Ctrl',
			title:"Actividad 3 - 3 | Lección 1"
		},
		{ 
			name: '/actividad-4-1', 
			templateUrl: 'act4-1', 
			controller: 'Act4-1Ctrl',
			title:"Actividad 4 - 1 | Lección 1"
		},
		{ 
			name: '/actividad-4-2', 
			templateUrl: 'act4-2', 
			controller: 'Act4-2Ctrl',
			title: 'Actividad 4 - 2 | Lección 1'
		},
		{ 
			name: '/actividad-5-1', 
			templateUrl: 'act5-1', 
			controller: 'Act5-1Ctrl',
			title:"Actividad 5 - 1 | Lección 1"
		},
		{ 
			name: '/actividad-5-2', 
			templateUrl: 'act5-2', 
			controller: 'Act5-2Ctrl',
			title:"Actividad 5 - 2 | Lección 1"
		},
		{ 
			name: '/actividad-5-3', 
			templateUrl: 'act5-3', 
			controller: 'Act5-3Ctrl',
			title:"Actividad 5 - 3 | Lección 1"
		},
		{ 
			name: '/actividad-6', 
			templateUrl: 'act6', 
			controller: 'Act6Ctrl',
			title:"Actividad 6 | Lección 1"
		}
	]
});

esp201.controller('Con1Ctrl', function($scope){
	$scope.data = {
		canvas: 'nina-descripcion',
		alt: 'Una niña en el centro de un círculo y en los rayos que salen del Círculo principal hay otros círculos numerados del 1 al 8, Cada círculo hace referencia a algunas características de la niña. La niña tiene su cabello de color café claro, sus ojos son de color azul y tiene gafas. Viste una camiseta de color verde y una falda de color rosado y esta abrazando un oso de peluche.',
		instruction:'Haz clic sobre cada número y descubre las características del personaje.',
		audio:'C1',
		items: [
			{
				title: '1',
				resource: "esunanina",
				text: 'Es una niña',
				position: { w: 0, t: -5.5, l: 12 } // Ems
			},
			{
				title: '2',
				resource: "tieneojosoazules",
				text: 'Tiene ojos azules',
				position: { w: 0, t: -3, l: 18.4 } // Ems
			},
			{
				title: '3',
				resource: "sucabelloescafe",
				text: 'Su cabello es café',
				position: { w: 0, t: 4, l: 22 } // Ems
			},
			{
				title: '4',
				resource: "tieneunacamisetaverde",
				text: 'Tiene una camiseta verde',
				position: { w: 0, t: 11, l: 18.4 } // Ems
			},
			{
				title: '5',
				resource: "tieneunafaldarosada",
				text: 'Tiene una falda rosada',
				position: { w: 0, t: 13.2, l: 12 } // Ems
			},
			{
				title: '6',
				resource: "tienezapatoscafes",
				text: 'Tiene zapatos cafés',
				position: { w: 0, t: 11, l: 5 } // Ems
			},
			{
				title: '7',
				resource: "tienegafas",
				text: 'Tiene gafas',
				position: { w: 0, t: 4, l: 2 } // Ems
			},
			{
				title: '8',
				resource: "arazaunpeluche",
				text: 'Abraza un peluche',
				position: { w: 0, t: -3, l: 5 } // Ems
			}
		]
	};
});

esp201.controller('Con2Ctrl', function($scope){
	$scope.data = [
		{
			resource: 'personas',
			text: '<strong>Personas</strong>',
			alt:'Niño con cabello rubio, tiene camisa verde y pantalón azul, sus ojos son de color azul.'
		},
		{
			resource: 'animales',
			text: '<strong>Animales</strong>',
			alt:'Gato que tiene pelo de color blanco, café claro y café oscuro, sus ojos son redondos y de color oscuro, tiene cuatro patas, dos orejas alargadas y un collar con un cascabel.'
		},
		{
			resource: 'objetos',
			text: '<strong>Objetos</strong>',
			alt:'Es una nevera alta y de color blanco, tiene dos puertas y sirve para guardar los alimentos.'
		},
		{
			resource: 'situaciones',
			text: '<strong>Situaciones</strong>',
			alt:'Grupo de seis niños que están de paseo en el campo, se ven contentos.'
		}
	];
});

esp201.controller('Act1Ctrl', function($scope){
	$scope.data = [
		{
			resource: 'pedro',
			correctAnswer:'Pedro',
			text: 'señor adulto con poco pelo y pensativo.',
			alt:'Niño con cabello rubio, tiene camisa verde y pantalón azul, sus ojos son de color azul.'
		},
		{
			resource: 'ana',
			correctAnswer:'Ana',
			text: 'señora adulta con el pelo recogido y gafas.',
			alt:'Gato que tiene pelo de color blanco, café claro y café oscuro, sus ojos son redondos y de color oscuro, tiene cuatro patas, dos orejas alargadas y un collar con un cascabel.'
		},
		{
			resource: 'manuela',
			correctAnswer:'Manuela',
			text: 'niña con pelo café, lentes y dos colitas.',
			alt:'Es una nevera alta y de color blanco, tiene dos puertas y sirve para guardar los alimentos.'
		},
		{
			resource: 'camilo',
			correctAnswer:'Camilo',
			text: 'señor con pelo rubio y sonriente.',
			alt:'Grupo de seis niños que están de paseo en el campo, se ven contentos.'
		},

		{
			resource: 'juan',
			correctAnswer:'Juan',
			text: 'niño con pelo parado y una gran sonrisa.',
			alt:'Grupo de seis niños que están de paseo en el campo, se ven contentos.'
		}
	];
		$scope.options = {
		data: $scope.data,
		randomItems: true,
		chancesPerItem:2,
		minRightAnswers: 3
		
	};
});

esp201.controller('Act2-1Ctrl', function($scope){
	$scope.items = [
		{
			name: "Gallo",
			pattern: [2, 5, 14 ,18],
			resource: "gallo",
			alt: "Gallo que tiene muchas plumas de color café y un pico, su cola es negro y su cresta roja.",
			title:"Cockerels [Fotografía]. (2008). Obtenido de: http://www.sxc.hu/photo/1008596",
			text:"Es un gallo tiene muchas plumas y un pico, su cola es de color negra y su cresta roja"
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 8,
		minRightAnswers: 3,
		itemsPerRow : 3
	};
});

esp201.controller('Act2-2Ctrl', function($scope){
	$scope.items = [
		{
			name: "Conejo",
			pattern: [4, 9, 19],
			resource: "conejo",
			alt: "Un conejo tiene dos orejas muy grandes, su pelaje es de dos colores: café y blanco.",
			title:"Turner C. (2005). Mini lop bunny [Fotografía]. Obtenido de: http://www.sxc.hu/photo/324800",
			text:"Este animal es un conejo tiene dos orejas muy grandes , su pelaje es de dos colores: café y blanco"
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 6,
		minRightAnswers: 2,
		itemsPerRow : 3
	};
});

esp201.controller('Act2-3Ctrl', function($scope){
	$scope.items = [
		{
			name: "Vaca",
			pattern: [2, 7 ,10 ,14],
			resource: "vaca",
			answer2: '4',
			alt: "Es una vaca de colores blanco y negro, tiene cuatro patas y una cola larga.",
			title:"Cow and sheep [Fotografía]. (2006). Obtenido de: http://www.sxc.hu/browse.phtml?f=download&id=526626",
			text:"Es una vaca de colores blanco y negro , tiene cuatro patas y una cola larga."
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 8,
		minRightAnswers: 3,
		itemsPerRow : 3
	};
});

esp201.controller('Act3-1Ctrl', function($scope){
	$scope.items = [
		{
			name: "pelota",
			pattern: [14],
			resource: "pelota",
			alt: "Pelota de color azul ",
			title:"Pelota",
			text:"1. Tiene forma redonda, hay de muchos tamaños y colores, si la sueltas rebota. pelota"
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 2,
		minRightAnswers: 1,
		itemsPerRow : 3
	};
});

esp201.controller('Act3-2Ctrl', function($scope){
	$scope.items = [
		{
			name: "elefante",
			pattern: [15],
			resource: "elefante",
			alt: "Elefante",
			title:"Elefante",
			text:"2. Es grande y de color gris, tiene dos orejas enormes y una trompa larga. elefante"
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 2,
		minRightAnswers: 1,
		itemsPerRow : 3
	};
});

esp201.controller('Act3-3Ctrl', function($scope){
	$scope.items = [
		{
			name: "lapicero",
			pattern: [17],
			resource: "lapicero",
			alt: "Lapicero de color negro",
			title:"Lapicero",
			text:"3. Es un objeto pequeño y alargado, hay de varios colores y tiene tinta en su interior. lapicero"
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 2,
		minRightAnswers: 1,
		itemsPerRow : 3
	};
});

esp201.controller('Act4-1Ctrl', function($scope){
	$scope.items = [
		{
			name: "1",
			pattern: [11],
			alt: "Es una vaca de colores blanco y negro, tiene cuatro patas y una cola larga.",
			title:"Cow and sheep [Fotografía]. (2006). Obtenido de: http://www.sxc.hu/browse.phtml?f=download&id=526626",
			text:"Para ir a  este lugar debemos usar vestido de baño. piscina"
		},
		{
			name: "2",
			pattern: [7],
			alt: "circo",
			title:"circo",
			text:"Lugar donde hay payasos, malabaristas y magos. circo"
		},
		{
			name: "3",
			pattern: [11],
			alt: "Tienda",
			title:"Tienda",
			text:"Lugar donde venden muchos productos como huevos, leche y arepas.  tienda"
		},
		{
			name: "4",
			pattern: [13],
			alt: "Parque",
			title:"Parque",
			text:"Es un lugar grande con muchos árboles, tiene pasto y bancas para sentarse. parque"
		},
		{
			name: "5",
			pattern: [11],
			alt: "Cine",
			title:"Cine",
			text:"Es un lugar oscuro, tiene muchas sillas y una pantalla gigante. cine"
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 5,
		minRightAnswers: 3,
		itemsPerRow : 3
	};
});

esp201.controller('Act4-2Ctrl', function ($scope) {
	$scope.data = {
		chances: 10,
		minRightAnswers: 3,
		table: [
			'p o m d f p t'.split(" "),
			'i c i r c o i'.split(" "),
			's i n c a s e'.split(" "),
			'c n b p h o n'.split(" "),
			'i e d v g r d'.split(" "),
			'n a s l f l a'.split(" "),
			'a c t s d u i'.split(" "),
			'p a r q u e c'.split(" ")
			
		],
		wordGroups: [
			{
				title: 'Verticales',
				items: [
					{
						front: "piscina",
						back: "piscina"
					},
					{
						front: "cine",
						back: "cine"
					},
					{
						front: "tienda",
						back: "tienda"
					}
				]
			},
			{
				title: 'Horizontales',
				items: [
					{
						front: "parque",
						back: "parque"
					},
					{
						front: "circo",
						back: "circo"
					}
				]
			}
		]
	};
});

esp201.controller('Act5-1Ctrl', function($scope){
	$scope.items = [
		{
			name: "niña",
			pattern: [17],
			resource: "nina",
			alt: "Niña de pelo y ojos color café, chaqueta verde, camiseta roja, falda azul y tenis de color verde.",
			title:"Niña",
			text:"niña de pelo y ojos color café, chaqueta verde, camiseta roja, falda azul y tenis de color verde."
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 2,
		minRightAnswers: 1,
		itemsPerRow : 3
	};
});

esp201.controller('Act5-2Ctrl', function($scope){
	$scope.items = [
		{
			name: "paisaje",
			pattern: [17],
			resource: "paisaje",
			alt: "Paisaje donde se muestra el sol, el campo y tres caballos; dos de color gris y uno de color café",
			title:"Paisaje",
			text:"Paisaje donde se muestra el sol, el campo y tres caballos; dos de color gris y uno de color café"
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 2,
		minRightAnswers: 1,
		itemsPerRow : 3
	};
});

esp201.controller('Act5-3Ctrl', function($scope){
	$scope.items = [
		{
			name: "helado",
			pattern: [17],
			resource: "helado",
			alt: "Un recipiente plástico que en su interior tiene un banano, acompañado de tres bolas de helado cubiertas por chocolate, además de dos cerezas y un barquillo.",
			title:"helado",
			text:"Un recipiente plástico que en su interior tiene un banano, acompañado de tres bolas de helado cubiertas por chocolate, además de dos cerezas y un barquillo."
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 2,
		minRightAnswers: 1,
		itemsPerRow : 3
	};
});

esp201.controller('Act6Ctrl', function($scope){
	$scope.options = {
		link:"http://www.gobiernodecanarias.org/educacion/4/Medusa/GCMWEB/Code/Recursos/VisualizarPagina.aspx?contenido=ZZ8paLok3uxcnltybqHyF3UiL5jHARtUybvRy1a35hA%3d&IdRecurso=10041"
		
	};
});

var appManager = AppManager();
var esp202 = angular.module('esp202', ['activities']);

appManager.configModule(esp202, {
	resources: '../resources/02/esp/02',
	farewell: '¡Muy bien!, ahora ya sabes más sobre la escucha.',
	evidencesSound:true,
	evidences: 'Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, actividad de evidencia, guía 1, lección 2; descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.',
	competencesSound:true,
	competences1:'Identifico los principales elementos y roles de la comunicación para enriquecer procesos comunicativos auténticos.',
	competences2:'Reconoce la importancia de la escucha en la comunicación aplicándola para su desarrollo comunicativo.',
	routes:[
		{ 
			name: '/conceptualizacion-1', 
			templateUrl: 'con1', 
			controller: 'Con1Ctrl',
			title:"La escucha"
		},
		{ 
			name: '/conceptualizacion-2', 
			templateUrl: 'con2', 
			controller: 'Con2Ctrl',
			title: 'La escucha'
		},
		{ 
			name: '/actividad-1', 
			templateUrl: 'act1-1', 
			controller: 'Act1-1Ctrl',
			title: 'Actividad  1 | Lección 2'
		},
		/*{ groups: false },*/
		{ 
			name: '/actividad-1-1', 
			templateUrl: 'act1', 
			controller: 'Act1Ctrl',
			title:"Actividad  1 | Lección 2"
		},
		{ 
			name: '/actividad-2', 
			templateUrl: 'act2', 
			controller: 'Act2Ctrl',
			title:"Actividad  2 | Lección 2"
		},
		{ 
			name: '/actividad-3', 
			templateUrl: 'act3', 
			controller: 'Act3Ctrl',
			title: 'Actividad 3 | Lección 2'
		},
		{ 
			name: '/actividad-4', 
			templateUrl: 'act4', 
			controller: 'Act4Ctrl',
			title: 'Actividad 4 | Lección 2'
		},
		{ 
			name: '/actividad-5', 
			templateUrl: 'act5', 
			controller: 'Act5Ctrl',
			title:"Actividad 5 | Lección 2",
		},
		{ 
			name: '/actividad-6', 
			templateUrl: 'act6', 
			controller: 'Act6Ctrl',
			title:"Actividad 6 | Lección 2",
		},
		{ 
			name: '/actividad-7', 
			templateUrl: 'act7', 
			controller: 'Act7Ctrl',
			title:"Actividad 7 | Lección 2",
		},
		{ 
			name: '/actividad-8', 
			templateUrl: 'act8', 
			controller: 'Act8Ctrl',
			title:"Actividad 8 | Lección 2",
		}
	]
	
});

esp202.controller('Con1Ctrl', function($scope){
	$scope.data = [
		{ 
			resource: "nino",
			text: "Siempre debemos escuchar cuando el otro nos Habla.",
			alt: "Texto alternativo: Un joven con gorra y camiseta verde, coloca su mano detrás de su oído izquierdo en señal de escucha."
		}
	];
});

esp202.controller('Con2Ctrl', function($scope){
	$scope.data = {
		items: [
			{	
				number:'1',
				title: "Para entender",
				src: "paraentender",
				img: "ninoescuchando.png",
				imgAlt: "Un niño hablándole al oído a otro, mientras este último lo escucha atentamente",
				imgtext:"Para escuchar al otro debemos guardar silencio mientras este habla",
				text:'Si escuchamos atentamente, lograremos comprender aquello que nos están diciendo.'
			},
			{	number:'2',
				title: "Para aprender",
				src: "paraaprender",
				img: "ninoescuchando.png",
				imgAlt: "Un niño hablándole al oído a otro, mientras este último lo escucha atentamente",
				imgtext:"Para escuchar al otro debemos guardar silencio mientras este habla",
				text:'Cuando escuchamos, ganamos más conocimientos.'
			}

		]
	};
});

esp202.controller('Act1-1Ctrl', function($scope){
	$scope.data = [
		{
			resource: 'patitofeo',
			text: '<strong>El patito feo</strong>',
			alt:'Paisaje donde se muestra un pato de color gris, rodeado por plantas y agua.'
		}
	];
});

esp202.controller('Act1Ctrl', function($scope){
	$scope.items = [
		{
			name: "1",
			pattern: [6,7,8],
			text:"¿Cuál es el título del cuento? el patito feo"
		},
		{
			name: "2",
			pattern: [6 ,8 ,10],
			text:"¿Cómo era el patito al nacer? raro , grande y desgarbado"
		},
		{
			name: "3",
			pattern: [6 ,7],
			text:"¿Qué hacían los hermanos del patito? se burlaban"
		},
		{
			name: "4",
			pattern: [9],
			text:"¿Cuántos cisnes vío el patito volar hacia el estanque? 3",
			answer2: "tres"

		},
		{
			name: "5",
			pattern: [10 ,11 ,12 ,13],
			text:"¿Qué le pasó al patito al crecer durante el invierno? se convirtió en cisne"
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 13,
		minRightAnswers: 9,
		itemsPerRow : 3
	};
});

esp202.controller('Act2Ctrl', function($scope){
	$scope.items = [
		{
			name: "1",
			pattern: [11],
			resource:"sound",
			sound:"conte1",
			alt: "ícono de sonido",
			title:"ícono de sonido",
			text:"Esta es la casa que Pedro va a hacer"
		},
		{
			name: "2",
			pattern: [7],
			resource:"sound",
			sound:"conte2",
			alt: "ícono de sonido",
			title:"ícono de sonido",
			text:"Esta es la harina que hay en el granero de la casa que Pedro va a hacer"
		},
		{
			name: "3",
			pattern: [11],
			resource:"sound",
			sound:"conte3",
			alt: "ícono de sonido",
			title:"ícono de sonido",
			text:"Este es el gato que atrapa la rata que se come la harina que  hay en el granero  de la casa que Pedro va a hacer"
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 3,
		minRightAnswers: 2
	};
});

esp202.controller('Act3Ctrl', function ($scope) {
	$scope.data = {
		chances: 14,
		minRightAnswers: 6,
		table: [
			's i l e n c i o a m'.split(" "),
			'd a o p g p d f u i'.split(" "),
			'f t r e s p e t o r'.split(" "),
			'g e h i f s e p v a'.split(" "),
			'a n n l c v o m e r'.split(" "),
			'j c a t e n d e r d'.split(" "),
			'p i s d i l b n l t'.split(" "),
			'c o m p r e n d e r'.split(" "),
			'm n c b n m d f a s'.split(" "),
			'e s c u c h a r h d'.split(" ")
			
		],
		wordGroups: [
			{
				title: 'Verticales',
				items: [
					{
						front: "mirar",
						back: "mirar"
					},
					{
						front: "atencion",
						back: "atencion"
					}
				]
			},
			{
				title: 'Horizontales',
				items: [
					{
						front: "silencio",
						back: "silencio"
					},
					{
						front: "respeto",
						back: "respeto"
					},
					{
						front: "atender",
						back: "atender"
					},
					{
						front: "escuchar",
						back: "escuchar"
					},
					{
						front: "comprender",
						back: "comprender"
					}
				]
			}
		]
	};
});


esp202.controller('Act4Ctrl', function($scope){
	$scope.data = [
		{
			resource: 'escucha2',
			correctAnswer:'REPRESENTA ESCUCHA',
			title:"Horton N. (2009). Reading books at home [Fotografía]. Obtenido de: http://www.sxc.hu/photo/1145735",
			text: 'señor adulto con poco pelo y pensativo.',
			alt:'Mamá leyendo un libro a su hija y ella escuchando atentamente.'
		},
		{
			resource: 'escucha1',
			correctAnswer:'REPRESENTA ESCUCHA',
			title:"Sperl A. (2009). Students [Fotografía]. Obtenido de: http://www.sxc.hu/photo/1197349",
			text: 'señora adulta con el pelo recogido y gafas.',
			alt:'Dos chicas y un chico sosteniendo una conversación, una de las chicas habla y los demás la miran y escuchan.'
		},
		{
			resource: 'noescucha',
			correctAnswer:'NO REPRESENTA ESCUCHA',
			text: 'niña con pelo café, lentes y dos colitas.',
			alt:'Un señor hablándole a otro, pero este último le está dando la espalda y se tapa sus oídos con las manos.'
		}
	];
		$scope.options = {
		data: $scope.data,
		randomItems: true,
		hideDescription: true,
		chancesPerItem:2,
		minRightAnswers: 2
		
	};
});

esp202.controller('Act5Ctrl', function($scope){
	$scope.items = [
		{
			name: "1",
			resource:"sound",
			sound:"sirena",
			alt: "ícono de sonido",
			title:"ícono de sonido",
			text:"Sirena"
		},
		{
			name: "2",
			resource:"sound",
			sound:"agua",
			alt: "ícono de sonido",
			title:"ícono de sonido",
			text:"Agua"
		},
		{
			name: "3",
			resource:"sound",
			sound:"avion",
			alt: "ícono de sonido",
			title:"ícono de sonido",
			text:"Avión"
		},
		{
			name: "4",
			resource:"sound",
			sound:"pajaro",
			alt: "ícono de sonido",
			title:"ícono de sonido",
			text:"Pájaro"
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 4,
		minRightAnswers: 2,
		itemsPerRow : 2
	};
});

esp202.controller('Act6Ctrl', function($scope){
	$scope.items = [
		{
			name: "Hacer silencio cuando tu mamá te está hablando.",
			alt: "ícono de sonido",
			title:"ícono de sonido",
			text:"Corresponde"
		},
		{
			name: "Reírse cuando estás en clase.",
			alt: "ícono de sonido",
			title:"ícono de sonido",
			text:"No corresponde"
		},
		{
			name: "Mirar a la persona que te habla.",
			alt: "ícono de sonido",
			title:"ícono de sonido",
			text:"Corresponde"
		},
		{
			name: "Jugar mientras alguien te está hablando.",
			alt: "ícono de sonido",
			title:"ícono de sonido",
			text:"No corresponde"
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 4,
		minRightAnswers: 2,
		itemsPerRow : 3
	};
});

esp202.controller('Act7Ctrl', function($scope){
	$scope.items = [
		{
			name: "niña",
			pattern: [17],
			resource: "escucha1",
			alt: "Dos chicas y un chico sosteniendo una conversación, una de las chicas habla y los demás la miran y escuchan.",
			title:"Sperl A. (2009). Students [Fotografía]. Obtenido de: http://www.sxc.hu/photo/1197349",
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 2,
		minRightAnswers: 1,
		itemsPerRow : 3
	};
});

esp202.controller('Act8Ctrl', function($scope){
	$scope.options = {
		link:"http://nea.educastur.princast.es/repositorio/RECURSO_ZIP/1_1_ibcmass_u15/index.html"
		
	};
});
var appManager = AppManager();
var esp203 = angular.module('esp203', ['activities']);

appManager.configModule(esp203, {
	resources: '../resources/02/esp/03',
	farewell: '¡Muy bien!, ahora ya sabes más sobre los medios de comunicación.',
	evidencesSound:true,
	evidences: 'Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, actividad de evidencia, guía 1, lección 3; descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.',
	competencesSound:true,
	competences1:'Reconozco los medios de comunicación masiva y caracterizo la información que difunden.',
	competences2:'Identifica las características y funciones de los medios de comunicación y los utiliza correctamente.',
	routes:[ 
		{ 
			name: '/conceptualizacion-1', 
			templateUrl: 'con1', 
			controller: 'Con1Ctrl',
			title:"Medios de comunicación"
		},
		{ 
			name: '/conceptualizacion-2', 
			templateUrl: 'con2', 
			controller: 'Con2Ctrl',
			title: 'Medios de comunicación'
		},
		{ 
			name: '/conceptualizacion-3', 
			templateUrl: 'con3', 
			controller: 'Con3Ctrl',
			title: 'Medios de comunicación'
		},
		{ 
			name: '/actividad-1', 
			templateUrl: 'act1', 
			controller: 'Act1Ctrl',
			title:"Actividad  1 | Lección 3"
		},
		{ 
			name: '/actividad-2', 
			templateUrl: 'act2', 
			controller: 'Act2Ctrl',
			title:"Actividad  2 | Lección 3"
		},
		{ 
			name: '/actividad-3', 
			templateUrl: 'act3', 
			controller: 'Act3Ctrl',
			title: 'Actividad 3 | Lección 3'
		},
		{ 
			name: '/actividad-4', 
			templateUrl: 'act4', 
			controller: 'Act4Ctrl',
			title: 'Actividad 4 | Lección 3'
		},
		{ 
			name: '/actividad-5', 
			templateUrl: 'act5', 
			controller: 'Act5Ctrl',
			title:"Actividad 5 | Lección 3",
		},
		{ 
			name: '/actividad-6', 
			templateUrl: 'act6', 
			controller: 'Act6Ctrl',
			title:"Actividad 6 | Lección 3",
		}
	]
	
});

esp203.controller('Con1Ctrl', function($scope){
	$scope.data = {
		items: [
			{	
				number:'1',
				title: "Medios audiovisuales",
				src: "mediosaudiovisuales",
			}

		],
		items2: [
			{	
				number:'2',
				title: "Medios impresos",
				src: "mediosimpresos",
			}
		],
	};
});

esp203.controller('Con2Ctrl', function($scope){
	$scope.data = [
		{
			number: '1',
			resource: 'televisor',
			text: '<strong>Televisión</strong>',
			title: 'TV HD 1 [Fotografía]. (2009). Obtenido de: http://www.sxc.hu/photo/1209126',
			alt:'Televisor'
		},
		{
			number: '2',
			resource: 'radio',
			text: '<strong>Radio</strong>',
			title: 'Cinezi, L. (2006). Radio [Fotografía]. Obtenido de: http://www.sxc.hu/browse.phtml?f=download&id=520347',
			alt:'Grabadora'
		},
		{
			number: '3',
			resource: 'cine',
			text: '<strong>Cine</strong>',
			title:'Szustka, P. (2011). Cinema [fotografía]. Obtenido de: http://www.sxc.hu/photo/1331710',
			alt:'Sala de cine con una pantalla grande y varias sillas.'
		},
		{	
			number: '4',
			resource: 'internet',
			text: '<strong>Internet</strong>',
			title: 'Modern laptop computer isolated [Fotografía]. (2013). Obtenido de: http://www.sxc.hu/photo/1432157',
			alt:'Computador portátil abierto.'
		}
	];
});

esp203.controller('Con3Ctrl', function($scope){
	$scope.data = [
		{
			number: '1',
			type: 'jpg',
			resource: 'periodico',
			text: '<strong>Periódico</strong>',
			title: 'Ciesielski, A. (2005). Newspaper [Fotografía]. Obtenido de: http://www.sxc.hu/photo/273525',
			alt:'Periódico'
		},
		{
			number: '2',
			resource: 'revista',
			text: '<strong>Revistas</strong>',
			title: 'Elliott, S. (2004). “Diseño” Magazine [Fotografía]. Obtenido de: http://www.sxc.hu/photo/199818',
			alt:'Revista abierta'
		},
		{
			number: '3',
			type: 'jpg',
			resource: 'libro',
			text: '<strong>libros</strong>',
			title:'Szustka, P. (2011). Cinema [fotografía]. Obtenido de: http://www.sxc.hu/photo/1331710',
			alt:'Libro cerrado'
		}
	];
});

esp203.controller('Act1Ctrl', function($scope){
	$scope.items = [
		{
			name: "1",
			pattern: [11],
			resource:"periodico2",
			alt: "Periódico",
			title:"Pat, K. (2004). Newspaper [Fotografía]. Obtenido de: http://www.sxc.hu/photo/223811",
			text:"IMPRESO"
		},
		{
			name: "2",
			pattern: [7],
			resource:"televisor",
			alt: "Televisor",
			title:"TV HD 1 [Fotografía]. (2009). Obtenido de: http://www.sxc.hu/photo/1209126",
			text:"AUDIOVISUAL"
		},
		{
			name: "3",
			pattern: [11],
			resource:"libro2",
			alt: "Libro cerrado",
			title:"Töpfer, O. (2008). Books 1 [Fotografía]. Obtenido de:   http://www.sxc.hu/photo/969873",
			text:"IMPRESO"
		},
		{
			name: "4",
			pattern: [11],
			resource:"revista",
			alt: "Revista abierta",
			title:"Elliott, S. (2004). “Diseño” Magazine [Fotografía]. Obtenido de: http://www.sxc.hu/photo/199818",
			text:"IMPRESO"
		},
		{
			name: "5",
			pattern: [7],
			resource:"radio2",
			alt: "Grabadora",
			title:"Zacharzewski, M. (2011). A CD Player [Fotografía]. Obtenido de: http://www.sxc.hu/photo/1336514",
			text:"AUDIOVISUAL"
		},
		{
			name: "6",
			pattern: [11],
			resource:"internet",
			alt: "Computador portátil abierto",
			title:"Modern laptop computer isolated [Fotografía]. (2013). Obtenido de: http://www.sxc.hu/photo/1432157",
			text:"AUDIOVISUAL"
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 6,
		minRightAnswers: 2,
		itemsPerRow : 3
	};
});

esp203.controller('Act2Ctrl', function($scope){
	$scope.data = {
		words: [
			{
				word: "television",
				clue: "Medio de comunicación por el cual puedes ver las noticias.",
				number: 1,
				pos: [ [0,6], [9,6] ]
			},
			{	
				word: "radio",
				clue: "Por este medio puedes escuchar música, noticias, deportes, etc.",
				number: 2,
				pos: [ [5,3], [5,7] ]
			},
			{	
				word: "internet",
				clue: "Gracias a este medio puedes no sólo buscar información sino comunicarte con amigos y familiares.",
				number: 3,
				pos: [ [1,0], [1,7] ]				
			},
			{
				word: "revista",
				clue: "Este medio impreso te permite estar enterado de noticias, cultura, farándula, etc.",
				number: 4,
				pos: [ [3,7], [3,1] ]
			},
			{
				word: "cine",
				clue: "Medio de comunicación que te permite ver películas de diferentes géneros.",
				number: 5,
				pos: [ [9,4], [9,7] ]
			},
			{
				word: "libros",
				clue: "Por este medio impreso puedes saber más acerca de cualquier tema como por ejemplo: historia, cultura y naturaleza, entre otros.",
				number: 6,
				pos: [ [7,7], [7,2] ]
			},
		]
	};
});

esp203.controller('Act3Ctrl', function($scope){
	$scope.data = {
		canvas: 'diferencias',
		targets: [
			{ w: 8, h: 15, t: 52, l: 2 }, // camara
			{ w: 6, h: 9, t: 46, l: 10 }, // periodista 
			{ w: 6, h: 8, t: 45, l: 18 }, // sobrero
			{ w: 6, h: 8, t: 53, l: 13 }, // microfono
			{ w: 6, h: 8, t: 53, l: 37 }, // mariposa			
		],
		minRightAnswers: 4
	};
});

esp203.controller('Act4Ctrl', function($scope){
	$scope.items = [
		{
			name: "ardoi",
			text: "radio"
		},
		{
			name: "terninet",
			text: "internet"
		},
		{
			name: "dircopeió",
			text: "periódico"
		},
		{
			name: "leviteónsi",
			text: "televisión"
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 4,
		minRightAnswers: 2,
		itemsPerRow : 3
	};
});

esp203.controller('Act5Ctrl', function($scope){
	$scope.data = {
		groups: [
			{
				title: "Medio audiovisual",
				numInputs: 3
			},
			{
				title: "Medio impreso",
				numInputs: 3
			}
		]
	};
});

esp203.controller('Act6Ctrl', function($scope){
	$scope.options = {
		link:"http://ares.cnice.mec.es/mcs/web/al_nivel.php?nivel=3&seccion=2&s=0",
		link2:"http://ares.cnice.mec.es/mcs/web/al_nivel.php?nivel=2&seccion=2&s=0"
	};
});
var appManager = AppManager();
var esp204 = angular.module('esp204', ['activities']);

appManager.configModule(esp204, {
	resources: '../resources/02/esp/04',
	farewell: '¡Muy bien!, ahora ya sabes más sobre el cuento y sus partes.',
	evidencesSound:true,
	evidences: 'Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, actividad de evidencia, guía 1, lección 4; descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.',
	competencesSound:true,
	competences1:'Identifico los principales elementos y roles de la comunicación para enriquecer procesos comunicativos auténticos.',
	competences2:'Reconoce la importancia de la escucha en la comunicación aplicándola para su desarrollo comunicativo.',
	routes:[ 
		{ 
			name: '/conceptualizacion-1', 
			templateUrl: 'con1', 
			controller: 'Con1Ctrl',
			title:"El cuento"
		},
		{ 
			name: '/conceptualizacion-2', 
			templateUrl: 'con2', 
			controller: 'Con2Ctrl',
			title: 'El cuento'
		},
		{ 
			name: '/conceptualizacion-3', 
			templateUrl: 'con3', 
			controller: 'Con3Ctrl',
			title: 'El cuento'
		},
		{ 
			name: '/actividad-1', 
			templateUrl: 'act1', 
			controller: 'Act1Ctrl',
			title: 'Actividad  1 | Lección 4'
		},
		{ 
			name: '/actividad-2', 
			templateUrl: 'act2', 
			controller: 'Act2Ctrl',
			title:"Actividad  2 | Lección 4"
		},
		{ 
			name: '/actividad-3', 
			templateUrl: 'act3', 
			controller: 'Act3Ctrl',
			title: 'Actividad 3 | Lección 4'
		},
		{ 
			name: '/actividad-4', 
			templateUrl: 'act4', 
			controller: 'Act4Ctrl',
			title: 'Actividad 4 | Lección 4'
		},
		{ 
			name: '/actividad-5', 
			templateUrl: 'act5', 
			controller: 'Act5Ctrl',
			title:"Actividad 5 | Lección 4",
		},
		{ 
			name: '/actividad-6', 
			templateUrl: 'act6', 
			controller: 'Act6Ctrl',
			title:"Actividad 6 | Lección 4",
		},
		{ 
			name: '/actividad-7', 
			templateUrl: 'act7', 
			controller: 'Act7Ctrl',
			title:"Actividad 7 | Lección 4",
		}
	]
	
});

esp204.controller('Con1Ctrl', function($scope){
	$scope.data = {
		items: [
			{	
				number:'1',
				src: "C1",
				alt: "Una reina va viajando en su carruaje y se acerca a un castillo desconocido."
			},
			{	
				number:'2',
				alt: "La reina entra al castillo y es sorprendida por una bruja volando en su escoba",
				src: "C2",
			},
			{	
				number:'3',
				alt: "La bruja mala, convierte a la reina en un caballo volador.",
				src: "C3",
			},
			{	
				number:'4',
				alt: "La reina se encuentra con el rey y le pide que le ayude a volver a  ser humana.",
				src: "C4",
			},
			{	
				number:'5',
				alt: "El príncipe la lleva donde un mago y le pide que la Convierta nuevamente en un ser humano y a cambio él le dará un gran tesoro",
				src: "C5",
			},
			{	
				number:'6',
				alt: "El rey vuelve con la reina a su castillo y viven felices",
				src: "C6",
			}

		]
	};
});

esp204.controller('Con2Ctrl', function($scope){
	$scope.data = {
		items: [
			{	
				number:'1',
				title: "Inicio",
				src: "inicio",
				img: "inicio.png",
				imgAlt: "caperucita roja va caminando feliz por el bosque, lleva consigo una canasta donde lleva unos pasteles para su abuela.",
				text:'Está al principio de todo cuento, en él se da a conocer el lugar donde sucede la acción y se presentan a los personajes principales de la historia.'
			},
			{	number:'2',
				title: "Nudo",
				src: "nudo",
				img: "nudo.png",
				imgAlt: "caperucita roja luce asombrada porque ve en la cama a su abuelita muy diferente.",
				text:'Es la parte del cuento donde los personajes se involucran en alguna aventura o problema.'
			},
			{	number:'3',
				title: "Desenlace",
				src: "desenlace",
				img: "desenlace.png",
				imgAlt: "Caperucita y su abuela lucen felices porque apareció un cazador que las salvó del lobo e hizo que éste huyera.",
				text:'Es la parte donde se resuelve el conflicto del cuento y la historia termina. Generalmente, el bien se impone sobre el mal.'
			}

		]
	};
});

	
esp204.controller('Con3Ctrl', function($scope){
	$scope.data = {
		items: [
			{	
				style:"background-color: rgb(52, 178, 255);",
				style2:"color: rgb(52, 178, 255);",
				title: "Inicio",
				text:'Había una vez una niña llamada Caperucita roja, ya que su abuelita le regaló una capa roja la cual usaba a menudo. Un día, la mamá de Caperucita la mandó a casa de su abuelita, que estaba enferma, para que le llevara una canasta con pasteles. Su mamá le dijo: "no te apartes del camino de siempre, ya que en el bosque hay un lobo muy peligroso".'
			},
			{
				style:"background-color: red;",
				style2:"color: red;",
				title: "Nudo",
				text:'Caperucita iba cantando por el camino que su mamá le había dicho y, de repente, se encontró con el lobo y le dijo: "Caperucita ¿a dónde vas?“, ella respondió: “ a casa de mi abuelita a llevarle unos pastelitos”, el lobo le dijo:"¡Vamos a hacer una carrera!, te dejaré a ti el camino más corto y yo el más largo para darte ventaja“. Caperucita aceptó pero ella no sabía que el lobo la había engañado. El lobo llegó antes y se comió a la abuelita. Cuando ésta llegó, llamó a la puerta: "¿Quién es?", dijo el lobo vestido de abuelita. "Soy yo", respondió Caperucita, "Pasa, pasa nietecita“, dijo el lobo. "Abuelita, qué ojos más grandes tienes", dijo la niña extrañada. "Son para verte mejor“ contesto el lobo. "Abuelita, abuelita, qué orejas tan grandes tienes“, "Son para oírte mejor". "Y qué nariz tan grande tienes“, "Es para olerte mejor". "Y qué boca tan grande tienes“, "¡Es para comerte mejor!".'
			},
			{
				style:"background-color: rgb(42, 223, 57);",
				style2:"color: rgb(42, 223, 57);",
				title: "Desenlace",
				alt: "Caperucita y su abuela lucen felices porque apareció un cazador que las salvó del lobo e hizo que éste huyera.",
				text:'Caperucita empezó a correr por toda la habitación y el lobo tras ella. Pasaba por allí un cazador y al escuchar los gritos se acercó con su escopeta. Al ver al lobo le disparó y sacaron a la abuelita de la barriga del lobo. Así que Caperucita después de este susto no volvió a desobedecer a su mamá.'
			}
		]
	};
});

esp204.controller('Act1Ctrl', function($scope){
	$scope.data = {
		items: [
			{	
				style:"background-color: rgb(52, 178, 255);",
				style2:"color: rgb(52, 178, 255);",
				title: "Inicio",
				text:'Hace mucho mucho tiempo, un niño paseaba por un prado en cuyo centro encontró un árbol con un cartel que decía: soy un árbol encantado, si dices las palabras mágicas, lo verás.',
				number: " ",
				order: "1"
			},
			{
				style:"background-color: red;",
				style2:"color: red;",
				title: "Nudo",
				text:'El niño trató de acertar el hechizo, y probó con abracadabra, tan-ta-ta-chán, supercalifragilisticoespialidoso y muchas otras, pero nada. Rendido, se tiró suplicante, diciendo: “¡¡por favor, arbolito!!”, y entonces, se abrió una gran puerta en el árbol. Todo estaba oscuro, menos un cartel que decía: “sigue haciendo magia”. Entonces el niño dijo “¡¡Gracias, arbolito!!”, y se encendió dentro del árbol una luz que alumbraba un camino hacia una gran montaña de juguetes y chocolates.',
				number: " ",
				order: "3"
			},
			{
				style:"background-color: rgb(42, 223, 57);",
				style2:"color: rgb(42, 223, 57);",
				title: "Desenlace",
				alt: "Caperucita y su abuela lucen felices porque apareció un cazador que las salvó del lobo e hizo que éste huyera.",
				text:'El niño pudo llevar a todos sus amigos a aquel árbol y tener la mejor fiesta del mundo, y por eso se dice siempre que “por favor” y “gracias”, son las palabras mágicas._______________________Autor: Pedro Pablo Sacristán',
				number: " ",
				order: "2"
			}
			
		]
	};
});

esp204.controller('Act2Ctrl', function ($scope){
	$scope.items = [
		{
			resource: "oveja-loly.png",
			alt: "Una oveja en el campo.",
			pattern: [3, 19, 32 ,41 ,86 ,99 ,115],
			text:"Cada mañana Oscar llevaba el rebaño de ovejas al campo para pastar. A él le gusta ver a su oveja regalona correr y jugar con el resto de sus hermanas por el campo , la había bautizado con el nombre de loly . Oscar se sentía contento de ver lo rápido que crecía y el hermoso pelo que tenía. Muy pronto llegaría la primavera y se lo cortarían a ella y a las otras ovejas. Oscar no sentía pena por eso, porque él sabía que el pelo de las ovejas, en la industria de la ciudad, lo transformaban en lana de distintos colores y la gente se tejía lindos chalecos para los días de mucho frío ."
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 7,
		minRightAnswers: 5,
		examples:['llevaba','Loly','pelota','oveja','campo','lana', "frío", "pelo"],
		itemsPerRow : 3
	};
});


esp204.controller('Act3Ctrl', function ($scope) {
	$scope.items = [
		{
			name: "1",
			pattern: [4],
			text:"El pastor se llamaba oscar ."
		},
		{
			name: "2",
			pattern: [3],
			text:"Loly, era una oveja ."
		},
		{
			name: "3",
			pattern: [1],
			text:"La lana sale del pelo de las ovejas."
		},
		{
			name: "4",
			pattern: [9],
			text:"Con la lana se pueden tejer chalecos para el frío ."
		},
		{
			name: "5",
			pattern: [1],
			text:"Cada mañana Oscar llevaba el rebaño de ovejas al campo."
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 5,
		minRightAnswers: 3,
		itemsPerRow : 3
	};
});


esp204.controller('Act4Ctrl', function($scope){
	$scope.items = [
		{
			number: '1',
			name: "Al leer el texto me doy cuenta que la oveja Loly tiene hermanas.",
			alt: "ícono de sonido",
			title:"ícono de sonido",
			text:"SI"
		},
		{
			number: '2',
			name: "Oscar se sentía triste al ver a Loly crecer.",
			alt: "ícono de sonido",
			title:"ícono de sonido",
			text:"NO"
		},
		{
			number: '3',
			name: "A Oscar le gustaba ver a su oveja correr por el campo.",
			alt: "ícono de sonido",
			title:"ícono de sonido",
			text:"SI"
		},
		{
			number: '4',
			name: "Los chalecos protegen a las personas del frío.",
			alt: "ícono de sonido",
			title:"ícono de sonido",
			text:"SI"
		},
		{
			number: '5',
			name: "A las ovejas se les corta el pelo durante el invierno.",
			alt: "ícono de sonido",
			title:"ícono de sonido",
			text:"NO"
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 5,
		minRightAnswers: 3,
		itemsPerRow : 3
	};
});

esp204.controller('Act5Ctrl', function($scope){
	$scope.items = [
		{
			name: "Título.",
			length: 5
		},
		{
			name: "Había una vez…",
			length: 10
		},
		{
			name: "Un día…",
			length: 10
		},
		{
			name: "Entonces…",
			length: 10
		},
		{
			name: "Finalmente…",
			length: 10
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 5,
		minRightAnswers: 3,
		itemsPerRow : 3
	};
});

esp204.controller('Act6Ctrl', function($scope){
	$scope.items = [
		{
			name: "Cuento",
			pattern: ['conejo', 'zanahoria', 'bosque' ,'lobo'],
			length: 200
		}

	];

	$scope.options = {
		items: $scope.items,
	};
});

esp204.controller('Act7Ctrl', function($scope){
	$scope.options = {
		link:"http://www.rinconsolidario.org/palabrasamigas/pa/Copia%20de%20Lechucita/1.html",
		link2: "http://www.aplicaciones.info/lectura/lectura.htm",
		link3: "http://www.cuentosinteractivos.org/"
		
	};
});
var appManager = AppManager();
var esp205 = angular.module('esp205', ['activities']);

appManager.configModule(esp205, {
	resources: '../resources/02/esp/05',
	farewell: '¡Muy bien!, ahora ya sabes más sobre el cuento.',
	evidencesSound:true,
	evidences: 'Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, actividad de evidencia, guía 1, lección 5; descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.',
	competencesSound:true,
	competences1:'Comprendo textos literarios para propiciar el desarrollo de mi capacidad creativa y lúdica.',
	competences2:'Recrea relatos y cuentos cambiando personajes, ambientes, hechos y épocas.',
	routes:[ 
		{ 
			name: '/conceptualizacion-1', 
			templateUrl: 'con1', 
			controller: 'Con1Ctrl',
			title:"El cuento (continuación)"
		},
		{ 
			name: '/conceptualizacion-2', 
			templateUrl: 'con2', 
			controller: 'Con2Ctrl',
			title: 'El cuento (continuación)'
		},
		{ 
			name: '/actividad-1', 
			templateUrl: 'act1', 
			controller: 'Act1Ctrl',
			title: 'Actividad  1 | Lección 5'
		},
		{ 
			name: '/actividad-2', 
			templateUrl: 'act2', 
			controller: 'Act2Ctrl',
			title:"Actividad  2 | Lección 5"
		},
		{ 
			name: '/actividad-3', 
			templateUrl: 'act3', 
			controller: 'Act3Ctrl',
			title: 'Actividad 3 | Lección 5'
		},
		{ 
			name: '/actividad-4', 
			templateUrl: 'act4', 
			controller: 'Act4Ctrl',
			title: 'Actividad 4 | Lección 5'
		},
		{ 
			name: '/actividad-5', 
			templateUrl: 'act5', 
			controller: 'Act5Ctrl',
			title:"Actividad 5 | Lección 5",
		},
		{ 
			name: '/actividad-6', 
			templateUrl: 'act6', 
			controller: 'Act6Ctrl',
			title:"Actividad 6 | Lección 5",
		},
		{ 
			name: '/actividad-7', 
			templateUrl: 'act7', 
			controller: 'Act7Ctrl',
			title:"Actividad 7 | Lección 5",
		}
	]
	
});

esp205.controller('Con1Ctrl', function($scope){
	$scope.data = {
		items: [
			
		]
	};
});

esp205.controller('Con2Ctrl', function($scope){
	$scope.data = {
		items: [
			{	
				number:'1',
				title: "Los personajes",
				src: "personajes",
				img: "personajes.png",
				imgAlt: "Mamá de caperucita roja Abuelita de caperucita roja con gafas y una pijama rosada.Caperucita roja Lobo cazador.",
				text:'Los personajes son quienes realizan las acciones dentro del cuento. Por lo general hay un personaje principal alrededor del cual giran otros de menor importancia.En el cuento “Caperucita roja” los personajes son: Caperucita roja, la mamá, la abuela, el lobo y el cazador.'
			},
			{
        number:'2',
				title: "El ambiente",
				src: "ambiente",
				img: "ambiente.png",
				imgAlt: "Paisaje donde se muestran varios árboles. Casa rodeada por árboles",
				text:'El ambiente comprende el lugar y el tiempo donde se desarrolla el cuento. Por ejemplo en el cuento de “Caperucita roja”, la historia se desarrolla en el bosque y en la casa de la abuela .'
			},
			{
        number:'3',
				title: "La trama",
				src: "trama",
				img: "trama.png",
				imgAlt: "Se muestra a caperucita roja, su abuela y el cazador felices porque han logrado escapar del ataque del lobo.",
				text:'La trama es todo aquello que le ocurre a los personajes dentro de la historia. En el cuento “Caperucita roja” el lobo trata de comerse a Caperucita después de hacerse pasar por la abuelita, afortunadamente un cazador que pasa por la casa escucha los gritos y la salva de morir devorada por el lobo.'
			}

		]
	};
});

esp205.controller('Act1Ctrl', function($scope){
	$scope.items = [
		{
			name: "1",
			pattern: [2],
			text:"Alejandra tiene nueve años.",
			answer2: "9"
		},
		{
			name: "2",
			pattern: [7],
			text:"La comida preferida de Alejandra es la pizza ."
		},
		{
			name: "3",
			pattern: [5],
			text:"El pelo de Alejandra es negro ."
		},
		{
			name: "4",
			pattern: [6],
			text:"El hermano de Alejandra se llama Roberto ."
		},
		{
			name: "5",
			pattern: [6],
			text:"La mamá de Alejandra se llama Susana ."
		},
		{
			name: "6",
			pattern: [7],
			text:"El nombre del papá de Alejandra es Gonzalo ."
		},
		{
			name: "7",
			pattern: [6],
			text:"La ciudad donde vive Alejandra es Medellín ."
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 7,
		minRightAnswers: 4,
		itemsPerRow : 3
	};
});


esp205.controller('Act2Ctrl', function($scope){
	$scope.items = [
		{
			pattern: [3 ,7 ,34 ,37],
			text:"Los zoológicos son lugares en los que viven muchos animales. Están ubicados en las ciudades y las personas acostumbran visitarlos. En los zoológicos puedes ver gorilas, leones, elefantes y muchos otros animales. Allí trabajan muchas personas que cuidan los animales y les dan de comer.",
			answer2: ["Sitios" ,"Habitan" ,"Numerosas" ,"Protegen"],
			img: "zoologico.png",
			title: "Los zoológicos"
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 4,
		minRightAnswers: 3,
		itemsPerRow : 3
	};
});

esp205.controller('Act3Ctrl', function($scope){
	$scope.items = [
		{
			name: "En los zoológicos  viven pocos animales.",
			text: "F"
		},
		{
			name: "En los zoológicos podemos encontrar  gorilas.",
			text: "V"
		},
		{
			name: "En los zoológicos trabajan muchas personas.",
			text: "V"
		},
		{
			name: "En el zoológico no hay quien cuide los animales",
			text: "F"
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 4,
		minRightAnswers: 3,
		itemsPerRow : 3
	};
});

esp205.controller('Act4Ctrl', function($scope){
	$scope.items = [
		{
			sil: '<strong>1</strong>',
			text: "Había una vez una familia que vivía en una pequeña casa de un barrio muy agradable.",
			resource: "naranja"
		},
		{
			sil: '<strong>2</strong>',
			text: "Todas las mañanas encendían las luces mucho antes que en las otras casas del barrio, pero un día la luz de la casa nunca se prendió, al parecer el despertador no había sonado y a la familia le había cogido el día para levantarse.",
			resource: "nino"
		},
		{
			sil: '<strong>3</strong>',
			text: "Una vecina preocupada fue a la casa y después de mucho tocar la puerta, logró que le abrieran. La familia después de agradecerle a la señora por despertarlos, corrieron a organizarse para llegar a tiempo a sus lugares de trabajo y estudio.",
			resource: "nino"
		}
	];

	$scope.options = {
		data: $scope.items,
		minRightAnswers: 1,
		randomItems: true,
		randomTargets: true
	};
});

esp205.controller('Act5Ctrl', function($scope){
	$scope.items = [
		{
			name: "Oveja Loly",
			pattern: [1, 2, 9 ,16 ,30 ,48 ,60],
			resource: "estaciones",
			alt: "Una oveja en el campo.",
			title:"Oveja Loly",
			text:"Título: las estaciones En algunos países, el año tiene cuatro estaciones que son la primavera, el verano , el otoño y el invierno. En primavera el campo se llena de flores . En verano es cuando hace más calor . En otoño se caen las hojas de los árboles . El invierno es la estación en la que hace más frío .  "
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 7,
		minRightAnswers: 5,
		itemsPerRow : 3
	};
});

esp205.controller('Act6Ctrl', function($scope){
	$scope.items = [
		{
			name: "1",
			pattern: [5],
			text:"Animal mamífero, vivíparo, que ladra. perro",
			answer2: "Perro"			
		},
		{
			name: "2",
			pattern: [6],
			text:"Insecto que produce cera y miel. abeja"
		},
		{
			name: "3",
			pattern: [10],
			text:"Lugar donde se le brinda educación a niños y niñas. colegio",
			answer2: "escuela"
		},
		{
			name: "4",
			pattern: [11],
			text:"Aparato que se utiliza para conservar los alimentos y mantenerlos fríos. nevera"
		},
		{
			name: "5",
			pattern: [8],
			text:"Objeto con cuatro patas que sirve para sentarse. silla"
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 5,
		minRightAnswers: 4,
		itemsPerRow : 3
	};
});

esp205.controller('Act7Ctrl', function($scope){
	$scope.options = {
		link: "http://www.rinconsolidario.org/palabrasamigas/pa/Copia%20de%20Lechucita/1.html",
		link2: "http://www.aplicaciones.info/lectura/lectura.htm ",
		link3: "http://www.cuentosinteractivos.org/"
		
	};
});
var appManager = AppManager();
var esp206 = angular.module("esp206", ["activities"]);

appManager.configModule(esp206, {
	resources: "../resources/02/esp/06",
	competences1: "Produzco textos orales que responden a distintos propósitos comunicativos.",
	competences2: "Reconoce y emplea sustantivos propios y comunes en la producción oral y escrita de pequeños textos.",
	competencesSound: true,
	evidences: "Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, actividad de evidencia, guía 2, lección 6; descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.",
	evidencesSound: true,
	farewell: "¡Muy bien!, ahora ya sabes qué son los sustantivos.",
	routes: [
		{ 
			name: "/conceptualizacion-1", 
			templateUrl: "con1", 
			controller: "Con1Ctrl",
			title: "Lección 6: Los sustantivos"
		},
		{ 
			name: "/conceptualizacion-1-2", 
			templateUrl: "con1_2", 
			controller: "Con1_2Ctrl",
			title: "Lección 6: Los sustantivos"
		},
		{ 
			name: "/conceptualizacion-2", 
			templateUrl: "con2", 
			controller: "Con2Ctrl",
			title: "Lección 6: Los sustantivos"
		},
		{ 
			name: "/conceptualizacion-2-2", 
			templateUrl: "con2_2", 
			controller: "Con2_2Ctrl",
			title: "Lección 6: Los sustantivos"
		},
		{ 
			name: "/conceptualizacion-3", 
			templateUrl: "con3", 
			controller: "Con3Ctrl",
			title: "Lección 6: Los sustantivos"
		},
		{ 
			name: "/actividad-1", 
			templateUrl: "act1", 
			controller: "Act1Ctrl",
			title: "Actividad N°1"
		},
		{ 
			name: "/actividad-1-2", 
			templateUrl: "act1_2", 
			controller: "Act1_2Ctrl",
			title: "Actividad N°1"
		},
		{ 
			name: "/actividad-2", 
			templateUrl: "act2", 
			controller: function () {},
			title: "Actividad N°2"
		},
		{ 
			name: "/actividad-2-2", 
			templateUrl: "act2_2", 
			controller: "Act2_2Ctrl",
			title: "Actividad N°2"
		},
		{ 
			name: "/actividad-3", 
			templateUrl: "act3", 
			controller: "Act3Ctrl",
			title: "Actividad N°3"
		},
		{ 
			name: "/actividad-4", 
			templateUrl: "act4", 
			controller: "Act4Ctrl",
			title: "Actividad N°4"
		},
		{ 
			name: "/actividad-5", 
			templateUrl: "act5", 
			controller: "Act5Ctrl",
			title: "Actividad N°5"
		},
		{ 
			name: "/actividad-6", 
			templateUrl: "act6", 
			controller: "Act6Ctrl",
			title: "Actividad N°6"
		},
		{ 
			name: '/actividad-7', 
			templateUrl: 'act7', 
			controller: 'Act7Ctrl',
			title: 'Actividad complementaria'
		}
	]
});

esp206.controller("Con1Ctrl", function ($scope){
	$scope.data = {
		items : [
			{
				img: "l5.png",
				alt: "Niña sonriente, está feliz porque tiene dos bombones en sus manos",
				text: "Juanita tiene dos bombones",
				mainWord: "juanita",
				mainTitle: "Sustantivo"
			},
			{
				img: "l3.png",
				alt: "Mesa rectangular con cuatro patas",
				text: "La mesa tiene cuatro patas",
				mainWord: "mesa",
				mainTitle: "Sustantivo"
			}
		]
	};
});

esp206.controller("Con1_2Ctrl", function ($scope){
	$scope.data = {
		items : [
			{
				img: "l2.png",
				alt: "Imagen donde se muestra una gata jugando en el piso con una pelota",
				text: "Esa gata es muy juguetona",
				mainWord: "gata",
				mainTitle: "Sustantivo"
			},
			{
				img: "l7.png",
				alt: "Imagen donde se muestra un árbol con muchas hojas de diferentes verdes",
				text: "El árbol tiene muchas hojas",
				mainWord: "árbol",
				mainTitle: "Sustantivo"
			},
			{
				img: "l4.png",
				alt: "Imagen donde se muestra una niña sonriente",
				text: "Luisa se siente feliz",
				mainWord: "Luisa",
				mainTitle: "Sustantivo"
			}
		]
	};
});

esp206.controller("Con2Ctrl", function ($scope){
	$scope.data = {
		items : [
			{
				img: "l6.png",
				alt: "Imagen donde se muestra una niña sonriente, con su cabello recogido, luce una camiseta y una falda de color rosado",
				text: "Carolina Pérez tiene 10 años",
				mainWord: "Carolina Pérez",
				mainTitle: "Sustantivo propio"
			},
			{
				img: "l1.png",
				alt: "Niño jugando con un balón de fútbol, en el fondo se muestra la bandera de Brasil",
				text: "El mundial será en Brasil",
				mainWord: "Brasil",
				mainTitle: "Sustantivo propio"
			}
		]
	};
});

esp206.controller("Con2_2Ctrl", function ($scope){
	$scope.data = {
		items : [
			{
				img: "gatito.png",
				alt: "Imagen donde se muestra una gatica de color gris, su nombre es Minina",
				text: "La gata se llama Minina",
				mainWord: "Minina",
				mainTitle: "Sustantivo propio"
			},
			{
				img: "park.png",
				alt: "Imagen donde se presenta un parque de diversiones, allí hay varios juegos entre ellos un lisadero y columpios",
				text: "Mañana vamos para el Parque Norte",
				mainWord: "Parque Norte",
				mainTitle: "Sustantivo propio"
			},
			{
				img: "l9.png",
				alt: "Imagen donde se muestran varios elementos representativos de Medellín: sus montañas, el Edificio Coltejer y el Metro",
				text: "Yo vivo en Medellín",
				mainWord: "Medellín",
				mainTitle: "Sustantivo propio"
			}
		]
	};
});

esp206.controller("Con3Ctrl", function ($scope){
	$scope.data = {
		items : [
			{
				img: "perro.png",
				alt: " Imagen donde se muestra un perro de color café claro, comiendo un trozo de carne",
				text: "El perro come carne",
				mainWord: "perro",
				mainTitle: "Sustantivo común"
			},
			{
				img: "muneca.png",
				alt: "Imagen donde se muestra una muñeca de trapo con cabello amarillo y vestido fucsia",
				text: "La muñeca tiene un vestido",
				mainWord: "muñeca",
				mainTitle: "Sustantivo común"
			},
			{
				img: "senoras.png",
				alt: "Imagen donde se muestran dos mujeres; una rubia y otra morena conversando",
				text: "Las señoras están hablando",
				mainWord: "señoras",
				mainTitle: "Sustantivo común"
			}
		]
	};
});

esp206.controller("Act1Ctrl", function ($scope){
  $scope.data = {
  	chancesPerItem: 1,
  	minRightAnswers: 4,
    questions: [
      {
        number: 1,
        question: "Perro",
        answers: [
          { text: "Común", answer: true },
          { text: "Propio" }
        ]
      },
      {
        number: 2,
        question: "Libro",
        answers: [
          { text: "Común", answer: true },
          { text: "Propio" }
        ]
      },
      {
        number: 3,
        question: "España",
        answers: [
          { text: "Común" },
          { text: "Propio", answer: true }
        ]
      },
      {
        number: 4,
        question: "Lucía",
        answers: [
          { text: "Común" },
          { text: "Propio", answer: true }
        ]
      },
      {
        number: 5,
        question: "Calendario",
        answers: [
          { text: "Común", answer: true },
          { text: "Propio" }
        ]
      },
      {
        number: 6,
        question: "Montaña",
        answers: [
          { text: "Común", answer: true },
          { text: "Propio" }
        ]
      }
    ]
  };
});

esp206.controller("Act1_2Ctrl", function ($scope){
  $scope.data = {
  	chancesPerItem: 1,
  	minRightAnswers: 4,
    questions: [
      {
        number: 7,
        question: "Jorge",
        answers: [
          { text: "Común" },
          { text: "Propio", answer: true }
        ]
      },
      {
        number: 8,
        question: "Casa",
        answers: [
          { text: "Común", answer: true },
          { text: "Propio" }
        ]
      },
      {
        number: 9,
        question: "Avión",
        answers: [
          { text: "Común", answer: true },
          { text: "Propio" }
        ]
      },
      {
        number: 10,
        question: "Asia",
        answers: [
          { text: "Común" },
          { text: "Propio", answer: true }
        ]
      },
      {
        number: 11,
        question: "Jardín",
        answers: [
          { text: "Común", answer: true },
          { text: "Propio" }
        ]
      },
      {
        number: 12,
        question: "México",
        answers: [
          { text: "Común" },
          { text: "Propio", answer: true }
        ]
      }
    ]
  };
});

esp206.controller('Act2_2Ctrl', function ($scope){
	$scope.data = {
		chancesPerItem: 2,
		minRightAnswers: 7,
		textInput1Title: 'Sustantivos propios',
		textInput2Title: 'Sustantivos comunes',
		data: {
			inputs1: [
				{
					listValue: 'Oscar'
				},
				{
					listValue: 'Luz Elena'
				},
				{
					listValue: 'Sofía'
				},
				{
					listValue: 'Lula'
				}
			],
			inputs2: [
				{
					listValue: 'Girasoles'
				},
				{
					listValue: 'Rosas'
				},
				{
					listValue: 'Perros'
				},
				{
					listValue: 'Hermana'
				},
				{
					listValue: 'Carro'
				},
				{
					listValue: 'Gatos'
				}
			]
		}
	};
});

esp206.controller("Act3Ctrl", function ($scope){
  $scope.data = {
  	chancesPerItem: 2,
  	minRightAnswers: 3,
    questions: [
      {
        number: 1,
        question: "¿Cuál de los siguientes sustantivos comunes nombra un objeto?",
        answers: [
          { text: "Balón", answer: true },
          { text: "Perro" },
          { text: "Gato" }
        ]
      },
      {
        number: 2,
        question: "¿Cuál de los siguientes sustantivos comunes nombra un animal? ",
        answers: [
          { text: "Casa" },
          { text: "Gato", answer: true },
          { text: "Reloj" }
        ]
      },
      {
        number: 3,
        question: "¿Cuál de los siguientes sustantivos propios nombra una persona?",
        answers: [
          { text: "España", answer: true },
          { text: "Medellín" },
          { text: "Juan", answer: true }
        ]
      },
      {
        number: 4,
        question: "¿Cuál de los siguientes sustantivos propios nombra una ciudad?",
        answers: [
          { text: "Bogotá", answer: true },
          { text: "Colombia" },
          { text: "María" }
        ]
      }
    ]
  };
});

esp206.controller('Act4Ctrl', function ($scope){
	$scope.data = {
		chancesPerItem: 2,
		minRightAnswers: 6,
		textInput1Title: 'Nombres de personas',
		textInput2Title: 'Nombres de países',
		textInput3Title: 'Nombres de superhéroes',
		data: {
			inputs1: [
				{
					listValue: 'Carolina'
				},
				{
					listValue: 'Miguel'
				},
				{
					listValue: 'Carlos'
				},
				{
					listValue: 'Andrés'
				}
			],
			inputs2: [
				{
					listValue: 'España'
				},
				{
					listValue: 'Australia'
				},
				{
					listValue: 'Colombia'
				},
				{
					listValue: 'Argentina'
				}
			],
			inputs3: [
				{
					listValue: 'Supermán'
				},
				{
					listValue: 'Batman'
				}
			]
		}
	};
});

esp206.controller('Act5Ctrl', function ($scope){
	$scope.items = [
		{
			resource: "ninos-jugando-en-el-campo.png",
			alt: "Imagen donde se muestra dos niñas y dos niños jugando con una pelota en un parque",
			pattern: [0, 10, 13, 18, 21, 24, 29, 34, 41],
			text:"Ana es una niña de 10 años, ella vive en Bogotá una linda ciudad con calles anchas, muchos árboles y lindas flores . A Ana le gusta andar en bicicleta y jugar a la pelota con sus amigos Daniela, Luis y Juan .",
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 9,
		minRightAnswers: 4,
		examples:['Ana','bicicleta','pelota','Bogotá','tenedor','sopa', "flores", "árboles", "ciudad", "Juan"],
		itemsPerRow : 1
	};
});

esp206.controller('Act6Ctrl', function ($scope) {
	$scope.data = {
		chancesPerItem: 1,
		data: [
			{
				tableText: "Nombre de tus padres"
			},
			{
				tableText: "Nombre de tus hermanos"
			},
			{
				tableText: "Nombre de tus abuelos"
			},
			{
				tableText: "Nombre de tu mejor amigo o amiga"
			}
		]
	};
});

esp206.controller('Act7Ctrl', function ($scope){
	$scope.options = {
		link: "http://www.juntadeandalucia.es/averroes/colegiovirgendetiscar/profes/trabajos/palabras/sustantivos1.html",
		link2: "http://www.primaria.librosvivos.net/archivosCMS/3/3/16/usuarios/103294/9/U3_Len3_nombresclases/frame_prim.swf"
	};
});
(function () {
    var appManager = AppManager();
    var esp207 = angular.module('esp207', ['activities']);

    appManager.configModule(esp207, {
        resources: '../resources/02/esp/07',
        competences1: 'Produzco textos orales que responden a distintos propósitos comunicativos.',
        competences2: 'Reconoce y usa palabras sinónimas en sus producciones orales y textuales. ',
        competencesSound: true,
        evidences: 'Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, actividad de evidencia, guía 2, lección 7; descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.',
        evidencesSound: true,
        farewell: '¡Muy bien!, ahora ya sabes qué son palabras sinónimas.',
        routes: [
            { 
                name: '/conceptualizacion-1', 
                templateUrl: 'con1', 
                controller: 'Con1Ctrl',
                title: 'Lección 7: Palabras sinónimas'
            },
            {
                name: '/conceptualizacion-2',
                templateUrl: 'con2',
                controller: 'Con2Ctrl',
                title: 'Lección 7: Palabras sinónimas'
            },
            {
                name: '/conceptualizacion-3',
                templateUrl: 'con3',
                controller: 'Con3Ctrl',
                title: 'Lección 7: Palabras sinónimas'
            },
            { 
                name: '/actividad-1', 
                templateUrl: 'act1', 
                controller: 'Act1Ctrl',
                title: 'Actividad N°1'
            },
            { 
                name: '/actividad-2', 
                templateUrl: 'act2', 
                controller: 'Act2Ctrl',
                title: 'Actividad N°2'
            },
            { 
                name: '/actividad-2-2', 
                templateUrl: 'act2_2', 
                controller: 'Act2_2Ctrl',
                title: 'Actividad N°2'
            },
            { 
                name: '/actividad-3', 
                templateUrl: 'act3', 
                controller: 'Act3Ctrl',
                title: 'Actividad N°3'
            },
            { 
                name: '/actividad-4', 
                templateUrl: 'act4', 
                controller: 'Act4Ctrl',
                title: 'Actividad N°4'
            },
            { 
                name: '/actividad-5', 
                templateUrl: 'act5', 
                controller: 'Act5Ctrl',
                title: 'Actividad N°5'
            },
            { 
                name: '/actividad-6', 
                templateUrl: 'act6', 
                controller: 'Act6Ctrl',
                title: 'Actividad N°6'
            }
        ]
    });

    esp207.controller('Con1Ctrl', function($scope){
        $scope.groups = [
            {
                img: "Rosa-roja.png",
                imgalt: "Imagen donde se muestra una rosa de color rojo",
                items: [
                    {
                        text: 'Hermosa'
                    },
                    {
                        text: 'Linda'
                    },
                    {
                        text: 'Bonita'
                    },
                    {
                        text: 'Bella'
                    }
                ]
            },
            {
                img: "pastel.png",
                imgalt: "Imagen donde se muestra un pastel de fresa, con dos cerezas encima",
                items: [
                    {
                        text: 'Rica'
                    },
                    {
                        text: 'Deliciosa'
                    },
                    {
                        text: 'Sabrosa'
                    }
                ]
            }
        ],
        $scope.options = {
            groups: $scope.groups,
            customClass: "show-concepts-group-examples-small",
            /*items: $scope.items,*/
            itemsPerRow : 3
        };
    });

    esp207.controller('Con2Ctrl', function($scope){
        $scope.data = [
            {
                img: "profesora.png",
                alt: "Imagen donde se muestra una profesora, enseñando las vocales",
                phrases: [
                    "Catalina es <span style='color:red;'>profesora</span> de primaria.",
                    "Catalina es <span style='color:red;'>maestra</span> de primaria."
                ],
                titles: ["Palabras sinónimas", "Palabras sinónimas"]
            }
        ];
    });

      esp207.controller('Con3Ctrl', function($scope){
        $scope.data = [
            {
                img: "estudiante.png",
                alt: "Joven feliz porque ha resuelto fácilmente su tarea en el computador",
                phrases: [
                    "Hacer la tarea es <span style='color:red;  margin-left:1px;'>fácil</span> para mí.",
                    "Hacer la tarea es <span style='color:red;'>sencillo</span> para mí."
                ],
                titles: ["Palabras sinónimas", "Palabras sinónimas"]
            }
        ];
    });

    esp207.controller('Act1Ctrl', function ($scope){
        $scope.data = {
            isPrefix: false,
            hasOptions: true,
            noTitle: false,
            chancesPerItem: 2,
            minRightAnswers: 6,
            numOptions: 6,
            textMainTitle: "Palabra",
            textInput1Title: "Palabra sinónima",
            data: [
                {
                    textGuide: "Automóvil",
                    inputSingle: [
                        {
                            option: "Carro",
                        }
                    ]
                },
                {
                    textGuide: "Lentes",
                    inputSingle: [
                        {
                            option: "Gafas",
                        }
                    ]
                },
                {
                    textGuide: "Querido",
                    inputSingle: [
                        {
                            option: "Amado",
                        }
                    ]
                },
                {
                    textGuide: "Obeso",
                    inputSingle: [
                        {
                            option: "Gordo",
                        }
                    ]
                },
                {
                    textGuide: "Cabello",
                    inputSingle: [
                        {
                            option: "Pelo",
                        }
                    ]
                },
                {
                    textGuide: "Enseñar",
                    inputSingle: [
                        {
                            option: "Educar",
                        }
                    ]
                }
            ],
            opts: ["Amado", "Pelo", "Carro", "Gafas", "Gordo", "Educar"]
        };
    });

    esp207.controller("Act2Ctrl", function ($scope) {
        $scope.data = {
            chancesPerItem: 2,
            minRightAnswers: 4,
            questions: [
                {
                    number: 1,
                    question: "Profesor",
                    answers: [
                        {text: "Maestro",answer: true}, 
                        {text: "Persona"},
                        {text: "Profesional"}
                    ]
                },
                {
                    number: 2,
                    question: "Médico",
                    answers: [
                        {text: "Ayudante"}, 
                        {text: "Profesional"},
                        {text: "Doctor",answer: true}
                    ]
                },
                {
                    number: 3,
                    question: "Carro",
                    answers: [
                        {text: "Objeto"}, 
                        {text: "Auto",answer: true},
                        {text: "Moto"}
                    ]
                },
                {
                    number: 4,
                    question: "Temor",
                    answers: [
                        {text: "Calma"}, 
                        {text: "Valor"},
                        {text: "Miedo",answer: true}
                    ]
                }
            ]
        };
    });
    
    esp207.controller('Act2_2Ctrl', function($scope){
        $scope.data = {
            items: [
                {   
                    question: "Mirar",
                    answer: 'Ver'
                },
                {   
                    question: "Saltar",
                    answer: 'Brincar'
                },
                {   
                    question: "Aseado",
                    answer: 'Limpio'
                },
                {   
                    question: "Vencer",
                    answer: 'Ganar'
                },
                {   
                    question: "Lindo",
                    answer: 'Hermoso'
                },
                {   
                    question: "Terminar",
                    answer: 'Finalizar'
                }
            ],
            answers:[

                {   
                    answer: "Ganar",
                    w:202 , h:2 , t:54 , l:-57 ,r:-67 
                },
                {   
                    answer: "Hermoso",
                    w:202 , h:2 , t:83 , l:-57 ,r:-67 
                },
                {   
                    answer: "Finalizar",
                    w:202 , h:2 , t:109 , l:-57 ,r:-67
                },
                {   
                    answer: "Limpio",
                    w:102 , h:2 , t:82 , l:-7 ,r:41   
                },
                {   
                    answer: "Brincar",
                    w:201 , h:2 , t:81 , l:-57 ,r:68   
                },
                {   
                    answer: "Ver",
                    w:315 , h:2 , t:79 , l:-112 ,r:77  
                }
            ],
            //EXAMPLES
            // w:149 , h:2 , t:68 , l:-31 ,r:61 2-ITEMS ABAJO
            // w:149 , h:2 , t:98 , l:-31 ,r:-61 2-ITEMS ARRIBA
            // w:206 , h:2 , t:55 , l:-59 ,r:-69 3-ITEMS ARRIBA
            // w:103 , h:2 , t:55 , l:-7 ,r:-42 1-ITEMS ARRIBA

            minRightAnswers:4, 
            chancesPerItem :2
                
        };
    });

    esp207.controller("Act3Ctrl", function ($scope) {
        $scope.data = {
            chancesPerItem: 2,
            minRightAnswers: 3,
            questions: [
                {
                    number: 1,
                    question: "<br />",
                    answers: [
                        {text: "Viejo"}, 
                        {text: "Antiguo"},
                        {text: "Anticuado"},
                        {text: "Moderno",answer: true}
                    ]
                },
                {
                    number: 2,
                    question: "<br />",
                    answers: [
                        {text: "Vivienda"}, 
                        {text: "Casa"},
                        {text: "Pelota",answer: true}, 
                        {text: "Residencia"}
                    ]
                },
                {
                    number: 3,
                    question: "<br />",
                    answers: [
                        {text: "Preservar"}, 
                        {text: "Conservar"},
                        {text: "Cuidar"},
                        {text: "Agredir",answer: true}
                    ]
                },
                {
                    number: 4,
                    question: "<br />",
                    answers: [
                        {text: "Hablar"}, 
                        {text: "Callar",answer: true},
                        {text: "Dialogar"}, 
                        {text: "Conversar"}
                    ]
                },
                {
                    number: 5,
                    question: "<br />",
                    answers: [
                        {text: "Lapicero",answer: true}, 
                        {text: "Rogar"},
                        {text: "Pedir"}, 
                        {text: "Implorar"}
                    ]
                }
            ]
        };
    });

    esp207.controller('Act4Ctrl', function ($scope) {
        $scope.data = {
            chancesPerItem: 2,
            minRightAnswers: 3,
            items: [
                {
                    number: 1,
                    pattern: [2],
                    text:"Nos gusta caminar (andar) por el campo.",
                    answers: {
                        "2": {
                            answer: "caminar",
                            options: ["detenerse", "caminar", "parar", "brincar"]
                        }
                    }
                },
                {
                    number: 2,
                    pattern: [5],
                    text:"Camila es una niña muy inteligente (sabia).",
                    answers: {
                        "5": {
                            answer: "inteligente",
                            options: ["bonita", "alta", "inteligente", "necia"]
                        }
                    }
                },
                {
                    number: 3,
                    pattern: [4],
                    text:"Luisa me dio un pedazo (trozo) de chocolatina.",
                    answers: {
                        "4": {
                            answer: "pedazo",
                            options: ["pedazo", "florero", "regalo", "barra"]
                        }
                    }
                },
                {
                    number: 4,
                    pattern: [3],
                    text:"Andrés tiene unos bonitos (lindos) ojos.",
                    answers: {
                        "3": {
                            answer: "bonitos",
                            options: ["raros", "bonitos", "feos", "pequeños"]
                        }
                    }
                },
                {
                    number: 5,
                    pattern: [1],
                    text:"Lina baila (danza) muy bien.",
                    answers: {
                        "1": {
                            answer: "baila",
                            options: ["brinca", "camina", "corre", "baila"]
                        }
                    }
                }
            ]
        };
    });
    
    esp207.controller('Act5Ctrl', function ($scope) {
        $scope.data = {
            hasExample: false,
            groups: [
                {
                    title: "Palabra",
                    numInputs: 5
                },
                {
                    title: "Sinónimo",
                    numInputs: 5
                }
            ]
        };
    });

    esp207.controller('Act6Ctrl', function ($scope){
        $scope.options = {
            link: "http://www.primaria.librosvivos.net/archivosCMS/3/3/16/usuarios/103294/9/Lengua5EP_los_sinonimos/frame_prim.swf"
        };
    });
})();
var appManager = AppManager();
var esp208 = angular.module('esp208', ['activities']);

appManager.configModule(esp208, {
	resources: '../resources/02/esp/08',
	farewell: '¡Muy bien!, ahora ya sabes cuándo debes emplear las letras mayúsculas.',
	evidencesSound:true,
	evidences: 'Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, actividad de evidencia, guía 2, lección 8; descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.',
	routes:[
		{ 
			name: '/competencias', 
			templateUrl: 'comp', 
			controller: 'CompCtrl',
			title:"Estándares básicos de competencias"
		},
		{ 
			name: '/conceptualizacion-1', 
			templateUrl: 'con1', 
			controller: 'Con1Ctrl',
			title: 'Lección 8: Letras mayúsculas y minúsculas'
		},
		{ 
			name: '/conceptualizacion-2', 
			templateUrl: 'con2', 
			controller: 'Con2Ctrl',
			title: 'Lección 8: Letras mayúsculas y minúsculas'
		},
		{ 
			name: '/actividad-1', 
			templateUrl: 'act1', 
			controller: 'Act1Ctrl',
			title: 'Actividad 1 | Lección 8'
		},
		{ 
			name: '/actividad-1-2', 
			templateUrl: 'act1-2', 
			controller: 'Act1-2Ctrl',
			title: 'Actividad 1 - 2 | Lección 8'
		},
		{ 
			name: '/actividad-1-3', 
			templateUrl: 'act1-3', 
			controller: 'Act1-3Ctrl',
			title: 'Actividad 1 - 3 | Lección 8'
		},
		{ 
			name: '/actividad-1-4', 
			templateUrl: 'act1-4', 
			controller: 'Act1-4Ctrl',
			title: 'Actividad 1 - 4 | Lección 8'
		},
		{ 
			name: '/actividad-2', 
			templateUrl: 'act2', 
			controller: 'Act2Ctrl',
			title: 'Actividad 2 | Lección 8'
		},
		{ 
			name: '/actividad-3', 
			templateUrl: 'act3', 
			controller: 'Act3Ctrl',
			title: 'Actividad 3 | Lección 8'
		},
		{ 
			name: '/actividad-4', 
			templateUrl: 'act4', 
			controller: 'Act4Ctrl',
			title: 'Actividad 4 | Lección 8'
		},
	    {
			name: '/actividad-5', 
			templateUrl: 'act5', 
			controller: 'Act5Ctrl',
			title: 'Actividad complementaria'
		}
		
	]
	
});

esp208.controller('CompCtrl', function($scope){
	$scope.data = [
		{
			title: 'Estándar de competencia:',
			text1: 'Produzco textos escritos que responden a diversas necesidades comunicativas.',
		},
		{
			title: 'Elementos de competencia:',
			text1: 'Identifica las letras mayúsculas y minúsculas en palabras y frases.'
			
		}
		
	];
});

esp208.controller('Con1Ctrl', function($scope){
	$scope.$root.isNextEnabled = true; // Activa el botón de siguiente
});

esp208.controller('Con2Ctrl', function($scope){
	$scope.data = {
    items: [
      {
        number: 1,
        src: "R1",
        text: "Se debe escribir con mayúscula al empezar un escrito o después de un punto. Ejemplo:<br><br><strong>M</strong>añana salimos de paseo con toda mi familia. <strong>T</strong>odos estamos muy felices."
      },
      {
        number: 2,
        src: "R2",
        text: "Se escribe con mayúscula los nombres propios de personas o animales. Ejemplo:<br><br><strong>M</strong>arcela <strong>L</strong>ópez <strong>G</strong>allego"
      },
      {
        number: 3,
        src: "R3",
        text: "Se escribe con mayúscula los nombres propios geográficos de continentes, países, ciudades, mares, ríos, etc. Ejemplo:<br><br><strong>A</strong>mérica - <strong>P</strong>anamá - <strong>M</strong>edellín - <strong>A</strong>tlántico  - río <strong>B</strong>ogotá"
      },
      {
        number: 4,
        src: "R4",
        text: "Se escribe con mayúscula los títulos de obras como: libros, películas, cuadros, programas de radio o televisión, etc. Ejemplo:<br><br><strong>E</strong>l gato con botas  – <strong>B</strong>lancanieves y los siete enanitos - <strong>S</strong>upermán"
      },
      {
        number: 5,
        src: "R5",
        text: "Se escribe con mayúscula los nombres de entidades, organismos, departamentos, edificios, monumentos, establecimientos públicos, etc. Ejemplo:<br><br><strong>C</strong>asa de Nariño – <strong>M</strong>inisterio de Hacienda -  <strong>B</strong>iblioteca Nacional"
      },
      {
        number: 6,
        src: "R6",
        text: "Se debe escribir con mayúscula los títulos, cargos y nombres de dignidades importantes siempre y cuando no se mencione su nombre propio. Ejemplo:<br><br><strong>R</strong>ey – <strong>P</strong>apa – <strong>P</strong>residente"
      }
    ]
  }
});

esp208.controller('Act1Ctrl', function($scope){
	$scope.items = [
		{	
			name:'a',
			text:'A',
		},
		{
			name:'b',
			text:'B',
		},
		{	
			name:'c',
			text:'C',
		},
		{	
			name:'d',
			text:'D',
		},
		{	
			name:'e',
			text:'E',
		},
		{	
			name:'f',
			text:'F'
		},
		{
			name:'g',
			text:'G'
		},
		{	
			name:'h',
			text:'H'
		},
		{	
			name:'i',
			text:'I'
		},
		{	
			name:'j',
			text:'J'
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 10,
		minRightAnswers: 10,
		itemsPerRow : 3
	};
});

esp208.controller('Act1-2Ctrl', function ($scope) {
	$scope.items = [
		{	
			name:'k',
			text:'K',
		},
		{
			name:'l',
			text:'L',
		},
		{	
			name:'m',
			text:'M',
		},
		{	
			name:'n',
			text:'N',
		},
		{	
			name:'ñ',
			text:'Ñ'
		},
		{	
			name:'o',
			text:'O',
		},
		{	
			name:'p',
			text:'P'
		},
		{
			name:'q',
			text:'Q'
		},
		{	
			name:'r',
			text:'R'
		},
		{	
			name:'s',
			text:'S'
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 10,
		minRightAnswers: 10,
		itemsPerRow : 3
	};
});

esp208.controller('Act1-3Ctrl', function ($scope) {
	$scope.items = [
		{	
			name:'t',
			text:'T',
		},
		{
			name:'u',
			text:'U',
		},
		{	
			name:'v',
			text:'V',
		},
		{	
			name:'w',
			text:'W',
		},
		{	
			name:'x',
			text:'X'
		},
		{	
			name:'y',
			text:'Y',
		},
		{	
			name:'z',
			text:'Z'
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 7,
		minRightAnswers: 7,
		itemsPerRow : 3
	};
});

esp208.controller('Act1-4Ctrl', function($scope){
	$scope.items = [
		{
			name: "Cr istian",
			pattern: [0],
			resource: "nino"
		},
		{
			name: "Juliana",
			pattern: [0],
			resource: "nina"
		},
		{
			name: "Felipe",
			pattern: [0],
			resource: "nino2"
		},
		{
			name: "Toby",
			pattern: [0],
			resource: "perro"
		},
		{
			name: "Luna",
			pattern: [0],
			resource: "gata"
		},
		{
			name: "Medellín",
			pattern: [0],
			resource: "medellin"
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 6,
		minRightAnswers: 4,
		itemsPerRow: 3,
		chancesPerItem: 2
	};
});

esp208.controller('Act2Ctrl', function($scope){
	$scope.items = [
		{
			name: "1",
			pattern: [0,2,4,11,13,31,37,39,42,44],
			text:"H ola M arcela: T e escribo desde la ciudad de B ogotá. L legamos ayer y hemos paseado por todas las calles de esta ciudad, son muy bonitas y transitadas. T oda mi familia ha venido: J uan, S andra y J erónimo. V olvemos el martes en la tarde. ",
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 10,
		minRightAnswers: 9,
		itemsPerRow : 1,
		chancesPerItem: 2
	};
});


esp208.controller('Act3Ctrl', function ($scope) {
   $scope.items = [
		{
			name: "1",
			pattern: [0,4,],
			text:"M añana hará frío. M e pondré el abrigo nuevo. (m, m)",
		},
		{
			name: "2",
			pattern: [0,2,5,11],
			text:"M aría, A na y J uan irán de paseo a C ali.(m, a, j, c)",
		},
		{
			name: "3",
			pattern: [0,2,5],
			text:"E l P residente de C olombia hizo ayer unas declaraciones.(e, p, c)",
		},
		{
			name: "4",
			pattern: [0,3,8],
			text:"M i amigo C arlos regresó ayer de B ogotá. (m, c, b)",
		},
		{
			name: "5",
			pattern: [0,3,7],
			text:"E l río C auca pasa por A ntioquia.     (e, c, a)",
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 14,
		minRightAnswers: 12,
		itemsPerRow : 1,
		chancesPerItem: 2
	};
});

esp208.controller('Act4Ctrl', function($scope){
	$scope.data = {
		groups: [
			{
				title: "Nombres y apellidos de familiares",
				numInputs: 5
			}
		]
	};
});

esp208.controller('Act5Ctrl', function($scope){
	$scope.options = {
		link: "http://www.edu365.cat/primaria/muds/castella/ortografiate/ortografiate3/contenido/sd01/sd01_oa01/index.html",
	};
});



var appManager = AppManager();
var esp209 = angular.module('esp209', ['activities']);

appManager.configModule(esp209, {
	resources: '../resources/02/esp/09',
	farewell: 'Muy bien!, ahora conoces los elementos de la comunicación.',
	evidencesSound:true,
	evidences: 'Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, actividad de evidencia, guía 2, lección 9; descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.',
	routes:[
		{ 
			name: '/competencias', 
			templateUrl: 'comp', 
			controller: 'CompCtrl',
			title:"Estándares básicos de competencias"
		},
		{ 
			name: '/conceptualizacion-1', 
			templateUrl: 'con1', 
			controller: function () {},
			title: 'Lección 9: Elementos de la comunicación'
		},
		{ 
			name: '/conceptualizacion-2', 
			templateUrl: 'con2', 
			controller: 'Con2Ctrl',
			title: 'Lección 9: Elementos de la comunicación'
		},
    { 
      name: '/conceptualizacion-3', 
      templateUrl: 'con3', 
      controller: 'Con3Ctrl',
      title: 'Lección 9: Elementos de la comunicación'
    },
		{ 
			name: '/actividad-1', 
			templateUrl: 'act1', 
			controller: 'Act1Ctrl',
			title: 'Actividad 1 | Lección 9'
		},
		{ 
			name: '/actividad-2', 
			templateUrl: 'act2', 
			controller: 'Act2Ctrl',
			title: 'Actividad 2 | Lección 9'
		},
    { 
      name: '/actividad-2-2', 
      templateUrl: 'act2-2', 
      controller: 'Act2-2Ctrl',
      title: 'Actividad 2 - 2 | Lección 9'
    },
    { 
      name: '/actividad-2-3', 
      templateUrl: 'act2-3', 
      controller: 'Act2-3Ctrl',
      title: 'Actividad 2 - 3 | Lección 9'
    },
		{ 
			name: '/actividad-3', 
			templateUrl: 'act3', 
			controller: 'Act3Ctrl',
			title: 'Actividad 3 | Lección 9'
		},
    { 
      name: '/actividad-3-2', 
      templateUrl: 'act3-2', 
      controller: 'Act3-2Ctrl',
      title: 'Actividad 3 - 2 | Lección 9'
    },
    { 
      name: '/actividad-3-3', 
      templateUrl: 'act3-3', 
      controller: 'Act3-3Ctrl',
      title: 'Actividad 3 - 3 | Lección 9'
    },
		{ 
			name: '/actividad-4', 
			templateUrl: 'act4', 
			controller: 'Act4Ctrl',
			title: 'Actividad 4 | Lección 9'
		},
		{
			name: '/actividad-5', 
			templateUrl: 'act5', 
			controller: 'Act5Ctrl',
			title: 'Actividad 5 | Lección 9'
		},
    {
      name: '/actividad-6', 
      templateUrl: 'act6', 
      controller: 'Act6Ctrl',
      title: 'Actividad 6 | Lección 9'
    },
    { 
      name: '/actividad-7', 
      templateUrl: 'act7', 
      controller: 'Act7Ctrl',
      title:"Actividad complementaria",
    }
	]
	
});

esp209.controller('CompCtrl', function($scope){
	$scope.data = [
		{
			title: 'Estándar de competencia:',
			text1: 'Identifico los principales elementos y roles de la comunicación para enriquecer procesos comunicativos auténticos.',
		},
		{
			title: 'Elemento de competencia:',
			text1: 'Reconoce los principales elementos de un proceso de comunicación, aplicándolos a su desarrollo comunicativo.',
		}
		
	];
});

esp209.controller('Con2Ctrl', function($scope){
 $scope.data = {
    blocks: [
      {
        img: "emisor.png",
        alt: "Imagen donde se muestra un recuadro con el texto emisor",
        text: "El emisor es la persona que inicia el proceso de comunicación y por tanto es quien transmite la información.",
        audio: "emisor"
      },
      {
        img: "mensaje.png",
        alt: "Imagen donde se presenta una flecha con el texto mensaje",
        text: "El mensaje es la información transmitida desde el emisor hacia el receptor.",
        audio: "mensaje"
      },
      {
        img: "codigo.png",
        alt: "Imagen donde se muestra un recuadro con el texto codigo",
        text: "El código es el sistema empleado por el emisor para transmitir el mensaje, éste puede ser mediante el habla o por medio de imágenes, señales, sonidos o escritos.",
        audio: "codigo"
      },
      {
        img: "mensaje.png",
        alt: "Imagen donde se presenta una flecha con el texto mensaje",
        text: "El mensaje es la información transmitida desde el emisor hacia el receptor.",
        audio: "mensaje"
      },
      {
        img: "receptor.png",
        alt: "Imagen donde se muestra un recuadro con el texto receptor",
        text: "El receptor es la persona o personas que reciben la información.",
        audio: "receptor"
      }
    ]
  }
});

esp209.controller('Con3Ctrl', function($scope){
 $scope.items = [
    {
      text: 'Emisor',
      placement: 'left',
      w: 120, h: 150, t: 41, l: 15
    },
    {
      text: 'Mensaje',
      w: 200, h: 80, t: 5, l: 30
    },
    {
      text: 'Receptor',
      placement: 'right',
      w: 120, h: 250, t: 35, l: 70
    },
    {
      text: 'Código: lenguaje verbal (mediante el habla)',
       placement: 'bottom',
      w: 100, h: 100, t: 30, l: 40
    }
  ];

  $scope.options = {
    items: $scope.items,
    canvas: 'elementos.png',
    altcanvas: 'donde se muestra un niño hablándole a su compañero de estudio, él le dice: la tarea es para mañana',
    chancesPerItem: 2,
    imgStyle: "margin-bottom: 3%;",
    chances: 8,
    minRightAnswers: 8,
    itemsPerRow: 3
  };
});

esp209.controller('Act1Ctrl', function ($scope) {
   $scope.items = [
   {
      sil: '<strong>Receptor</strong>',
      resource: '<strong>Es la persona o personas que reciben la información.</strong>',
    },
    {
      sil: '<strong>Emisor</strong>',
      resource: '<strong>Es la persona que transmite la información.</strong>',
    },
    {
      sil: '<strong>Mensaje</strong>',
      resource: '<strong>La información que transmite el emisor.</strong>',
    },
    {
      sil: '<strong>Código</strong>',
      resource: '<strong>Sistema empleado por el emisor para transmitir el mensaje.</strong>',
    }
  ];

  $scope.options = {
    data: $scope.items,
    minRightAnswers: 4,
    randomItems: true,
  };
});


esp209.controller('Act2Ctrl', function($scope){
 $scope.data = {
    minRightAnswers: 4,
    src: 'despedida.png',
    alt:'Niño en un tren despidiéndose de sus amigos. Él le dice a sus amigos: ¡hasta pronto!',
    text: '<h3 style="width: 80%;margin-left:10%;margin-bottom:20px">Desde la ventanilla del tren, Juan  dice: ¡hasta pronto! y se despide de sus amigos que han ido a despedirlo.</h3>',
    questions: [
      {
        number: 1,
        question: "Emisor:",
        answers: [
          { text: "Juan", answer: true},
          { text: "Camilo" },
          { text: "Teresa "}
        ]
      },
      {
        number: 2,
        question: "Receptor:",
        answers: [
          { text: "amigos", answer: true  },
          { text: "padres" },
          { text: "Carlos"}
        ]
      },
      {
        number: 3,
        question: "Mensaje:",
        answers: [
          { text: "¡Hasta luego!"},
          { text: "los quiero mucho" },
          { text: "¡Hasta pronto!", answer: true }
        ]
      },
      {
        number: 4,
        question: "Código:",
        answers: [
          { text: "señas"},
          { text: "habla", answer: true  },
          { text: "escritura"}
        ]
      }
    ]
  };
});

esp209.controller('Act2-2Ctrl', function($scope){
 $scope.data = {
    minRightAnswers: 4,
    src: 'tarjeta.png',
    alt:'donde se muestra una tarjeta, tiene como mensaje: ¡Felicitaciones!, junto a ella hay un sobre de color azul',
    text: '<h3 style="width: 80%;margin-left:10%;margin-bottom:20px">María envía una tarjeta de felicitaciones a su amigo Andrés por su cumpleaños.</h3>',
    questions: [
      {
        number: 1,
        question: "Emisor:",
        answers: [
          { text: "María", answer: true},
          { text: "Andrés" },
          { text: "Teresa"}
        ]
      },
      {
        number: 2,
        question: "Receptor:",
        answers: [
          { text: "María"},
          { text: "Andrés", answer: true },
          { text: "Carlos"}
        ]
      },
      {
        number: 3,
        question: "Mensaje:",
        answers: [
          { text: "¡hasta pronto!"},
          { text: "te quiero mucho" },
          { text: "¡Felicitaciones!", answer: true }
        ]
      },
      {
        number: 4,
        question: "Código:",
        answers: [
          { text: "señas"},
          { text: "habla"},
          { text: "escritura", answer: true }
        ]
      }
    ]
  };
});

esp209.controller('Act2-3Ctrl', function($scope){
 $scope.data = {
    minRightAnswers: 4,
    src: 'nino.png',
    alt:'donde se muestra un niño hablando por teléfono.',
    text: '<h3 style="width: 80%;margin-left:10%;margin-bottom:20px">Carlos llama por teléfono a Juliana para saludarla.</h3>',
    questions: [
      {
        number: 1,
        question: "Emisor:",
        answers: [
          { text: "Juliana"},
          { text: "Andrés" },
          { text: "Carlos", answer: true}
        ]
      },
      {
        number: 2,
        question: "Receptor:",
        answers: [
          { text: "Carlos"},
          { text: "Juliana", answer: true },
          { text: "Andrés"}
        ]
      },
      {
        number: 3,
        question: "Mensaje:",
        answers: [
          { text: "saludo", answer: true},
          { text: "despedida"},
          { text: "¡Felicitaciones!"}
        ]
      },
      {
        number: 4,
        question: "Código:",
        answers: [
          { text: "señas"},
          { text: "habla", answer: true },
          { text: "escritura"}
        ]
      }
    ]
  };
});

esp209.controller('Act3Ctrl', function($scope){
	 $scope.data = {
    minRightAnswers: 4,
    src: 'ninos.png',
    alt:'Dos niños conversando, uno de ellos (Pedro) le dice al otro: ¡Hola Juan!¿Qué haces? y Juan le responde: ¡Hola! Estoy esperando a Carlos',
    questions: [
      {
        number: 1,
        question: "Emisor:",
        answers: [
          { text: "Juan"},
          { text: "Andrés" },
          { text: "Pedro", answer: true}
        ]
      },
      {
        number: 2,
        question: "Receptor:",
        answers: [
          { text: "Carlos"},
          { text: "Juan", answer: true },
          { text: "Pedro"}
        ]
      },
      {
        number: 3,
        question: "Mensaje:",
        answers: [
          { text: "¡Hola Juan! ¿Qué haces?", answer: true},
          { text: "hola"},
          { text: "¿qué haces?"}
        ]
      },
      {
        number: 4,
        question: "Código:",
        answers: [
          { text: "señas"},
          { text: "habla", answer: true },
          { text: "escritura"}
        ]
      }
    ]
  };
});

esp209.controller('Act3-2Ctrl', function($scope){
   $scope.data = {
    minRightAnswers: 4,
    src: 'madrehijo.png',
    alt:'Una mujer le pregunta a su hijo: ¿Cómo te fue en el parque? y él le responde: ¡Muy bien!, me divertí mucho',
    questions: [
      {
        number: 1,
        question: "Emisor:",
        answers: [
          { text: "Juliana"},
          { text: "mamá", answer: true },
          { text: "hijo"}
        ]
      },
      {
        number: 2,
        question: "Receptor:",
        answers: [
          { text: "hijo", answer: true },
          { text: "Juan"},
          { text: "mamá"}
        ]
      },
      {
        number: 3,
        question: "Mensaje:",
        answers: [
          { text: "¿Cómo te fué en el parque?", answer: true},
          { text: "hola"},
          { text: "muy bien"}
        ]
      },
      {
        number: 4,
        question: "Código:",
        answers: [
          { text: "señas"},
          { text: "habla", answer: true },
          { text: "escritura"}
        ]
      }
    ]
  };
});

esp209.controller('Act3-3Ctrl', function($scope){
   $scope.data = {
    minRightAnswers: 4,
    src: 'ninotendero.png',
    alt:'Niño de nombre Marcos está cargando una caja con unos envases de vidrio en su interior y dice: Aquí traigo las botellas, mientras un señor (Juan) le responde: ¡Muy bien!, ven te recibo',
    questions: [
      {
        number: 1,
        question: "Emisor:",
        answers: [
          { text: "Juan"},
          { text: "Marcos", answer: true},
          { text: "Pedro"}
        ]
      },
      {
        number: 2,
        question: "Receptor:",
        answers: [
          { text: "Marcos"},
          { text: "Juan", answer: true },
          { text: "Camila"}
        ]
      },
      {
        number: 3,
        question: "Mensaje:",
        answers: [
          { text: "Aquí traigo las botellas", answer: true},
          { text: "saludo"},
          { text: "despedida"}
        ]
      },
      {
        number: 4,
        question: "Código:",
        answers: [
          { text: "señas"},
          { text: "habla", answer: true },
          { text: "escritura"}
        ]
      }
    ]
  };
});

esp209.controller('Act4Ctrl', function($scope){
   $scope.data = {
    minRightAnswers: 4,
    feedback: "<p>Las respuestas correctas son:</p>\n<ol style=\"font-size: 26px;\">\n    <li>V</li>\n    <li>F</li>\n    <li>V</li>\n    <li>F</li>\n </ol>",
    items: [
      { text: "La comunicación es el proceso mediante el cual las personas transmiten y reciben información.", answer: "V" },
      { text: "Para que exista comunicación sólo es necesario la presencia de un emisor.", answer: "F" },
      { text: "Para que se produzca la comunicación es necesario que tanto el emisor como el receptor conozcan el código utilizado.", answer: "V" },
      { text: "Los elementos que intervienen en la comunicación son tres: el emisor, el receptor y el mensaje.", answer: "F" },
    ]
  };
});

esp209.controller('Act5Ctrl', function ($scope) {
  $scope.inputs = [];
  $scope.$root.isNextEnabled = true; // Activamos el siguiente link

  $scope.items = [];

  // llenamos el array
  for (var i = 0; i < 1; i++) {
    $scope.items.push({
      uno: ''
    });
  }
  var regex = function (value) {
    return !( value.match(/([bcdfghjklmnñpqrstvwxyz])/) && value.match(/([aeiou])/) && value.length >= 5 );
  };

  // antes de ir a la siguiente actividad, verificamos
  $scope.$root.beforeGoNext = function () {
    var error = false;

    // Recorremos los elementos, buscando que cumplan con las condiciones
    // Al menos una mayúscula, una minúscula y 4 letras
    $scope.items.forEach(function(item){
      if( regex(item.uno)) error = true;
    });

    if(error){
      // fracaso
      $scope.failure = true;
      return true;
    } else {
      // éxito
      $scope.success = true;
      return true;
    }
  };

});

esp209.controller('Act6Ctrl', function ($scope) {
  $scope.inputs = [];
  $scope.$root.isNextEnabled = true; // Activamos el siguiente link

  $scope.items = [];

  // llenamos el array
  for (var i = 0; i < 1; i++) {
    $scope.items.push({
      uno: '',
      dos: '',
      tres: '',
      cuatro: ''
    });
  }

  var regex = function (value) {
    return !( value.match(/([bcdfghjklmnñpqrstvwxyz])/) && value.match(/([aeiou])/) && value.length >= 5 );
  };

  // antes de ir a la siguiente actividad, verificamos
  $scope.$root.beforeGoNext = function () {
    var error = false;

    // Recorremos los elementos, buscando que cumplan con las condiciones
    // Al menos una mayúscula, una minúscula y 4 letras
    $scope.items.forEach(function(item){
      if( regex(item.uno) || regex(item.dos) || regex(item.tres)|| regex(item.cuatro)) error = true;
    });

    if(error){
      // fracado
      $scope.failure = true;
      return true;
    } else {
      // éxito
      $scope.success = true;
      return true;
    }
  };

});

esp209.controller('Act7Ctrl', function($scope){
  $scope.options = {
    link: "http://conteni2.educarex.es/mats/68015/contenido/",
  };
});


var appManager = AppManager();
var esp210 = angular.module('esp210', ['activities']);

appManager.configModule(esp210, {
	resources: '../resources/02/esp/10',
	farewell: 'Muy bien!, ahora ya sabes qué son las imágenes y cuál es su importancia en la comunicación.',
	evidencesSound:true,
	evidences: 'Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, actividad de evidencia, guía 2, lección 10; descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.',
	routes:[
		{ 
			name: '/competencias', 
			templateUrl: 'comp', 
			controller: 'CompCtrl',
			title:"Estándares básicos de competencias"
		},
		{ 
			name: '/conceptualizacion-1', 
			templateUrl: 'con1', 
			controller: 'Con1Ctrl',
			title: 'Lección 10: Las imágenes'
		},
		{ 
			name: '/conceptualizacion-2', 
			templateUrl: 'con2', 
			controller: 'Con2Ctrl',
			title: 'Lección 10: Las imágenes'
		},
		{ 
			name: '/actividad-1', 
			templateUrl: 'act1', 
			controller: 'Act1Ctrl',
			title: 'Actividad 1 | Lección 10'
		},
		{ 
			name: '/actividad-2', 
			templateUrl: 'act2', 
			controller: 'Act2Ctrl',
			title: 'Actividad 2 | Lección 10'
		},
    { 
      name: '/actividad-2-2', 
      templateUrl: 'act2-2', 
      controller: 'Act2-2Ctrl',
      title: 'Actividad 2 - 2 | Lección 10'
    },
    { 
      name: '/actividad-2-3', 
      templateUrl: 'act2-3', 
      controller: 'Act2-3Ctrl',
      title: 'Actividad 2 - 3 | Lección 10'
    },
		{ 
			name: '/actividad-3', 
			templateUrl: 'act3', 
			controller: 'Act3Ctrl',
			title: 'Actividad 3 | Lección 10'
		},
    { 
      name: '/actividad-3-2', 
      templateUrl: 'act3-2', 
      controller: 'Act3-2Ctrl',
      title: 'Actividad 3 - 2 | Lección 10'
    },
		{ 
			name: '/actividad-4', 
			templateUrl: 'act4', 
			controller: 'Act4Ctrl',
			title: 'Actividad 4 | Lección 10'
		},
		{
			name: '/actividad-5', 
			templateUrl: 'act5', 
			controller: 'Act5Ctrl',
			title: 'Actividad 5 | Lección 10'
		},
    {
      name: '/actividad-6', 
      templateUrl: 'act6', 
      controller: 'Act6Ctrl',
      title:"Actividad complementaria",
    }
	]
	
});

esp210.controller('CompCtrl', function($scope){
	$scope.data = [
		{
			title: 'Estándar de competencia:',
			text1: 'Identifico los principales elementos y roles de la comunicación para enriquecer procesos comunicativos auténticos.',
		},
		{
			title: 'Elemento de competencia:',
			text1: 'Realizo lecturas de imágenes en forma oral y escrita resaltando la importancia que ellas representan como medio de comunicación.',
		}
		
	];
});

esp210.controller('Con1Ctrl', function($scope){
  $scope.data = [
    {
      resource: 'pinas',
      audio: 'pinas',
      text: '<div class="bg-1 col-md-12" style="color: white;">Imagen de un objeto real</div>',
      alt:'Fotografía donde se muestran varias piñas, están ubicadas una encima de la otra',
      title: 'Braxmeier, H. (2011). Piña [Fotografía]. Obtenido de: http://pixabay.com/es/pi%C3%B1a-frutas-dulce-alimentos-5792/',
      type: 'jpg'
    },
    {
      resource: 'unicornio',
      text: '<div class="bg-1 col-md-12" style="color: white;">Imagen de un objeto ficticio</div>',
      alt:'Ilustración de un unicornio',
      title: 'Unicorn vector material [Ilustración]. Obtenido de: http://www.freepik.com/free-vector/unicorn-vector-material_509109.htm',
      type: 'jpg'
    },
    {
      resource: 'libro',
      text: '<div class="bg-1 col-md-12" style="color: white;">Imagen de un objeto real</div>',
      alt:'Fotografía de un libro de color azul',
      title: 'Töpfer, O. (2008). Books 1 [Fotografía]. Obtenido de: http://www.freeimages.com/photo/969873',
      type: 'jpg'
    }
  ];
});

esp210.controller('Con2Ctrl', function($scope){
 $scope.data = {
    itemsPerRow: 3,
    items: [
      { 
        src: "text1",
        img: "playa.jpg",
        alt: "Fotografía donde se muestra una playa y en ella hay dos sillas playeras y una sombrilla",
        imgTitle: 'Playa [Fotografía]. (2010). Obtenido de: http://pixabay.com/es/playa-cama-azul-silla-vacaciones-2342/',
        text:'<div style="font-size: 20px!important;line-height: 20px; padding: 5px;">Esta imagen nos comunica: calma, tranquilidad, descanso.</div>'
      },
      { 
        src: "text2",
        img: "discapacitado.png",
        alt: "Imagen de un rectángulo color azul, en su interior hay una silueta de una persona en silla de ruedas",
        text:'<div style="font-size: 20px!important;line-height: 20px; padding: 5px;display: inline-block;">Esta imagen nos informa que estamos ubicados en una zona accesible.</div>'
      },
      { 
        src: "text3",
        img: "abrazandoce.jpg",
        imgTitle: 'Alegría [Fotografía]. (2014). Obtenido de: http://pixabay.com/es/alegr%C3%ADa-bienvenidos-nos-vemos-284528/',
        alt: "Fotografía de un joven abrazando a un señor y una señora mayor",
        text:'<div style="font-size: 20px!important;line-height: 20px; padding: 5px;">Esta imagen nos comunica: unión familiar, amor, cariño.</div>'
      }
    ]
  };
});

esp210.controller('Act1Ctrl', function ($scope) {
   $scope.items = [
   {
      sil: '<strong>Amor</strong>',
      resource: 'familia.jpg',
      alt: 'Fotografía de una familia feliz, el padre está abrazando a su esposa y su hija',
      title: 'Familia [Fotografía]. (2012). Obtenido de: http://pixabay.com/es/mam%C3%A1-cauc%C3%A1sica-ni%C3%B1o-hija-familia-20666/'
    },
    {
      sil: '<strong>Descanso</strong>',
      resource: 'playa.jpg',
      alt: 'Fotografía donde se muestra una playa y en ella hay dos sillas playeras y una sombrilla',
      title: 'Playa [Fotografía]. (2010). Obtenido de: http://pixabay.com/es/playa-cama-azul-silla-vacaciones-2342/'
    },
    {
      sil: '<strong>Fiesta</strong>',
      resource: 'fiesta.png',
      alt: 'Imagen donde se muestran un niño y una niña sonriendo, rodeados de regalos, globos y aleluyas',
      title: ' '
    },
    {
      sil: '<strong>Estudiar</strong>',
      resource: 'estudiar.jpg',
      alt: 'Fotografía donde se muestran dos niñas, una de ellas escribe en su cuaderno mientras la otra la mira atentamente',
      title: '0008653710Z [Fotografía]. Obtenido de: http://www.photl.com/238343.html'
    },
    {
      sil: '<strong>Tristeza</strong>',
      resource: 'llorando.png',
      alt: 'Imagen donde se muestra un niño llorando',
      title: ' '
    }
  ];

  $scope.options = {
    data: $scope.items,
    minRightAnswers: 5,
    randomItems: true,
  };
});


esp210.controller('Act2Ctrl', function($scope){
 $scope.data = {
    src: 'madre.jpg',
    alt: 'Mago encerrado dentro de una  botella',
    imgwidth: '40',
    imgTitle: 'Madre [Fotografía]. (2014). Obtenido de: http://pixabay.com/es/madre-beb%C3%A9-feliz-familia-ni%C3%B1o-kid-316213/',
    questions: [
      {
        answerstyle: 'width: 95%;margin: 25px;',
        answers: [
          { text: "Imagen donde se muestra una mujer cargando una bebé."},
          { text: "Imagen donde se muestra una mujer cargando una bebé, ambas están felices.", answer: true },
          { text: "Imagen donde se muestra una mujer con un bebé en sus brazos, ambas se ven tristes." },
        ]
      }
    ]
  };
});

esp210.controller('Act2-2Ctrl', function($scope){
 $scope.data = {
    src: 'jugar.jpg',
    alt: 'Fotografía donde se muestra un niño y una niña muy entretenidos jugando con un balón.',
    imgTitle: 'Fabbri, G. (2006). Soccer school [Fotografía]. Obtenido de: http://www.freeimages.com/photo/542906',
    imgwidth: '40',
    questions: [
      {
        answerstyle: 'width: 95%;margin: 25px;',
        answers: [
          { text: "Imagen donde se muestran varios niños jugando."},
          { text: "Imagen donde se muestra un niño y una niña muy entretenidos jugando con un balón.", answer: true },
          { text: "Imagen donde se muestra un niño jugando con un balón." },
        ]
      }
    ]
  };
});

esp210.controller('Act2-3Ctrl', function($scope){
 $scope.data = {
    src: 'pc.jpg',
    alt: 'Fotografía donde se muestra a un joven trabajando feliz en su computador portátil',
    imgTitle: '0010867549T [Fotografía]. Obtenido de: http://www.photl.com/387532.html',
    imgwidth: '40',
    questions: [
      {
        answerstyle: 'width: 95%;margin: 25px;',
        answers: [
          { text: "Imagen donde se muestra un joven trabajando feliz en su computador portátil.", answer: true},
          { text: "Imagen donde se muestra un joven y un computador." },
          { text: "Imagen donde se muestra un computador portátil." },
        ]
      }
    ]
  };
});

esp210.controller('Act3Ctrl', function($scope){
	 $scope.data = {
    imgwidth: '100',
    maintext: '<img style="width: 20%;margin-left: 10%;" src="../resources/02/esp/10/nino1.png" alt="Imagen donde se muestra un niño enfermo, sudando por la alta fiebre. A su lado están sus padres con cara de preocupación" /> <img style="width: 20%;margin-left: 10%;" src="../resources/02/esp/10/nino2.png" alt="Los padres del niño enfermo hacen una llamada telefónica" /> <img style="width: 20%;margin-left: 10%;" src="../resources/02/esp/10/nino3.png" alt="El niño enfermo es revisado por un médico" />',
    questions: [
      {
        answerstyle: 'width: 95%;margin: 25px;',
        answers: [
          { text: "Carlos tiene fiebre muy alta, sus padres preocupados llaman a uno de sus amigos para que vaya a su casa y lo visite."},
          { text: "Carlos tiene fiebre muy alta, sus padres preocupados llaman al médico para que vaya a su casa y lo revise.", answer: true},
          { text: "Carlos está muy triste, sus padres preocupados llaman a uno de sus amigos para que lo visite y lo anime." },
        ]
      }
    ]
  };
});

esp210.controller('Act3-2Ctrl', function($scope){
   $scope.data = {
    maintext: '<img style="width: 20%;margin-left: 10%;" src="../resources/02/esp/10/adulto-1.png" alt="Un señor echando jabón en su lavadora" /> <img style="width: 20%;margin-left: 10%;" src="../resources/02/esp/10/adulto-2.png" alt="Un señor extendiendo su ropa en un patio al aire libre" /> <img style="width: 20%;margin-left: 10%;" src="../resources/02/esp/10/adulto-3.png" alt="Señor guardando su ropa en el closet" />',
    imgwidth: '100',
    questions: [
      {
        answerstyle: 'width: 95%;margin: 25px;',
        answers: [
          { text: "Juan lava su ropa en la lavadora, luego la lleva a la maquina secadora y cuando está seca la guarda en su clóset."},
          { text: "Juan lava su ropa a mano, luego la extiende en el patio y cuando está seca la guarda en su clóset.", answer: true},
          { text: "Juan lava su ropa sucia en la lavadora, luego la extiende en el patio y cuando está seca la guarda en su clóset.", answer: true },
        ]
      }
    ]
  };
});

esp210.controller('Act4Ctrl', function($scope){
   $scope.items = [
      {         
        img: 'discapacitado.png',
        altimg: '- Imagen de un rectángulo color azul, en su interior hay una silueta de una persona en silla de ruedas',
        w: 300, h: 50, t:0  , l:0,
        options: [
              { text: "Prohibido el paso en silla de ruedas " },
              { text: "Zona accesible ", answer: true},
              { text: "Ninguna de las anteriores"}
            ]
      },
      {   
        img: 'silencio.jpg',
        altimg: 'Fotografía donde se muestra un señor con su índice derecho sobre su boca en señal de silencio',
        titleimg: '0009480833X [Fotografía]. Obtenido de: http://www.photl.com/268334.html',
        w: 300, h: 50, t:0  , l:35,
        options: [
              { text: "Guardar silencio", answer: true },
              { text: "Hablar"},
              { text: "Ninguna de las anteriores"}
            ]
      },
      {         
        img: 'zona.png',
        altimg: 'Rombo de color amarillo, en su interior está la silueta de una persona jugando con un balón',
        w: 300, h: 50, t:0  , l:70,
        options: [
              { text: "Zona de peligro"},
              { text: "Zona deportiva", answer: true },
              { text: "Ninguna de las anteriores"}
            ]
      },
      {   
        img: 'escuchar.jpg',
        altimg: 'Fotografía donde se muestra un hombre con su mano derecha detrás de su oído, en señal de escucha',
        titleimg: '0009480856X [Fotografía]. Obtenido de: http://www.photl.com/268335.html',
        w: 300, h: 50, t:50 , l:0,
        options: [
              { text: "Escuchar", answer: true },
              { text: "Guardar silencio"},
              { text: "Ninguna de las anteriores"}
            ]
      },
      {         
        img: 'peatones.png',
        altimg: 'Círculo de color rojo con una línea diagonal atravesándolo, en su interior tiene la silueta de una persona caminando',
        w: 300, h: 50, t:50 , l:35,
        options: [
              { text: "Prohibido el paso de peatones", answer: true },
              { text: "Permitido el paso de peatones"},
              { text: "Ninguna de las anteriores"}
            ]
      },
      {   
        img: 'bano.png',
        altimg: 'Rectángulo de color verde en su interior está la palabra baño y también la silueta de una mujer',
        w: 300, h: 50, t:50 , l:70,
        options: [
              { text: "Baño de hombres" },
              { text: "Baño de mujeres", answer: true},
              { text: "Ninguna de las anteriores"}
            ]
      }
    ],

    $scope.options = {
      items: $scope.items,
      canvasStyle: 'width: 1021px;height: 700px;',
      chances: 2,
      optionsrandom: true,
      minRightAnswers: 4,
      itemsPerRow : 3
    };
});

esp210.controller('Act5Ctrl', function ($scope) {
   $scope.$root.isNextEnabled = true; // Activamos el siguiente link

  $scope.input = '';
  $scope.selectedItem = false; // elemento seleccionado

  $scope.items = [
    {
      src: "tristeza",
      alt: "Fotografía donde se muestra un niño llorando",
      title: "Evans, J. (2006). Sad boy 1 [Fotografía]. Obtenido de: http://www.freeimages.com/photo/517525"
    },
    {
      src: "aburrida",
      alt: "Fotografía donde se muestra una joven con cara de aburrición",
      title: "Aburrido [Fotografía]. (2012). Obtenido de: http://pixabay.com/es/libro-aburrido-universidad-15584/"
    },
    {
      src: "madre",
      alt: "Fotografía donde se muestra una mujer cargando una bebé, ambas están sonriendo",
      title: "Madre [Fotografía]. (2014). Obtenido de: http://pixabay.com/es/madre-beb%C3%A9-feliz-familia-ni%C3%B1o-kid-316213/ "
    }
  ];

  $scope.$root.selectItem = function (item) {

        $scope.selectedItem = item; // seleccionamos el objeto
  };

  // antes de ir a la siguiente actividad, verificamos
  $scope.$root.beforeGoNext = function () {
    var error = false,
      str = '';

    str = $scope.input.toLowerCase();
    if( !( str.match(/([bcdfghjklmnñpqrstvwxyz])/) && str.match(/([aeiou])/) && str.length >= 10 ) ) error = true;

      if(error){
        // fracaso
        $scope.failure = true;
        return true;
      } else {
        // éxito
        $scope.success = true;
        return true;
      }
    };
});

esp210.controller('Act6Ctrl', function($scope){
  $scope.options = {
    link: "http://www.chileparaninos.cl/temas/robertomatta/juegos/memoria.html",
  };
});


var appManager = AppManager();
var nat401 = angular.module('nat401', ['activities']);

appManager.configModule(nat401, {
	resources: '../resources/04/nat/01',
	farewell: '¡Muy bien!,Ahora ya conoces las partes de la célula.',
	evidencesSound:true,
	evidences: 'Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, actividad de evidencia, guía 1, lección 1; descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.',
	routes:[
		{ 
			name: '/competencias', 
			templateUrl: 'comp', 
			controller: 'CompCtrl',
			title:"Estándares básicos de competencias"
		},
		{ 
			name: '/conceptualizacion-1', 
			templateUrl: 'con1', 
			controller: 'Con1Ctrl',
			title: 'Lección 8 La célula y sus partes'
		},
		{ 
			name: '/conceptualizacion-2', 
			templateUrl: 'con2', 
			controller: 'Con2Ctrl',
			title: 'Lección 8 La célula y sus partes'
		},
    { 
      name: '/conceptualizacion-3', 
      templateUrl: 'con3', 
      controller: 'Con3Ctrl',
      title: 'Lección 8 La célula y sus partes'
    },
		{ 
			name: '/actividad-1', 
			templateUrl: 'act1', 
			controller: 'Act1Ctrl',
			title: 'Actividad 1 | Lección 1'
		},
    { 
      name: '/actividad-1-2', 
      templateUrl: 'act1-2', 
      controller: 'Act1-2Ctrl',
      title: 'Actividad 1 - 2 | Lección 1'
    },
    { 
      name: '/actividad-1-3', 
      templateUrl: 'act1-3', 
      controller: 'Act1-3Ctrl',
      title: 'Actividad 1 - 3 | Lección 1'
    },
		{ 
			name: '/actividad-2', 
			templateUrl: 'act2', 
			controller: 'Act2Ctrl',
			title: 'Actividad 2 | Lección 1'
		},
    { 
      name: '/actividad-2-2', 
      templateUrl: 'act2-2', 
      controller: 'Act2-2Ctrl',
      title: 'Actividad 2 - 2 | Lección 1'
    },
    { 
      name: '/actividad-2-3', 
      templateUrl: 'act2-3', 
      controller: 'Act2-3Ctrl',
      title: 'Actividad 2 - 3 | Lección 1'
    },
		{ 
			name: '/actividad-3', 
			templateUrl: 'act3', 
			controller: 'Act3Ctrl',
			title: 'Actividad 3 | Lección 1'
		},
		{ 
			name: '/actividad-4', 
			templateUrl: 'act4', 
			controller: 'Act4Ctrl',
			title: 'Actividad 4 | Lección 1'
		},
		{
			name: '/actividad-5', 
			templateUrl: 'act5', 
			controller: 'Act5Ctrl',
			title: 'Actividad 5 | Lección 1'
		},
		{ 
			name: '/actividad-6', 
			templateUrl: 'act6', 
			controller: function(){},
			title: 'Actividad 6 | Inglés'
		},
		{ 
			name: '/actividad-6-2', 
			templateUrl: 'act6-2', 
			controller: 'Act6-2Ctrl',
			title: 'Actividad 6 - 2 | Inglés'
		},
		{ 
			name: '/actividad-7', 
			templateUrl: 'act7', 
			controller: 'Act7Ctrl',
			title:"Actividad complementaria",
		}
	]
	
});

nat401.controller('CompCtrl', function($scope){
	$scope.data = [
		{
			title: 'Estándar de competencia Ciencias Naturales:',
			text1: 'Identificar estructuras de los seres vivos que les permiten desarrollarse en un entorno y que se pueden utilizar como criterios de clasificación.',
		},
    {
      title: 'Estándar de competencia  religión:',
      text1: 'Explica y da argumentos sobre lo que quiere ser en su vida.',
    },
		{
			title: 'Elementos de competencia:',
			text1: 'Identifica las partes de la célula animal y vegetal.',
      text2: 'Comprende que el ser humano tiene un proyecto de vida.',
		}
		
	];
});

nat401.controller('Con1Ctrl', function($scope){
	$scope.items = [
    {
      src: "caballo",
      alt: "Hermoso caballo colorado que corre libremente, donde se muestra que esta constituido por célula animal.",
      title: 'Schweihofer, S. (2013).Caballo [Fotografía]. Obtenido de:http://pixabay.com/es/caballo-galope-animales-66339/',
      text: "Compuesto por célula animal",
      src2: "celulaanimal1",
      alt2: "célula animal",
    },
    {
      src: "flores",
      alt: "jardin de plantas ornamentales",
      title: 'Jardín de plantas ornamentales [Fotografía]. (2014). Obtenido de: http://pixabay.com/es/almohada-azul-jard%C3%ADn-330910/',
      text: "Compuesto por célula vegetal",
      src2: "celulavegetal1",
      alt2: "Reloj con numeración romana",
    }
  ];

  $scope.verify = function (item) {
    if(item.completed) return;

    item.completed = true;

    var completedItems = $scope.items.filter(function(item){
      return item.completed;
    }).length;

    if(completedItems === $scope.items.length) {
      $scope.$root.isNextEnabled = true;
    }
  };

});

nat401.controller('Con2Ctrl', function($scope){
$scope.data = [
    {
      type: 'png',
      resource: 'celulaanimal2',
      text: '<strong>Célula animal</strong>',
      alt:'celula animal'
    },
    {
      type: 'png',
      resource: 'celulavegetal2',
      text: '<strong>Célula vegetal</strong>',
      alt:'celula animal'
    }
  ];
});

nat401.controller('Con3Ctrl', function($scope){
  $scope.data = {
    items: [
      { 
        title: "Membrana celular",
        src: 'D8',
        img: "membranacelular.png",
        imgAlt: "Célula animal y célula vegetal",
        text:'La membrana celular forma la envoltura de la célula.'
      },
      { 
        title: "Núcleo",
        src: 'D9',
        img: "nucleo.png",
        imgAlt: "Célula animal y célula vegetal.",
        text:'<strong>El núcleo</strong><br>Es la parte más importante, dirige la actividad de la célula.'
      },
      {
        title: "Los orgánulos",
        src: 'D10',
        img: "organulos.png",
        imgAlt: "Célula animal y célula vegetal",
        text:'Se encargan de realizar las funciones de la célula, como fabricar distintas sustancias, producir los movimientos de la célula o digerir sustancias nutritivas.'
      },
      { 
        title: "El citoplasma",
        src: 'D11',
        img: "citoplasma.png",
        imgAlt: "Célula animal y célula vegetal",
        text:'Es un líquido viscoso que contiene los orgánulos y el núcleo'
      },
      { 
        title: "Pared celular",
        src: 'D12',
        img: "paredcelular.png",
        imgAlt: "Célula animal y célula vegetal",
        text:'Las células de las plantas (célula vegetal) tienen, además, una envoltura rígida que rodea a la membrana.'
      }
    ]
  };
});

nat401.controller('Act1Ctrl', function ($scope) {
  $scope.data = {
    canvas: 'partescelulaanimal',
    altcanvas: 'Célula animal a la que se le deben identificar cada una de sus partes',
    targets: [
      { 
        text: "Orgánulos",
        w: 30, h: 5, t:61, l: 68,
        style:'background: #009500;color: white;border-radius: 10px;padding: 10px;margin: 10px;'        
      },
      { 
        text: "Célula animal",
        w: 30, h: 5, t: 92, l: 20 ,
        style:'background: #009500;color: white;border-radius: 10px;padding: 10px;margin: 10px;'      
      },
      { 
        text: "Pared celular",
        w: 0, h: 0, t: -10, l:-10 ,
        style:'background: #009500;color: white;border-radius: 10px;padding: 10px;margin: 10px;' 
      },
      { 
        text: "Membrana celular",
         w: 30, h: 5, t: 28, l: 65 ,
        style:'background: #009500;color: white;border-radius: 10px;padding: 10px;margin: 10px;'
      },
      { 
        text: "Célula vegetal",
         w: 0, h: 0, t: -10, l:-10 ,
        style:'background: #009500;color: white;border-radius: 10px;padding: 10px;margin: 10px;' 
      },
      { 
        text: "Citoplasma",
        w: 30, h: 5, t: 74, l: 62,
        style:'background: #009500;color: white;border-radius: 10px;padding: 10px;margin: 10px;'
      },
      { 
        text: "Núcleo",
        w: 30, h: 5, t: 44, l: 60,
        style:'background: #009500;color: white;border-radius: 10px;padding: 10px;margin: 10px;'
      }
    ],

    minRightAnswers: 5,
    itemsWidth: "250px",
    itemsPerRow: 1,
    chances:14,
    noDrag: 2,//esto si se tienen algunos items que no corresponden a ningun target  
    customStyles: "border-radius: 2px; background: #fff;",
    preserveText: true
  };
});

nat401.controller('Act1-2Ctrl', function ($scope) {
   $scope.data = {
    canvas: 'partescelulavegetal',
    altcanvas: 'Célula vegetal a la que se le deben identificar cada una de sus partes',
    targets: [
      { 
        text: "Orgánulos",
        w: 24, h: 5, t:53, l: 75,
        style:'background: #009500;color: white;border-radius: 10px;padding: 10px;margin: 10px;'        
      },
      { 
        text: "Célula animal",
        w: 0, h: 0, t: -10, l:-10 ,
        style:'background: #009500;color: white;border-radius: 10px;padding: 10px;margin: 10px;'      
      },
      { 
        text: "Pared celular",
        w: 30, h: 5, t: 92, l: 55 ,
        style:'background: #009500;color: white;border-radius: 10px;padding: 10px;margin: 10px;' 
      },
      { 
        text: "Membrana celular",
         w: 30, h: 5, t: 13, l: 60 ,
        style:'background: #009500;color: white;border-radius: 10px;padding: 10px;margin: 10px;'
      },
      { 
        text: "Célula vegetal",
        w: 30, h: 5, t: 3, l: 20 ,
        style:'background: #009500;color: white;border-radius: 10px;padding: 10px;margin: 10px;' 
      },
      { 
        text: "Citoplasma",
        w: 30, h: 5, t: 80.5, l: 68,
        style:'background: #009500;color: white;border-radius: 10px;padding: 10px;margin: 10px;'
      },
      { 
        text: "Núcleo",
        w: 30, h: 5, t: 23, l: 65,
        style:'background: #009500;color: white;border-radius: 10px;padding: 10px;margin: 10px;'
      }
    ],

    minRightAnswers: 5,
    itemsWidth: "250px",
    itemsPerRow: 1,
    chances:14,
    noDrag: 1,//esto si se tienen algunos items que no corresponden a ningun target
    customStyles: "border-radius: 2px; background: #fff;",
    preserveText: true
  };
});

nat401.controller('Act1-3Ctrl', function ($scope) {
 $scope.data = {
    maintext: 'Lo que forma la envoltura de la célula  es:<br><br>La parte más importante, dirige la actividad<br>de la célula es:<br><br>Se encargan de realizar las funciones de la célula, como fabricar distintas sustancias, producir los movimientos de la célula o digerir sustancias nutritivas, estos son:<br><br>Es un líquido viscoso que contiene los orgánulos<br>y el núcleo:<br><br>Las células de las plantas (célula vegetal) tienen,<br>además, una envoltura rígida que rodea<br>a la membrana:',
    maintextstyle: 'padding: 0px;margin-top: 55px;',
    targets: [
      { 
        text: "pared celular",
        w: 33, h: 5, t:65, l: 26,
        style:'background-color: #009500;color: white;margin-left: 10px;margin-bottom: 20px;'

      },
      { 
        text: "el citoplasma",
        w: 33, h: 5, t: 49, l: 19,
        style:'background-color: #009500;color: white;margin-left: 10px;margin-bottom: 20px;'       
      },
      { 
        text: "los orgánulos",
        w: 33, h: 5, t: 36, l:47 ,
        style:'background-color: #009500;color: white;margin-left: 10px;margin-bottom: 20px;'  
      },
      { 
        text: "el núcleo",
         w: 33, h: 5, t: 20, l: 25 ,
        style:'background-color: #009500;color: white;margin-left: 10px;margin-bottom: 20px;'
      },
      { 
        text: "la membrana celular",
        w: 33, h: 5, t: 7, l: 64 ,
        style:'background-color: #009500;color: white;margin-left: 10px;margin-bottom: 20px;' 
      }
    ],

    minRightAnswers: 3,
    itemsWidth: "250px",
    itemsPerRow: 1,
    chances:10,
    customStyles: "border-radius: 0px; background: #fff;",
    preserveText: true
  };
});

nat401.controller('Act2Ctrl', function($scope){
$scope.items = [
      {         
        img: 'nino.png',
        altimg: 'Niño preguntándose por la parte de la célula que sirve para separar la célula del exterior',
        w: 300, h: 50, t:0  , l:0,
        options: [
              { text: "Membrana celular", answer: true },
              { text: "El citoplasma"},
              { text: "El núcleo"}
            ]
      },
      {   
        img: 'nina.png',
        altimg: 'Niña feliz preguntándose por la parte de la célula que contiene cada orgánulo',
        w: 300, h: 50, t:0  , l:35,
        options: [
              { text: "Membrana celular"},
              { text: "El citoplasma", answer: true },
              { text: "El núcleo"}
            ]
      },
      {         
        img: 'nino2.png',
        altimg: 'Niño preguntándose por la parte de la célula encargada de controlar su funcionamiento',
        w: 300, h: 50, t:0  , l:70,
        options: [
              { text: "Membrana celular"},
              { text: "El citoplasma"},
              { text: "El núcleo", answer: true }
            ]
      }
    ],

    $scope.options = {
      items: $scope.items,
      canvasStyle: 'width: 1021px;height: 400px;',
      chances: 2,
      optionsrandom: true,
      minRightAnswers: 3,
      itemsPerRow : 3
    };
});

nat401.controller('Act2-2Ctrl', function($scope){
$scope.items = [
      {         
        img: 'celulaanimal2.png',
        altimg: 'Célula sin pared celular, la cual debe ser clasificadas según corresponda como célula animal o célula vegetal',
        w: 300, h: 50, t:0  , l:15,
        options: [
              { text: "Célula animal", answer: true },
              { text: "Célula vegetal"}
            ]
      },
      {   
        img: 'celulavegetal2.png',
        altimg: 'Célula con pared celular, la cual debe ser clasificadas según corresponda como célula animal o célula vegetal',
        w: 300, h: 50, t:0  , l:50,
        options: [
              { text: "Célula animal"},
              { text: "Célula vegetal", answer: true }
            ]
      }
    ],

    $scope.options = {
      items: $scope.items,
      canvasStyle: 'width: 1021px;height: 400px;',
      chances: 2,
      optionsrandom: true,
      minRightAnswers: 2,
      itemsPerRow : 3
    };
});

nat401.controller('Act2-3Ctrl', function ($scope) {
  $scope.$root.isNextEnabled = true; // Activamos el siguiente link

  $scope.input = '';

  $scope.items = [
    {
      src: "celulaanimal2",
      alt: "Célula animal",
      text: "Célula animal",
    },
    {
      src: "celulavegetal2",
      alt: "Célula vegetal",
      text: "Célula vegetal",
    }
  ];

  // antes de ir a la siguiente actividad, verificamos
  $scope.$root.beforeGoNext = function () {
    var error = false,
      str = '';

    str = $scope.input.toLowerCase();
    if( !( str.match(/([bcdfghjklmnñpqrstvwxyz])/) && str.match(/([aeiou])/) && str.length >= 10 ) ) error = true;

    if(error){
      // fracaso
      $scope.failure = true;
      return true;
    } else {
      // éxito
      $scope.success = true;
      return true;
    }
  };
});

nat401.controller('Act3Ctrl', function($scope){
	 $scope.data = {
    randomItems: true,
    minRightAnswers: 5,
    questions: [
      {
        number: 'a',
        question: "Forma la envoltura de la célula",
        answers: [
          { text: "Membrana celular", answer: true },
          { text: "Núcleo" },
          { text: "Orgánulos" },
          { text: "Citoplasma"},
          { text: "Pared celular"}
        ]
      },
      {
        number: 'b',
        question: "Dirige la actividad de la célula",
        answers: [
          { text: "Membrana celular" },
          { text: "Núcleo", answer: true },
          { text: "Orgánulos" },
          { text: "Citoplasma"},
          { text: "Pared celular"}
        ]
      },
      {
        number: 'c',
        question: "Realizar  las funciones de la célula",
        answers: [
          { text: "Membrana celular" },
          { text: "Núcleo" },
          { text: "Orgánulos", answer: true },
          { text: "Citoplasma"},
          { text: "Pared celular"}
        ]
      },
      {
        number: 'd',
        question: "Contiene los orgánulos y el núcleo",
        answers: [
          { text: "Membrana celular"},
          { text: "Núcleo" },
          { text: "Orgánulos" },
          { text: "Citoplasma", answer: true },
          { text: "Pared celular"}
        ]
      },
      {
        number: 'e',
        question: "Una envoltura rígida que rodea a la membrana",
        answers: [
          { text: "Membrana celular" },
          { text: "Núcleo" },
          { text: "Orgánulos" },
          { text: "Citoplasma"},
          { text: "Pared celular", answer: true}
        ]
      }
    ]
  };
});

nat401.controller('Act4Ctrl', function ($scope) {
 $scope.data = {
    chances: 10,
    minRightAnswers: 5,
    inverted: true,
    table: [

    "C I T O P L A S M A Y N J H G".split(" "),
    "F G T I O P V N M J P Ú I E Q".split(" "),
    "G H F G H J U Y T R E C W Q N".split(" "),
    "F I M N B V C X Z M N L B V C".split(" "),
    "O R G Á N U L O S I U E T R E".split(" "),
    "H W T U I O P I L Ñ J O H G F".split(" "),
    "Y R F G H J G G M N B V C X S".split(" "),
    "M E M B R A N A C E L U L A R".split(" "),
    "P Y M N H G F Y J K Y R I U R".split(" "),
    "P A R E D C E L U L A R Y T Y".split(" ")


    ],
    wordGroups: [
      {
        items: [
          {
            front: "CITOPLASMA",
            back: "CITOPLASMA"
          },
          {
            front: "NÚCLEO",
            back: "NÚCLEO"
          },
          {
            front: "ORGÁNULOS",
            back: "ORGÁNULOS"
          },
          {
            front: "MEMBRANA CELULAR",
            back: "MEMBRANACELULAR"
          },
          {
            front: "PARED CELULAR",
            back: "PAREDCELULAR"
          }
        ]
      }
    ]
  };
});

nat401.controller('Act5Ctrl', function ($scope) {
  $scope.data = {
    groups: [
      {
        title: "Célula animal y vegetal",
        numInputs: 10
      }
    ]
  };
});

nat401.controller('Act6-2Ctrl', function($scope){
	$scope.inputs = [];
  $scope.$root.isNextEnabled = true; // Activamos el siguiente link

  $scope.items = [];

  // llenamos el array
  for (var i = 0; i < 1; i++) {
    $scope.items.push({
      uno: '',
      dos: '',
      tres: '',
      cuatro: ''
    });
  }

  var regex = function (value) {
    return !( value.match(/([bcdfghjklmnñpqrstvwxyz])/) && value.match(/([aeiou])/) && value.length >= 5 );
  };

  // antes de ir a la siguiente actividad, verificamos
  $scope.$root.beforeGoNext = function () {
    var error = false;

    // Recorremos los elementos, buscando que cumplan con las condiciones
    // Al menos una mayúscula, una minúscula y 4 letras
    $scope.items.forEach(function(item){
      if( regex(item.uno) || regex(item.dos) || regex(item.tres) || regex(item.cuatro)) error = true;
    });

    if(error){
      // fracado
      $scope.failure = true;
      return true;
    } else {
      // éxito
      $scope.success = true;
      return true;
    }
  };

});

nat401.controller('Act7Ctrl', function($scope){
  $scope.options = {
    link: "http://www.primaria.librosvivos.net/archivosCMS/3/3/16/usuarios/103294/9/5EP_Cono_ud1_184/frame_prim.swf",
    link2: "http://www.skoool.es/content/los/biology/cell_structure/launch.html",
    link3: "http://ares.cnice.mec.es/ciengehi/b/01/animaciones/a_fb12_02.html",
    link4: "https://repositorio.educa.jccm.es/portal/odes/conocimiento_del_medio/cuaderno_celula/index.html",
    
  };
});

var appManager = AppManager();
var mat201 = angular.module('mat201', ['activities']);

appManager.configModule(mat201, {
	resources: '../resources/02/mat/01',
	competences1: 'Describo, comparo y cuantifico situaciones con números en diferentes contextos y con diferentes representaciones.',
	competences2: 'Maneja con propiedad los números hasta el 999 para resolver situaciones de la vida cotidiana.',
	competencesSound: true,
	evidences: 'Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, hacer clic sobre el nombre “Actividades de evidencia Matemáticas lección N ° 1”, descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.',
	evidencesSound: true,
	farewell: '¡Muy bien!, ahora ya conoces los números hasta el 999.',
	routes: [
		{ 
			name: '/conceptualizacion-1', 
			templateUrl: 'con1', 
			controller: 'Con1Ctrl',
			title: 'Lección 1: Pensamiento numérico'
		},
		{ 
			name: '/conceptualizacion-2', 
			templateUrl: 'con2', 
			controller: 'Con2Ctrl',
			title: 'Lección 1: Pensamiento numérico'
		},
		{ 
			name: '/actividad-1', 
			templateUrl: 'act1', 
			controller: function(){},
			title: 'Actividad 1'
		},
		{ 
			name: '/actividad-2', 
			templateUrl: 'act2', 
			controller: 'Act2Ctrl',
			title: 'Actividad 2'
		},
		{ 
			name: '/actividad-3', 
			templateUrl: 'act3', 
			controller: 'Act3Ctrl',
			title: 'Actividad 3'
		},
		{ 
			name: '/actividad-4', 
			templateUrl: 'act4', 
			controller: 'Act4Ctrl',
			title: 'Actividad 4'
		},
		{ 
			name: '/actividad-5-1', 
			templateUrl: 'act5_1', 
			controller: 'Act5_1Ctrl',
			title: 'Actividad 5'
		},
		{ 
			name: '/actividad-5-2', 
			templateUrl: 'act5_2', 
			controller: 'Act5_2Ctrl',
			title: 'Actividad 5'
		},
		{ 
			name: '/actividad-6', 
			templateUrl: 'act6', 
			controller: 'Act6Ctrl',
			title: 'Actividad 6'
		}
	]
});

mat201.controller('Con1Ctrl', function ($scope) {
	$scope.data = [
		{ 
			resource: "perros",
			alt: "Dos perros de color blanco y negro"
		},
		{ 
			resource: "manzanas",
			alt: "Cuatro manzanas rojas"
		},
		{ 
			resource: "lapices",
			alt: "Seis lápices de color amarillo"
		},
	]
});

mat201.controller('Con2Ctrl', function ($scope) {
	$scope.data = [
		{ 
			resource: "rep1",
			alt: "Número 1: Número uno en color azul, y un perro blanco y café"
		},
		{ 
			resource: "rep2",
			alt: "Número 2:  Número dos en color rojo y  dos libros uno encima del otro"
		},
		{ 
			resource: "rep3",
			alt: "Número 3: Número tres en color verde y tres manzanas una roja y dos verdes"
		},
		{ 
			resource: "rep4",
			alt: "Número 4: Número cuatro en color azul y cuatro lápices de colores"
		},
		{ 
			resource: "rep5",
			alt: "Número 5: Número cinco en color morado y cinco flores  de color rojo, rosado y naranjado"
		},
		{ 
			resource: "rep6",
			alt: "Número 6: Número seis en color naranja y seis caramelos de colores"
		},
		{ 
			resource: "rep7",
			alt: "Número  7: Número siete en color azul oscuro y 7 globos de colores"
		},
		{ 
			resource: "rep8",
			alt: "Número 8: Número ocho en color  verde y ocho mariposas"
		},
		{ 
			resource: "rep9",
			alt: "Número 9: Número nueve en color fucsia y 9 peces de colores"
		}
	]
});

mat201.controller('Act2Ctrl', function ($scope) {
	$scope.data = {
		sequences: [
			{
				sequence: '5 6 7 8 9 10 11 12 13 14'.split(' '),
				toFill: [1, 2, 4, 5, 7, 8]
			},
			{
				sequence: '100 101 102 103 104 105 106 107 108 109'.split(' '),
				toFill: [1, 3, 4, 6, 8]
			},
			{
				sequence: '250 251 252 253 254 255 256 257 258 259'.split(' '),
				toFill: [0, 2, 4, 5, 7, 8]
			},
			{
				sequence: '363 364 365 366 367 368 369 370 371 372'.split(' '),
				toFill: [1, 3, 5, 6, 8]
			},
			{
				sequence: '483 484 485 486 487 488 489 490 491 492'.split(' '),
				toFill: [0, 3, 5, 6, 8]
			},
			{
				sequence: '501 502 503 504 505 506 507 508 509 510'.split(' '),
				toFill: [1, 2, 4, 5, 7, 8]
			},
			{
				sequence: '610 611 612 613 614 615 616 617 618 619'.split(' '),
				toFill: [0, 2, 4, 5, 7, 8]
			},
			{
				sequence: '720 721 722 723 724 725 726 727 728 729'.split(' '),
				toFill: [1, 3, 4, 6, 7, 9]
			},
			{
				sequence: '830 831 832 833 834 835 836 837 838 839'.split(' '),
				toFill: [1, 2, 4, 5, 7, 8]
			},
			{
				sequence: '939 940 941 942 943 944 945 946 947 948'.split(' '),
				toFill: [0, 2, 4, 6, 7, 9]
			}
		],
		minRightAnswers: 29
	};
});

mat201.controller('Act3Ctrl', function ($scope) {
	$scope.data = {
		numbers: '583 120 947 22 299 315 847 307 4 501'.split(' '),
		minRightAnswers: 11
	};
});

mat201.controller('Act4Ctrl', function ($scope) {
	$scope.data = {
		numbers: [
			[555, 603],
			[783, 510],
			[832, 945],
			[327, 453],
			[792, 856],
			[948, 485],
			[376, 203],
			[641, 643]
		],
		minRightAnswers: 5
	};
});

mat201.controller('Act5_1Ctrl', function ($scope) {
	$scope.data = {
		head: ['Números', 'Centenas', 'Decenas', 'Unidades'],
		body: [
			'215 2 1 5'.split(" "),
			'526 5 2 6'.split(" "),
			'634 6 3 4'.split(" "),
			'768 7 6 8'.split(" "),
			'859 8 5 9'.split(" "),
			'924 9 2 4'.split(" ")
		]
	};
});

mat201.controller('Act5_2Ctrl', function ($scope) {
	$scope.data = {
		numCols: 3, // unidades, decenas y centenas
		minRightAnswers: 4, // por modo
		wrongAnswers: 4, // si se equivoca este número de veces, pierde
		chances: 6 // por modo
	};
});

mat201.controller('Act6Ctrl', function ($scope) {
	$scope.data = {
		inputs: [
			{
				text: "Total semana 1",
				src: "monedas-1",
				alt: "Imagen con 7 monedas de 10 pesos",
				expects: "70"
			},
			{
				text: "Total semana 2",
				src: "monedas-2",
				alt: "Imagen con 4 monedas de 10 pesos y una de 50 pesos",
				expects: "90"
			},
			{
				text: "Total semana 3",
				src: "monedas-3",
				alt: "Imagen con dos monedas de 50 pesos",
				expects: "100"
			},
			{
				text: "Total semana 4",
				src: "monedas-4",
				alt: "Imagen con una moneda de 50, dos monedas de 10 y 5 monedas de 5",
				expects: "95"
			},
			{
				text: "Escribe el total gastado durante las 4 semanas:",
				expects: "355"
			}
		],
		table: {
			text: "Clasifica el total gastado en: unidades, decenas y centenas.",
			head: "Centenas Decenas Unidades".split(" "),
			body: [
				{ expects: "3" },
				{ expects: "5" },
				{ expects: "5" }
			]
		},
		chancesPerInput: 2,
		minRightAnswers: 4
	};
});

var appManager = AppManager();
var mat202 = angular.module('mat202', ['activities']);

appManager.configModule(mat202, {
	resources: '../resources/02/mat/02',
	competences1: 'Describo, comparo y cuantifico situaciones con números en diferentes contextos y con diferentes representaciones.',
	competences2: 'Lee, escribe y ordena números a través de calendarios, conjuntos y guías.',
	competencesSound: true,
	evidences: 'Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, actividad de evidencia, guía 1, lección 2; descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.',
	evidencesSound: true,
	farewell: '¡Muy bien!, ahora ya conoces los números pares e impares.',
	routes: [
		{ 
			name: '/conceptualizacion-1', 
			templateUrl: 'con1', 
			controller: 'Con1Ctrl',
			title: 'Los números'
		},
		{ 
			name: '/conceptualizacion-2', 
			templateUrl: 'con2', 
			controller: 'Con2Ctrl',
			title: 'Los números'
		},
		{ 
			name: '/conceptualizacion-3', 
			templateUrl: 'con3', 
			controller: 'Con3Ctrl',
			title: 'Los números'
		},
		{ 
			name: '/conceptualizacion-4', 
			templateUrl: 'con4', 
			controller: 'Con4Ctrl',
			title: 'Los números'
		},
		{ 
			name: '/conceptualizacion-5', 
			templateUrl: 'con5', 
			controller: 'Con5Ctrl',
			title: 'Los números'
		},
		{ 
			name: '/actividad-1', 
			templateUrl: 'act1', 
			controller: 'Act1Ctrl',
			title: 'Actividad 1'
		},
		{ 
			name: '/actividad-2', 
			templateUrl: 'act2', 
			controller: 'Act2Ctrl',
			title: 'Actividad 2'
		},
		{ 
			name: '/actividad-3', 
			templateUrl: 'act3', 
			controller: 'Act3Ctrl',
			title: 'Actividad 3'
		},
		{ 
			name: '/actividad-4', 
			templateUrl: 'act4', 
			controller: 'Act4Ctrl',
			title: 'Actividad 4'
		},
		{ 
			name: '/actividad-5', 
			templateUrl: 'act5', 
			controller: 'Act5Ctrl',
			title: 'Actividad 5'
		},
	]
});

mat202.controller('Con1Ctrl', function ($scope) {
	$scope.data = [
		{ 
			resource: "ninos-jugando",
			alt: "Imagen con  tres niños jugando"
		},
		{ 
			resource: "globos",
			alt: "Imagen con siete globos de colores volando por el aire"
		},
		{ 
			resource: "varias-monedas",
			alt: "Monedas de color amarillo y varias denominaciones"
		},
	]
});

mat202.controller('Con2Ctrl', function ($scope) {
	$scope.data = [
		{ 
			src: "imagen-numero-par",
			alt: "El numero ocho dividido en cuatro grupos de dos cada grupo. Y ocho bolas verdes que representan al numero ocho."
		}
	]
});

mat202.controller('Con3Ctrl', function ($scope) {
	$scope.data = [
		{ 
			src: "imagen-numero-impar",
			alt: "Número siete dividido en tres grupos de dos y un grupo de uno"
		}
	]
});

mat202.controller('Con4Ctrl', function ($scope) {
	// Activamos la siguiente actividad
	$scope.$root.isNextEnabled = true;

	$scope.numbers = [
		"cero",
		"dos",
		"cuatro",
		"seis",
		"ocho"
	];
});

mat202.controller('Con5Ctrl', function ($scope) {
	$scope.numbers = [ "uno", "tres", "cinco", "siete", "nueve" ];
	$scope.odd = [1, 3, 5, 7, 9, 11];
	$scope.even = [2, 4, 6, 8, 10, 12];

	$scope.goNext = function () {
		// Activamos la siguiente actividad
		$scope.$root.isNextEnabled = true;
	};
});

mat202.controller('Act1Ctrl', function ($scope) {
	$scope.data = {
		chances: 15,
		minRightAnswers: 7,
		table: [
			'e r q c i n c u e n y u'.split(" "),
			'f e u d a r e t y d o r'.split(" "),
			'e d i o n v e i n t e a'.split(" "),
			'r o n h e e c o d s a r'.split(" "),
			'a s c c i s e i d o c e'.split(" "),
			'e s e o c i n c o s o t'.split(" "),
			'e s d o c s c i n e t o'.split(" "),
			'c i n c u e n t a v r e'.split(" "),
			'n e r c u a r t o e u t'.split(" "),
			'o d e r t r e c e u n e'.split(" "),
			'e i c o r t a u c n e i'.split(" "),
			'd i e c i s e i s e s s'.split(" ")
		],
		wordGroups: [
			{
				title: 'pares',
				items: [
					{
						front: "2",
						back: "dos"
					},
					{
						front: "12",
						back: "doce"
					},
					{
						front: "16",
						back: "dieciseis"
					},
					{
						front: "20",
						back: "veinte"
					},
					{
						front: "50",
						back: "cincuenta"
					},
					{
						front: "100",
						back: "cien"
					}
				]
			},
			{
				title: 'impares',
				items: [
					{
						front: "5",
						back: "cinco"
					},
					{
						front: "7",
						back: "siete"
					},
					{
						front: "9",
						back: "nueve"
					},
					{
						front: "11",
						back: "once"
					},
					{
						front: "13",
						back: "trece"
					},
					{
						front: "15",
						back: "quince"
					}
				]
			}
		]
	};
});

mat202.controller('Act2Ctrl', function ($scope) {
	$scope.data = {
		inputWidth: "125px",
		chancesPerInput: 2, // Posibilidades por cada input
		minRightAnswers: 7,
		items: [
			{
				audio: "29",
				text: "veintinueve",
				input: "29"
			},
			{
				audio: "45",
				text: "cuarenta y cinco",
				input: "45"
			},
			{
				audio: "123",
				text: "ciento veintitrés",
				input: "123"
			},
			{
				audio: "238",
				text: "doscientos treinta y ocho",
				input: "238"
			},
			{
				audio: "354",
				text: "trescientos cincuenta y cuatro",
				input: "354"
			},
			{
				audio: "400",
				text: "cuatrocientos",
				input: "400"
			},
			{
				audio: "22",
				text: "veintidós",
				input: "22"
			},
			{
				audio: "562",
				text: "quinientos sesenta y dos",
				input: "562"
			},
			{
				audio: "679",
				text: "seiscientos setenta y nueve",
				input: "679"
			},
			{
				audio: "786",
				text: "setecientos ochenta y seis",
				input: "786"
			},
			{
				audio: "891",
				text: "ochocientos noventa y uno",
				input: "891"
			},
			{
				audio: "928",
				text: "novecientos veintiocho",
				input: "928"
			},
		]
	};
});

mat202.controller('Act3Ctrl', function ($scope) {
	$scope.data = {
		inputWidth: "300px",
		chancesPerInput: 2, // Posibilidades por cada input
		minRightAnswers: 7,
		items: [
			{
				audio:"17",
				text: "17",
				input: "Diecisiete"
			},
			{
				audio: "21",
				text: "21",
				input: "Veintiuno"
			},
			{
				audio: "115",
				text: "115",
				input: "Ciento quince"
			},
			{
				audio: "234",
				text: "234",
				input: "Doscientos treinta y cuatro"
			},
			{
				audio: "356",
				text: "356",
				input: "Trescientos cincuenta y seis"
			},
			{
				audio: "478",
				text: "478",
				input: "Cuatrocientos setenta y ocho"
			},
			{
				audio: "589",
				text: "589",
				input: "Quinientos ochenta y nueve"
			},
			{
				audio: "612",
				text: "612",
				input: "Seiscientos doce"
			},
			{
				audio: "723",
				text: "723",
				input: "Setecientos veintitrés"
			},
			{
				audio: "845",
				text: "845",
				input: "Ochocientos cuarenta y cinco"
			},
			{
				audio: "931",
				text: "931",
				input: "Novecientos treinta y uno"
			}
		]
	};
});

mat202.controller('Act4Ctrl', function ($scope) {
	$scope.data = {
		chancesPerPhase: 2,
		phases: [
			{
				title: 'del 20 al 29',
				groups: [
					{ title: 'Pares', items: [20, 22, 24, 26, 28] },
					{ title: 'Impares', items: [21, 23, 25, 27, 29] }
				]
			},
			{
				title: 'del 30 al 39',
				groups: [
					{ title: 'Pares', items: [30, 32, 34, 36, 38] },
					{ title: 'Impares', items: [31, 33, 35, 37, 39] }
				]
			},
			{
				title: 'del 40 al 49',
				groups: [
					{ title: 'Pares', items: [40, 42, 44, 46, 48] },
					{ title: 'Impares', items: [41, 43, 45, 47, 49] }
				]
			},
			{
				title: 'del 50 al 59',
				groups: [
					{ title: 'Pares', items: [50, 52, 54, 56, 58] },
					{ title: 'Impares', items: [51, 53, 55, 57, 59] }
				]
			},
			{
				title: 'del 60 al 69',
				groups: [
					{ title: 'Pares', items: [60, 62, 64, 66, 68] },
					{ title: 'Impares', items: [61, 63, 65, 67, 69] }
				]
			},
			{
				title: 'del 70 al 79',
				groups: [
					{ title: 'Pares', items: [70, 72, 74, 76, 78] },
					{ title: 'Impares', items: [71, 73, 75, 77, 79] }
				]
			},
			{
				title: 'del 80 al 89',
				groups: [
					{ title: 'Pares', items: [80, 82, 84, 86, 88] },
					{ title: 'Impares', items: [81, 83, 85, 87, 89] }
				]
			},
			{
				title: 'del 90 al 99',
				groups: [
					{ title: 'Pares', items: [90, 92, 94, 96, 98] },
					{ title: 'Impares', items: [91, 93, 95, 97, 99] }
				]
			}
		]
	};
});

mat202.controller('Act5Ctrl', function ($scope) {
	$scope.data = {
		chances: 12,
		minRightAnswers: 4,
		text: "Carlitos quiso ahorrar durante toda la semana, el domingo contó todo su dinero ahorrado, y para su sorpresa había recogido 568 ( ${0} ) pesos, pero para sumar tiene novecientos ( ${1} ) pesos que le regalo su padre para comprar dulces, gasto 120 ( ${2} ) pesos en dos ( ${3} ) helados que compró en el parque mientras jugaba. Al regresar a casa, le compró a su madre una tarjeta del día de la madre que le costó trecientos sesenta y ocho ( ${4} ) pesos. Recordó que su mejor amigo cumplía años al día siguiente, así que quiso salir a comprarle un pequeño regalo de 143 ( ${5} ) pesos.",
		words: [
			"quinientos sesenta y ocho",
			"900",
			"ciento veinte",
			"2",
			"368",
			"ciento cuarenta y tres"
		]
	};
});

var appManager = AppManager();
var mat203 = angular.module('mat203', ['activities']);

appManager.configModule(mat203, {
	resources: '../resources/02/mat/03',
	competences1: 'Uso diversas estrategias de cálculo y de estimación para resolver problemas en situaciones aditivas, de sustracción y multiplicación.',
	competences2: 'Resuelve situaciones aditivas con números naturales.',
	competencesSound: true,
	evidences: 'Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, actividad de evidencia, guía 1, lección 3; descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.',
	evidencesSound: true,
	farewell: '¡Muy bien!, ahora ya sabes sumar.',
	routes: [
		{ 
			name: '/conceptualizacion-1', 
			templateUrl: 'con1', 
			controller: 'Con1Ctrl',
			title: 'La suma'
		},
		{ 
			name: '/conceptualizacion-2', 
			templateUrl: 'con2', 
			controller: 'Con2Ctrl',
			title: 'La suma'
		},
		{ 
			name: '/conceptualizacion-3', 
			templateUrl: 'con3', 
			controller: 'Con3Ctrl',
			title: 'La suma'
		},
		{ 
			name: '/conceptualizacion-4', 
			templateUrl: 'con4', 
			controller: 'Con4Ctrl',
			title: 'La suma'
		},
		{ 
			name: '/conceptualizacion-5', 
			templateUrl: 'con5', 
			controller: 'Con5Ctrl',
			title: 'La suma'
		},
		{ 
			name: '/actividad-1', 
			templateUrl: 'act1', 
			controller: 'Act1Ctrl',
			title: 'Actividad 1'
		},
		{ 
			name: '/actividad-2-1', 
			templateUrl: 'act2_1', 
			controller: 'Act2_1Ctrl',
			title: 'Actividad 2'
		},
		{ 
			name: '/actividad-2-2', 
			templateUrl: 'act2_2', 
			controller: 'Act2_2Ctrl',
			title: 'Actividad 2'
		},
		{ 
			name: '/actividad-3-1', 
			templateUrl: 'act3_1', 
			controller: 'Act3_1Ctrl',
			title: 'Actividad 3'
		},
		{ 
			name: '/actividad-3-2', 
			templateUrl: 'act3_2', 
			controller: 'Act3_2Ctrl',
			title: 'Actividad 3'
		},
		{ 
			name: '/actividad-3-3', 
			templateUrl: 'act3_3', 
			controller: 'Act3_3Ctrl',
			title: 'Actividad 3'
		},
		{ 
			name: '/actividad-3-4', 
			templateUrl: 'act3_4', 
			controller: 'Act3_4Ctrl',
			title: 'Actividad 3'
		},
		{ 
			name: '/actividad-3-5', 
			templateUrl: 'act3_5', 
			controller: 'Act3_5Ctrl',
			title: 'Actividad 3'
		},
	]
});



mat203.controller('Con1Ctrl', function ($scope) {
	$scope.data = [
		{ 
			resource: "suma-completa-d6",
			alt: "La suma de dos peras de color verde y tres manzanas de color rojo, que da un total de cinco frutas"
		},
	]
});

mat203.controller('Con2Ctrl', function ($scope) {
	$scope.goNext = function () {
		$scope.$root.isNextEnabled = true; // Activa el botón de siguiente
		$scope.$root.goNext(); // Va al siguiente link
	};
});

mat203.controller('Con3Ctrl', function ($scope) {
	$scope.data = [
		{ 
			resource: "paso-1-suma",
			alt: "Nueve manzanas y tres peras que sumadas dan como resultado 12 frutas"
		},
	]
});

mat203.controller('Con4Ctrl', function ($scope) {
	$scope.data = [
		{ 
			resource: "paso-2-suma",
			alt: "Desarrollo de la suma llevando, una fresa, dos manzanas y tres peras que sumadas da como resultado 6"
		},
	]
});

mat203.controller('Con5Ctrl', function ($scope) {
	$scope.data = [
		{ 
			resource: "paso-3-suma",
			alt: "Desarrollo de la suma llevando, 5 bolas verdes y 7 bolas rojas que sumadas da como resultado doce"
		},
	]
});

mat203.controller('Act1Ctrl', function ($scope) {
	$scope.data = {
		minRightAnswers: 2,
		chancesPerInput: 2,
		units: [
			{
				src: "pepito",
				alt: "Imagen del niño llamado Pepito,  vestido de traje verde, camisa amarilla , medias rojas y zapatos grises. Tiene ojos azules y cabello rubio y parado, además tres manzanas y un cuadro vacío para escribir la cantidad de manzanas",
				input: "3"
			},
			{
				src: "luis",
				alt: "Niño llamado Luis, moreno de camisa azul, pantalón amarillo, zapatos azules,  ojos negros y cabello negro y parado.  Además seis manzanas y un cuadro vacío para  escribir el total de manzanas",
				input: "6"
			}
		],
		total: {
			src: "luis-y-pepito",
			alt: "Pepito y Luis juntos, y la suma de las manzanas que tenía Pepito más las manzanas que tenia Luis. Además un cuadro vacío para escribir la suma de todas las manzanas",
			operation: "3 + 6",
			input: "9"
		}
	};
});

mat203.controller('Act2_1Ctrl', function ($scope) {
	$scope.goNext = function () {
		$scope.$root.isNextEnabled = true;
		$scope.$root.goNext();
	};
});

mat203.controller('Act2_2Ctrl', function ($scope) {
	$scope.data = {
		operation: "addition",
		//operation: "subtraction",
		//operation: "multiplication",
		//operation: "division",
		chances: 2, // Por operación
		questions: 5, // Por rango seleccionado
		minRightAnswers: 11,
		ranges: [
			{
				label: "Muy fácil",
				range: [10, 30]
			},
			{
				label: "Fácil",
				range: [31, 100]
			},
			{
				label: "Algo fácil",
				range: [101, 500]
			},
			{
				label: "No tan fácil",
				range: [501, 599]
			},
		]
	}
});

mat203.controller('Act3_1Ctrl', function($scope){
	$scope.items = [
		{
			pattern: [19],
			resource: "revista",
			alt: "Revista con 3 círculos de colores.",
			text:"Beatriz compra una revista que cuesta 200 pesos y unas láminas que cuestan 50 pesos. ¿Cuánto dinero tiene que pagar? 250"
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 2,
		minRightAnswers: 1,
	};
});

mat203.controller('Act3_2Ctrl', function($scope){
	$scope.items = [
		{
			pattern: [19],
			resource: "loros",
			alt: "2 loros, uno al lado del otro",
			text:"En el circo hay 43 loros, y luego entran nuevamente otros 25 loros. ¿Cuántos loros hay ahora en el circo? 68"
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 2,
		minRightAnswers: 1,
	};
});

mat203.controller('Act3_3Ctrl', function($scope){
	$scope.items = [
		{
			pattern: [18],
			resource: "amigos",
			alt: "Tres niños y una niña",
			text:"Pedro tiene 43 amigos de pelo negro. También tiene 76 amigos de pelo rubio. ¿Cuántos amigos tiene Pedro? 119"
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 2,
		minRightAnswers: 1,
	};
});

mat203.controller('Act3_4Ctrl', function($scope){
	$scope.items = [
		{
			pattern: [21],
			resource: "dulces",
			alt: "Helado y confites",
			text:"Luis compra un helado que le cuesta 550 pesos y unos dulces que cuestan 365 pesos. ¿Cuánto dinero tiene que pagar? 915"
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 2,
		minRightAnswers: 1,
	};
});

mat203.controller('Act3_5Ctrl', function($scope){
	$scope.items = [
		{
			pattern: [20],
			resource: "lapices",
			alt: "siete lápices",
			text:"Ana tiene 30 lápices, Luis 34, pepe 104, lucia 209, ¿cuántos lápices tienen Ana, Luis, pepe, y Lucia en total? 377"
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 2,
		minRightAnswers: 1,
	};
});

var appManager = AppManager();
var mat204 = angular.module('mat204', ['activities']);

appManager.configModule(mat204, {
	resources: '../resources/02/mat/04',
	competences1: 'Uso diversas estrategias de cálculo y de estimación para resolver problemas en situaciones aditivas, de sustracción y multiplicación.',
	competences2: 'Resuelve situaciones sustrayendo con números naturales.',
	competencesSound: true,
	evidences: 'Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, actividad de evidencia, guía 1, lección 4; descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.',
	evidencesSound: true,
	farewell: '¡Muy bien!, ahora ya sabes restar prestando.',
	routes: [
		{ 
			name: '/conceptualizacion-1', 
			templateUrl: 'con1', 
			controller: 'Con1Ctrl',
			title: 'La resta'
		},
		{ 
			name: '/conceptualizacion-2', 
			templateUrl: 'con2', 
			controller: 'Con2Ctrl',
			title: 'La resta'
		},
		{ 
			name: '/conceptualizacion-3', 
			templateUrl: 'con3', 
			controller: 'Con3Ctrl',
			title: 'La resta'
		},
		{ 
			name: '/conceptualizacion-4', 
			templateUrl: 'con4', 
			controller: 'Con4Ctrl',
			title: 'La resta'
		},
		{ 
			name: '/conceptualizacion-5', 
			templateUrl: 'con5', 
			controller: 'Con5Ctrl',
			title: 'La resta'
		},
		{ 
			name: '/actividad-1', 
			templateUrl: 'act1', 
			controller: 'Act1Ctrl',
			title: 'Actividad 1'
		},
		{ 
			name: '/actividad-2-1', 
			templateUrl: 'act2_1', 
			controller: 'Act2_1Ctrl',
			title: 'Actividad 2'
		},
		{ 
			name: '/actividad-2-2', 
			templateUrl: 'act2_2', 
			controller: 'Act2_2Ctrl',
			title: 'Actividad 2'
		},
		{ 
			name: '/actividad-3-1', 
			templateUrl: 'act3_1', 
			controller: 'Act3_1Ctrl',
			title: 'Actividad 3'
		},
		{ 
			name: '/actividad-3-2', 
			templateUrl: 'act3_2', 
			controller: 'Act3_2Ctrl',
			title: 'Actividad 3'
		},
		{ 
			name: '/actividad-3-3', 
			templateUrl: 'act3_3', 
			controller: 'Act3_3Ctrl',
			title: 'Actividad 3'
		},
		{ 
			name: '/actividad-3-4', 
			templateUrl: 'act3_4', 
			controller: 'Act3_4Ctrl',
			title: 'Actividad 3'
		},
		{ 
			name: '/actividad-3-5', 
			templateUrl: 'act3_5', 
			controller: 'Act3_5Ctrl',
			title: 'Actividad 3'
		},
		{ 
			name: '/actividad-3-6', 
			templateUrl: 'act3_6', 
			controller: 'Act3_6Ctrl',
			title: 'Actividad 3'
		}
	]
});

mat204.controller('Con1Ctrl', function ($scope) {
	$scope.data = [
		{ 
			resource: "resta-inicial",
			alt: "Una manzana roja, que es el resultado de restar 3 menos 2"
		}
	]
});

mat204.controller('Con2Ctrl', function ($scope) {
	$scope.goNext = function () {
		$scope.$root.isNextEnabled = true; // Activa el botón de siguiente
		$scope.$root.goNext(); // Va al siguiente link
	};
});

mat204.controller('Con3Ctrl', function ($scope) {
  $scope.$root.isNextEnabled = true;
});

mat204.controller('Con4Ctrl', function ($scope) {
  $scope.$root.isNextEnabled = true;
});

mat204.controller('Con5Ctrl', function ($scope) {
  $scope.$root.isNextEnabled = true;
});

mat204.controller('Act1Ctrl', function ($scope) {
	$scope.data = {
		minRightAnswers: 2,
		chancesPerInput: 2,
		units: [
			{
				src: "ana",
				alt: "Niña de con vestido amarillo y blusa café, medias rojas, zapatos café y un grupo de seis fresas rojas.",
				input: "6"
			},
			{
				src: "luis",
				alt: "Niño llamado Luis de camisa verde, pantaloneta amarilla, cabello rubio y un grupo de cuatro fresas.",
				input: "4"
			}
		],
		total: {
			src: "resta-ana-y-luis",
			alt: "Ambos niños y dos fresas, que son el resultado de restar seis menos dos.",
			operation: "6 - 4",
			input: "2"
		}
	};
});

mat204.controller('Act2_1Ctrl', function ($scope) {
	$scope.goNext = function () {
		$scope.$root.isNextEnabled = true;
		$scope.$root.goNext();
	};
});

mat204.controller('Act2_2Ctrl', function ($scope) {
	$scope.data = {
		//operation: "addition",
		operation: "subtraction",
		//operation: "multiplication",
		//operation: "division",
		chances: 2, // Por operación
		questions: 5, // Por rango seleccionado
		minRightAnswers: 11,
		ranges: [
			{
				label: "Muy fácil",
				range: [10, 30]
			},
			{
				label: "Fácil",
				range: [31, 100]
			},
			{
				label: "Algo fácil",
				range: [101, 500]
			},
			{
				label: "No tan fácil",
				range: [501, 599]
			}
		]
	}
});

mat204.controller('Act3_1Ctrl', function($scope){
	$scope.items = [
		{
			pattern: [16],
			resource: "pastel",
			alt: "Pastel de fresa con crema chantillí",
			text:"En una bandeja había 250 pasteles y se comieron 133 ¿Cuántos pasteles quedaron en la bandeja? 117"
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 2,
		minRightAnswers: 1
	};
});

mat204.controller('Act3_2Ctrl', function($scope){
	$scope.items = [
		{
			pattern: [14],
			resource: "bus",
			alt: "Bus de color amarillo, con varios niños transportándose en el",
			text:"Un bus tiene 34 asientos y solamente suben 21 pasajeros. ¿Cuántos asientos quedarán libres? 13"
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 2,
		minRightAnswers: 1
	};
});

mat204.controller('Act3_3Ctrl', function($scope){
	$scope.items = [
		{
			pattern: [14],
			resource: "huevos",
			alt: "Recipiente blanco con cuatro huevos",
			text:"En una cesta había 679 huevos y se rompen 230. ¿Cuántos huevos quedan enteros? 449"
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 2,
		minRightAnswers: 1
	};
});

mat204.controller('Act3_4Ctrl', function($scope){
	$scope.items = [
		{
			pattern: [22],
			resource: "helado",
			alt: "Helado con salsa de chocolate, barquillo, maní y kiwi",
			text:"Luis compra un helado que le cuesta 550 pesos y unos dulces que le cuestan 365 pesos. ¿Cuánto dinero tiene que pagar? 915"
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 2,
		minRightAnswers: 1
	};
});

mat204.controller('Act3_5Ctrl', function($scope){
	$scope.items = [
		{
			pattern: [17],
			resource: "cerezas",
			alt: "Montón de cerezas moradas y rojas",
			text:"Un comerciante tenía 846 cajas de cerezas y ha vendido 342. ¿Cuántas cajas de cerezas le quedan? 504"
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 2,
		minRightAnswers: 1
	};
});

mat204.controller('Act3_6Ctrl', function($scope){
	$scope.items = [
		{
			pattern: [17],
			resource: "dinero",
			alt: "Dos filas de monedas apiladas y dos paquetes de billetes",
			text:"Para mi cumpleaños mis abuelos me dieron 120 pesos, me gaste 55 pesos ¿Cuánto dinero me queda? 65"
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 2,
		minRightAnswers: 1
	};
});

var appManager = AppManager();
var mat205 = angular.module('mat205', ['activities']);

appManager.configModule(mat205, {
	resources: '../resources/02/mat/05',
	competences1: 'Uso diversas estrategias de cálculo y de estimación para resolver problemas en situaciones aditivas, de sustracción y multiplicación.',
	competences2: 'Resuelve situaciones multiplicando con números naturales.',
	competencesSound: true,
	evidences: 'Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, actividad de evidencia, guía 1, lección 5; descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.',
	evidencesSound: true,
	farewell: '¡Muy bien!, ahora ya sabes multiplicar.',
	routes: [
		{ 
			name: '/conceptualizacion-1', 
			templateUrl: 'con1', 
			controller: 'Con1Ctrl',
			title: 'La multiplicación'
		},
		{ 
			name: '/conceptualizacion-2', 
			templateUrl: 'con2', 
			controller: 'Con2Ctrl',
			title: 'La multiplicación'
		},
		{ 
			name: '/actividad-1', 
			templateUrl: 'act1', 
			controller: 'Act1Ctrl',
			title: 'Actividad 1'
		},
		{ 
			name: '/actividad-2', 
			templateUrl: 'act2', 
			controller: 'Act2Ctrl',
			title: 'Actividad 2'
		},
		{ 
			name: '/actividad-3-1', 
			templateUrl: 'act3_1', 
			controller: 'Act3_1Ctrl',
			title: 'Actividad 3'
		},
		{ 
			name: '/actividad-3-2', 
			templateUrl: 'act3_2', 
			controller: 'Act3_2Ctrl',
			title: 'Actividad 3'
		},
		{ 
			name: '/actividad-4-1', 
			templateUrl: 'act4_1', 
			controller: 'Act4_1Ctrl',
			title: 'Actividad 4'
		},
		{ 
			name: '/actividad-4-2', 
			templateUrl: 'act4_2', 
			controller: 'Act4_2Ctrl',
			title: 'Actividad 4'
		},
		{ 
			name: '/actividad-4-3', 
			templateUrl: 'act4_3', 
			controller: 'Act4_3Ctrl',
			title: 'Actividad 4'
		},
		{ 
			name: '/actividad-4-4', 
			templateUrl: 'act4_4', 
			controller: 'Act4_4Ctrl',
			title: 'Actividad 4'
		},
		{ 
			name: '/actividad-4-5', 
			templateUrl: 'act4_5', 
			controller: 'Act4_5Ctrl',
			title: 'Actividad 4'
		},
	]
});

mat205.controller('Con1Ctrl', function ($scope) {
	$scope.activateNext = function () {
		$scope.$root.isNextEnabled = true; // Activa el botón de siguiente
	};
});

mat205.controller('Con2Ctrl', function ($scope) {
	$scope.data = [
		{ 
			resource: "multiplicacion-2",
			alt: "Cuatro globos de color amarillo. Cuatro globos de color rojo. Cuatro globos de color azul.",
			customClass: 'more-height'
		},
	]
});

mat205.controller('Act1Ctrl', function ($scope) {
	$scope.data = {
		minRightAnswers: 2,
		chancesPerInput: 2,
		units: [
			{
				src: "sofia",
				alt: "Niña llamada Sofía de cabello corto y color café, vestido y zapatos azules. Y tres naranjas.",
				input: "3"
			},
			{
				src: "felipe",
				alt: "Niño llamado Felipe de cabello negro,  camisa verde, pantalón rojo, zapatos azules y tres manzanas verdes.",
				input: "3"
			}
		],
		total: {
			src: "sofia-y-felipe",
			alt: "Nueve frutas. Los dos niños Felipe y Sofía juntos",
			operation: "3 x 3",
			input: "9"
		}
	};
});

mat205.controller('Act2Ctrl', function ($scope) {

});

mat205.controller('Act3_1Ctrl', function ($scope) {
	$scope.goNext = function () {
		$scope.$root.isNextEnabled = true;
		$scope.$root.goNext();
	};
});

mat205.controller('Act3_2Ctrl', function ($scope) {
	$scope.data = {
		//operation: "addition",
		//operation: "subtraction",
		operation: "multiplication", // Si es multiplicación, los rangos están formados por 2 arrays
		//operation: "division",
		chances: 2, // Por operación
		questions: 5, // Por rango seleccionado
		minRightAnswers: 11,
		ranges: [
			{
				label: "Muy fácil",
				range: [2, 4, 12, 35]
			},
			{
				label: "Fácil",
				range: [4, 6, 27, 97]
			},
			{
				label: "Algo fácil",
				range: [6, 8, 42, 75]
			},
			{
				label: "No tan fácil",
				range: [8, 10, 35, 69]
			},
		]
	}
});

mat205.controller('Act4_1Ctrl', function($scope){
	$scope.items = [
		{
			pattern: [11],
			resource: "lapices",
			alt: "lápices de color amarillo",
			text:"Una caja tiene 3 lápices. ¿Cuántos lápices habrá en 61 cajas? 183"
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 2,
		minRightAnswers: 1,
	};
});

mat205.controller('Act4_2Ctrl', function($scope){
	$scope.items = [
		{
			pattern: [12],
			resource: "clavos",
			alt: "tres clavos",
			text:"En una caja hay 7 clavos. ¿Cuántos clavos habrá en 55 cajas? 385"
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 2,
		minRightAnswers: 1,
	};
});

mat205.controller('Act4_3Ctrl', function($scope){
	$scope.items = [
		{
			pattern: [16],
			resource: "monedas",
			alt: "2 monedas de 50 pesos cada una.",
			text:"El domingo compré 8 bolsas de papitas a 11 pesos cada una. ¿Cuánto dinero me gasté? 88"
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 2,
		minRightAnswers: 1,
	};
});

mat205.controller('Act4_4Ctrl', function($scope){
	$scope.items = [
		{
			pattern: [18],
			resource: "futbol",
			alt: "Dos niños jugando futbol",
			text:"Un grupo de 27 chicos compran entradas de fútbol de 8 pesos cada una. ¿Cuánto gastaron en total? 216"
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 2,
		minRightAnswers: 1,
	};
});

mat205.controller('Act4_5Ctrl', function($scope){
	$scope.items = [
		{
			pattern: [17],
			resource: "ticketes-rifa",
			alt: "Dos boletas de una rifa",
			text:"Un grupo de 12 compañeros compraron 15 boletas de una rifa, cada uno. ¿Cuántas boletas tenemos ahora? 180"
		}
	];

	$scope.options = {
		items: $scope.items,
		chances: 2,
		minRightAnswers: 1,
	};
});


var appManager = AppManager();
var mat206 = angular.module('mat206', ['activities']);

appManager.configModule(mat206, {
	resources: '../resources/02/mat/06',
	competences1: 'Realizo y describo  procesos de mediciòn con patrones arbitrarios y algunos estandarizados, de acuerdo al contexto.',
	competences2: 'Establezco comparaciones entre medidas de longitud.',
	competencesSound: true,
	evidences: 'Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, hacer clic sobre el nombre “Actividades de evidencia Matemáticas lección N ° 1”, descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.',
	evidencesSound: true,
	farewell: '¡Muy bien!, ahora ya conoces los números hasta el 999.',
	routes: [
		{ 
			name: '/conceptualizacion-1', 
			templateUrl: 'con1', 
			controller: 'Con1Ctrl',
			title: 'Lección 6 : Medimos objetos'
		},
		{ 
			name: '/conceptualizacion-2', 
			templateUrl: 'con2', 
			controller: 'Con2Ctrl',
			title: 'Lección  6: Medimos objetos '
		},
		{ 
			name: '/actividad-1', 
			templateUrl: 'act1', 
			controller: 'Act1Ctrl',
			title: 'Actividad Nº 1 de  conceptualización'
		},
		{ 
			name: '/actividad-2', 
			templateUrl: 'act2', 
			controller: 'Act2Ctrl',
			title: 'Actividad Nº 2 de dinamización'
		},
		{ 
			name: '/actividad-3', 
			templateUrl: 'act3', 
			controller: 'Act3Ctrl',
			title: 'Actividad Nº 3 de dinamización '
		},
	]
});

mat206.controller('Con1Ctrl', function ($scope) {
	$scope.data = [
		{ 
			resource: "niño",
			alt: "Las reglas sirven para trazar lineas"
		}
	]
});
mat206.controller('Con2Ctrl', function ($scope) {
	$scope.data = [
		{ 
			resource: "explicacion-ancho-y-largo",
			alt: "Número 1: Número uno en color azul, y un perro blanco y café"
		},
	]
});
mat206.controller('Act1Ctrl', function ($scope) {
	$scope.data = {
		hasAudio: true,
		itemsPerRow: 6,
		customClass: "big-title-blocks-fix",
		blocks: [
			{
				img: "pez.png",
				alt: "Pez de color negro y amarillo.",
				audio: "pez",
				hasAudio: true
			},
			{
				img: "lapiz.png",
				alt: "Lápiz de color azul.",
				audio: "lapiz",
				hasAudio: true
			},
			{
				img: "libro.png",
				alt: "Cuaderno de pasta verde.",
				audio: "cuaderno",
				hasAudio: true
			},
			{
				img: "camion.png",
				alt: "Carro de color naranja.",
				audio: "volqueta",
				hasAudio: true
			},
			{
				img: "ventana.png",
				alt: "Ventana grande con marco de color café.",
				audio: "ventana",
				hasAudio: true
			},
			{
				img: "cuadro.png",
				alt: "Cuadro de una montaña.",
				audio: "cuadro",
				hasAudio: true
			}
		]
	}
});


mat206.controller('Act2Ctrl', function ($scope) {
	$scope.items = [
		{
			src: "tren",
			alt: "Reloj con numeración romana",
			src2: "carro",
			alt2: "Reloj con numeración romana",
			color: '#BD0926'
		},
		{
			src: "cuchillo",
			alt: "Reloj con numeración romana",
			src2: "tijeras",
			alt2: "Reloj con numeración romana",
			color: '#BD0926'
		},
		{
			src: "lapiz-dos",
			alt: "Reloj con numeración romana",
			src2: "cuaderno-2",
			alt2: "Reloj con numeración romana",
			color: '#BD0926'
		},
		{
			src: "pez-dos",
			alt: "Reloj con numeración romana",
			src2: "tren",
			alt2: "Reloj con numeración romana",
			color: '#BD0926'
		},
	];

	$scope.verify = function (item) {
		if(item.completed) return;

		item.completed = true;

		var completedItems = $scope.items.filter(function(item){
			return item.completed;
		}).length;

		if(completedItems === $scope.items.length) {
			$scope.$root.isNextEnabled = true;
		}
	};

});

mat206.controller('Act3Ctrl', function ($scope) {
  $scope.data = {
    src: "regla.png",
    alt: "Niña feliz aplicando las propiedades de la suma.",
    minRightAnswers: 4,
    template: '<div style="padding-top:10%;" ><div class="progress"><div style="width:100%;" class="progress-bar progress-bar-info"></div></div><p style="width: 50%;float: left;"> Resultado en centímetros ${3} </p></div>\n\n\n</div>',
    items: [
      ,
      968,
      1890,
      "12cm",
      1462,
      2881,
    ]
  };
});
var appManager = AppManager();
var mat207 = angular.module('mat207', ['activities']);

appManager.configModule(mat207, {
	resources: '../resources/02/mat/07',
	competences1: 'Realizo y describo procesos de medición con patrones arbitrarios y algunos estandarizados, de acuerdo al contexto',
	competences2: 'Establezco comparaciones entre medidas de tiempo.',
	competencesSound: true,
	evidences: 'Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, actividad de evidencia, guía 2, lección 7; descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.',
	evidencesSound: true,
	farewell: '¡Muy bien!, ahora ya sabes medir el tiempo',
	routes: [
		{ 
			name: '/conceptualizacion-1', 
			templateUrl: 'con1', 
			controller: 'Con1Ctrl',
			title: 'Lección 7: Medimos el tiempo'
		},
		{ 
			name: '/conceptualizacion-2', 
			templateUrl: 'con2', 
			controller: 'Con2Ctrl',
			title: 'Lección 7: Medimos el tiempo'
		},
		{ 
			name: '/conceptualizacion-3', 
			templateUrl: 'con3', 
			controller: 'Con3Ctrl',
			title: 'Lección 7: Medimos el tiempo'
		},
		{ 
			name: '/actividad-1', 
			templateUrl: 'act1', 
			controller: 'Act1Ctrl',
			title: 'Actividad Nº 1 de  conceptualización'
		},
		{ 
			name: '/actividad-1-1', 
			templateUrl: 'act1-1', 
			controller: 'Act1-1Ctrl',
			title: 'Actividad Nº 1 de  conceptualización'
		},
		{ 
			name: '/actividad-1-2', 
			templateUrl: 'act1-2', 
			controller: 'Act1-2Ctrl',
			title: 'Actividad Nº 1 de  conceptualización'
		},
		{ 
			name: '/actividad-1-3', 
			templateUrl: 'act1-3', 
			controller: 'Act1-3Ctrl',
			title: 'Actividad Nº 1 de  conceptualización'
		},
		{ 
			name: '/actividad-1-4', 
			templateUrl: 'act1-4', 
			controller: 'Act1-4Ctrl',
			title: 'Actividad Nº 1 de  conceptualización'
		},
		{ 
			name: '/actividad-2', 
			templateUrl: 'act2', 
			controller: 'Act2Ctrl',
			title: 'Actividad Nº 2 de dinamización'
		},
		{ 
			name: '/actividad-2-1', 
			templateUrl: 'act2-1', 
			controller: 'Act2-1Ctrl',
			title: 'Actividad Nº 2 de dinamización'
		},
		{ 
			name: '/actividad-2-2', 
			templateUrl: 'act2-2', 
			controller: 'Act2-2Ctrl',
			title: 'Actividad Nº 2 de dinamización'
		},
		{ 
			name: '/actividad-2-3', 
			templateUrl: 'act2-3', 
			controller: 'Act2-3Ctrl',
			title: 'Actividad Nº 2 de dinamización'
		},
		{ 
			name: '/actividad-2-4', 
			templateUrl: 'act2-4', 
			controller: 'Act2-4Ctrl',
			title: 'Actividad Nº 2 de dinamización'
		},
		{ 
			name: '/actividad-2-5', 
			templateUrl: 'act2-5', 
			controller: 'Act2-5Ctrl',
			title: 'Actividad Nº 2 de dinamización'
		},
		{ 
			name: '/actividad-4', 
			templateUrl: 'act4', 
			controller: 'Act4Ctrl',
			title: 'Actividad Nº 4  de socialización'
		},
		{ 
			name: '/actividad-4-1', 
			templateUrl: 'act4-1', 
			controller: 'Act4-1Ctrl',
			title: 'Actividad Nº 4  de socialización'
		},
		{ 
			name: '/actividad-4-2', 
			templateUrl: 'act4-2', 
			controller: 'Act4-2Ctrl',
			title: 'Actividad Nº 4  de socialización'
		},
		{ 
			name: '/actividad-4-3', 
			templateUrl: 'act4-3', 
			controller: 'Act4-3Ctrl',
			title: 'Actividad Nº 4  de socialización'
		},
		{ 
			name: '/actividad-4-4', 
			templateUrl: 'act4-4', 
			controller: 'Act4-4Ctrl',
			title: 'Actividad Nº 4  de socialización'
		},
	]
});
	mat207.controller('Con1Ctrl', function ($scope) {
		$scope.activateNext = function () {
			$scope.$root.isNextEnabled = true; // Activa el botón de siguiente
		};
	});

	mat207.controller('Con2Ctrl', function ($scope) {
		$scope.activateNext = function () {
			$scope.$root.isNextEnabled = true; // Activa el botón de siguiente
		};
	});
	mat207.controller('Con3Ctrl', function ($scope) {
		$scope.activateNext = function () {
			$scope.$root.isNextEnabled = true; // Activa el botón de siguiente
		};
	});
	mat207.controller('Act1Ctrl', function ($scope) {
		$scope.data = {
			sound: 'D9',
			items: [
				{
				src: "D9",
				alt: "Reloj de color rojo, que muestra la hora.",
			},
			],
		};
		$scope.$root.isNextEnabled = true;
	});
	mat207.controller('Act1-1Ctrl', function ($scope) {
		$scope.data = {
			sound: 'D10',
			items: [
				{
				src: "D10",
				alt: "Reloj de color rojo, que muestra la hora.",
			},
			],
		};
		$scope.$root.isNextEnabled = true;
	});
	mat207.controller('Act1-2Ctrl', function ($scope) {
		$scope.data = {
			sound: 'D11',
			items: [
				{
				src: "D11",
				alt: "Reloj de color rojo, que muestra la hora.",
			},
			],
		};
		$scope.$root.isNextEnabled = true;
	});
	mat207.controller('Act1-3Ctrl', function ($scope) {
		$scope.data = {
			sound: 'D12',
			items: [
				{
				src: "D12",
				alt: "Reloj de color rojo, que muestra la hora.",
			},
			],
		};
		$scope.$root.isNextEnabled = true;
	});
	mat207.controller('Act1-4Ctrl', function ($scope) {
		$scope.data = {
			sound: 'D13',
			items: [
				{
				src: "D13",
				alt: "Reloj de color rojo, que muestra la hora.",
			},
			],
		};
		$scope.$root.isNextEnabled = true;
	});
	mat207.controller('Act2Ctrl', function ($scope) {
	  $scope.data = {
	    alt: "Niña al lado de la pizarra o tablero para resolver ejercicios aplicando la propiedad conmutativa.",
	    minRightAnswers: 2,
	    content: '<div class="clearfix" style="background-size: 70%; background-image: url(\'../resources/02/mat/07/D14.png\'); background-repeat: no-repeat; padding: 320px 30px 107px 56px; color: #000; margin-top: -40px; margin-left: 150px;  font-size: 30px;">\n<div style="float: left; margin-left: 130px; width: 48%; text-align: right; color:000;">\n<p>Hora: ${0}${1}</p>\n</div>\n<div style="float: left;  width: 4%; top:-30%; text-align: center; color:000;">\n\n</div></div>\n</div>\n\n',
	    answers: "4 05 ".split(" "),
	    inputStyles: "background: transparent;  border-color: #BD0926; width: 63px;"
	  };
	});
	mat207.controller('Act2-1Ctrl', function ($scope) {
	  $scope.data = {
	    alt: "Niña al lado de la pizarra o tablero para resolver ejercicios aplicando la propiedad conmutativa.",
	    minRightAnswers: 2,
	    content: '<div class="clearfix" style="background-size: 70%; background-image: url(\'../resources/02/mat/07/D15.png\'); background-repeat: no-repeat; padding: 320px 30px 107px 56px; color: #000; margin-top: -40px; margin-left: 150px;  font-size: 30px;">\n<div style="float: left; margin-left: 130px; width: 48%; text-align: right; color:000;">\n<p>Hora: ${0}${1}</p>\n</div>\n<div style="float: left;  width: 4%; top:-30%; text-align: center; color:000;">\n\n</div></div>\n</div>\n\n',
	    answers: "5 45 ".split(" "),
	    inputStyles: "background: transparent;  border-color: #BD0926; width: 63px;"
	  };
	});
	mat207.controller('Act2-2Ctrl', function ($scope) {
	  $scope.data = {
	    alt: "Niña al lado de la pizarra o tablero para resolver ejercicios aplicando la propiedad conmutativa.",
	    minRightAnswers: 2,
	    content: '<div class="clearfix" style="background-size: 70%; background-image: url(\'../resources/02/mat/07/D16.png\'); background-repeat: no-repeat; padding: 320px 30px 107px 56px; color: #000; margin-top: -40px; margin-left: 150px;  font-size: 30px;">\n<div style="float: left; margin-left: 130px; width: 48%; text-align: right; color:000;">\n<p>Hora: ${0}${1}</p>\n</div>\n<div style="float: left;  width: 4%; top:-30%; text-align: center; color:000;">\n\n</div></div>\n</div>\n\n',
	    answers: "10 12 ".split(" "),
	    inputStyles: "background: transparent;  border-color: #BD0926; width: 63px;"
	  };
	});
	mat207.controller('Act2-3Ctrl', function ($scope) {
	  $scope.data = {
	    alt: "Niña al lado de la pizarra o tablero para resolver ejercicios aplicando la propiedad conmutativa.",
	    minRightAnswers: 2,
	    content: '<div class="clearfix" style="background-size: 70%; background-image: url(\'../resources/02/mat/07/D17.png\'); background-repeat: no-repeat; padding: 320px 30px 107px 56px; color: #000; margin-top: -40px; margin-left: 150px;  font-size: 30px;">\n<div style="float: left; margin-left: 130px; width: 48%; text-align: right; color:000;">\n<p>Hora: ${0}${1}</p>\n</div>\n<div style="float: left;  width: 4%; top:-30%; text-align: center; color:000;">\n\n</div></div>\n</div>\n\n',
	    answers: "8 10 ".split(" "),
	    inputStyles: "background: transparent;  border-color: #BD0926; width: 63px;"
	  };
	});
	mat207.controller('Act2-4Ctrl', function ($scope) {
	  $scope.data = {
	    alt: "Niña al lado de la pizarra o tablero para resolver ejercicios aplicando la propiedad conmutativa.",
	    minRightAnswers: 2,
	    content: '<div class="clearfix" style="background-size: 70%; background-image: url(\'../resources/02/mat/07/D18.png\'); background-repeat: no-repeat; padding: 320px 30px 107px 56px; color: #000; margin-top: -40px; margin-left: 150px;  font-size: 30px;">\n<div style="float: left; margin-left: 130px; width: 48%; text-align: right; color:000;">\n<p>Hora: ${0}${1}</p>\n</div>\n<div style="float: left;  width: 4%; top:-30%; text-align: center; color:000;">\n\n</div></div>\n</div>\n\n',
	    answers: "6 25 ".split(" "),
	    inputStyles: "background: transparent;  border-color: #BD0926; width: 63px;"
	  };
	});
	mat207.controller('Act2-5Ctrl', function ($scope) {
	  $scope.data = {
	    alt: "Niña al lado de la pizarra o tablero para resolver ejercicios aplicando la propiedad conmutativa.",
	    minRightAnswers: 2,
	    content: '<div class="clearfix" style="background-size: 70%; background-image: url(\'../resources/02/mat/07/D19.png\'); background-repeat: no-repeat; padding: 320px 30px 107px 56px; color: #000; margin-top: -40px; margin-left: 150px;  font-size: 30px;">\n<div style="float: left; margin-left: 130px; width: 48%; text-align: right; color:000;">\n<p>Hora: ${0}${1}</p>\n</div>\n<div style="float: left;  width: 4%; top:-30%; text-align: center; color:000;">\n\n</div></div>\n</div>\n\n',
	    answers: "11 40 ".split(" "),
	    inputStyles: "background: transparent;  border-color: #BD0926; width: 63px;"
	  };
	});
    
    mat207.controller('Act4Ctrl', function ($scope) {
	  $scope.data = {
	    alt: "Niña al lado de la pizarra o tablero para resolver ejercicios aplicando la propiedad conmutativa.",
	    minRightAnswers: 1,
	    content: '<div class="clearfix" style="background-size: 40%;  background-image: url(\'../resources/02/mat/07/estudiante.png\'); background-repeat: no-repeat;  padding: 250px 30px 130px 100px; color: #000;  margin-top: -20px;  margin-left: 20px; border: 2px solid #BD0926; border-radius: 2%; width: 950px; height: -10px;">\n<div style="float: left; margin-left: 170px; font-weight: bold; width: 80%; text-align: right; color:000;">\n<p>Repuestas ${0}</p>\n<div style=" margin-left: 10px;  text-align: right; margin-top:-45%; color:000; DECORATION: none ; TEXT-ALIGN:justify; FONT-SIZE: 20px;">\n<p>Pepito salió de su casa para la escuela a las 7: 00 a.m. Si el recorrido duró 40 minutos, ¿a qué horas llegó pepito a la escuela?</p>\n<div style=" FONT-SIZE: 28px; font-weight: bold; margin-left:400px;">\n<p>Hora 7:40 a.m.</p>\n\n</div>\n\n</div>\n\n</div></div>\n</div>\n\n',
	    answers: "v".split(" "),
	    inputStyles: "background: transparent;  border-color: #BD0926; width: 80px;"
	  };
	});
    
      mat207.controller('Act4-1Ctrl', function ($scope) {
	  $scope.data = {
	    alt: "Niña al lado de la pizarra o tablero para resolver ejercicios aplicando la propiedad conmutativa.",
	    minRightAnswers: 1,
	    content: '<div class="clearfix" style="background-size: 30%;  background-image: url(\'../resources/02/mat/07/ninaestudiando.png\'); background-repeat: no-repeat;  padding: 250px 30px 130px 100px; color: #000;  margin-top: -20px;  margin-left: 20px; border: 2px solid #BD0926; border-radius: 2%; width: 950px; height: -10px;">\n<div style="float: left; margin-left: 170px; font-weight: bold; width: 80%; text-align: right; color:000;">\n<p>Repuestas ${0}</p>\n<div style=" margin-left: 10px;  text-align: right; margin-top:-45%; color:000; DECORATION: none ; TEXT-ALIGN:justify; FONT-SIZE: 20px;">\n<p>Anita quiere salir al parque a jugar, su madre le dice que puede salir a las 3:20 p.m. cuando termine sus tareas, Anita termina sus tareas en 30 minutos ¿a qué horas salió Anita a jugar al parque?.</p>\n<div style=" FONT-SIZE: 28px; font-weight: bold; margin-left:400px;">\n<p>Hora 1:20 p.m.</p>\n\n</div>\n\n</div>\n\n</div></div>\n</div>\n\n',
	    answers: "f".split(" "),
	    inputStyles: "background: transparent;  border-color: #BD0926; width: 80px;"
	  };
	});
mat207.controller('Act4-2Ctrl', function ($scope) {
	  $scope.data = {
	    alt: "Niña al lado de la pizarra o tablero para resolver ejercicios aplicando la propiedad conmutativa.",
	    minRightAnswers: 1,
	    content: '<div class="clearfix" style="background-size: 40%;  background-image: url(\'../resources/02/mat/07/dosestudiantes.png\'); background-repeat: no-repeat;  padding: 250px 30px 130px 100px; color: #000;  margin-top: -20px;  margin-left: 20px; border: 2px solid #BD0926; border-radius: 2%; width: 950px; height: -10px;">\n<div style="float: left; margin-left: 170px; font-weight: bold; width: 80%; text-align: right; color:000;">\n<p>Repuestas ${0}</p>\n<div style=" margin-left: 100px;  text-align: right; margin-top:-45%; color:000; DECORATION: none ; TEXT-ALIGN:justify; FONT-SIZE: 20px;">\n<p>Miguel  dedica todos los días 25 minutos a la lectura,<br>  el miércoles  comenzó a leer  a la  1:25 pm,<br> ¿a qué hora terminó?</p>\n<div style=" FONT-SIZE: 28px; font-weight: bold; margin-left:300px;">\n<p>Hora 1:50 p.m.</p>\n\n</div>\n\n</div>\n\n</div></div>\n</div>\n\n',
	    answers: "v".split(" "),
	    inputStyles: "background: transparent;  border-color: #BD0926; width: 80px;"
	  };
	});
mat207.controller('Act4-3Ctrl', function ($scope) {
	  $scope.data = {
	    alt: "Niña al lado de la pizarra o tablero para resolver ejercicios aplicando la propiedad conmutativa.",
	    minRightAnswers: 1,
	    content: '<div class="clearfix" style="background-size: 31%;  background-image: url(\'../resources/02/mat/07/ninaestudiando1.png\'); background-repeat: no-repeat;  padding: 250px 30px 130px 100px; color: #000;  margin-top: -20px;  margin-left: 20px; border: 2px solid #BD0926; border-radius: 2%; width: 950px; height: -10px;">\n<div style="float: left; margin-left: 170px; font-weight: bold; width: 80%; text-align: right; color:000;">\n<p>Repuestas ${0}</p>\n<div style=" margin-left: 10px;  text-align: right; margin-top:-45%; color:000; DECORATION: none ; TEXT-ALIGN:justify; FONT-SIZE: 20px;">\n<p>Esperanza llegó a su clase de gimnasia   a las 6: 15  a.m.,   inmediatamente  le toco dar vueltas a la cancha durante  35 minutos,   ¿a qué hora terminó Esperanza?</p>\n<div style=" FONT-SIZE: 28px; font-weight: bold; margin-left:400px;">\n<p>Hora 6:57 p.m.</p>\n\n</div>\n\n</div>\n\n</div></div>\n</div>\n\n',
	    answers: "f".split(" "),
	    inputStyles: "background: transparent;  border-color: #BD0926; width: 80px;"
	  };
	});
mat207.controller('Act4-4Ctrl', function ($scope) {
	  $scope.data = {
	    alt: "Niña al lado de la pizarra o tablero para resolver ejercicios aplicando la propiedad conmutativa.",
	    minRightAnswers: 1,
	    content: '<div class="clearfix" style="background-size: 40%;  background-image: url(\'../resources/02/mat/07/peinarse.png\'); background-repeat: no-repeat;  padding: 250px 30px 130px 100px; color: #000;  margin-top: -20px;  margin-left: 20px; border: 2px solid #BD0926; border-radius: 2%; width: 950px; height: -10px;">\n<div style="float: left; margin-left: 170px; font-weight: bold; width: 80%; text-align: right; color:000;">\n<p>Repuestas ${0}</p>\n<div style=" margin-left: 10px;  text-align: right; margin-top:-45%; color:000; DECORATION: none ; TEXT-ALIGN:justify; FONT-SIZE: 20px;">\n<p>María  todas las noches antes de acostarse   peina su cabello durante  20 minutos, el viernes en la noche   comenzó a las  8: 05  p.m. ¿A qué hora terminó María de  peinar su cabello?</p>\n<div style=" FONT-SIZE: 28px; font-weight: bold;  margin-left:400px;">\n<p>Hora 8:25 p.m.</p>\n\n</div>\n\n</div>\n\n</div></div>\n</div>\n\n',
	    answers: "v".split(" "),
	    inputStyles: "background: transparent;  border-color: #BD0926; width: 80px;"
	  };
	});








var appManager = AppManager();
var mat208 = angular.module('mat208', ['activities']);

appManager.configModule(mat208, {
	resources: '../resources/02/mat/08',
	competences1: 'Realizo y describo procesos de medición con patrones arbitrarios y algunos estandarizados, de acuerdo al contexto',
	competences2: 'Establezco comparaciones entre medidas de peso.',
	competencesSound: true,
	evidences: 'Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, actividad de evidencia, guía 2, lección 8; descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.',
	evidencesSound: true,
	farewell: '¡Muy bien!, ahora ya conoces el concepto de peso.',
	routes: [
		{ 
			name: '/conceptualizacion-1', 
			templateUrl: 'con1', 
			controller: 'Con1Ctrl',
			title: 'Lección 8: ¿Cuánto pesa?'
		},
		{ 
			name: '/conceptualizacion-2', 
			templateUrl: 'con2', 
			controller: 'Con2Ctrl',
			title: 'Lección 8: ¿Cuánto pesa?'
		},
		{ 
			name: '/actividad-1', 
			templateUrl: 'act1', 
			controller: 'Act1Ctrl',
			title: 'Actividad Nº 1 de  conceptualización'
		},
		{ 
			name: '/actividad-1-1', 
			templateUrl: 'act1-1', 
			controller: 'Act1-1Ctrl',
			title: 'Actividad Nº 1 de  conceptualización'
		},
		{ 
			name: '/actividad-1-2', 
			templateUrl: 'act1-2', 
			controller: 'Act1-2Ctrl',
			title: 'Actividad Nº 1 de  conceptualización'
		},
		{ 
			name: '/actividad-1-3', 
			templateUrl: 'act1-3', 
			controller: 'Act1-3Ctrl',
			title: 'Actividad Nº 1 de  conceptualización'
		},
		{ 
			name: '/actividad-1-4', 
			templateUrl: 'act1-4', 
			controller: 'Act1-4Ctrl',
			title: 'Actividad Nº 1 de  conceptualización'
		},
		{ 
			name: '/actividad-1-5', 
			templateUrl: 'act1-5', 
			controller: 'Act1-5Ctrl',
			title: 'Actividad Nº 1 de  conceptualización'
		},
		{ 
			name: '/actividad-2', 
			templateUrl: 'act2', 
			controller: 'Act2Ctrl',
			title: 'Actividad Nº 3 de dinamización'
		},
		{ 
			name: '/actividad-2-1', 
			templateUrl: 'act2-1', 
			controller: 'Act2-1Ctrl',
			title: 'Actividad Nº 3 de dinamización'
		},
		{ 
			name: '/actividad-2-2', 
			templateUrl: 'act2-2', 
			controller: 'Act2-2Ctrl',
			title: 'Actividad Nº 3 de dinamización'
		},
		{ 
			name: '/actividad-2-3', 
			templateUrl: 'act2-3', 
			controller: 'Act2-3Ctrl',
			title: 'Actividad Nº 3 de dinamización'
		},
	]
});
	mat208.controller('Con1Ctrl', function ($scope) {
		$scope.activateNext = function () {
			$scope.$root.isNextEnabled = true; // Activa el botón de siguiente
		};
	});

	mat208.controller('Con2Ctrl', function ($scope) {
	$scope.data = [
		{ 
			resource: "balanza",
			alt: "Niño y niña jugando con un balón.",
			type: "png",
			text: "<strong >balanza</strong>"
		},
		{ 
			resource: "bаsculas",
			alt: "Mujer pintando sobre un lienzo.",
			type: "png",
			text: "<strong>Báscula</strong>"
		},
		{ 
			resource: "bаscula",
			alt: "Niño escribiendo en su cuaderno con un lápiz.",
			type: "png",
			text: "<strong>Báscula</strong>"
		},
		{ 
			resource: "bаsuclasd",
			alt: "Un chef cocinando un plato de verduras.",
			type: "png",
			text: "<strong>Báscula</strong>"
		},
	]

});

mat208.controller('Act1Ctrl', function ($scope) {
	$scope.data = {
		items: [
			{
				title: 'Líquidos',
				src: 'queso',
				imgs: [
					{
						img: 'queso.png',
						alt: 'Yogurt'
					}
					
				]
			}
		]
	};
});

mat208.controller('Act1-1Ctrl', function ($scope) {
	$scope.data = {
		items: [
			{
				title: 'Líquidos',
				src: 'plato',
				imgs: [
					{
						img: 'plato.png',
						alt: 'Plato café, en su interior hay una ensalada.'
					}
					
				]
			}
		]
	};
});

mat208.controller('Act1-2Ctrl', function ($scope) {
	$scope.data = {
		items: [
			{
				title: 'Líquidos',
				src: 'plato',
				imgs: [
					{
						img: 'pollo.png',
						alt: 'Pollo.'
					}
					
				]
			}
		]
	};
});

mat208.controller('Act1-3Ctrl', function ($scope) {
	$scope.data = {
		items: [
			{
				title: 'Líquidos',
				src: 'plato',
				imgs: [
					{
						img: 'carne.png',
						alt: 'Tozo de carne sobre un plato.'
					}
					
				]
			}
		]
	};
});


mat208.controller('Act1-4Ctrl', function ($scope) {
	$scope.data = {
		items: [
			{
				title: 'Líquidos',
				src: 'plato',
				imgs: [
					{
						img: 'martillo.png',
						alt: 'Martillo'
					}
					
				]
			}
		]
	};
});

mat208.controller('Act1-5Ctrl', function ($scope) {
	$scope.data = {
		items: [
			{
				title: 'Líquidos',
				src: 'plato',
				imgs: [
					{
						img: 'libro.png',
						alt: 'Libro de color amarillo.'
					}
					
				]
			}
		]
	};
});


mat208.controller('Act2Ctrl', function ($scope) {
  $scope.data = {
    src: "balanzafrutas.png",
    alt: "Balanza con una manzana y una fresa.",
    minRightAnswers: 1,
    template: '<div>\n\n\n<div><p>La</p><div class="clearfix" style="background-size: 10%; margin-left:10%; background-image: url(\'../resources/02/mat/08/manzana.png\'); background-repeat: no-repeat; margin-top:-10%;"  ><div><p style="width: 50%; margin-left:20%;">tiene ${5}</p>\n<div ><p style="width: 50%;  margin-left:50%; margin-top:-7%; "> peso que la</p><p><img style="width: 10%; margin-left:70%; margin-top:-16%;" src="../resources/02/mat/08/fresa.png"/></p></div> ' ,
    items: [
      ,
      ,
      ,
      "= ",
      "- ",
      {
        data: "+ ",
        customClass: 'large'
      }
    ]
  };
});

mat208.controller('Act2-1Ctrl', function ($scope) {
  $scope.data = {
    src: "B2.png",
    alt: "Balanza con una manzana y una fresa.",
    minRightAnswers: 1,
    template: '<div>\n\n\n<div><p>La</p><div class="clearfix" style="background-size: 10%; margin-left:10%; background-image: url(\'../resources/02/mat/08/gallina.png\'); background-repeat: no-repeat; margin-top:-10%;"  ><div><p style="width: 50%; margin-left:20%;">tiene ${5}</p>\n<div ><p style="width: 50%;  margin-left:50%; margin-top:-7%; "> peso que la</p><p><img style="width: 10%; margin-left:70%; margin-top:-16%;" src="../resources/02/mat/08/vino.png"/></p></div> ' ,
    items: [
      ,
      ,
      ,
      "= ",
      "- ",
      {
        data: "+",
        customClass: 'large'
      }
    ]
  };
});

mat208.controller('Act2-2Ctrl', function ($scope) {
  $scope.data = {
    src: "balanzaigualdad.png",
    alt: "Balanza con una manzana y una fresa.",
    minRightAnswers: 1,
    template: '<div>\n\n\n<div><p>Las</p><div class="clearfix" style="background-size: 10%; margin-left:10%; background-image: url(\'../resources/02/mat/08/sandalias.png\'); background-repeat: no-repeat; margin-top:-10%;"  ><div><p style="width: 50%; margin-left:20%;">tiene ${5}</p>\n<div ><p style="width: 50%;  margin-left:50%; margin-top:-7%; "> peso que el</p><p><img style="width: 10%; margin-left:70%; margin-top:-16%;" src="../resources/02/mat/08/libro2.png"/></p></div> ' ,
    items: [
      ,
      ,
      ,
      "+ ",
      "- ",
      {
        data: "   =   ",
        customClass: 'large'
      }
    ]
  };
});

mat208.controller('Act2-3Ctrl', function ($scope) {
  $scope.data = {
    src: "B18.png",
    alt: "Balanza con una manzana y una fresa.",
    minRightAnswers: 1,
    template: '<div>\n\n\n<div><p>El</p><div class="clearfix" style="background-size: 10%; margin-left:10%; background-image: url(\'../resources/02/mat/08/v18.png\'); background-repeat: no-repeat; margin-top:-10%;"  ><div><p style="width: 50%; margin-left:20%;">tiene ${5}</p>\n<div ><p style="width: 50%;  margin-left:50%; margin-top:-7%; "> peso que la</p><p><img style="width: 10%; margin-left:70%; margin-top:-16%;" src="../resources/02/mat/08/cafetera.png"/></p></div> ' ,
    items: [
      ,
      ,
      ,
      "+ ",
      "= ",
      {
        data: "- ",
        customClass: 'large'
      }
    ]
  };
});


var appManager = AppManager();
var mat209 = angular.module('mat209', ['activities']);

appManager.configModule(mat209, {
	resources: '../resources/02/mat/09',
	competences1: 'Realizo construcciones y diseños utilizando cuerpos y figuras geométricas tridimensionales y dibujos o figuras geométricas bidimensionales.',
	competences2: 'Compara sólidos geométricos utilizando diversos materiales plasmando su creatividad.',
	competencesSound: true,
	evidences: 'Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, actividad de evidencia, guía 2, lección 9; descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.',
	evidencesSound: true,
	farewell: '¡Muy bien!, ahora ya conoces las figuras geométricas sólidas',
	routes: [
		{ 
			name: '/conceptualizacion-1', 
			templateUrl: 'con1', 
			controller: 'Con1Ctrl',
			title: 'Lección 9:  Solidos geométricos.'
		},
		{ 
			name: '/conceptualizacion-2', 
			templateUrl: 'con2', 
			controller: 'Con2Ctrl',
			title: 'Lección 9:  Solidos geométricos.'
		},
		{ 
			name: '/conceptualizacion-3', 
			templateUrl: 'con3', 
			controller: 'Con3Ctrl',
			title: 'Lección 9:  Solidos geométricos.'
		},
		{ 
			name: '/conceptualizacion-4', 
			templateUrl: 'con4', 
			controller: 'Con4Ctrl',
			title: 'Lección 9:  Solidos geométricos.'
		},
		{ 
			name: '/conceptualizacion-5', 
			templateUrl: 'con5', 
			controller: 'Con5Ctrl',
			title: 'Lección 9:  Solidos geométricos.'
		},
		{ 
			name: '/conceptualizacion-6', 
			templateUrl: 'con6', 
			controller: 'Con6Ctrl',
			title: 'Lección 9:  Solidos geométricos.'
		},
		{ 
			name: '/conceptualizacion-7', 
			templateUrl: 'con7', 
			controller: 'Con7Ctrl',
			title: 'Lección 9:  Solidos geométricos.'
		},
		{ 
			name: '/conceptualizacion-8', 
			templateUrl: 'con8', 
			controller: 'Con8Ctrl',
			title: 'Lección 9:  Solidos geométricos.'
		},
		{ 
			name: '/conceptualizacion-9', 
			templateUrl: 'con9', 
			controller: 'Con9Ctrl',
			title: 'Lección 9:  Solidos geométricos.'
		},
		{ 
			name: '/conceptualizacion-10', 
			templateUrl: 'con10', 
			controller: 'Con10Ctrl',
			title: 'Lección 9:  Solidos geométricos.'
		},
		{ 
			name: '/actividad-1', 
			templateUrl: 'act1', 
			controller: 'Act1Ctrl',
			title: 'Actividad Nº 1 '
		},
		{ 
			name: '/actividad-2', 
			templateUrl: 'act2', 
			controller: 'Act2Ctrl',
			title: 'Actividad Nº 2 de  dinamización '
		},
		{ 
			name: '/actividad-2-1', 
			templateUrl: 'act2-1', 
			controller: 'Act2-1Ctrl',
			title: 'Actividad Nº 2 de  dinamización '
		},
		{ 
			name: '/actividad-3', 
			templateUrl: 'act3', 
			controller: 'Act3Ctrl',
			title: 'Actividad Nº 3 de  dinamización '
		},
		{ 
			name: '/actividad-4', 
			templateUrl: 'act4', 
			controller: 'Act4Ctrl',
			title: 'Actividad Nº 4 de  dinamización '
		},
	]
});
	mat209.controller('Con1Ctrl', function ($scope) {
	  $scope.$root.isNextEnabled = true;
	});
     


    mat209.controller('Con2Ctrl', function($scope){
	$scope.items = [
    {
      src: "caja",
      alt: "Hermoso caballo colorado que corre libremente, donde se muestra que esta constituido por célula animal.",
      title: 'Schweihofer, S. (2013).Caballo [Fotografía]. Obtenido de:http://pixabay.com/es/caballo-galope-animales-66339/',
      text: "Con forma de cubo",
    },
    {
      src: "balon",
      alt: "Reloj con numeración romana",
      title: 'Jardín de plantas ornamentales [Fotografía]. (2014). Obtenido de: http://pixabay.com/es/almohada-azul-jard%C3%ADn-330910/',
      text: "Con forma de esfera",
    }
    ,
    {
      src: "helado",
      alt: "Reloj con numeración romana",
      title: 'Jardín de plantas ornamentales [Fotografía]. (2014). Obtenido de: http://pixabay.com/es/almohada-azul-jard%C3%ADn-330910/',
      text: "Con forma de cono",
    }
  ];

  $scope.verify = function (item) {
    if(item.completed) return;

    item.completed = true;

    var completedItems = $scope.items.filter(function(item){
      return item.completed;
    }).length;

    if(completedItems === $scope.items.length) {
      $scope.$root.isNextEnabled = true;
    }
  };

});

    mat209.controller('Con3Ctrl', function($scope){
	      $scope.selectedItem = false; // elemento seleccionado
		    $scope.items = [
			{
				number: "1",
				alt: "Cubo"
			}
		];
		$scope.selectItem = function (item) {
			$scope.selectedItem = item;

			if(item.completed) return;

			item.completed = true;

			var completedItems = $scope.items.filter(function(item){
				return item.completed;
			}).length;

			if(completedItems === $scope.items.length) {
				// Activamos el botón de siguiente
				$scope.$root.isNextEnabled = true;
			}
		};
	});
	mat209.controller('Con4Ctrl', function($scope){
	      $scope.selectedItem = false; // elemento seleccionado
		    $scope.items = [
			{
				number: "2",
				alt: "Esfera"
			}
		];
		$scope.selectItem = function (item) {
			$scope.selectedItem = item;

			if(item.completed) return;

			item.completed = true;

			var completedItems = $scope.items.filter(function(item){
				return item.completed;
			}).length;

			if(completedItems === $scope.items.length) {
				// Activamos el botón de siguiente
				$scope.$root.isNextEnabled = true;
			}
		};
	});
	mat209.controller('Con5Ctrl', function($scope){
	      $scope.selectedItem = false; // elemento seleccionado
		    $scope.items = [
			{
				number: "3",
				alt: "Helado"
			}
		];
		$scope.selectItem = function (item) {
			$scope.selectedItem = item;

			if(item.completed) return;

			item.completed = true;

			var completedItems = $scope.items.filter(function(item){
				return item.completed;
			}).length;

			if(completedItems === $scope.items.length) {
				// Activamos el botón de siguiente
				$scope.$root.isNextEnabled = true;
			}
		};
	});
	mat209.controller('Con6Ctrl', function($scope){
	      $scope.selectedItem = false; // elemento seleccionado
		    $scope.items = [
			{
				number: "4",
				alt: "Helado"
			}
		];
		$scope.selectItem = function (item) {
			$scope.selectedItem = item;

			if(item.completed) return;

			item.completed = true;

			var completedItems = $scope.items.filter(function(item){
				return item.completed;
			}).length;

			if(completedItems === $scope.items.length) {
				// Activamos el botón de siguiente
				$scope.$root.isNextEnabled = true;
			}
		};
	});
	mat209.controller('Con7Ctrl', function($scope){
	      $scope.selectedItem = false; // elemento seleccionado
		    $scope.items = [
			{
				number: "5",
				alt: "Prisma"
			}
		];
		$scope.selectItem = function (item) {
			$scope.selectedItem = item;

			if(item.completed) return;

			item.completed = true;

			var completedItems = $scope.items.filter(function(item){
				return item.completed;
			}).length;

			if(completedItems === $scope.items.length) {
				// Activamos el botón de siguiente
				$scope.$root.isNextEnabled = true;
			}
		};
	});
	mat209.controller('Con8Ctrl', function($scope){
	      $scope.selectedItem = false; // elemento seleccionado
		    $scope.items = [
			{
				number: "6",
				alt: "Cilindro"
			}
		];
		$scope.selectItem = function (item) {
			$scope.selectedItem = item;

			if(item.completed) return;

			item.completed = true;

			var completedItems = $scope.items.filter(function(item){
				return item.completed;
			}).length;

			if(completedItems === $scope.items.length) {
				// Activamos el botón de siguiente
				$scope.$root.isNextEnabled = true;
			}
		};
	});
	
	 mat209.controller('Con9Ctrl', function($scope){
	$scope.items = [
    {
      src: "piramides",
      alt: "Hermoso caballo colorado que corre libremente, donde se muestra que esta constituido por célula animal.",
      title: 'Schweihofer, S. (2013).Caballo [Fotografía]. Obtenido de:http://pixabay.com/es/caballo-galope-animales-66339/',
      text: "Pirámide",
    },
    {
      src: "prismas",
      alt: "Reloj con numeración romana",
      title: 'Jardín de plantas ornamentales [Fotografía]. (2014). Obtenido de: http://pixabay.com/es/almohada-azul-jard%C3%ADn-330910/',
      text: "Prisma",
    }
    ,
    {
      src: "cuboscon",
      alt: "Reloj con numeración romana",
      title: 'Jardín de plantas ornamentales [Fotografía]. (2014). Obtenido de: http://pixabay.com/es/almohada-azul-jard%C3%ADn-330910/',
      text: "Cubo",
    }
  ];

  $scope.verify = function (item) {
    if(item.completed) return;

    item.completed = true;

    var completedItems = $scope.items.filter(function(item){
      return item.completed;
    }).length;

    if(completedItems === $scope.items.length) {
      $scope.$root.isNextEnabled = true;
    }
  };

});

	 mat209.controller('Con10Ctrl', function($scope){
	$scope.items = [
    {
      src: "conos",
      alt: "Hermoso caballo colorado que corre libremente, donde se muestra que esta constituido por célula animal.",
      title: 'Schweihofer, S. (2013).Caballo [Fotografía]. Obtenido de:http://pixabay.com/es/caballo-galope-animales-66339/',
      text: "Cono",
    },
    {
      src: "cilindros",
      alt: "Reloj con numeración romana",
      title: 'Jardín de plantas ornamentales [Fotografía]. (2014). Obtenido de: http://pixabay.com/es/almohada-azul-jard%C3%ADn-330910/',
      text: "Cilindro",
    }
    ,
    {
      src: "esferas",
      alt: "Reloj con numeración romana",
      title: 'Jardín de plantas ornamentales [Fotografía]. (2014). Obtenido de: http://pixabay.com/es/almohada-azul-jard%C3%ADn-330910/',
      text: "Esfera",
    }
  ];

  $scope.verify = function (item) {
    if(item.completed) return;

    item.completed = true;

    var completedItems = $scope.items.filter(function(item){
      return item.completed;
    }).length;

    if(completedItems === $scope.items.length) {
      $scope.$root.isNextEnabled = true;
    }
  };

});
	mat209.controller('Act1Ctrl', function ($scope){
	$scope.items = [
		{
			text: 'Prisma',
			resource: "prisma",
			alt: 'Prisma'
		},
		{
			text: 'Esfera',
			resource: "esfera",
			alt: 'Esfera'
		},
		{
			text: 'Cubo ',
			resource: "cubo",
			alt: 'Cubo '
		},
		{
			text: 'Pirámide',
			resource: "piramide",
			alt: 'Pirámide'
		},
		{
			text: 'Cono',
			resource: "cono",
			alt: 'Cono'
		},
		{
			text: 'Cilindro',
			resource: "cilindro",
			alt: 'Cilindro'
		}
	];

	$scope.options = {
		data: $scope.items,
		minRightAnswers: 4,
		randomItems: true,
		randomTargets: true
	};
});

mat209.controller('Act2Ctrl', function ($scope) {
	$scope.options = {
		data: [
			{
				src1: "esfera",
				alt1: "Imagen donde se presenta un blue jean, unos tenis y una camiseta manga corta",
				src2: "balon1",
				alt2: "Imagen panorámica de Medellín",
			},
			{
				src1: "cilindro",
				alt1: "Imagen donde se presenta un suéter, un pantalón largo y unos zapatos cubiertos, ropa indicada para clima frío",
				src2: "tarro",
				alt2: "Imagen panorámica de Bogotá",
			},
			{
				src1: "cono",
				alt1: "Imagen donde se presenta un vestido de baño de dos piezas y un par de chancletas",
				src2: "conoamarillo",
				alt2: "Imagen donde se muestra una playa, donde la gente disfruta del mar",
			}
		],
		minRightAnswers: 3,
		randomItems: true,
		randomTargets: true
	};
});

mat209.controller('Act2-1Ctrl', function ($scope) {
	$scope.options = {
		data: [
			{
				src1: "prisma",
				alt1: "Imagen donde se presenta un blue jean, unos tenis y una camiseta manga corta",
				src2: "regalo",
				alt2: "Imagen panorámica de Medellín",
			},
			{
				src1: "cubo",
				alt1: "Imagen donde se presenta un suéter, un pantalón largo y unos zapatos cubiertos, ropa indicada para clima frío",
				src2: "cubo",
				alt2: "Imagen panorámica de Bogotá",
			},
			{
				src1: "piramide",
				alt1: "Imagen donde se presenta un vestido de baño de dos piezas y un par de chancletas",
				src2: "piramide",
				alt2: "Imagen donde se muestra una playa, donde la gente disfruta del mar",
			}
		],
		minRightAnswers: 3,
		randomItems: true,
		randomTargets: true
	};
});


mat209.controller('Act3Ctrl', function ($scope) {
	$scope.data = {
		groups: [
			{
				title: 'Los que ruedan',
				alt: "Rectángulo de color azul",
				items: [
					{
						resource: 'esfera',
						alt: "Rectángulo  de color azul, en su interior hay un tenedor y un cuchillo, debajo de ellos está el texto 500m"
					},
					{
						resource: 'cilindro',
						alt: "Rectángulo color azul, en su interior hay una cruz de color rojo"
					},
					{
						resource: 'cono',
						alt: "Rectángulo de color azul, en su interior se muestra el gráfico de un dispensador de gasolina"
					}
				]
			},
			{
				title: 'Los que deslizan',
				alt: "Rombo de color amarillo",
				items: [
					{
						resource: 'prisma',
						alt: "Rombo de color amarillo, en su interior hay dos siluetas, una de un niño y otra de un adulto, en sus manos llevan algunos libros"
					},
					{
						resource: 'cubo',
						alt: "Rombo de color amarillo, en su interior hay una flecha con varias curvas sucesivas"
					},
					{
						resource: 'piramide',
						alt: "Rombo de color amarillo, en su interior se presenta la silueta de una vaca"
					}
				]
			},
		],
		minRightAnswers: 6,
		chances: 8

	};
});


mat209.controller('Act4Ctrl', function ($scope) {
  $scope.data = {
    canvas: 'sala',
    targets: [
      {
        text: "Prisma",
        w: 12, h: 10, t: 90, l: 59
      },
      {
        text: "Cubo",
        w: 16, h: 25, t: 74, l: 30
      },
      {
        text: "Cono",
        w: 16, h: 23, t: 28, l: 42
      },
      {
        text: "Esfera",
        w: 9, h: 15, t: 82, l: 50
      },
      {
        text: "Cilindro",
        w: 15, h: 20, t: 58, l: 42
      },
      {
        text: "Pirámide",
        w: 17, h: 22, t: 12, l: 75
      }
    ],
    minRightAnswers: 6,
    itemsWidth: "300px",
    itemsPerRow: 1,
    borderColor: "transparent"
  };
});
var appManager = AppManager();
var mat210 = angular.module('mat210', ['activities']);

appManager.configModule(mat210, {
	resources: '../resources/02/mat/10',
	competences1: 'Realizo y describo procesos de medición con patrones arbitrarios y algunos estandarizados, de acuerdo al contexto',
	competences2: 'Establezco comparaciones entre medidas de peso.',
	competencesSound: true,
	evidences: 'Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, actividad de evidencia, guía 2, lección 8; descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.',
	evidencesSound: true,
	farewell: '¡Muy bien!, ahora ya conoces el concepto de peso.',
	routes: [
		{ 
			name: '/conceptualizacion-1', 
			templateUrl: 'con1', 
			controller: 'Con1Ctrl',
			title: 'Lección 10:  Iniciación a la estadística.'
		},
		{ 
			name: '/conceptualizacion-2', 
			templateUrl: 'con2', 
			controller: 'Con2Ctrl',
			title: 'Lección 10:  Iniciación a la estadística.'
		},
		{ 
			name: '/conceptualizacion-3', 
			templateUrl: 'con3', 
			controller: 'Con3Ctrl',
			title: 'Lección 10:  Iniciación a la estadística.'
		},
		{ 
	        name: '/conceptualizacion-4', 
	        templateUrl: 'con4', 
	        controller: 'Con4Ctrl',
	        title: 'Lección 10:  Iniciación a la estadística.'
        },
        { 
	        name: '/conceptualizacion-5', 
	        templateUrl: 'con5', 
	        controller: 'Con5Ctrl',
	        title: 'Lección 10:  Iniciación a la estadística.'
        },
        { 
	        name: '/conceptualizacion-6', 
	        templateUrl: 'con6', 
	        controller: 'Con6Ctrl',
	        title: 'Lección 10:  Iniciación a la estadística.'
        },
        { 
	        name: '/conceptualizacion-7', 
	        templateUrl: 'con7', 
	        controller: 'Con7Ctrl',
	        title: 'Lección 10:  Iniciación a la estadística.'
        },
        { 
	        name: '/conceptualizacion-8', 
	        templateUrl: 'con8', 
	        controller: 'Con8Ctrl',
	        title: 'Lección 10:  Iniciación a la estadística.'
        },
        { 
	        name: '/conceptualizacion-9', 
	        templateUrl: 'con9', 
	        controller: 'Con9Ctrl',
	        title: 'Lección 10:  Iniciación a la estadística.'
        },
        { 
	        name: '/conceptualizacion-10', 
	        templateUrl: 'con10', 
	        controller: 'Con10Ctrl',
	        title: 'Lección 10:  Iniciación a la estadística.'
        },
        { 
	        name: '/conceptualizacion-11', 
	        templateUrl: 'con11', 
	        controller: 'Con11Ctrl',
	        title: 'Lección 10:  Iniciación a la estadística.'
        },
        { 
	        name: '/conceptualizacion-12', 
	        templateUrl: 'con12', 
	        controller: 'Con12Ctrl',
	        title: 'Lección 10:  Iniciación a la estadística.'
        },
		{ 
			name: '/actividad-1', 
			templateUrl: 'act1', 
			controller: 'Act1Ctrl',
			title: 'Actividad Nº 1 de  conceptualización'
		},
		{ 
			name: '/actividad-1-1', 
			templateUrl: 'act1-1', 
			controller: 'Act1-1Ctrl',
			title: 'Actividad Nº 1 de  conceptualización'
		},
		{ 
			name: '/actividad-1-2', 
			templateUrl: 'act1-2', 
			controller: 'Act1-2Ctrl',
			title: 'Actividad Nº 1 de  conceptualización'
		},
		{ 
			name: '/actividad-1-3', 
			templateUrl: 'act1-3', 
			controller: 'Act1-3Ctrl',
			title: 'Actividad Nº 1 de  conceptualización'
		},
		{ 
			name: '/actividad-1-4', 
			templateUrl: 'act1-4', 
			controller: 'Act1-4Ctrl',
			title: 'Actividad Nº 1 de  conceptualización'
		},
		{ 
			name: '/actividad-1-5', 
			templateUrl: 'act1-5', 
			controller: 'Act1-5Ctrl',
			title: 'Actividad Nº 1 de  conceptualización'
		},
		{ 
			name: '/actividad-2', 
			templateUrl: 'act2', 
			controller: 'Act2Ctrl',
			title: 'Actividad Nº 3 de dinamización'
		},
		{ 
			name: '/actividad-2-1', 
			templateUrl: 'act2-1', 
			controller: 'Act2-1Ctrl',
			title: 'Actividad Nº 3 de dinamización'
		},
		{ 
			name: '/actividad-2-2', 
			templateUrl: 'act2-2', 
			controller: 'Act2-2Ctrl',
			title: 'Actividad Nº 3 de dinamización'
		},
		{ 
			name: '/actividad-2-3', 
			templateUrl: 'act2-3', 
			controller: 'Act2-3Ctrl',
			title: 'Actividad Nº 3 de dinamización'
		},
	]
});
	mat210.controller('Con1Ctrl', function ($scope) {
		$scope.activateNext = function () {
			$scope.$root.isNextEnabled = true; // Activa el botón de siguiente
		};
	});

	mat210.controller('Con2Ctrl', function($scope){
	$scope.items = [
    {
      src: "torta",
      alt: "Gráfico de torta.",
      text: "Organizar",
    },
    {
      src: "grаfico-barras",
      alt: "Gráfico de barras.",
      text: "Resumir",
    },
    {
      src: "interpretar",
      alt: "Niño interpretando los resultados representados en un gráfico de torta.",
      text: "Interpretar",
    }
  ];

  $scope.verify = function (item) {
    if(item.completed) return;

    item.completed = true;

    var completedItems = $scope.items.filter(function(item){
      return item.completed;
    }).length;

    if(completedItems === $scope.items.length) {
      $scope.$root.isNextEnabled = true;
    }
  };

});

  mat210.controller('Con3Ctrl', function($scope){
	$scope.items = [
    {
      src: "tabla-y-grаfico-de-datos",
      alt: "Imagen de tabla de datos y gráfica donde aparecen representado por barras los datos de la tabla.",
    }
  ];

  $scope.verify = function (item) {
    if(item.completed) return;

    item.completed = true;

    var completedItems = $scope.items.filter(function(item){
      return item.completed;
    }).length;

    if(completedItems === $scope.items.length) {
      $scope.$root.isNextEnabled = true;
    }
  };

});
mat210.controller('Con4Ctrl', function($scope){
$scope.data = {
    canvas: "interpretargraficos",
    canvasAlt: "La interpretación de tablas y gráficos nos permite manejar, analizar y comprender la información que llega a nuestras manos.",
    items: [
      {
        button: "¿Cuál es la importancia de interpretar tablas y gráficos?",
        title: "Repuesta",
        text: "La interpretación de tablas y gráficos nos permite manejar, analizar y comprender la información que llega a nuestras manos.",
        audio: "d10",
        t: 15,
        l: 30
      }
    ]
  };
});


mat210.controller('Con5Ctrl', function($scope){
	$scope.items = [
    {
      src: "grаfico-columnas",
      alt: "Gráfico de columna.",
      text: "Gráfico de columna",
    },
    {
      src: "grаfico-torta-II",
      alt: "Gráfico circular o de torta. ",
      text: "Gráfico  de torta",
    },
    {
      src: "grаfico-barras-II",
      alt: "Gráfico de barras.",
      text: "Gráfico de barras",
    }
  ];

  $scope.verify = function (item) {
    if(item.completed) return;

    item.completed = true;

    var completedItems = $scope.items.filter(function(item){
      return item.completed;
    }).length;

    if(completedItems === $scope.items.length) {
      $scope.$root.isNextEnabled = true;
    }
  };

});


mat210.controller('Con6Ctrl', function($scope,$sce){
  $scope.$root.isNextEnabled = true; // Activamos el siguiente link
  $scope.maintitle = 'Tratamiento de la información';

  $scope.items = [

    {      
      title: 'Tabla de datos',
    },
    {
      
      title: 'Gráficos',
    },
    {
      
      text: 'Barras',
    },
    {
      
      text: 'Columnas',
    },
    {
      
      text: 'Circular ',
    }
   
   
  ];
  // Para usar el html en angular
    $scope.$root.sanitize = function (item) {
      return $sce.trustAsHtml(item);
    }

});

mat210.controller('Con7Ctrl', function ($scope) {
  $scope.goNext = function () {
    $scope.$root.isNextEnabled = true;
    $scope.$root.goNext();
  };
});

mat210.controller('Con8Ctrl', function ($scope) {
		$scope.activateNext = function () {
			$scope.$root.isNextEnabled = true; // Activa el botón de siguiente
		};
	});

mat210.controller('Con9Ctrl', function ($scope) {
  $scope.$root.isNextEnabled = true;
});

mat210.controller('Con10Ctrl', function ($scope) {
  $scope.$root.isNextEnabled = true;
});

mat210.controller('Con11Ctrl', function ($scope) {
  $scope.$root.isNextEnabled = true;
});
mat210.controller('Con12Ctrl', function ($scope) {
  $scope.$root.isNextEnabled = true;
});
var appManager = AppManager();
var nat201 = angular.module('nat201', ['activities']);

appManager.configModule(nat201, {
	resources: '../resources/02/nat/01',
	competences1: 'Desarrollo compromisos personales y sociales.',
	competences2: 'Identifica situaciones de su entorno que afectan la salud, proponiendo soluciones prácticas que ayuden a tener una mejor calidad de vida.',
	competencesSound: true,
	evidences: 'Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, actividad de evidencia, guía 1, lección 1; descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.',
	evidencesSound: true,
	farewell: '¡Muy bien!, ahora ya sabes más sobre hábitos saludables para cuidar tu cuerpo.',
	routes: [
		{ 
			name: '/conceptualizacion-1', 
			templateUrl: 'con1', 
			controller: 'Con1Ctrl',
			title: 'Hábitos saludables'
		},
		{ 
			name: '/actividad-1', 
			templateUrl: 'act1', 
			controller: 'Act1Ctrl',
			title: 'Actividad 1'
		},
		{ 
			name: '/actividad-2', 
			templateUrl: 'act2', 
			controller: 'Act2Ctrl',
			title: 'Actividad 2'
		},
		{ 
			name: '/actividad-3', 
			templateUrl: 'act3', 
			controller: 'Act3Ctrl',
			title: 'Actividad 3'
		},
		{ 
			name: '/actividad-4', 
			templateUrl: 'act4', 
			controller: 'Act4Ctrl',
			title: 'Actividad 4'
		},
		{ 
			name: '/actividad-5', 
			templateUrl: 'act5', 
			controller: 'Act5Ctrl',
			title: 'Actividad 5'
		}
	]
});

nat201.controller('Con1Ctrl', function ($scope) {
	$scope.data = {
		items: [
			{
				number: "1",
				title: "Buena higiene dental",
				src: "D7",
				img: "cepillarse.png",
				imgAlt: "una joven cepillándose los dientes.",
				imgTitle: "0009466344V [Fotografía]. Obtenido de: http://www.photl.com/259102.html",
				text: "Debemos cepillarnos los dientes después de levantarnos, desayunar, almorzar y comer. Los dientes se cepillan con crema dental de arriba para abajo y de izquierda a derecha. Además debes usar ceda dental la cual nos ayuda a eliminar los residuos de comida que quedaron entre los dientes."
			},
			{
				number: "2",
				title: "Lavado de manos",
				src: "D8",
				text: "Debes lavarte las manos con frecuencia, pincipalmente después de entrar al baño; para reducir el riesgo de contraer enfermedades.",
				stepsBlock: true,
				steps: [
					{
						img: "paso_1.jpg",
						alt: "Untarse el jabón en las manos.",
						title: "0008705565E [Fotografía]. Obtenido de: http://www.photl.com/241548.html",
						text: "Mójate las manos con agua corriente limpia y ponte jabón."
					},
					{
						img: "paso_2.jpg",
						alt: "Frotarse las manos para esparcirse el jabón.",
						title: "0008711997F [Fotografía]. Obtenido de: http://www.photl.com/232827.html",
						text: "Frótate las manos para formar una capa jabonosa y restriega toda la superficie de tus manos por 15 segundos."
					},
					{
						img: "paso_3.jpg",
						alt: "Enjuagarse las manos con agua limpia.",
						title: "0009280374D [Fotografía]. Obtenido de: http://www.photl.com/252096.html",
						text: "Enjuágate las manos con agua y por último sécalas con una toalla o papel."
					}
				]
			},
			{
				number: "3",
				title: "Limpieza de la habitación",
				src: "D9",
				img: "orden.png",
				imgAlt: "Habitación limpia y organizada.",
				imgTitle: "Ugalde, M. (2006). The mexican style [Fotografía]. Obtenido de: http://www.sxc.hu/photo/521459",
				text: "Mantener la habitación limpia y en orden nos ayuda a conservar un buen aseo en el hogar. Esto incluye: no comer en la habitación, mantener la ropa organizada y limpia, los juguetes en orden, entre otras cosas."
			},
			{
				number: "4",
				title: "Alimentación saludable",
				src: "D10",
				img: "alimentacion.png",
				imgAlt: "Varias frutas: piña, naranja, manzana, melón y kiwi.",
				imgTitle: "Mixedfruits [Fotografía]. (2010). Obtenido de: http://www.sxc.hu/photo/1319171",
				text: "Es importante alimentarte saludablemente, evitando comida chatarra: hamburguesas, perros, fritos y dulces. Debes comer muchas frutas y verduras, al igual que sopas y jugos naturales, para que puedas crecer sano."
			},
			{
				number: "5",
				title: "Acostarse temprano",
				src: "D11",
				img: "dormir.png",
				imgAlt: "Niño durmiendo.",
				imgTitle: "Fabbri, G. (2006). Sleeping [Fotografía]. Obtenido de: http://www.sxc.hu/photo/575586",
				text: "Dormir entre 8 y 10 horas nos ayuda a tener suficientes energías para el siguiente día. La hora ideal para irte a dormir es entre las 7:00 p.m. y las 8:00 p.m., no es recomendable quedarse viendo televisión hasta mas tarde o jugando en las calles con tus amiguitos."
			},
			{
				number: "6",
				title: "Buen aseo personal",
				src: "D12",
				img: "baño.png",
				imgAlt: "una joven lavándose el cabello con champú.",
				imgTitle: "0008570898R [Fotografía]. Obtenido de: http://www.photl.com/229903.html",
				text: "Para mantener nuestro aseo personal, debemos utilizar algunos elementos básicos de aseo. Para evitar que el sudor nos dé mal olor, debemos usar desodorante, aplicar talco en los pies, así como champú o jabón en el cabello."
			},
			{
				number: "7",
				title: "No consumir alcohol y cigarrillos",
				src: "D13",
				img: "no-drogas.png",
				imgAlt: "Niño invitando al no consumo de alcohol ni cigarrillos.",
				text: "Evita siempre el consumo de alcohol o cigarrillos, recuerda que estas sustancias pueden causar enfermedades graves e incluso la muerte. Si tienes alguna duda acerca de este tema pregúntale a un adulto de confianza o a tu profesor."
			}
		]
	};
});

nat201.controller('Act1Ctrl', function ($scope) {
	$scope.data = {
		itemsPerRow: 2,
		chancesPerItem: 2,
		minRightAnswers: 3,
		extension: '.jpg',
		hideDescription: true,
		items: [
			{
				resource: "cepillarse_a",
				alt: "Señor cepillándose los dientes",
				title: "0009687534R [Fotografía]. Obtenido de: http://www.photl.com/275856.html",
				options: [
					{ text: "Buena higiene dental", answer: true },
					{ text: "Cepillarse los dientes con frecuencia", answer: true },
					{ text: "No lavarse los dientes" },
					{ text: "No usar crema dental" },
				]
			},
			{
				resource: "dormir",
				alt: "Niño durmiendo",
				title: "Falk, M. (2006). Baby sleeping [Fotografía]. Obtenido de: http://www.sxc.hu/photo/590355",
				options: [
					{ text: "Acostarse temprano", answer: true },
					{ text: "Dormir mucho" },
					{ text: "Dormir pocas horas" },
					{ text: "No dormir" },
				]
			},
			{
				resource: "frutas",
				alt: "Varias frutas: uvas, pera, manzana y naranja",
				title: "0007361232O [Fotografía]. Obtenido de: http://www.photl.com/190167.html",
				options: [
					{ text: "Alimentación saludable", answer: true },
					{ text: "Comer frutas y verduras", answer: true },
					{ text: "Comer muchos dulces" },
					{ text: "Comer pocas veces al día" },
				]
			},
			{
				resource: "limpiar",
				alt: "Limpiar un reguero de café con un trapo",
				title: "0002183404G [Fotografía]. Obtenido de: http://www.photl.com/315958.html",
				options: [
					{ text: "Limpieza de la habitación", answer: true },
					{ text: "Asear la casa", answer: true },
					{ text: "No asear la habitación" },
					{ text: "lavarse los dientes" },
				]
			},
		]
	};
});

nat201.controller('Act2Ctrl', function ($scope) {
	$scope.data = {
		chancesPerItem: 1,
		extension: '.jpg',
		itemsPerRow: 2,
		minRightAnswers: 3,
		hideDescription: true,
		data: [
			{
				resource: "lavarse-las-manos",
				alt: "Lavarse las manos.",
				title: "0008711836F [Fotografía]. Obtenido de: http://www.photl.com/232844.html",
				correctAnswer: "Corresponde"
			},
			{
				resource: "usar-seda",
				alt: "Utilizar seda dental.",
				title: "0009476103W [Fotografía]. Obtenido de: http://www.photl.com/268014.html",
				correctAnswer: "Corresponde"
			},
			{
				resource: "Comer-hamburguesa",
				alt: "Comer hamburguesa.",
				correctAnswer: "No corresponde"
			},
			{
				resource: "dientes",
				alt: "Boca con dientes amarillentos y con caries.",
				correctAnswer: "No Corresponde"
			}
		]
	};
});

nat201.controller('Act3Ctrl', function ($scope) {
	$scope.inputs = [];
	$scope.$root.isNextEnabled = true; // Activamos el siguiente link

	$scope.items = [];
	$scope.texts = [
		"Bañarse bien",
		"Comer sanamente",
		"Dormir temprano",
		"Lavarse los dientes después de cada comida",
		"Ordenar tu habitación",
		"Usar desodorante",
		"Usar talco para pies"
	];

	// llenamos el array
	$scope.texts.forEach(function(text){
		$scope.items.push({
			text: text,
			input: ''
		});
	});

	// antes de ir a la siguiente actividad, verificamos
	$scope.$root.beforeGoNext = function () {
		var error = false,
			str = '';

		// Recorremos los elementos, buscando que cumplan con las condiciones
		// Al menos una mayúscula, una minúscula y 4 letras
		$scope.items.forEach(function(item){
			str = item.input.toLowerCase();
			if( !( str.match(/([bcdfghjklmnñpqrstvwxyz])/) && str.match(/([aeiou])/) && str.length >= 4 ) ) error = true;
		});

		if(error){
			// fracado
			$scope.failure = true;
			return false;
		} else {
			// éxito
			$scope.success = true;
			return true;
		}
	};
	
});

nat201.controller('Act4Ctrl', function ($scope) {
	$scope.data = {
		chances: 20,
		minRightAnswers: 10,
		table: [
			'd n t r e s p e t o m o z'.split(" "),
			'n w o e b u y c s e r t b'.split(" "),
			'm n r l d c v w e s f o i'.split(" "),
			'v i d a s a l u d a b l e'.split(" "),
			'n o e c s w e v x l j e n'.split(" "),
			'd n n i e s p e t u m r e'.split(" "),
			'a u t o c u i d a d o a s'.split(" "),
			's n r n d c v w e s f n t'.split(" "),
			'e i d e s a l u d a b c a'.split(" "),
			'o o e s s w e v x l j i r'.split(" "),
			'n h i g i e n e m l o a t'.split(" "),
			'm c o n v i v e n c i a i'.split(" "),
			'c a l i d a d d e v i d a'.split(" ")
		],
		wordGroups: [
			{
				title: 'Hábitos saludables',
				items: [
					{
						front: "orden",
						back: "orden"
					},
					{
						front: "relaciones",
						back: "relaciones"
					},
					{
						front: "salud",
						back: "salud"
					},
					{
						front: "aseo",
						back: "aseo"
					},
					{
						front: "tolerancia",
						back: "tolerancia"
					},
					{
						front: "bienestar",
						back: "bienestar"
					},
					{
						front: "respeto",
						back: "respeto"
					},
					{
						front: "vida saludable",
						back: "vidasaludable"
					},
					{
						front: "autocuidado",
						back: "autocuidado"
					},
					{
						front: "higiene",
						back: "higiene"
					},
					{
						front: "convivencia",
						back: "convivencia"
					},
					{
						front: "calidad de vida",
						back: "calidaddevida"
					}
				]
			}
		],
	};
});

nat201.controller('Act5Ctrl', function ($scope) {
	$scope.textarea = '';
	$scope.$root.isNextEnabled = true;

	$scope.$root.beforeGoNext = function () {
		if($scope.textarea.length >= 700) {
			$scope.success = true;
			return true;
		} else {
			$scope.failure = true;
			return false;
		}
	};

});

var appManager = AppManager();
var nat202 = angular.module('nat202', ['activities']);

appManager.configModule(nat202, {
	resources: '../resources/02/nat/02',
	competences1: 'Manejo conocimientos propios de las ciencias naturales (Entorno vivo).',
	competences2: 'Reconoce los diferentes grupos alimenticios propios de la naturaleza y los clasifica según su origen.',
	competencesSound: true,
	evidences: 'Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, actividad de evidencia, guía 1, lección 2; descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.',
	evidencesSound: true,
	farewell: '¡Muy bien!, ahora ya sabes más sobre los alimentos y su clasificación.',
	routes: [
		{ 
			name: '/conceptualizacion-1', 
			templateUrl: 'con1', 
			controller: 'Con1Ctrl',
			title: 'Lección 2: clasificación de los alimentos'
		},
		{ 
			name: '/conceptualizacion-2', 
			templateUrl: 'con2', 
			controller: 'Con2Ctrl',
			title: 'Lección 2: clasificación de los alimentos'
		},
		{ 
			name: '/conceptualizacion-3', 
			templateUrl: 'con3', 
			controller: 'Con3Ctrl',
			title: 'Lección 2: clasificación de los alimentos'
		},
		{ 
			name: '/actividad-1', 
			templateUrl: 'act1', 
			controller: 'Act1Ctrl',
			title: 'Actividad N°1'
		},
		{ 
			name: '/actividad-2', 
			templateUrl: 'act2', 
			controller: 'Act2Ctrl',
			title: 'Actividad N°2'
		},
		{ 
			name: '/actividad-3', 
			templateUrl: 'act3', 
			controller: 'Act3Ctrl',
			title: 'Actividad N°3'
		},
		{ 
			name: '/actividad-3-2', 
			templateUrl: 'act3_2', 
			controller: 'Act3_2Ctrl',
			title: 'Actividad N°3'
		},
		{ 
			name: '/actividad-3-3', 
			templateUrl: 'act3_3', 
			controller: 'Act3_3Ctrl',
			title: 'Actividad N°3'
		},
		{ 
			name: '/actividad-4', 
			templateUrl: 'act4', 
			controller: 'Act4Ctrl',
			title: 'Actividad N°4'
		},
		{ 
			name: '/actividad-5', 
			templateUrl: 'act5', 
			controller: 'Act5Ctrl',
			title: 'Actividad N°5'
		},
		{ 
			name: '/actividad-6', 
			templateUrl: 'act6', 
			controller: 'Act6Ctrl',
			title: 'Actividad N°6'
		},
		{ 
			name: '/actividad-7', 
			templateUrl: 'act7', 
			controller: 'Act7Ctrl',
			title: 'Actividad N°7'
		},
		{ 
			name: '/actividad-8', 
			templateUrl: 'act8', 
			controller: 'Act8Ctrl',
			title: 'Actividad complementaria'
		}
	]
});

nat202.controller('Con1Ctrl', function ($scope) {
	$scope.data = {
		items: [
			{
				title: 'Sólidos',
				src: 'solidos',
				imgs: [
					{
						img: 'zanahoria-c.png',
						alt: 'Zanahoria'
					},
					{
						img: 'pan-a.png',
						alt: 'Pan'
					},
					{
						img: 'carne-e.png',
						alt: 'Carne'
					},
					{
						img: 'piña-d.png',
						alt: 'Piña'
					},
					{
						img: 'sandia-b.png',
						alt: 'Sandía'
					}
				]
			},
			{
				title: 'Líquidos',
				src: 'liquidos',
				imgs: [
					{
						img: 'leche-b.png',
						alt: 'Leche'
					},
					{
						img: 'gaseosa-d.png',
						alt: 'Gaseosa'
					},
					{
						img: 'agua-a.png',
						alt: 'Agua'
					},
					{
						img: 'jugo-c.png',
						alt: 'Jugo'
					},
					{
						img: 'yogurt-e.png',
						alt: 'Yogurt'
					}
				]
			}
		]
	};
});

nat202.controller('Con2Ctrl', function ($scope) {
	$scope.data = {
		items: [
			{
				number: "1",
				title: "Alimentos de origen animal",
				src: "D10",
				img: "clasificacion_1.png",
				imgAlt: "Tres trozos de carne de res cruda / Dos presas de pollo apanado / Huevo frito.",
				text: "Los alimentos de origen animal son aquellos que se obtienen a partir de los animales; como por ejemplo la carne, el pollo, el pescado, los huevos y la leche."
			},
			{
				number: "2",
				title: "Alimentos de origen vegetal",
				src: "D11",
				img: "clasificacion_2.png",
				imgAlt: "Varias frutas: uvas, piña, banano, pera, manzana / varios vegetales: tomate, cebolla, ajo y pepino.",
				text: "Los alimentos de origen vegetal son aquellos que se obtienen a partir de los vegetales, algunos ejemplos son las frutas y las verduras."
			},
			{
				number: "3",
				title: "Alimentos de origen mineral",
				src: "D12",
				img: "clasificacion_3.png",
				imgAlt: "Vaso con agua y varios hielos / Sal regada sobre la mesa.",
				text: "Los alimentos de origen mineral son aquellos que se obtienen de la tierra y sus componentes. Algunos ejemplos de estos alimentos son: el agua y la sal."
			}
		]
	}
});

nat202.controller('Con3Ctrl', function ($scope) {
	$scope.data = {
		items: [
			{
				number: "1",
				title: "Leche y sus derivados",
				src: "D14",
				img: "clasificacion_4.png",
				imgAlt: "Vaso con leche / Tres tajadas triangulares de queso sobre una tabla / Un vaso plástico con yogurt.",
				text: "Dentro de la leche y sus derivados, se incluye la leche de vaca, el queso, el yogurt y los helados. La leche es uno de los alimentos más completos puesto que contiene gran cantidad de nutrientes."
			},
			{
				number: "2",
				title: "Carne, pescado y huevos",
				src: "D15",
				img: "clasificacion_5.png",
				imgAlt: "Varios huevos / Troso de carne asada / Varios pescados rodeados por trozos de hielo.",
				text: "La carne, el pescado y los huevos, también conocidos como proteínas, son los alimentos fundamentales para la formación de los músculos del cuerpo."
			},
			{
				number: "3",
				title: "Cereales y legumbres",
				src: "D16",
				img: "clasificacion_6.png",
				imgAlt: "Arroz /  Maíz / Maní.",
				text: "Los cereales y las legumbres, son también llamados carbohidratos, incluyen alimentos como el arroz, el maíz, la avena, las lentejas, el frijol, el maní, entre otros. Estos alimentos aportan gran cantidad de energía al cuerpo, especialmente al cerebro y al sistema nervioso."
			},
			{
				number: "4",
				title: "Frutas y verduras",
				src: "D17",
				img: "clasificacion_7.png",
				imgAlt: "Varias frutas: uvas, piña, banano, pera, manzana / varios vegetales: tomate, cebolla, ajo y pepino.",
				text: "Las frutas y las verduras contienen gran cantidad de vitaminas, minerales y fibras, por lo cual se recomienda consumirlas con frecuencia para lograr un  buen funcionamiento del organismo."
			},
			{
				number: "5",
				title: "Grasas y aceites",
				src: "D18",
				img: "clasificacion_8.png",
				imgAlt: "Dos frascos con aceite de oliva / Mantequilla / Varias salchichas una encima de la otra.",
				text: "Las grasas y los aceites, también se les conoce como lípidos, dentro de este grupo se incluyen la mantequilla, la manteca, los embutidos, y los aceites provenientes de los vegetales. Su consumo proporciona gran cantidad de energía al cuerpo, pero su consumo excesivo puede ser peligroso para la salud del cuerpo."
			}
		]
	}
});

nat202.controller('Act1Ctrl', function ($scope){
	$scope.data = {
		groups: [
			{
				id: "animal",
				title: 'Alimentos de origen animal',
				items: [
					{
						resource: 'pollo-asado',
						alt: 'Pollo asado'
					},
					{
						resource: 'carne',
						alt: 'Trozo de carne'
					},
					{
						resource: 'pez',
						alt: 'Pescado'
					}
				]
			},
			{
				id: "vegetal",
				title: 'Alimentos de origen vegetal',
				items: [
					{
						resource: 'naranja',
						alt: 'Naranja'
					},
					{
						resource: 'zanahoria',
						alt: 'Zanahoria'
					},
					{
						resource: 'fresa',
						alt: 'Fresa'
					},
					{
						resource: 'tomate',
						alt: 'Tomate'
					}
				]
			},
			{
				id: "mineral",
				title: 'Alimentos de origen mineral',
				items: [
					{
						resource: 'tarro-con-agua',
						alt: 'Frasco con agua'
					},
					{
						resource: 'sal',
						alt: 'Sal'
					}
				]
			}
		],
		minRightAnswers: 8,
		chancesPerItem: 2
	}
});

nat202.controller('Act2Ctrl', function ($scope){
	$scope.options = {
		data: [
			{
				src: "kumis",
				alt: "Yogurt natural",
				title: "Leche y sus derivados"
			},
			{
				src: "huevo",
				alt: "Huevo",
				title: "Carne, pescado y huevo"
			},
			{
				src: "trigo",
				alt: "Trigo",
				title: "Cereales y legumbres"
			},
			{
				src: "frasco-de-aceite",
				alt: "Frasco de aceite",
				title: "Grasas y aceites"
			},
			{
				src: "racimo-de-uvas",
				alt: "Racimo de uvas",
				title: "Frutas y verduras"
			}
		],
		minRightAnswers: 4,
		randomItems: true,
		randomTargets: true,
		padding: false,
		paddingTarget: 48,
		chancesPerItem: 2
	};
});

nat202.controller('Act3Ctrl', function ($scope){
	$scope.data = {
		chancesPerItem: 2,
		minRightAnswers: 8,
		textImageTitle: 'Alimento',
		textInput1Title: 'Nombre',
		textInput2Title: 'Origen',
		data: [
			{
				img: 'tomate.png',
				alt: 'Tomate',
				inputs: [
					{
						tableText: 'Tomate'
					},
					{
						tableText: 'Vegetal'
					}
				]
			},
			{
				img: 'pera.png',
				alt: 'Pera',
				inputs: [
					{
						tableText: 'Pera'
					},
					{
						tableText: 'Vegetal'
					}
				]
			},
			{
				img: 'pollo-asado.png',
				alt: 'Pollo asado',
				inputs: [
					{
						tableText: 'Pollo'
					},
					{
						tableText: 'Animal'
					}
				]
			},
			{
				img: 'pez.png',
				alt: 'Pescado',
				inputs: [
					{
						tableText: 'Pescado'
					},
					{
						tableText: 'Animal'
					}
				]
			},
			{
				img: 'pan.png',
				alt: 'Pan',
				inputs: [
					{
						tableText: 'Pan'
					},
					{
						tableText: 'vegetal'
					}
				]
			}
		]
	};
});

nat202.controller('Act3_2Ctrl', function ($scope){
	$scope.data = {
		chancesPerItem: 2,
		minRightAnswers: 8,
		textImageTitle: 'Alimento',
		textInput1Title: 'Nombre',
		textInput2Title: 'Origen',
		data: [
			{
				img: 'banano.png',
				alt: 'Banano',
				inputs: [
					{
						tableText: 'Banano'
					},
					{
						tableText: 'Vegetal'
					}
				]
			},
			{
				img: 'repollo.png',
				alt: 'Repollo',
				inputs: [
					{
						tableText: 'Repollo'
					},
					{
						tableText: 'Vegetal'
					}
				]
			},
			{
				img: 'queso.png',
				alt: 'Queso',
				inputs: [
					{
						tableText: 'Queso'
					},
					{
						tableText: 'Animal'
					}
				]
			},
			{
				img: 'vaso-con-leche.png',
				alt: 'Vaso con leche',
				inputs: [
					{
						tableText: 'Leche'
					},
					{
						tableText: 'Animal'
					}
				]
			},
			{
				img: 'papa.png',
				alt: 'Papa',
				inputs: [
					{
						tableText: 'Papa'
					},
					{
						tableText: 'Vegetal'
					}
				]
			}
		]
	};
});

nat202.controller('Act3_3Ctrl', function ($scope){
	$scope.data = {
		chancesPerItem: 2,
		minRightAnswers: 8,
		textImageTitle: 'Alimento',
		textInput1Title: 'Nombre',
		textInput2Title: 'Origen',
		data: [
			{
				img: 'pimenton.png',
				alt: 'Pimentón',
				inputs: [
					{
						tableText: 'Pimentón'
					},
					{
						tableText: 'Vegetal'
					}
				]
			},
			{
				img: 'manzana-verde.png',
				alt: 'Manzana verde',
				inputs: [
					{
						tableText: 'Manzana'
					},
					{
						tableText: 'Vegetal'
					}
				]
			},
			{
				img: 'agua.png',
				alt: 'Vaso de agua',
				inputs: [
					{
						tableText: 'Agua'
					},
					{
						tableText: 'Mineral'
					}
				]
			},
			{
				img: 'carne.png',
				alt: 'Carne',
				inputs: [
					{
						tableText: 'Carne'
					},
					{
						tableText: 'Animal'
					}
				]
			},
			{
				img: 'huevo.png',
				alt: 'Huevo',
				inputs: [
					{
						tableText: 'Huevo'
					},
					{
						tableText: 'Animal'
					}
				]
			}
		]
	};
});

nat202.controller('Act4Ctrl', function ($scope){
	$scope.data = {
		chancesPerItem: 1,
		data: [
			{
				number: 1,
				description: 'Las papas son alimentos de origen vegetal.',
				answer: 'V'
			},
			{
				number: 2,
				description: 'El queso pertenece al grupo de la leche y sus derivados.',
				answer: 'V'
			},
			{
				number: 3,
				description: 'La sal es un alimento de origen animal.',
				answer: 'F'
			},
			{
				number: 4,
				description: 'La sal es un alimento de origen animal.',
				answer: 'F'
			},
			{
				number: 5,
				description: 'La mantequilla pertenece al grupo de las frutas y verduras.',
				answer: 'F'
			}
		]
	};
});

nat202.controller('Act5Ctrl', function ($scope){
	$scope.data = {
		chancesPerItem: 2,
		minRightAnswers: 11,
		textInput1Title: 'Origen animal',
		textInput2Title: 'Origen vegetal',
		textInput3Title: 'Origen mineral',
		data: {
			inputs1: [
				{
					listValue: 'queso'
				},
				{
					listValue: 'leche'
				},
				{
					listValue: 'carne'
				},
				{
					listValue: 'huevos'
				}
			],
			inputs2: [
				{
					listValue: 'pera'
				},
				{
					listValue: 'azúcar'
				},
				{
					listValue: 'tomate'
				},
				{
					listValue: 'naranja'
				},
				{
					listValue: 'lechuga'
				},
				{
					listValue: 'pan'
				}
			],
			inputs3: [
				{
					listValue: 'agua'
				},
				{
					listValue: 'sal'
				}
			]
		}
	};
});

nat202.controller('Act6Ctrl', function ($scope) {
	$scope.data = {
		words: [
			{
				word: 'coco',
				img: 'coco.png',
				alt: 'Coco',
				number: 1,
				pos: [ [1, 0], [1, 3] ]
			},
			{
				word: 'cereza',
				img: 'cerezas.png',
				alt: 'Cereza',
				number: 2,
				pos: [ [5, 0], [5, 5] ]
			},
			{
				word: 'pera',
				img: 'pera.png',
				alt: 'Pera',
				number: 3,
				pos: [ [7, 0], [7, 3] ]
			},
			{
				word: 'tomate',
				img: 'tomate.png',
				alt: 'Tomate',
				number: 4,
				pos: [ [0, 1], [5, 1] ]
			},
			{
				word: 'fresa',
				img: 'fresa.png',
				alt: 'Fresa',
				number: 5,
				pos: [ [3, 3], [7, 3] ]
			},
			{
				word: 'manzana',
				img: 'manzana.png',
				alt: 'Manzana',
				number: 6,
				pos: [ [4, 5], [10, 5] ]
			}
		]
	};
});

nat202.controller('Act7Ctrl', function ($scope){
	$scope.data = {
		groups: [
			{
				name: "Desayuno",
				min: 1
			},
			{
				name: "Almuerzo",
				min: 1
			},
			{
				name: "Comida",
				min: 1
			}
		],
		stack: [
			{
				src: "pan",
				alt: "Pan"
			},
			{
				src: "banano",
				alt: "Banano"
			},
			{
				src: "vaso-con-leche",
				alt: "Vaso con leche"
			},
			{
				src: "pollo-asado",
				alt: "Pollo asado"
			},
			{
				src: "piña",
				alt: "Piña"
			},
			{
				src: "huevo",
				alt: "Huevo"
			},
			{
				src: "jugo-naranja",
				alt: "Jugo de naranja"
			},
			{
				src: "queso",
				alt: "Queso"
			},
			{
				src: "pez",
				alt: "Pescado"
			},
			{
				src: "ensalada",
				alt: "Ensalada"
			},
			{
				src: "zanahoria",
				alt: "Zanahoria"
			},
			{
				src: "salchichon",
				alt: "Salchichón"
			}
		],
		maxElementsPerGroup: 12
	};
});

nat202.controller('Act8Ctrl', function ($scope) {
	$scope.data = {
		caseLinks: [
			{
				text: "http://www.educaplay.com/es/recursoseducativos/5181/clasificacion_de_los_alimentos.htm",
				w: 52, h: 116, t: 32, l: 41
			},
			{
				text: "http://www.waece.org/sabemos/comidas/comidas.htm",
				w: 57, h: 95, t: 37, l: 50
			}
		]
	};
});
var appManager = AppManager();
var nat203 = angular.module('nat203', ['activities']);

appManager.configModule(nat203, {
	resources: '../resources/02/nat/03',
	competences1: 'Manejo conocimientos propios de las ciencias naturales (Entorno vivo).',
	competences2: 'Clasifica los seres de la naturaleza teniendo en cueta el entorno donde viven.',
	competencesSound: true,
	evidences: 'Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, actividad de evidencia, guía 1, lección 3; descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.',
	evidencesSound: true,
	farewell: 'Muy bien, ahora ya sabes como clasificar los animales y las plantas según su hábitat.',
	routes: [
		{ 
			name: '/conceptualizacion-1', 
			templateUrl: 'con1', 
			controller: 'Con1Ctrl',
			title: 'Lección 3: los seres vivos y su hábitat'
		},
		{ 
			name: '/conceptualizacion-2', 
			templateUrl: 'con2', 
			controller: 'Con2Ctrl',
			title: 'Lección 3: los seres vivos y su hábitat'
		},
		{ 
			name: '/actividad-1', 
			templateUrl: 'act1', 
			controller: 'Act1Ctrl',
			title: 'Actividad N°1'
		},
		{ 
			name: '/actividad-2', 
			templateUrl: 'act2', 
			controller: 'Act2Ctrl',
			title: 'Actividad N°2'
		},
		{ 
			name: '/actividad-2-2', 
			templateUrl: 'act2_2', 
			controller: 'Act2_2Ctrl',
			title: 'Actividad N°2'
		},
		{ 
			name: '/actividad-3', 
			templateUrl: 'act3', 
			controller: 'Act3Ctrl',
			title: 'Actividad N°3'
		},
		{ 
			name: '/actividad-4', 
			templateUrl: 'act4', 
			controller: 'Act4Ctrl',
			title: 'Actividad N°4'
		},
		{ 
			name: '/actividad-5', 
			templateUrl: 'act5', 
			controller: 'Act5Ctrl',
			title: 'Actividad N°5'
		},
		{ 
			name: '/actividad-6', 
			templateUrl: 'act6', 
			controller: 'Act6Ctrl',
			title: 'Actividad N°6'
		},
		{ 
			name: '/actividad-6-2', 
			templateUrl: 'act6_2', 
			controller: 'Act6_2Ctrl',
			title: 'Actividad N°6'
		},
		{ 
			name: '/actividad-7', 
			templateUrl: 'act7', 
			controller: 'Act7Ctrl',
			title: 'Actividad N°7'
		},
		{ 
			name: '/actividad-8', 
			templateUrl: 'act8', 
			controller: 'Act8Ctrl',
			title: 'Actividad complementaria'
		}
	]
});

nat203.controller('Con1Ctrl', function ($scope){
	$scope.data = {
		items: [
			{
				title: 'Aéreos',
				iconSrc: 'ícono-aereo',
				iconAlt: 'Pájaro volando por el cielo.',
				descriptionText: 'Dentro de este grupo están incluidos los animales que tienen la capacidad de volar.',
				descriptionText2: 'Se caracterizan por tener alas y sus huesos huecos; lo que los hace más ligeros, permitiendoles volar.',
				src: 'animales-aereos',
				alt: 'Imagen donde se muestran varias aves, un búho, un pájaro y tres gaviotas volando por el aire'
			},
			{
				title: 'Terrestres',
				iconSrc: 'ícono-terrestres',
				iconAlt: 'Burro caminando sobre la tierra.',
				descriptionText: 'Son animales que generalmente cuentan con patas para poder desplazarse por la tierra, además, cuentan con pulmones para respirar oxígeno y una piel que los protege del clima.',
				src: 'animales-terrestres',
				alt: 'Imagen donde se muestran seis animales en la selva, una cebra, un león, una jirafa, un mico, un elefante y un reno.'
			},
			{
				title: 'Acuáticos',
				iconSrc: 'ícono-acuatico',
				iconAlt: 'Pez nadando en el agua.',
				descriptionText: 'Incluye aquellos animales que viven en el agua o permanecen en ella de forma constante.',
				descriptionText2: 'La mayoría de estos animales tienen aletas, escamas y branquias para respirar bajo el agua.',
				src: 'acuaticas',
				alt: 'Imagen donde aparecen una tortuga marina, un pez, un tiburón, un pulpo, un cangrejo y una ballena nadando en el mar.'
			}
		]
	};
});

nat203.controller('Con2Ctrl', function ($scope){
	$scope.data = {
		items: [
			{
				title: 'Terrestres',
				iconSrc: 'ícono-plantas-terrestres',
				iconAlt: 'Árbol con naranjas sembrado en la tierra.',
				descriptionText: 'Dentro de este grupo están incluidas plantas que viven en la superficie de la tierra, las cuales cuentan con raíces que penetran el suelo para obtener agua y nutrientes.',
				src: 'plantas-terrestres',
				alt: ''
			},
			{
				title: 'Acuáticas',
				iconSrc: 'ícono-plantas-acuaticas',
				iconAlt: 'Alga en el fondo del mar.',
				descriptionText: 'Son aquellas que requieren una gran cantidad de agua en sus raíces para poder vivir.',
				descriptionText2: 'Es posible encontrarlas en lagos, ríos y mares.',
				src: 'plantas-acuaticas',
				alt: ''
			}
		]
	};
});

nat203.controller('Act1Ctrl', function ($scope){
	$scope.data = {
		groups: [
			{
				id: "aereos",
				title: 'Aéreos',
				items: [
					{
						resource: 'pajaro',
						alt: 'Pájaro'
					},
					{
						resource: 'mariposa',
						alt: 'Mariposa'
					},
					{
						resource: 'abeja',
						alt: 'Abeja'
					}
				]
			},
			{
				id: "terrestres",
				title: 'Terrestres',
				items: [
					{
						resource: 'perro',
						alt: 'Perro'
					},
					{
						resource: 'tigre',
						alt: 'Tigre'
					},
					{
						resource: 'elefante',
						alt: 'Elefante'
					},
					{
						resource: 'gato',
						alt: 'Gato'
					}
				]
			},
			{
				id: "acuaticos",
				title: 'Acuáticos',
				items: [
					{
						resource: 'tiburon',
						alt: 'Tiburón'
					},
					{
						resource: 'pez',
						alt: 'Pez'
					},
					{
						resource: 'cisne',
						alt: 'Cisne'
					}
				]
			}
		],
		minRightAnswers: 6,
		chancesPerItem: 2
	}
});

nat203.controller('Act2Ctrl', function ($scope){
	$scope.data = {
		chancesPerItem: 2,
		minRightAnswers: 8,
		textImageTitle: 'Ser vivo',
		textInput1Title: 'Nombre',
		textInput2Title: 'Hábitat',
		data: [
			{
				img: 'caballo.jpg',
				alt: 'Caballo comiendo pasto ',
				inputs: [
					{
						tableText: 'Caballo'
					},
					{
						tableText: 'Terrestre'
					}
				]
			},
			{
				img: 'ballena.jpg',
				alt: 'Ballena nadando en el mar',
				inputs: [
					{
						tableText: 'Ballena'
					},
					{
						tableText: 'Acuático'
					}
				]
			},
			{
				img: 'leon.jpg',
				alt: 'León',
				inputs: [
					{
						tableText: 'León'
					},
					{
						tableText: 'Terrestre'
					}
				]
			},
			{
				img: 'mico.jpg',
				alt: 'Mico sobre un árbol',
				inputs: [
					{
						tableText: 'Mico'
					},
					{
						tableText: 'Terrestre'
					}
				]
			},
			{
				img: 'delfin.jpg',
				alt: 'Delfín nadando en el mar',
				inputs: [
					{
						tableText: 'Delfín'
					},
					{
						tableText: 'Acuático'
					}
				]
			}
		]
	};
});

nat203.controller('Act2_2Ctrl', function ($scope){
	$scope.data = {
		chancesPerItem: 2,
		minRightAnswers: 8,
		textImageTitle: 'Ser vivo',
		textInput1Title: 'Nombre',
		textInput2Title: 'Hábitat',
		data: [
			{
				img: 'oso.jpg',
				alt: 'Oso',
				inputs: [
					{
						tableText: 'Oso'
					},
					{
						tableText: 'Terrestre'
					}
				]
			},
			{
				img: 'pato.jpg',
				alt: 'Pato nadando sobre el agua',
				inputs: [
					{
						tableText: 'Pato'
					},
					{
						tableText: 'Acuático'
					}
				]
			},
			{
				img: 'rana.jpg',
				alt: 'Rana',
				inputs: [
					{
						tableText: 'Rana'
					},
					{
						tableText: 'Acuático'
					}
				]
			},
			{
				img: 'oveja.jpg',
				alt: 'Oveja',
				inputs: [
					{
						tableText: 'Oveja'
					},
					{
						tableText: 'Terrestre'
					}
				]
			},
			{
				img: 'vaca.jpg',
				alt: 'Vaca',
				inputs: [
					{
						tableText: 'Vaca'
					},
					{
						tableText: 'Terrestre'
					}
				]
			}
		]
	};
});

nat203.controller('Act3Ctrl', function ($scope){
	$scope.data = {
		chancesPerItem: 1,
		data: [
			{
				number: 1,
				description: 'Los animales aéreos viven en el agua.',
				answer: 'F'
			},
			{
				number: 2,
				description: 'El caballo es un animal acuático.',
				answer: 'F'
			},
			{
				number: 3,
				description: 'Los animales terrestres viven, se movilizan y realizan sus funciones básicas en la tierra.',
				answer: 'V'
			},
			{
				number: 4,
				description: 'El pez es un animal terrestre.',
				answer: 'F'
			},
			{
				number: 5,
				description: 'El colibrí es un animal aéreo.',
				answer: 'V'
			}
		]
	};
});

nat203.controller('Act4Ctrl', function ($scope){
	$scope.data = {
		chancesPerItem: 2,
		minRightAnswers: 9,
		textInput1Title: 'Aéreos',
		textInput2Title: 'Terrestres',
		textInput3Title: 'Acuáticos',
		data: {
			inputs1: [
				{
					listValue: 'águila'
				},
				{
					listValue: 'zancudo'
				},
				{
					listValue: 'libélula'
				}
			],
			inputs2: [
				{
					listValue: 'vaca'
				},
				{
					listValue: 'caballo'
				},
				{
					listValue: 'naranjo'
				},
				{
					listValue: 'ardilla'
				},
				{
					listValue: 'gato'
				}
			],
			inputs3: [
				{
					listValue: 'sardina'
				},
				{
					listValue: 'algas marinas'
				},
				{
					listValue: 'delfín'
				},
				{
					listValue: 'ballena'
				}
			]
		}
	};
});

nat203.controller('Act5Ctrl', function ($scope) {
	'use strict';
    $scope.data = {
        chancesPerItem: 1,
        minRightAnswers: 3,
        data: [{
            title: 'Cocodrilo',
            answer: 'acuático'
        }, {
            title: 'Canario',
            answer: 'aéreo'
        }, {
            title: 'Mandarino',
            answer: 'terrestre'
        }, {
            title: 'Girasol',
            answer: 'terrestre'
        }, {
            title: 'Mosca',
            answer: 'aéreo'
        }],
        aOptions: [{
            name: 'Aéreo'
        }, {
            name: 'Terrestre'
        }, {
            name: 'Acuático'
        }]
    };
});

nat203.controller('Act6Ctrl', function ($scope) {
	$scope.data = {
		chances: 10,
		minRightAnswers: 7,
		table: [
			'g c o n e j o b p p'.split(" "),
			'a w s e l u y a a e'.split(" "),
			'v n o l e c v l l z'.split(" "),
			'i p d a f a l l o a'.split(" "),
			'o u e c a w e e m l'.split(" "),
			't l n i n s p n a u'.split(" "),
			'a p t o t u i a a d'.split(" "),
			's o r p e r r o e s'.split(" "),
			'e i d e s a r w d s'.split(" "),
			'o o e s s a b e j a'.split(" ")
		],
		wordGroups: [
			{
				title: '',
				items: [
					{
						front: "gaviota",
						back: "gaviota"
					},
					{
						front: "pulpo",
						back: "pulpo"
					},
					{
						front: "oso",
						back: "oso"
					},
					{
						front: "elefante",
						back: "elefante"
					},
					{
						front: "ballena",
						back: "ballena"
					},
					{
						front: "paloma",
						back: "paloma"
					},
					{
						front: "pez",
						back: "pez"
					},
          {
            front: "conejo",
            back: "conejo"
          },
          {
            front: "perro",
            back: "perro"
          },
          {
            front: "abeja",
            back: "abeja"
          }
				]
			}
		]
	};
});

nat203.controller('Act6_2Ctrl', function ($scope){
	$scope.data = {
		chancesPerItem: 2,
		minRightAnswers: 9,
		textInput1Title: 'Aire',
		textInput2Title: 'Tierra',
		textInput3Title: 'Agua',
		data: {
			inputs1: [
				{
					listValue: 'gaviota'
				},
				{
					listValue: 'abeja'
				},
				{
					listValue: 'paloma'
				}
			],
			inputs2: [
				{
					listValue: 'conejo'
				},
				{
					listValue: 'oso'
				},
				{
					listValue: 'elefante'
				},
				{
					listValue: 'perro'
				}
			],
			inputs3: [
				{
					listValue: 'pulpo'
				},
				{
					listValue: 'ballena'
				},
				{
					listValue: 'pez'
				}
			]
		}
	};
});

nat203.controller('Act7Ctrl', function ($scope) {
	$scope.data = {
		groups: [
			{
				title: "Aéreos",
				numInputs: 5
			},
			{
				title: "Terrestres",
				numInputs: 5
			},
			{
				title: "Acuáticos",
				numInputs: 5
			}
		]
	};
});

nat203.controller('Act8Ctrl', function ($scope){
	$scope.options = {
		link: "http://miriamflor.blogspot.com/p/actividades-2.html",
		link2: "http://www.desarrollomultimedia.cl/udd2/lanza.html"
	};
});
var appManager = AppManager();
var nat204 = angular.module('nat204', ['activities']);

appManager.configModule(nat204, {
  resources: '../resources/02/nat/04',
  competences1: 'Manejo conocimientos propios de las ciencias naturales (Entorno vivo).',
  competences2: 'Reconoce las diferentes partes que tiene el cuerpo humano.',
  competencesSound: true,
  evidences: 'Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, actividad de evidencia, guía 1, lección 4; descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.',
  evidencesSound: true,
  farewell: 'Muy bien, ahora ya conoces más sobre el cuerpo humano.',
  routes: [
    {
      name: '/conceptualizacion-1',
      templateUrl: 'con1',
      controller: 'Con1Ctrl',
      title: 'Lección 4: El cuerpo humano'
    },
    {
      name: '/actividad-1',
      templateUrl: 'act1',
      controller: 'Act1Ctrl',
      title: 'Actividad N°1'
    },
    {
      name: '/actividad-2',
      templateUrl: 'act2',
      controller: 'Act2Ctrl',
      title: 'Actividad N°2'
    },
    {
      name: '/actividad-3',
      templateUrl: 'act3',
      controller: 'Act3Ctrl',
      title: 'Actividad N°3'
    },
    {
      name: '/actividad-4',
      templateUrl: 'act4',
      controller: 'Act4Ctrl',
      title: 'Actividad N°4'
    },
    {
      name: '/actividad-5',
      templateUrl: 'act5',
      controller: 'Act5Ctrl',
      title: 'Actividad N°5'
    },
    {
      name: '/actividad-6',
      templateUrl: 'act6',
      controller: 'Act6Ctrl',
      title: 'Actividad N°6'
    },
    {
      name: '/actividad-6-2',
      templateUrl: 'act6_2',
      controller: 'Act6_2Ctrl',
      title: 'Actividad N°6'
    },
    {
      name: '/actividad-7',
      templateUrl: 'act7',
      controller: 'Act7Ctrl',
      title: 'Actividad N°7'
    },
    {
      name: '/actividad-8',
      templateUrl: 'act8',
      controller: 'Act8Ctrl',
      title: 'Actividad complementaria'
    }
  ]
});

nat204.controller('Con1Ctrl', function ($scope) {
  $scope.data = {
    maps: [
      {
        title: "Aparato digestivo",
        instruction: "Haz clic sobre cada recuadro y diferencia los órganos del aparato digestivo.",
        description: "Es el encargado del proceso de digestión, es decir, de la transformación de los alimentos, para que puedan ser utilizados por todo el organismo. Este aparato está conformado por boca, estómago, hígado e intestinos.",
        audio: "D7",
        iconImage: "estomago.png",
        iconAlt: "el estómago.",
        data: {
          canvas: "aparato-digestivo-better",
          canvasAlt: "imagen donde se muestra el cuerpo de un niño y la ubicación de los órganos que conforman el aparato digestivo.",
          items: [
            {
              button: "Boca",
              audio: "boca",
              t: 9,
              l: 17
            },
            {
              button: "Hígado",
              audio: "higado",
              t: 35,
              l: 11
            },
            {
              button: "Intestino grueso",
              audio: "intestino_grueso",
              t: 51,
              l: -3
            },
            {
              button: "Estómago",
              audio: "estomago",
              t: 34,
              l: 74
            },
            {
              button: "Intestino delgado",
              audio: "intestino_delgado",
              t: 49,
              l: 70
            }
          ]
        }
      },
      {
        title: "Aparato respiratorio",
        instruction: "Haz clic sobre cada recuadro y diferencia los órganos del aparato respiratorio.",
        description: "Este aparato es el encargado de la respiración, se encuentra conformado por nariz, tráquea y pulmones.",
        audio: "D8",
        iconImage: "pulmones.png",
        iconAlt: "los pulmones.",
        data: {
          canvas: "aparato-respiratorio-better",
          canvasAlt: "imagen donde se muestra el cuerpo de un niño y la ubicación de los órganos que conforman el aparato respiratorio.",
          items: [
            {
              button: "Nariz",
              audio: "nariz",
              t: 7,
              l: 14
            },
            {
              button: "Tráquea",
              audio: "traquea",
              t: 22,
              l: 15
            },
            {
              button: "Pulmones",
              audio: "pulmones",
              t: 55,
              l: 63
            }
          ]
        }
      },
      {
        title: "Aparato circulatorio",
        instruction: "Haz clic sobre cada recuadro y diferencia los órganos del aparato circulatorio.",
        description: "Es el aparato encargado de la circulación de la sangre, está conformado por corazón, venas y arterias.",
        audio: "D9",
        iconImage: "corazon.png",
        iconAlt: "el corazón.",
        data: {
          canvas: "aparato-circulatorio-better",
          canvasAlt: "imagen donde se muestra el cuerpo de un niño y la ubicación de los órganos que conforman el aparato circulatorio.",
          items: [
            {
              button: "Corazón",
              audio: "corazon",
              t: 23,
              l: 15
            },
            {
              button: "Venas",
              audio: "venas",
              t: 47,
              l: 19
            },
            {
              button: "Arterias",
              audio: "arterias",
              t: 70,
              l: 67
            }
          ]
        }
      }
    ]
  };
});

nat204.controller('Act1Ctrl', function ($scope) {
  $scope.data = {
    chancesPerItem: 1,
    minRightAnswers: 2,
    hideDescription: true,
    itemsPerRow: 3,
    data: [
      {
        resource: "aparato-circulatorio-2",
        alt: "Imagen donde se muestra el aparato circulatorio.",
        correctAnswer: "Aparato circulatorio"
      },
      {
        resource: "aparato-digestivo-2",
        alt: "Imagen donde se muestra el aparato digestivo.",
        correctAnswer: "Aparato digestivo"
      },
      {
        resource: "aparato-respiratorio-2",
        alt: "Imagen donde se muestra el aparato respiratorio.",
        correctAnswer: "Aparato respiratorio"
      }
    ]
  };
});

nat204.controller('Act2Ctrl', function ($scope) {
  $scope.data = {
    chancesPerItem: 2,
    minRightAnswers: 4,
    textMainTitle: 'Aparato',
    textInput1Title: 'Función',
    textInput2Title: 'Órgano',
    data: [
      {
        textGuide: 'Digestivo',
        inputSingle: {
          tableText: 'Digestión'
        },
        inputsMultiple: [
          {
            option: 'estómago'
          },
          {
            option: 'boca'
          },
          {
            option: 'intestinos'
          },
          {
            option: 'hígado'
          }
        ]
      },
      {
        textGuide: 'Circulatorio',
        inputSingle: {
          tableText: 'Circulación de la sangre'
        },
        inputsMultiple: [
          {
            option: 'corazón'
          },
          {
            option: 'venas'
          },
          {
            option: 'arterias'
          }
        ]
      },
      {
        textGuide: 'Respiratorio',
        inputSingle: {
          tableText: 'Respiración'
        },
        inputsMultiple: [
          {
            option: 'pulmones'
          },
          {
            option: 'nariz'
          },
          {
            option: 'tráquea'
          }
        ]
      }
    ]
  };
});

nat204.controller('Act3Ctrl', function ($scope) {
  $scope.data = {
    chancesPerItem: 1,
    minRightAnswers: 2,
    canvasBlocks: [
      {
        title: "Aparato digestivo",
        canvas: "aparato-digestivo-3",
        canvasAlt: "Imagen donde se muestra el aparato  digestivo y la ubicación de los órganos que lo conforman.",
        items: [
          {
            answer: "Boca",
            t: 15,
            l: -1
          },
          {
            answer: "Hígado",
            t: 61,
            l: -1
          },
          {
            answer: "Intestino delgado",
            t: 80,
            l: -1
          },
          {
            answer: "Estómago",
            t: 62,
            l: 72
          },
          {
            answer: "Intestino grueso",
            t: 80,
            l: 72
          }
        ]
      },
      {
        title: "Aparato circulatorio",
        canvas: "aparato-circulatorio-3-better",
        canvasAlt: "Imagen donde se muestra el aparato  circulatorio y la ubicación de los órganos que lo conforman.",
        items: [
          {
            answer: "Venas",
            t: 43,
            l: -1
          },
          {
            answer: "Arterias",
            t: 20,
            l: 72
          },
          {
            answer: "Corazón",
            t: 67,
            l: 61
          }
        ]
      },
      {
        title: "Aparato respiratorio",
        canvas: "aparato-respiratorio-3-better",
        canvasAlt: "Imagen donde se muestra el aparato  respiratorio y la ubicación de los órganos que lo conforman.",
        items: [
          {
            answer: "Nariz",
            t: 20,
            l: -1
          },
          {
            answer: "Tráquea",
            t: 47,
            l: -1
          },
          {
            answer: "Pulmones",
            t: 49,
            l: 69
          }
        ]
      }
    ]
  };
});

nat204.controller('Act4Ctrl', function ($scope) {
  $scope.data = {
    canvas: 'nino_nina_partes_cuerpo',
    canvasAlt: "Imagen donde se muestra el cuerpo humano de un niño y una niña, en él se señalan algunos órganos y partes del cuerpo.",
    targets: [
      {
        text: "Cabeza",
        t: 12, l: 16
      },
      {
        text: "Pecho",
        t: 31, l: 17
      },
      {
        text: "Hígado",
        t: 43, l: 15
      },
      {
        text: "Intestino grueso",
        t: 52, l: 15
      },
      {
        text: "Pierna",
        t: 78, l: 15
      },
      {
        text: "Mano",
        t: 9, l: 46
      },
      {
        text: "Naríz",
        t: 18, l: 40
      },
      {
        text: "Axila",
        t: 27, l: 50
      },
      {
        text: "Estómago",
        t: 42, l: 44
      },
      {
        text: "Pene",
        t: 51, l: 50
      },
      {
        text: "Boca",
        t: 11, l: 76
      },
      {
        text: "Tráquea",
        t: 21, l: 78
      },
      {
        text: "Pulmones",
        t: 34, l: 80
      },
      {
        text: "Muslo",
        t: 81, l: 80
      }
    ],
    minRightAnswers: 4,
    chancesPerItem: 2
  };
});

nat204.controller('Act5Ctrl', function ($scope) {
  $scope.data = {
    chancesPerItem: 2,
    minRightAnswers: 3,
    aOptions: [
      {
        num: 1,
        name: 'Aparato digestivo'
      },
      {
        num: 2,
        name: 'Aparato respiratorio'
      },
      {
        num: 3,
        name: 'Aparato circulatorio'
      }
    ],
    data: [
      {
        number: 'a',
        description: 'Si no realizas ejercicio físico el principal órgano de este aparato pierde fortaleza.',
        answer: '3'
      },
      {
        number: 'b',
        description: 'Reducir el consumo de grasas evita sufrir de enfermedades en el corazón.',
        answer: '3'
      },
      {
        number: 'c',
        description: 'El no secarnos rápidamente después de estar en piscina, puede afectar el funcionamiento de este aparato.',
        answer: '2'
      },
      {
        number: 'd',
        description: 'Si nos lavamos las manos antes de consumir los alimentos, ayudamos a mantener el buen funcionamiento de este aparato.',
        answer: '1'
      }
    ]
  };
});

nat204.controller('Act6Ctrl', function ($scope) {
  $scope.options = {
    data: [
      {
        text: 'transforma los alimentos.',
        title: "El aparato digestivo"
      },
      {
        text: 'llega a los pulmones.',
        title: "El aire se toma por la nariz y"
      },
      {
        text: 'se encarga de la respiración.',
        title: "El aparato respiratorio"
      },
      {
        text: 'impulsa la sangre.',
        title: "El corazón"
      },
      {
        text: 'trituran los alimentos.',
        title: "Los dientes y la lengua"
      }
    ],
    minRightAnswers: 3,
    chancesPerItem: 2,
    randomItems: true,
    randomTargets: true,
    paddingTarget: 48,
    hasImage: false,
    padding: false
  };
});

nat204.controller('Act6_2Ctrl', function ($scope) {
  $scope.options = {
    data: [
      {
        text: 'se hace la digestión.',
        title: "En el estómago"
      },
      {
        text: 'trasporta la sangre por el cuerpo.',
        title: "El aparato circulatorio"
      },
      {
        text: 'entran por la boca.',
        title: "Los alimentos"
      },
      {
        text: 'por la boca.',
        title: "El aire respirado se expulsa"
      },
      {
        text: 'y las sustancias nutritivas.',
        title: "La sangre lleva el oxígeno"
      }
    ],
    minRightAnswers: 3,
    chancesPerItem: 2,
    randomItems: true,
    randomTargets: true,
    paddingTarget: 48,
    hasImage: false,
    padding: false
  };
});

nat204.controller('Act7Ctrl', function ($scope) {
  $scope.data = {
    chancesPerItem: 1,
    tableTextTitle: 'Aparato',
    inputTextTitle: 'Cuidados',
    data: [
      {
        tableText: "Circulatorio"
      },
      {
        tableText: "Digestivo"
      },
      {
        tableText: "Respiratorio"
      }
    ]
  };
});

nat204.controller('Act8Ctrl', function ($scope) {
  $scope.options = {
    link: "http://www.tudiscoverykids.com/juegos/cuerpo-humano/",
    link2: "http://ares.cnice.mec.es/ciengehi/b/00/animaciones/a_fb05_00.html"
  };
});
var appManager = AppManager();
var nat205 = angular.module('nat205', ['activities']);

appManager.configModule(nat205, {
	resources: '../resources/02/nat/05',
	competences1: 'Manejo conocimientos propios de las ciencias naturales (Entorno vivo).',
	competences2: 'Identifica qué es el clima y sus elementos.',
	competencesSound: true,
	evidences: 'Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, actividad de evidencia, guía 1, lección 5; descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.',
	evidencesSound: true,
	farewell: 'Muy bien, ahora ya conoces más sobre el clima.',
	routes: [
		{ 
			name: '/conceptualizacion-1', 
			templateUrl: 'con1', 
			controller: 'Con1Ctrl',
			title: 'Lección 5: El clima y sus elementos'
		},
		{ 
			name: '/conceptualizacion-2', 
			templateUrl: 'con2', 
			controller: 'Con2Ctrl',
			title: 'Lección 5: El clima y sus elementos'
		},
		{ 
			name: '/conceptualizacion-3', 
			templateUrl: 'con3', 
			controller: 'Con3Ctrl',
			title: 'Lección 5: El clima y sus elementos'
		},
		{ 
			name: '/conceptualizacion-4', 
			templateUrl: 'con4', 
			controller: 'Con4Ctrl',
			title: 'Lección 5: El clima y sus elementos'
		},
		{ 
			name: '/actividad-1', 
			templateUrl: 'act1', 
			controller: 'Act1Ctrl',
			title: 'Actividad N°1'
		},
		{ 
			name: '/actividad-2', 
			templateUrl: 'act2', 
			controller: 'Act2Ctrl',
			title: 'Actividad N°2'
		},
		{ 
			name: '/actividad-3', 
			templateUrl: 'act3', 
			controller: 'Act3Ctrl',
			title: 'Actividad N°3'
		},
		{ 
			name: '/actividad-4', 
			templateUrl: 'act4', 
			controller: 'Act4Ctrl',
			title: 'Actividad N°4'
		},
		{ 
			name: '/actividad-5', 
			templateUrl: 'act5', 
			controller: 'Act5Ctrl',
			title: 'Actividad N°5'
		},
		{ 
			name: '/actividad-6', 
			templateUrl: 'act6', 
			controller: 'Act6Ctrl',
			title: 'Actividad complementaria'
		}
	]
});

nat205.controller('Con1Ctrl', function ($scope){
  $scope.$root.isNextEnabled = true;

});

nat205.controller('Con2Ctrl', function ($scope){
	$scope.data = {
		items: [
			{	
				number: 1,
				title: "Temperatura",
				src: "D8",
				img: "temperature.png",
				imgAlt: "Paisaje donde se presenta un día muy soleado / Termómetro.",
				text:'Es el nivel de calor  que hay en el aire, se mide en grados  mediante un instrumento llamado termómetro.'
			},
			{	
				number: 2,
				title: "Precipitaciones",
				src: "D9",
				img: "precipitation.png",
				imgAlt: "Paisaje donde se presenta un día muy lluvioso / Pluviómetro.",
				text:'Es la cantidad de agua que cae del cielo a la tierra, puede caer en forma de: lluvia, nieve o granizo. Se mide con un instrumento llamado pluviómetro. '
			},
			{
				number: 3,
				title: "Presión atmosférica",
				src: "D10",
				img: "barometro.png",
				imgAlt: "Barómetro",
				text:'Es la presión (fuerza) que ejerce el aire sobre la tierra, se mide con un instrumento llamado barómetro. La presión atmosférica disminuye con la altitud.'
			},
			{
				number: 4,
				title: "Viento",
				src: "D11",
				img: "wind.png",
				imgAlt: "Paisaje donde se muestran como las hojas de dos Palmas se mueven hacia el lado derecho como Consecuencia del fuerte viento / Anemómetro.",
				text:'Es el aire en movimiento, el cual se desplaza de forma horizontal arrastrando las nubes. Se mide con un aparato llamado anemómetro o veleta.'
			},
			{
				number: 5,
				title: "Humedad",
				src: "D12",
				img: "humidity.png",
				imgAlt: "Imagen donde se muestra como el agua proveniente de la lluvia, la niebla y la nieve cae sobre la tierra, las plantas, los océanos y los lagos, y mas tarde se transforma en nubes, debido a la evaporación / Imagen donde se muestra un bosque completamente cubierto por neblina.",
				text:'Es la cantidad de vapor de agua que existe en el aire, cuando hay mucha humedad el vapor forma pequeñas gotas de agua que a su vez forman las nubes y la niebla.'
			}
		]
	};
});

nat205.controller('Con3Ctrl', function ($scope){
	$scope.data = {
		bubbles: [
			{
				button: "Cálido",
				name: "calido",
				audio: "calido",
				icon: "calido.png",
				iconAlt: "Sol.",
				description: "Altas temperaturas y precipitaciones abundantes."
			},
			{
				button: "Templado",
				name: "templado",
				audio: "templado",
				icon: "templado.png",
				iconAlt: "Sol cubierto en parte por una nube.",
				description: "Las temperaturas y las precipitaciones son menores que las presentadas en clima cálido."
			},
			{
				button: "Frío",
				name: "frio",
				audio: "frio",
				icon: "frio.png",
				iconAlt: "El sol no se ve está cubierto por las nubes.",
				description: "Bajas temperaturas y precipitaciones escasas."
			}
		]
	};
});

nat205.controller('Con4Ctrl', function ($scope){
	$scope.data = {
		videoSrc: "rayos-solares.mp4",
		videoSrcType: "mp4"
	};

	$scope.animationEnded = function () {
		scope.$root.isNextEnabled = true;
		console.log("Asd");
	};
});

nat205.controller('Act1Ctrl', function ($scope){
	$scope.data = {
		chancesPerItem: 2,
		minRightAnswers: 3,
		textMainTitle: 'Elemento',
		textInput3Title: 'Instrumento',
		items: [
			{
				number: 1,
				title: '¿Qué es el clima?',
				hasAnswers: false
			},
			{
				number: 2,
				title: '¿Qué es la atmósfera?',
				hasAnswers: false
			},
			{
				number: 3,
				title: '¿Cuáles son los elementos del clima?',
				hasAnswers: true,
				answers: [
					'temperatura', 'precipitaciones', 'humedad', 'presión atmosférica', 'viento'
				]
			}
		]
	};
});

nat205.controller('Act2Ctrl', function ($scope){
	
	$scope.$root.isNextEnabled = true; 
	$scope.data = {
		minRightAnswers: 4,
		textMainTitle: 'Elemento',
		textInput3Title: 'Instrumento',
		data: [
			{
				textGuide: 'Viento',
				inputsMultiple2: [
					{
						option: 'anemómetro',
					},
					{
						option: 'veleta',
					}
				]
			},
			{
				textGuide: 'Presión atmosférica',
				inputsMultiple2: [
					{
						option: 'barómetro',
					}
				]
			},
			{
				textGuide: 'Precipitaciones',
				inputsMultiple2: [
					{
						option: 'Pluviómetro',
					}
				]
			},
			{
				textGuide: 'Temperatura',
				inputsMultiple2: [
					{
						option: 'termómetro',
					}
				]
			}
		]
	};
});

nat205.controller('Act3Ctrl', function ($scope) {
	$scope.data = {
		chancesPerItem: 1,
		minRightAnswers: 3,
		items: [
			{
				number: 1,
				pattern: [1],
				text:"La presión atmosférica es el peso que ejerce el aire sobre la superficie terrestre.",
				answers: {
					"1": {
						answer: "presión atmosférica",
						options: ["Temperatura", "Presión atmosférica", "Precipitación"]
					}
				}
			},
			{
				number: 2,
				pattern: [6, 9],
				text:"La presión atmosférica depende de la altitud y la temperatura",
				answers: {
					"6": {
						answer: "altitud",
						options: ["Altitud", "Tormentas", "Precipitación"]
					},
					"9": {
						answer: "temperatura",
						options: ["Corrientes", "Temperatura", "Atmósfera"]
					}
				}
			},
			{
				number: 3,
				pattern: [22, 27],
				text:"El aire cálido pesa poco y es poco denso, por lo que tiende a subir y da lugar a un área de baja presión que se suele llamar precipitación",
				answers: {
					"22": {
						answer: "baja presión",
						options: ["Baja presión", "Humedad", "Precipitación"]
					},
					"27": {
						answer: "precipitación",
						options: ["Viento", "Presión atmosférica", "Precipitación"]
					}
				}
			}
		]
	};
});

nat205.controller('Act4Ctrl', function ($scope){
	$scope.options = {
		data: [
			{
				src: "lluvia",
				alt: "Imagen lluvia",
				text: "Precipitación de agua que cae del cielo a la tierra."
			},
			{
				src: "humedad",
				alt: "Imagen de vapor",
				text: "Vapor de agua que existe en el aire."
			},
			{
				src: "barometro",
				alt: "Barómetro",
				text: "Instrumento empleado para medir la presión atmosférica."
			},
			{
				src: "veleta",
				alt: "Veleta",
				text: "Instrumento empleado para medir la velocidad del viento."
			},
			{
				src: "sol",
				alt: "Sol",
				text: "Principal fuente de calor en la atmósfera. "
			}
		],
		minRightAnswers: 4,
		randomItems: true,
		randomTargets: true,
		paddingTarget: 74,
		padding: true
	};
});

nat205.controller('Act5Ctrl', function ($scope) {
	$scope.data = {
		chancesPerItem: 1,
		tableTextTitle: 'Día',
		inputTextTitle: 'Clima',
		data: [
			{
				tableText: "Lunes"
			},
			{
				tableText: "Martes"
			},
			{
				tableText: "Miércoles"
			},
			{
				tableText: "Jueves"
			},
			{
				tableText: "Viernes"
			},
			{
				tableText: "Sábado"
			},
			{
				tableText: "Domingo"
			}
		]
	};
});

nat205.controller('Act6Ctrl', function ($scope){
	$scope.options = {
		link: "http://www.educaplus.org/climatic/05_clim_tclimasmundo.html"
	};
});
var appManager = AppManager();
var nat206 = angular.module('nat206', ['activities']);

appManager.configModule(nat206, {
	resources: '../resources/02/nat/06',
	competences1: 'Manejo conocimientos propios de las ciencias naturales (Entorno físico).',
	competences2: 'Diferencia objetos luminosos de objetos iluminados.',
	competencesSound: true,
	evidences: 'Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, actividad de evidencia, guía 2, lección 6; descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.',
	evidencesSound: true,
	farewell: '¡Muy bien!, ahora ya conoces más sobre la luz.',
	routes: [
		{ 
			name: '/conceptualizacion-1', 
			templateUrl: 'con1', 
			controller: 'Con1Ctrl',
			title: 'Lección 6: La luz'
		},
		{ 
			name: '/conceptualizacion-2', 
			templateUrl: 'con2', 
			controller: 'Con2Ctrl',
			title: 'Lección 6: La luz'
		},
		{ 
			name: '/conceptualizacion-3', 
			templateUrl: 'con3', 
			controller: 'Con3Ctrl',
			title: 'Lección 6: La luz'
		},
		{ 
			name: '/conceptualizacion-4', 
			templateUrl: 'con4', 
			controller: 'Con4Ctrl',
			title: 'Lección 6: La luz'
		},
		{ 
			name: '/actividad-1', 
			templateUrl: 'act1', 
			controller: 'Act1Ctrl',
			title: 'Actividad N°1'
		},
		{ 
			name: '/actividad-2-1', 
			templateUrl: 'act2_1', 
			controller: 'Act2_1Ctrl',
			title: 'Actividad N°2'
		},
		{ 
			name: '/actividad-2-2', 
			templateUrl: 'act2_2', 
			controller: 'Act2_2Ctrl',
			title: 'Actividad N°2'
		},
		{ 
			name: '/actividad-3', 
			templateUrl: 'act3', 
			controller: 'Act3Ctrl',
			title: 'Actividad N°3'
		},
		{ 
			name: '/actividad-4', 
			templateUrl: 'act4', 
			controller: 'Act4Ctrl',
			title: 'Actividad N°4'
		},
		{ 
			name: '/actividad-5', 
			templateUrl: 'act5', 
			controller: 'Act5Ctrl',
			title: 'Actividad complementaria'
		}
	]
});

nat206.controller('Con1Ctrl', function ($scope){
	$scope.data = {
		hasAudio: true,
		blocks: [
			{
				blockTitle: "Sol",
				img: "sol.jpg",
				alt: "Imagen donde se presenta el sol, éste se muestra muy brillante y con una forma circular",
				audio: "El_sol_es_un_objeto_luminoso"
			},
			{
				blockTitle: "Luciérnaga",
				img: "luciernaga.png",
				alt: "Imagen donde se presenta un insecto alargado, en el extremo inferior de su cuerpo éste presenta una coloración verde muy brillante",
				audio: "La_luciernaga_es_un_objeto_luminoso"
			},
			{
				blockTitle: "Luna",
				img: "luna.png",
				alt: "Imagen donde se muestra la luna, ésta presenta un color gris y una forma circular",
				audio: "La_luna_es_un_objeto_iluminado"
			},
			{
				blockTitle: "Plantas",
				img: "plantas.png",
				alt: "Imagen donde se muestra una planta florecida, sus flores son de color rosado, naranja y amarillo",
				audio: "Las_plantas_son_objetos_iluminados"
			}
		]
	}
});

nat206.controller('Con2Ctrl', function ($scope){
	$scope.data = {
		hasAudio: false,
		blocks: [
			{
				blockTitle: "Sol",
				img: "sol.jpg",
				alt: "Imagen donde se presenta el sol, éste se muestra muy brillante y con una forma circular"
			},
			{
				blockTitle: "Luciérnaga",
				img: "luciernaga.png",
				alt: "Imagen donde se presenta un insecto alargado, en el extremo inferior de su cuerpo éste presenta una coloración verde muy brillante"
			},
			{
				blockTitle: "Fuego natural",
				img: "volcan.png",
				alt: "Imagen donde se presenta un volcán en erupción"
			}
		]
	}
});

nat206.controller('Con3Ctrl', function ($scope){
	$scope.data = {
		hasAudio: false,
		blocks: [
			{
				blockTitle: "Bombillo",
				img: "bombillo.png",
				alt: "Imagen donde se presenta un bombillo encendido"
			},
			{
				blockTitle: "Velas",
				img: "velas.png",
				alt: "Imagen donde se muestran seis velas, todas encendidas"
			},
			{
				blockTitle: "Fósforo",
				img: "fosforo.png",
				alt: "Imagen donde se presenta un fósforo encendido"
			},
			{
				blockTitle: "Fogata",
				img: "fogata.png",
				alt: "Imagen donde se muestra una pequeña fogata, realizada en el campo"
			}
		]
	}
});

nat206.controller('Con4Ctrl', function ($scope){
	$scope.data = {
		blocks: [
			{
				blockTitle: "Sol",
				img: "sol.jpg",
				alt: "Imagen donde se presenta el sol, éste se muestra muy brillante y con una forma circular",
				iconImg: "protegerse_del_sol.jpg",
				iconAlt: "Imagen de dos niños protegiéndose del sol con una sombrilla",
				text: "Usa protector solar y evita exponerte de forma excesiva al sol, para que evites daños en tu piel.",
				audio: "Sol"
			},
			{
				blockTitle: "Bombillo",
				img: "bombillo.png",
				alt: "Imagen donde se presenta un bombillo encendido",
				iconImg: "apagar_la_luz.jpg",
				iconAlt: "Imagen donde se muestra una persona apagando un bombillo",
				text: "Apaga las luces que no necesites, así ayudas a tus padres con la economía del hogar y proteges el medio ambiente.",
				audio: "bombillo"
			},
			{
				blockTitle: "Velas",
				img: "velas.png",
				alt: "Imagen donde se muestran seis velas, todas encendidas",
				iconImg: "velas.jpg",
				iconAlt: "Imagen donde se muestran dos niños cuidando varias velas encendidas",
				text: "Nunca manipules una vela sin la ayuda de un adulto y no la dejes sola, así evitarás accidentes que pongan en peligro tu bienestar o el de tu hogar.",
				audio: "velas"
			},
			{
				blockTitle: "Fósforo",
				img: "fosforo.png",
				alt: "Imagen donde se presenta un fósforo encendido",
				iconImg: "fosforo.jpg",
				iconAlt: "Un niño manipulando un fósforo con la supervisión de su madre",
				text: "No manipules fósforos sin la ayuda de un adulto y antes de botarlos asegúrate de apagarlos, así evitarás accidentes.",
				audio: "fosforo"
			},
			{
				blockTitle: "Fogata",
				img: "fogata.png",
				alt: "Imagen donde se muestra una pequeña fogata, realizada en el campo",
				iconImg: "incendio.jpg",
				iconAlt: "Imagen donde se muestran dos bomberos apagando un incendio",
				text: "Las fogatas deben realizarse en espacios abiertos, lejos de árboles o arbustos. Los niños deben mantenerse lejos de estas fuentes de luz, mientras que los adultos deberán asegurarse de apagarla bien para evitar incendios.",
				audio: "fosforo"
			}
		]
	}
});

nat206.controller('Act1Ctrl', function ($scope){
  $scope.data = {
    questions: [
      {
        number: 1,
        question: "¿Qué es la luz?",
        answers: [
          { text: "Es una forma de energía que hace visibles los cuerpos.", answer: true },
          { text: "Es lo que vemos cada día." },
          { text: "Es energía." }
        ]
      },
      {
        number: 2,
        question: "¿Cuáles son los objetos luminosos?",
        answers: [
          { text: "Son los objetos que no poseen luz propia." },
          { text: "Son los objetos que poseen luz propia.", answer: true },
          { text: "Son los objetos que se pueden observar." }
        ]
      },
      {
        number: 3,
        question: "¿Cuáles son los objetos iluminados?",
        answers: [
          { text: "Son los objetos que tienen luz propia." },
          { text: "Son los objetos que poseen luz solar." },
          { text: "Son los objetos que no emiten luz propia.", answer: true }
        ]
      }
    ]
  };
});

nat206.controller('Act2_1Ctrl', function ($scope){
	$scope.data = {
		data: [
			{
				src: 'volcan.png',
				alt: 'Imagen donde se presenta un volcán en erupción',
				answer: true
			},
			{
				src: 'agua.png',
				alt: 'Imagen donde se muestra la acción de vaciar agua de un frasco a un vaso',
				answer: false
			},
			{
				src: 'lampara.png',
				alt: 'Lámpara encendida',
				answer: true
			},
			{
				src: 'colores.png',
				alt: 'Imagen donde se presentan varios lápices de diferentes colores',
				answer: false
			},
			{
				src: 'luciernaga.png',
				alt: 'Imagen donde se presenta un insecto alargado, en el extremo inferior de su cuerpo éste presenta una coloración verde muy brillante',
				answer: true
			},
			{
				src: 'reloj.png',
				alt: 'Imagen donde se muestra un reloj de pared',
				answer: false
			}
		],
		minRightAnswers: 2,
		chances: 18,
		totalRightAnswer: 3,
		/*rightAnswerCallback: function (item) {
			// Reproducimos el audio
			$('#audio-contaminacion')[0].play();	
		}*/
	};
});

nat206.controller('Act2_2Ctrl', function ($scope){
	$scope.data = {
		groups: [
			{
				id: "naturales",
				title: 'Fuentes luminosas naturales',
				items: [
					{
						resource: 'calor_1',
						alt: 'Sol irradiando su luz en el día'
					},
					{
						resource: 'volcan',
						alt: 'Imagen donde se presenta un volcán en erupción'
					},
					{
						resource: 'relampagos',
						alt: 'Relámpago'
					}
				]
			},
			{
				id: "artificiales",
				title: 'Fuentes luminosas artificiales',
				items: [
					{
						resource: 'luz_fluorescente',
						alt: 'Lámpara de neón'
					},
					{
						resource: 'fogata_II',
						alt: 'Fogata'
					},
					{
						resource: 'lampara',
						alt: 'Lámpara'
					}
				]
			}
		],
		minRightAnswers: 5,
		chancesPerItem: 1
	}
});

nat206.controller('Act3Ctrl', function ($scope){
	$scope.data = {
		chancesPerItem: 2,
		minRightAnswers: 6,
		textInput1Title: 'Fuentes luminosas naturales',
		textInput2Title: 'Fuentes luminosas artificiales',
		data: {
			inputs1: [
				{
					listValue: 'Relámpago'
				},
				{
					listValue: 'Sol'
				},
				{
					listValue: 'Volcán'
				},
				{
					listValue: 'Luciérnaga'
				}
			],
			inputs2: [
				{
					listValue: 'Bombilla'
				},
				{
					listValue: 'Farol'
				},
				{
					listValue: 'Linterna'
				},
				{
					listValue: 'Vela'
				},
				{
					listValue: 'Fogata'
				},
				{
					listValue: 'Fósforo'
				}
			]
		}
	};
});

nat206.controller('Act4Ctrl', function ($scope) {
	$scope.data = {
		groups: [
			{
				title: "Objetos luminosos",
				numInputs: 5
			},
			{
				title: "Objetos iluminados",
				numInputs: 5
			}
		]
	};
});

nat206.controller('Act5Ctrl', function ($scope){
	$scope.options = {
		link: "http://agrega.juntadeandalucia.es/repositorio/25062009/e7/es-an_20090625_3_9130326/contenido/0_ID/index.html"
	};
});
var appManager = AppManager();
var nat207 = angular.module('nat207', ['activities']);

appManager.configModule(nat207, {
    resources: '../resources/02/nat/07',
    competences1: 'Manejo conocimientos propios de las ciencias naturales (Entorno físico).',
    competences2: 'Compara el Sol, la Luna y la Tierra teniendo en cuenta sus características.',
    competencesSound: true,
    evidences: 'Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, actividad de evidencia, guía 2, lección 7; descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.',
    evidencesSound: true,
    farewell: '¡Muy bien!, ahora ya conoces más sobre el Sol, la Luna y la Tierra.',
    routes: [
        { 
            name: '/conceptualizacion-1', 
            templateUrl: 'con1', 
            controller: 'Con1Ctrl',
            title: 'Lección 7: El Sol, la Luna y la Tierra'
        },
        { 
            name: '/conceptualizacion-2', 
            templateUrl: 'con2', 
            controller: 'Con2Ctrl',
            title: 'Lección 7: El Sol, la Luna y la Tierra'
        },
        { 
            name: '/actividad-1', 
            templateUrl: 'act1', 
            controller: 'Act1Ctrl',
            title: 'Actividad N°1'
        },
        { 
            name: '/actividad-2', 
            templateUrl: 'act2', 
            controller: 'Act2Ctrl',
            title: 'Actividad N°2'
        },
        { 
            name: '/actividad-3', 
            templateUrl: 'act3', 
            controller: 'Act3Ctrl',
            title: 'Actividad N°3'
        },
        { 
            name: '/actividad-3-2', 
            templateUrl: 'act3_2', 
            controller: 'Act3_2Ctrl',
            title: 'Actividad N°3'
        },
        { 
            name: '/actividad-4', 
            templateUrl: 'act4', 
            controller: 'Act4Ctrl',
            title: 'Actividad N°4'
        },
        { 
            name: '/actividad-5', 
            templateUrl: 'act5', 
            controller: 'Act5Ctrl',
            title: 'Actividad N°5'
        },
        { 
            name: '/actividad-6', 
            templateUrl: 'act6', 
            controller: 'Act6Ctrl',
            title: 'Actividad N°6'
        },
        { 
            name: '/actividad-7', 
            templateUrl: 'act7', 
            controller: 'Act7Ctrl',
            title: 'Actividad N°7'
        }
    ]
});

nat207.controller('Con1Ctrl', function ($scope) {
    
    $scope.data = {
        items: [
              {
                number: "1",
                title: "El Sol",
                src: "D7",
                img: "sol.jpg",
                imgAlt: "Imagen donde se presenta el sol, éste se muestra muy brillante y con una forma circular",
                text: "El Sol es una estrella y es el centro del Sistema solar, se caracteriza por tener luz propia y ser la fuente de energía y calor de toda la tierra."
              },
              {
                number: "2",
                title: "La Luna",
                src: "D8",
                img: "luna.png",
                imgAlt: "Imagen donde se muestra la luna, ésta presenta un color gris y una forma circular",
                text: "La Luna es un cuerpo de forma esférica y de menor tamaño que el de nuestro planeta tierra. La Luna gira alrededor de la Tierra y no tiene luz propia, sino que refleja la luz que recibe del Sol.<br />La Luna la puedes ver de noche en el cielo, junto con las estrellas."
              },
              {
                number: "3",
                title: "La Tierra",
                src: "D9",
                img: "Planeta_tierra.jpg",
                imgAlt: "Imagen donde se muestra el planeta tierra, éste tiene una forma circular y en su mayoría está cubierto por agua",
                text: "La Tierra es el planeta donde vivimos, no tiene luz propia, sino que la recibe del Sol, pues gira alrededor de él.<br />Durante el día el Sol da luz y calor a todos los seres vivos."
              }
        ]
    }
});

nat207.controller('Con2Ctrl', function ($scope) {
    
    $scope.data = {
        items: [
              {
                number: "1",
                title: "El Sol",
                src: "D11",
                text: "El Sol proporciona energía en forma de luz y calor. Sin la energía solar la Tierra sería un planeta frío y sin vida.<br />El Sol es vital para el desarrollo de diferentes actividades humanas y variados procesos como la fotosíntesis y el ciclo del agua."
              },
              {
                number: "2",
                title: "La Luna",
                src: "D12",
                text: "La Luna es responsable del cambio en el nivel del mar, este cambio afecta el comportamiento de la fauna marina, las aves y algunos animales terrestres, que aprovechan el aumento o la disminución en el nivel del mar para alimentarse y reproducirse."
              }
        ]
    }
});

nat207.controller('Act1Ctrl', function($scope){
    $scope.data = {
        items: [
            {   
                question: "La Tierra es",
                answer: 'un planeta con vida.'
            },
            {   
                question: "La mayor parte de la Tierra",
                answer: 'está cubierta de agua.'
            },
            {   
                question: "El Sol es",
                answer: 'una estrella.'
            },
            {   
                question: "El Sol nos da",
                answer: 'luz y calor.'
            },
            {   
                question: "La Luna",
                answer: 'no tiene ni luz ni calor.'
            }
        ],
        answers:[

            {   
                answer: "una estrella.",
                w:155 , h:2 , t:41 , l:-33 ,r:-59 
            },
            {   
                answer: "un planeta con vida.",
                w:107 , h:2 , t:27 , l:-9 ,r:41 
            },
            {   
                answer: "no tiene ni luz ni calor.",
                w:158 , h:2 , t:95 , l:-35 ,r:-60
            },
            {   
                answer: "está cubierta de agua.",
                w:151 , h:2 , t:68 , l:-31 ,r:58   
            },
            {   
                answer: "luz y calor.",
                w:108 , h:2 , t:109 , l:-10 ,r:42   
            }
        ],
        //EXAMPLES
        // w:149 , h:2 , t:68 , l:-31 ,r:61 2-ITEMS ABAJO
        // w:149 , h:2 , t:98 , l:-31 ,r:-61 2-ITEMS ARRIBA
        // w:206 , h:2 , t:55 , l:-59 ,r:-69 3-ITEMS ARRIBA
        // w:103 , h:2 , t:55 , l:-7 ,r:-42 1-ITEMS ARRIBA

        minRightAnswers:4, 
        chancesPerItem :2
            
    };
});

nat207.controller('Act2Ctrl', function ($scope){
    $scope.data = {
        chancesPerItem: 1,
        minRightAnswers: 4,
        data: [
            {
                number: 1,
                description: 'La estrella central de nuestro Sistema solar es la Luna.',
                answer: 'F'
            },
            {
                number: 2,
                description: 'La Tierra es un planeta del sistema solar.',
                answer: 'V'
            },
            {
                number: 3,
                description: 'La Luna es un satélite natural de la Tierra.',
                answer: 'V'
            },
            {
                number: 4,
                description: 'El Sol genera luz y calor.',
                answer: 'V'
            },
            {
                number: 5,
                description: 'La estrella central de nuestro Sistema solar es el Sol.',
                answer: 'V'
            },
            {
                number: 6,
                description: 'El Sol sólo genera luz.',
                answer: 'F'
            },
            {
                number: 7,
                description: 'Los planetas giran alrededor del Sol.',
                answer: 'V'
            }
        ]
    };
});

nat207.controller('Act3Ctrl', function ($scope) {
    'use strict';
    $scope.data = {
        chancesPerItem: 2,
        minRightAnswers: 3,
        data: [{
            title: 'Estrella central del Sistema solar.',
            answer: 'Sol'
        }, {
            title: 'Satélite natural de la Tierra.',
            answer: 'Luna'
        }, {
            title: 'Cuerpo que genera luz propia.',
            answer: 'Sol'
        }, {
            title: 'Planeta del Sistema solar.',
            answer: 'Tierra'
        }],
        aOptions: [{
            name: 'Sol'
        }, {
            name: 'Luna'
        }, {
            name: 'Tierra'
        }]
    };
});

nat207.controller('Act3_2Ctrl', function ($scope) {
    'use strict';
    $scope.data = {
        chancesPerItem: 2,
        minRightAnswers: 3,
        data: [{
            title: 'Está cubierta en su mayoría por agua.',
            answer: 'Tierra'
        }, {
            title: 'No tiene luz y se ve brillante porque refleja la luz que proviene del Sol.',
            answer: 'Luna'
        }, {
            title: 'Emite la luz y el calor  necesarios para que haya vida en la Tierra.',
            answer: 'Sol'
        }, {
            title: 'Cuerpo que gira alrededor de la tierra.',
            answer: 'Luna'
        }],
        aOptions: [{
            name: 'Sol'
        }, {
            name: 'Luna'
        }, {
            name: 'Tierra'
        }]
    };
});

nat207.controller('Act4Ctrl', function ($scope) {
  $scope.data = {
    groupStyle: "width:50%;",
    inverted: true,
    chances: 10,
    minRightAnswers: 5,
    table: [
      "S X F G H A S T E O L".split(" "),
      "K O N D E I J Ñ S R T".split(" "),
      "M U L I O P K J T J Y".split(" "),
      "F E O P A Z U O R R A".split(" "),
      "A T I E R R A I E D S".split(" "),
      "B A O T P D X C L G A".split(" "),
      "M L U N A Y A L L I O".split(" "),
      "K F G H O W I E A R E".split(" "),
      "L U Z I P Q N O S P Q".split(" ")
    ],
    wordGroups: [
      {
        title: '',
        items: [
          {
            front: "1. Estrella que nos proporciona luz y calor.",
            back: "SOL"
          },
          {
            front: "2. Planeta habitado por el ser humano.",
            back: "TIERRA"
          },
          {
            front: "3. Satélite de la Tierra.",
            back: "LUNA"
          },
          {
            front: "4. Cuerpos celestes que se ven en la noche con la Luna.",
            back: "ESTRELLAS"
          },
          {
            front: "5. Forma de energía proporcionada por el Sol.",
            back: "LUZ"
          }
        ]
      }
    ]
  };
});

nat207.controller("Act5Ctrl", function ($scope) {
   //  $scope.data = {
   //      chancesPerItem: 2,
   //      minRightAnswers: 4,
   //      items: [
   //          {dropItem: "cuando se pone el Sol"}
   //      ],
   //      targets: [
   //          {
   //              title: "Anochecer",
   //              answer: "cuando se pone el Sol"
   //          }
   //      ]
   // }

   $scope.items = [
        {
            title: "Anochecer",
            dropItem: "cuando se pone el Sol"
        },
        {
            title: "Mediodía",
            dropItem: "el Sol está en lo más alto"
        },
        {
            title: "Noche",
            dropItem: "no vemos el Sol"
        },
        {
            title: "Amanecer",
            dropItem: "cuando sale el Sol"
        }
    ];

    $scope.options = {
        data: $scope.items,
        minRightAnswers: 4,
        chancesPerItem: 2,
        randomItems: true
    }; 
});

nat207.controller("Act6Ctrl", function ($scope, $log) {
   $scope.img = "contaminacion aire.jpg";
   $scope.alt = "Imagen donde se muestran varias industrias emitiendo por sus chimeneas diferentes gases al aire";
   $scope.input = "";
   $scope.success = false;
   $scope.failure = false;
   $scope.$root.isNextEnabled = false;

   $scope.verify = function (input) {
       if ("" === input || "undefined" === input) {return;}

       var letters = /^[A-Za-z]+$/;

       if (input.match(letters)) {
            $scope.success = true;
            $scope.$root.isNextEnabled = true;
       } else {
            $scope.failure = true;
       }
   };
});

nat207.controller('Act7Ctrl', function ($scope){
    $scope.options = {
        link: "http://www.vedoque.com/juegos/la-tierra.swf"
    };
});
var appManager = AppManager();
var nat208 = angular.module('nat208', ['activities']);

appManager.configModule(nat208, {
	resources: '../resources/02/nat/08',
	farewell: '¡Felicitaciones!, ahora ya conoces varios de los inventos que han cambiado y mejorado nuestras vidas.',
	evidencesSound:true,
	evidences: 'Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, actividad de evidencia, guía 2, lección 8; descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.',
	routes:[
		{ 
			name: '/competencias', 
			templateUrl: 'comp', 
			controller: 'CompCtrl',
			title:"Estándares básicos de competencias"
		},
		{ 
			name: '/conceptualizacion-1', 
			templateUrl: 'con1', 
			controller: 'Con1Ctrl',
			title: 'Lección 8: Avances tecnológicos'
		},
		{ 
			name: '/conceptualizacion-2', 
			templateUrl: 'con2', 
			controller: 'Con2Ctrl',
			title: 'Lección 8: Avances tecnológicos'
		},
		{ 
			name: '/actividad-1', 
			templateUrl: 'act1', 
			controller: 'Act1Ctrl',
			title: 'Actividad 1 | Lección 8'
		},
		{ 
			name: '/actividad-2', 
			templateUrl: 'act2', 
			controller: 'Act2Ctrl',
			title: 'Actividad 2 | Lección 8'
		},
		{ 
			name: '/actividad-3', 
			templateUrl: 'act3', 
			controller: 'Act3Ctrl',
			title: 'Actividad 3 | Lección 8'
		},
		{ 
			name: '/actividad-4', 
			templateUrl: 'act4', 
			controller: 'Act4Ctrl',
			title: 'Actividad 4 | Lección 8'
		},
		{ 
			name: '/actividad-5', 
			templateUrl: 'act5', 
			controller: 'Act5Ctrl',
			title: 'Actividad 5 | Lección 8'
		},
		{ 
			name: '/actividad-6', 
			templateUrl: 'act6', 
			controller: 'Act6Ctrl',
			title: 'Actividad 6 | Lección 8'
		},
	    {
			name: '/actividad-7', 
			templateUrl: 'act7', 
			controller: 'Act7Ctrl',
			title: 'Actividad complementaria'
		}
		
	]
	
});

nat208.controller('CompCtrl', function($scope){
	$scope.data = [
		{
			title: 'Estándar de competencia:',
			text1: 'Identifico aparatos que utilizamos hoy y que no se utilizaban en épocas pasadas.',
		},
		{
			title: 'Elementos de competencia:',
			text1: 'Explica algunos cambios y avances tecnológicos.'
			
		}
		
	];
});

nat208.controller('Con1Ctrl', function($scope){
	$scope.$root.isNextEnabled = true; // Activa el botón de siguiente
});

nat208.controller('Con2Ctrl', function($scope){
	$scope.data = {
    items: [
      {
        title: 'Teléfono',
        img: "telefono.jpg",
        imgAlt: "donde se muestra la mano izquierda de una persona oprimiendo una tecla del teléfono, mientras que la mano derecha sostiene la bocina",
        imgTitle: "0009226034X [Fotografía]. Obtenido de: http://www.photl.com/250376.html",
       	text: "Es uno de los sistemas de comunicación más empleado, ya que gracias a él es posible que las personas entablen una conversación sin importar que tan distantes estén.<br><br>Antes sin la existencia del teléfono, una gran noticia se conocía después de semanas o meses de producida."
      },
      {
        title: 'Electricidad',
        img: "bombillo.png",
        imgAlt: "donde se presenta un bombillo encendido",
        imgTitle: "Sagmueller, M. (2010). Solitary bulb [Fotografía]. Obtenido de: http://www.freeimages.com/photo/1253788",
       	text: "Es una de las principales formas de energía empleadas en el mundo actual, sin ella no sería posible la iluminación y el funcionamiento de aparatos electrónicos tales como la radio, la televisión, el teléfono, el celular y la computadora; muchos de ellos de gran utilidad en nuestros hogares o sitios de trabajo."
      },
      {
       title: 'Avión',
        img: "avion.jpg",
        imgAlt: "donde se muestra la mano izquierda de una persona oprimiendo una tecla del teléfono, mientras que la mano derecha sostiene la bocina",
        imgTitle: " 0009226034X [Fotografía]. Obtenido de: http://www.photl.com/250376.html",
       	text: "Para conquistar los cielos, los inventores han debido trabajar duro. Los primeros artefactos voladores tripulados fueron globos llenos de aire caliente o hidrógeno. Mas tarde, gracias a la aerodinámica, se pudo estudiar y determinar la forma de hacer que un cuerpo, más pesado que el aire, volara como un pájaro. Así, fue posible el diseño y la creación de los aviones."
      },
      {
        title: 'Telecomunicaciones',
        img: "comunicaciones.jpg",
        imgAlt: "donde se muestran tres desarrollos que han sido muy importantes para las comunicaciones: televisión, tableta y celular",
        imgTitle: "Tablet [Fotografía]. (2014). Obtenido de: http://pixabay.com/es/tablet-pantalla-monitor-tel%C3%A9fono-313002/",
       	text: "Antes, era muy difícil enterarse de lo que sucedía en la ciudad, el país o el mundo. Una noticia importante se conocía después de semanas o meses de producida.<br><br>La prensa, la radio, la televisión, el fax, la internet, el celular, la tableta, el computador; son algunos de los desarrollos que han facilitado la comunicación. Ahora para comunicarnos con una persona podemos hacerlo de diferentes formas: escrita, verbal o audiovisual."
      }
    ]
  }
});

nat208.controller('Act1Ctrl', function($scope){
   $scope.data = {
    minRightAnswers: 5,
    feedback: "<p>Las respuestas correctas son:</p>\n<ol style=\"font-size: 26px;\">\n    <li>F</li>\n    <li>V</li>\n    <li>V</li>\n    <li>V</li>\n    <li>F</li>\n   </ol>",
    items: [
      { text: "Los avances tecnológicos hacen las cosas más difíciles para el ser humano.", answer: "F" },
      { text: "La creación del teléfono permitió acortar distancias, facilitando la comunicación entre las personas.", answer: "V" },
      { text: "Los primeros artefactos voladores tripulados fueron los globos llenos de aire caliente o hidrógeno.", answer: "V" },
      { text: "La electricidad es una de las principales formas de energía, sin ella no sería posible la iluminación y el funcionamiento de aparatos electrónicos tales como la radio, la televisión, el teléfono, entre otros.", answer: "V" },
      { text: "Las comunicaciones han tenido muy pocos avances tecnológicos, por tal motivo es difícil comunicarnos con las personas que se encuentran distantes de nosotros.", answer: "F" }
    ]
  };
});

nat208.controller('Act2Ctrl', function($scope){
	$scope.items = [
		{	
			name: "1",
			pattern: [2],
			text:"Gracias al avión podemos ir de un lugar a otro por el aire.",
		},
		{	
			name: "2",
			pattern: [1],
			text:"La electricidad permite que en la noche podamos encender el bombillo y ver claramente lo que hay a nuestro alrededor.",
		},
		{	
			name: "3",
			pattern: [1],
			text:"La prensa mantiene informados a sus lectores a cerca de todo lo que sucede en el mundo.",
		},
		{	
			name: "4",
			pattern: [2],
			text:"Mediante la televisión podemos ver nuestro programa favorito.",
		},
		{	
			name: "5",
			pattern: [2],
			text:"Gracias a internet es posible la comunicación y el intercambio de información entre una o varias personas.",
		}

	];
	$scope.options = {
		items: $scope.items,
		chances: 5,
		minRightAnswers: 3,
		itemsrow : 'row-1',
		examples:['internet','televisión','prensa','avión','electricidad']
	};
});


nat208.controller('Act3Ctrl', function ($scope) {
   $scope.data = {
		groups: [
			{
				title: 'Invento antiguo',
				items: [
					{
						resource: "carroantiguo.jpg",
						alt: 'donde se muestra un carro antiguo de color verde claro',
						title: 'Filz, N. (2014). Coches de época [Fotografía]. Obtenido de: http://pixabay.com/es/coches-de-%C3%A9poca-viejo-coche-262483/'
					},
					{
						resource: "camaraantigua.jpg",
						alt: 'donde se muestra una cámara fotográfica antigua de color negro y gris',
						title: 'Suneson, P. (2007). Camera 2 [Fotografía]. Obtenido de: http://www.freeimages.com/photo/904584'
					},
					{
						resource: "televisorantiguo.jpg",
						alt: 'donde se presenta un televisor antiguo, el cual tiene una gran base en madera',
						title: '1970´s retro television set [Fotografía]. (2014). Obtenido de: http://www.freeimages.com/photo/1441328'
					},
					{
						resource: "telefonoviejo.jpg",
						alt: 'donde se muestra un teléfono antiguo de disco',
						title: 'Kuloglija, M. (2007). Old pone [Fotografía]. Obtenido de: http://www.freeimages.com/photo/715133'
					}
					
				]
			},
			{
				title: 'Invento moderno',
				items: [
					{
						resource: "televisormoderno.jpg",
						alt: 'donde se muestra un televisor moderno, de color negro y muy delgado',
						title:'TV HD 1 [Fotografía]. (2009). Obtenido de: http://www.freeimages.com/photo/1209126'
					},
					{
						resource: "camaramoderna.jpg",
						alt: 'Imagen donde se presenta una cámara moderna, pequeña y de color gris',
						title: 'Santos, M. (2006). Camera digital [Fotografía]. Obtenido de: http://www.freeimages.com/photo/683969'
					},
					{
						resource: "carromoderno.jpg",
						alt: 'donde se muestra un automóvil deportivo de color gris con un estilo moderno',
						title: '. Audi R8 arriving at cars and coffee in Irvine [Fotografía]. (2013). https://www.flickr.com/photos/gfreeman23/11613922755'
					},
					{
						resource: "telefonomoderno.jpg",
						alt: 'donde se muestra un teléfono inalámbrico de color negro',
						title: 'La imagen es cortesía de Diana Marcela Restrepo T, Diseñadora Mediacional del programa “Primaria Incluyente”.'
					}
					
				]
			}
		],
		minRightAnswers: 5,
		chances: 8,
		/*noSuffleArray: true*/

	};
});

nat208.controller('Act4Ctrl', function($scope){
	$scope.data = {
    chances: 21,
    minRightAnswers: 11,
    inverted: true,
    table: [

		"M P O S T U I A V B C D T".split(" "),
		"I P A P E L N F I R O C E".split(" "),
		"C F G H J L T D M Ú M V R".split(" "),
		"R A D I O O E G P J P A M".split(" "),
		"O Q A D F V R H R U U L Ó".split(" "),
		"S Z C M N B N J E L T N M".split(" "),
		"C X I N V A E L N A A M E".split(" "),
		"O E F D F G T Ñ T G D T T".split(" "),
		"P L A N C H A M A P O R R".split(" "),
		"I N X Z D F G H J P R Q O".split(" "),
		"O T E L E S C O P I O W E".split(" ")

    ],
    wordGroups: [
      {
        items: [
          {
            front: "MICROSCOPIO",
            back: "MICROSCOPIO"
          },
          {
            front: "TELESCOPIO",
            back: "TELESCOPIO"
          },
          {
            front: "PLANCHA",
            back: "PLANCHA"
          },
          {
            front: "IMPRENTA",
            back: "IMPRENTA"
          },
          {
            front: "COMPUTADOR",
            back: "COMPUTADOR"
          },
          {
            front: "FAX",
            back: "FAX"
          },
          {
            front: "PAPEL",
            back: "PAPEL"
          },
          {
            front: "INTERNET",
            back: "INTERNET"
          },
          {
            front: "RADIO",
            back: "RADIO"
          },
          {
            front: "TERMÓMETRO",
            back: "TERMÓMETRO"
          },
          {
            front: "BRÚJULA",
            back: "BRÚJULA"
          }
        ]
      }
    ]
  };
});

nat208.controller('Act5Ctrl', function ($scope) {
	 $scope.data = {
    minRightAnswers: 4,
    stylequestions: "float: left;margin-left: 250px;width: 700px;",
    questions: [
      {
        number: 1,
        question: "Surge para resolver la necesidad de las personas de transportarse de un lugar a otro por tierra.",
        answers: [
          { text: "Automóvil",answer: true },
          { text: "Avión" },
          { text: "Internet" },
        ]
      },
      {
        number: 2,
        question: "Permite resolver la necesidad de obtener muchas copias de un mismo texto o imagen.",
        answers: [
          { text: "Termómetro" },
          { text: "Teléfono" },
          { text: "Imprenta", answer: true }
        ]
      },
      {
        number: 3,
        question: "Instrumento creado para resolver las necesidades de orientación de los navegantes hace muchos años.",
        answers: [
          { text: "Termómetro" },
          { text: "Brújula", answer: true  },
          { text: "Fax"}
        ]
      },
      {
        number: 4,
        question: "Instrumento desarrollado para resolver la necesidad de conocer la cantidad de agua que cae sobre un determinado lugar cuando llueve.",
        answers: [
          { text: "Pluviómetro", answer: true },
          { text: "Avión" },
          { text: "Automóvil" }
        ]
      }
    ]
  };
});

nat208.controller('Act6Ctrl', function ($scope) {
  $scope.inputs = [];
  $scope.$root.isNextEnabled = true; // Activamos el siguiente link

  $scope.items = [];

  text = ['Enviar un mensaje a un amigo','Cocinar','Lavar la ropa','Viajar de un lugar a otro'];
  // llenamos el array
  for (var i = 0; i < 4; i++) {
    $scope.items.push({
      right: '',
      text: text[i]
    });
  }

  var regex = function (value) {
    return !( value.match(/([bcdfghjklmnñpqrstvwxyz])/) && value.match(/([aeiou])/) && value.length >= 5 && typeof value !== "undefined" );
  };

  // antes de ir a la siguiente actividad, verificamos
  $scope.$root.beforeGoNext = function () {
    var error = false;

    // Recorremos los elementos, buscando que cumplan con las condiciones
    // Al menos una mayúscula, una minúscula y 4 letras
    $scope.items.forEach(function(item){
      if(regex(item.right)) error = true;
    });

    if(error){
      // fracaso
      $scope.failure = true;
      return true;
    

    } else {
      // éxito
      $scope.success = true;
      return true;
    }
  };

});

nat208.controller('Act7Ctrl', function($scope){
	$scope.options = {
		link: "http://www.primaria.librosvivos.net/archivosCMS/3/3/16/usuarios/103294/9/5EP_Cono_cas_ud8_avances_tecnicos/frame_prim.swf",
	};
});



var appManager = AppManager();
var nat209 = angular.module('nat209', ['activities']);

appManager.configModule(nat209, {
	resources: '../resources/02/nat/09',
	farewell: '¡Felicitaciones!, ahora ya sabes qué es la materia y los materiales.',
	evidencesSound:true,
	evidences: 'Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, actividad de evidencia, guía 2, lección 9; descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.',
	routes:[
		{ 
			name: '/competencias', 
			templateUrl: 'comp', 
			controller: 'CompCtrl',
			title:"Estándares básicos de competencias"
		},
		{ 
			name: '/conceptualizacion-1', 
			templateUrl: 'con1', 
			controller: function(){},
			title: 'Lección 9: La materia y los materiales'
		},
		{ 
			name: '/conceptualizacion-2', 
			templateUrl: 'con2', 
			controller: 'Con2Ctrl',
			title: 'Lección 9: La materia y los materiales'
		},
    { 
      name: '/conceptualizacion-3', 
      templateUrl: 'con3', 
      controller: function(){},
      title: 'Lección 9: La materia y los materiales'
    },
		{ 
			name: '/actividad-1', 
			templateUrl: 'act1', 
			controller: 'Act1Ctrl',
			title: 'Actividad 1 | Lección 9'
		},
		{ 
			name: '/actividad-2', 
			templateUrl: 'act2', 
			controller: 'Act2Ctrl',
			title: 'Actividad 2 | Lección 9'
		},
    { 
      name: '/actividad-2-2', 
      templateUrl: 'act2-2', 
      controller: 'Act2-2Ctrl',
      title: 'Actividad 2 - 2 | Lección 9'
    },
		{ 
			name: '/actividad-3', 
			templateUrl: 'act3', 
			controller: 'Act3Ctrl',
			title: 'Actividad 3 | Lección 9'
		},
    { 
      name: '/actividad-2-2', 
      templateUrl: 'act2-2', 
      controller: 'Act2-2Ctrl',
      title: 'Actividad 2 - 2 | Lección 9'
    },
    { 
      name: '/actividad-3-2', 
      templateUrl: 'act3-2', 
      controller: 'Act3-2Ctrl',
      title: 'Actividad 3 - 2 | Lección 9'
    },
		{ 
			name: '/actividad-4', 
			templateUrl: 'act4', 
			controller: 'Act4Ctrl',
			title: 'Actividad 4 | Lección 9'
		},
		{
			name: '/actividad-5', 
			templateUrl: 'act5', 
			controller: 'Act5Ctrl',
			title: 'Actividad 5 | Lección 9'
		},
    { 
      name: '/actividad-6', 
      templateUrl: 'act6', 
      controller: 'Act6Ctrl',
      title:"Actividad complementaria",
    }
	]
	
});

nat209.controller('CompCtrl', function($scope){
	$scope.data = [
		{
			title: 'Estándar de competencia:',
			text1: 'Manejo conocimientos propios de las ciencias naturales (Entorno físico).',
		},
		{
			title: 'Elemento de competencia:',
			text1: 'Identifica las características de algunos objetos que lo rodean y los relaciona con el uso que le da.',
		}
		
	];
});

nat209.controller('Con2Ctrl', function($scope){
$scope.data = {
    hasAudio: true,
    itemsPerRow: 4,
    customClass: "middle-title",
    blocks: [
      {
        blockTitle: "Vidrio",
        img: "vaso.jpg",
        alt: "donde se muestra un vaso de vidrio, en su interior tiene agua",
        title: "Gdula, A. (2008). Glass of wáter [Fotografía]. Obtenido de: http://www.freeimages.com/browse.phtml?f=download&id=964550",
        audio: "vidrio",
        hasAudio: true
      },
      {
        blockTitle: "Cuero",
        img: "mueble.jpg",
        alt: "donde se muestra un sofá forrado en cuero de color negro",
        title: "Singh, A. (2013). Sofá de cuero [Fotografía]. Obtenido de: http://pixabay.com/es/sof%C3%A1-de-cuero-sof%C3%A1-reclinable-186636/",
        audio: "cuero",
        hasAudio: true
      },
      {
        blockTitle: "Metal",
        img: "tijeras.jpg",
        alt: "donde se muestran unas tijeras metálicas",
        title: "Bichler, W. (2014). Tijeras [fotografía]. Obtenido de: http://pixabay.com/es/tijeras-corte-oficina-de-metal-321238/",
        audio: "metal",
        hasAudio: true
      },
      {
        blockTitle: "Madera",
        img: "madera.jpg",
        alt: "donde se muestra una silla de madera tallada",
        title: "Silla [Fotografía]. (2010). Obtenido de: http://pixabay.com/es/brown-talla-silla-muebles-aislados-2254/",
        audio: "madera",
        hasAudio: true
      },
      {
        blockTitle: "Plástico",
        img: "plastico.jpg",
        alt: "de una botella plástica",
        title: "Philipov, I. (2006). Plastic bottle [Fotografía]. Obtenido de: http://www.freeimages.com/photo/561756",
        audio: "plastico",
        hasAudio: true
      },
      {
        blockTitle: "Caucho",
        img: "caucho.jpg",
        alt: "de un balón fabricado en caucho de color fucsia",
        title: "Pink rubber ball [Fotografía]. (2010). Obtenido de: http://www.freeimages.com/photo/1260442",
        audio: "caucho",
        hasAudio: true
      }
    ]
  }
});

nat209.controller('Act1Ctrl', function ($scope) {
  $scope.data = {
    minRightAnswers: 5,
    feedback: "<p>Las respuestas correctas son:</p>\n<ol style=\"font-size: 26px;\">\n    <li>V</li>\n    <li>V</li>\n    <li>F</li>\n    <li>V</li>\n    <li>F</li>\n </ol>",
    items: [
      { text: "Materia es todo lo que nos rodea, es todo lo que pesa y ocupa un espacio.", answer: "V" },
      { text: "La materia está compuesta por átomos, partículas muy pequeñas que sólo pueden ser vistas a través de un microscopio electrónico.", answer: "V" },
      { text: "Algunos objetos que hay a nuestro alrededor son materia.", answer: "F" },
      { text: "Los objetos están hechos con diferentes materiales, tales como: vidrio, cuero, metal, madera, plástico, caucho, entre otros.", answer: "V" },
      { text: "Todos los materiales poseen las mismas propiedades.", answer: "F" },
    ]
  };
});

nat209.controller('Act2Ctrl', function($scope){
$scope.items = [
      {         
        img: 'llaves.jpg',
        title:'Llaves',
        titleimg:'Cerrar [Fotografía]. (2010). Obtenido de: http://pixabay.com/es/cerrar-aislados-clave-teclas-2204/',
        altimg: 'Imagen donde se muestran dos llaves metálicas',
        w: 300, h: 50, t:0  , l:10,
        options: [
              { text: "Metal", answer: true },
              { text: "Vidrio"},
              { text: "Plástico"}
            ]
      },
      {   
        img: 'madera.jpg',
        title:'Silla',
        titleimg:'Silla [Fotografía]. (2010). Obtenido de: http://pixabay.com/es/brown-talla-silla-muebles-aislados-2254/',
        altimg: 'Imagen donde se muestra una silla de madera tallada',
       w: 300, h: 50, t:0  , l:60,
        options: [
              { text: "Madera", answer: true },
              { text: "Vidrio"},
              { text: "Plástico"}
            ]
      },
      {         
        img: 'vaso.jpg',
        title:'Vaso',
        titleimg:'Gdula, A. (2008). Glass of wáter [Fotografía]. Obtenido de: http://www.freeimages.com/browse.phtml?f=download&id=964550',
        altimg: 'Imagen donde se muestra un vaso de vidrio, en su interior tiene agua',
        w: 300, h: 50, t:50 , l:10,
        options: [
              { text: "Vidrio", answer: true },
              { text: "Metal"},
              { text: "Plástico"}
            ]
      },
      {   
        img: 'llanta.jpg',
        title:'Neumático',
        titleimg:'Handoko, Y. (2006). Wheel [Fotografía]. Obtenido de: http://www.freeimages.com/photo/669085',
        altimg: 'Imagen donde se muestra el neumático (llanta) de un carro',
        w: 300, h: 50, t:50 , l:60,
        options: [
              { text: "Caucho", answer: true },
              { text: "Vidrio"},
              { text: "Madera"}
            ]
      }
    ],

    $scope.options = {
      items: $scope.items,
      canvasStyle: 'width: 1021px;height: 800px;',
      chances: 2,
      optionsrandom: true,
      minRightAnswers: 3,
      itemsPerRow : 3
    };
});

nat209.controller('Act2-2Ctrl', function($scope){
$scope.items = [
      {         
        img: 'correa.jpg',
        title:'Correa',
        titleimg:'Jack, L. (2013). Luxury gifts for men [Fotografía]. Obtenido de: http://www.freeimages.com/photo/1427386',
        altimg: 'donde se muestra una correa de cuero color café',
        w: 300, h: 50, t:0  , l:10,
        options: [
              { text: "Cuero", answer: true },
              { text: "Vidrio"},
              { text: "Madera"}
            ]
      },
      {   
        img: 'bolsa.jpg',
        title:'Bolsa',
        titleimg:'Curado, C. (2007). Plastic bag [Fotografía]. Obtenido de:http://www.freeimages.com/photo/755983',
        altimg: 'donde se muestra un  tenedor metálico',
       w: 300, h: 50, t:0  , l:60,
        options: [
              { text: "Cuero"},
              { text: "Metal"},
              { text: "Plástico", answer: true }
            ]
      },
      {         
        img: 'tenedor.jpg',
        title:'Tenedor',
        titleimg:'Fork [Fotografía]. (2013). Obtenido de: http://www.freeimages.com/photo/1423468',
        altimg: 'donde se muestra una bolsa plástica blanca',
        w: 300, h: 50, t:50 , l:10,
        options: [
              { text: "Madera"},
              { text: "Metal", answer: true },
              { text: "Cuero"}
            ]
      },
      {   
        img: 'periodico.jpg',
        title:'Periódico',
        titleimg:'Ciesielski, A. (2005). Newspaper [Fotografía]. Obtenido de: http://www.freeimages.com/photo/273525',
        altimg: 'donde se muestra un periódico doblado por la mitad',
        w: 300, h: 50, t:50 , l:60,
        options: [
              { text: "Papel", answer: true },
              { text: "Vidrio"},
              { text: "Metal"}
            ]
      }
    ],

    $scope.options = {
      items: $scope.items,
      canvasStyle: 'width: 1021px;height: 800px;',
      chances: 2,
      optionsrandom: true,
      minRightAnswers: 3,
      itemsPerRow : 3
    };
});

nat209.controller('Act3Ctrl', function($scope){
	$scope.items = [
    {
      list: [
        {
          img: 'candado.jpg',
          alt: 'donde se muestra un candado de color verde',
          title: 'Used padlock [Fotografía]. (2011). Obtenido de: http://www.freeimages.com/photo/1331533'
        },
        { 
          img: 'guantes.jpg',
          alt: 'donde se muestra un par de guantes color amarillo',
          title: 'Tabeira, R. (2005).Yellow glove 2 [Fotografía]. Obtenido de: http://www.freeimages.com/photo/387303'
        },
        {
          img: 'florero.jpg',
          alt: 'donde se muestra un florero de vidrio, éste tiene en su interior agua y cuatro flores',
          title: 'Bruyne, D. (2006). Barberton Daisy [Fotografía]. Obtenido de: http://www.freeimages.com/photo/530644'
        }
      ],
      style:"width: 40%;font-size: 25px;",
       name: "Objeto"
    },
    {
      list: [
        {
          answers: [
                { text: "Vidrio"},
                { text: "Metal", answer: true },
                { text: "Madera"}
              ],
              /* default: true*/
        },
        {
          answers: [
                { text: "Caucho", answer: true },
                { text: "Vidrio"},
                { text: "Madera"}
              ],
              /* default: true*/
        },
        {
          answers: [
                { text: "Metal"},
                { text: "Vidrio", answer: true },
                { text: "Madera"}
              ],
              /* default: true*/
        }
      ],
      style:"width: 20%;font-size: 25px;",
      name: "Material"
    },
    {
      list: [
        {
          answers: [
                { text: "Protección", answer: true },
                { text: "Decorativo"},
                { text: "Alimento"}
              ],
              /* default: true*/
        },
        {
          answers: [
                { text: "Protección", answer: true },
                { text: "Decorativo"},
                { text: "Alimento"}
              ],
              /* default: true*/
        },
        {
          answers: [
                { text: "Protección", answer: true },
                { text: "Decorativo"},
                { text: "Alimento"}
              ],
              /* default: true*/
        }
      ],
      style:"width: 20%;font-size: 25px;",
      name: "Uso"
    }
  ];

  $scope.options = {
    items: $scope.items,
    rowsstyle:"height: 200px;",
    chancesPerItem: 2,
    minRightAnswers: 4,
    itemsPerRow : 3
  };
});

nat209.controller('Act3-2Ctrl', function($scope){
  $scope.items = [
    {
      list: [
        {
          img: 'rastrillo.jpg',
          alt: 'donde se muestra un rastrillo plástico de color morado claro',
          title: 'Ivanov, A. (2013). Juguetes [Fotografía]. Obtenido de: http://pixabay.com/es/juguetes-de-pl%C3%A1stico-primer-plano-208711/'
        },
        { 
          img: 'clavos.jpg',
          alt: 'donde se muestran varios clavos',
          title: 'Scheijen, J. (2006). Nails [Fotografía]. Obtenido de: http://www.freeimages.com/photo/657373'
        },
        {
          img: 'guitarra.jpg',
          alt: 'donde se muestra una guitarra fabricada en madera',
          title: "Scheijen, J. (2006). Gonnie's guitar [Fotografía]. Obtenido de: http://www.freeimages.com/photo/500193"
        }
      ],
      style:"width: 40%;font-size: 25px;",
       name: "Objeto"
    },
    {
      list: [
        {
          answers: [
                { text: "Vidrio"},
                { text: "Plástico", answer: true },
                { text: "Madera"}
              ],
              /* default: true*/
        },
        {
          answers: [
                { text: "Metal", answer: true },
                { text: "Plástico"},
                { text: "Madera"}
              ],
              /* default: true*/
        },
        {
          answers: [
                { text: "Plástico"},
                { text: "Madera", answer: true },
                { text: "Metal"}
              ],
              /* default: true*/
        }
      ],
      style:"width: 20%;font-size: 25px;",
      name: "Material"
    },
    {
      list: [
        {
          answers: [
                { text: "Recreación", answer: true },
                { text: "Protección"},
                { text: "Alimento"}
              ],
              /* default: true*/
        },
        {
          answers: [
                { text: "Sostener", answer: true },
                { text: "Decorativo"},
                { text: "Recreación"}
              ],
              /* default: true*/
        },
        {
          answers: [
                { text: "Protección"},
                { text: "Recreación", answer: true },
                { text: "Decorativo"}
              ],
              /* default: true*/
        }
      ],
      style:"width: 20%;font-size: 25px;",
      name: "Uso"
    }
  ];

  $scope.options = {
    items: $scope.items,
    rowsstyle:"height: 200px;",
    chancesPerItem: 2,
    minRightAnswers: 4,
    itemsPerRow : 3
  };
});

nat209.controller('Act4Ctrl', function($scope){
     $scope.data = {
    src: 'sala.jpg',
    alt: 'donde se muestra una sala, ésta está conformada por tres muebles de cuero, en el centro de la sala hay una mesa de madera y vidrio, a un lado del sofá hay una lámpara en madera y un nochero también fabricado en madera. Además, a hay una alfombra hecha en lana',
    title: '. Mayer, R. (2013). Salón [Fotografía]. Obtenido de: http://pixabay.com/es/sal%C3%B3n-p%C3%A1gina-de-inicio-casa-162674/',
    randomItems: true,
    stylequestions: "width: 50%;",
    minRightAnswers: 3,
    questions: [
      {
        number: '1',
        question: "¿Cuáles objetos de la imagen están hechos de madera?",
        answers: [
          { text: "Lámpara" },
          { text: "Todas las anteriores", answer: true },
          { text: "Mueble o nochero" }
        ]
      },
      {
        number: '2',
        question: "¿Cuáles objetos de la imagen están hechos de vidrio?",
        answers: [
          { text: "Cojín" },
          { text: "Mesa y florero", answer: true },
          { text: "Sofá" }
        ]
      },
      {
        number: '3',
        question: "¿Cuáles objetos de la imagen están hechos de cuero?",
        answers: [
          { text: "Cojín" },
          { text: "Todas las anteriores", answer: true },
          { text: "Sofá" }
        ]
      },
      {
        number: '4',
        question: "¿Cuáles objetos de la imagen están hechos de lana?",
        answers: [
          { text: "Sofá"},
          { text: "Alfombra", answer: true },
          { text: "Ninguna de las anteriores"}
        ]
      }
    ]
  };
});

nat209.controller('Act5Ctrl', function ($scope) {
   $scope.$root.isNextEnabled = true; // Activamos el siguiente link

  $scope.input = '';
  $scope.selectedItem = false; // elemento seleccionado

  $scope.items = [
    {
      src: "vaso",
      alt: "Vaso plástico desechable",
      text: "Vaso de plástico",
    },
    {
      src: "vasoplastico",
      alt: "Vaso de vidrio",
      text: "Vaso de vidrio",
      title: "Gdula, A. (2008). Glass of wáter [Fotografía]. Obtenido de: http://www.freeimages.com/browse.phtml?f=download&id=964550"
    },
    {
      src: "pocillo",
      alt: "Pocillo de cerámica con una oreja a un lado",
      text: "Pocillo",
      title: "White coffee cup empty [Fotografía]. (2013). Obtenido en: http://www.freeimages.com/photo/1418279"
    }
  ];

  $scope.$root.selectItem = function (item) {

        $scope.selectedItem = item; // seleccionamos el objeto
  };

  // antes de ir a la siguiente actividad, verificamos
  $scope.$root.beforeGoNext = function () {
    var error = false,
      str = '';

    str = $scope.input.toLowerCase();
    if( !( str.match(/([bcdfghjklmnñpqrstvwxyz])/) && str.match(/([aeiou])/) && str.length >= 10 ) ) error = true;

      if(error){
        // fracaso
        $scope.failure = true;
        return true;
      } else {
        // éxito
        $scope.success = true;
        return true;
      }
    };
});

nat209.controller('Act6Ctrl', function ($scope) {
$scope.options = {
    link: "https://repositorio.educa.jccm.es/portal/odes/conocimiento_del_medio/cuaderno_materia_i/",
  };
});

var appManager = AppManager();
var nat210 = angular.module('nat210', ['activities']);

appManager.configModule(nat210, {
	resources: '../resources/02/nat/10',
	farewell: '¡Felicitaciones!, ahora ya sabes qué son la agricultura, la ganadería y la pesca y cuál es su importancia.',
	evidencesSound:true,
	evidences: 'Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, actividad de evidencia, guía 2, lección 10; descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.',
	routes:[
		{ 
			name: '/competencias', 
			templateUrl: 'comp', 
			controller: 'CompCtrl',
			title:"Estándares básicos de competencias"
		},
		{ 
			name: '/conceptualizacion-1', 
			templateUrl: 'con1', 
			controller: function () {},
			title: 'Lección 10: Agricultura, ganadería y pesca.'
		},
		{ 
			name: '/conceptualizacion-2', 
			templateUrl: 'con2', 
			controller: 'Con2Ctrl',
			title: 'Lección 10: Agricultura, ganadería y pesca.'
		},
    { 
      name: '/conceptualizacion-3', 
      templateUrl: 'con3', 
      controller: function () {},
      title: 'Lección 10: Agricultura, ganadería y pesca.'
    },
    { 
      name: '/conceptualizacion-4', 
      templateUrl: 'con4', 
      controller: function () {},
      title: 'Lección 10: Agricultura, ganadería y pesca.'
    },
    { 
      name: '/conceptualizacion-5', 
      templateUrl: 'con5', 
      controller: function () {},
      title: 'Lección 10: Agricultura, ganadería y pesca.'
    },
		{ 
			name: '/actividad-1', 
			templateUrl: 'act1', 
			controller: 'Act1Ctrl',
			title: 'Actividad 1 | Lección 10'
		},
		{ 
			name: '/actividad-2', 
			templateUrl: 'act2', 
			controller: 'Act2Ctrl',
			title: 'Actividad 2 | Lección 10'
		},
    { 
      name: '/actividad-2-2', 
      templateUrl: 'act2-2', 
      controller: 'Act2-2Ctrl',
      title: 'Actividad 2 - 2 | Lección 10'
    },
		{ 
			name: '/actividad-3', 
			templateUrl: 'act3', 
			controller: 'Act3Ctrl',
			title: 'Actividad 3 | Lección 10'
		},
		{ 
			name: '/actividad-4', 
			templateUrl: 'act4', 
			controller: 'Act4Ctrl',
			title: 'Actividad 4 | Lección 10'
		},
		{
			name: '/actividad-5', 
			templateUrl: 'act5', 
			controller: 'Act5Ctrl',
			title: 'Actividad 5 | Lección 10'
		},
    {
      name: '/actividad-6', 
      templateUrl: 'act6', 
      controller: 'Act6Ctrl',
      title: 'Actividad 6 | Lección 10'
    },
    { 
      name: '/actividad-7', 
      templateUrl: 'act7', 
      controller: 'Act7Ctrl',
      title:"Actividad complementaria",
    }
	]
	
});

nat210.controller('CompCtrl', function($scope){
	$scope.data = [
		{
			title: 'Estándar de competencia:',
			text1: 'Valoro la utilidad de algunos objetos y técnicas desarrolladas por el ser humano y reconozco que somos agentes de cambio en el entorno y en la sociedad.',
		},
		{
			title: 'Elemento de competencia:',
			text1: 'Identifica qué es la agricultura, la ganadería y la pesca y reconoce la importancia de los objetos y las técnicas relacionadas con estas áreas.',
		}
		
	];
});

nat210.controller('Con2Ctrl', function($scope){
$scope.data = {
    items: [
      { 
        title: "Arar",
        src: 'D8',
        img: "arado.png",
        imgAlt: "donde se muestra un agricultor arando la tierra con la ayuda de una maquina agrícola",
        text:'Acción mediante la cual se remueve la tierra haciendo surcos.<br><br><div class="bg-3" style="padding: 10px;"><strong>Surco: </strong>abertura o corte profundo que se hace en la tierra. </div>'
      },
      { 
        title: "Sembrar",
        src: 'D9',
        img: "sembrado.png",
        imgAlt: "donde se muestra un agricultor arrodillado sobre la tierra sembrando unas semillas",
        text:'Arrojar o esparcir semillas en un terreno para que germinen y den plantas y frutos.'
      },
      {
        title: "Regar",
        src: 'D10',
        img: "regado.png",
        imgAlt: "donde se muestra un agricultor regando con agua un cultivo",
        text:'Arrojar o esparcir agua sobre la tierra o una planta para refrescarla.'
      },
      { 
        title: "Abonar",
        src: 'D11',
        img: "abonado.png",
        imgAlt: "donde se muestra un agricultor abonando y fumigando un cultivo",
        text:'Arrojar o esparcir abono en la tierra para mejorar la alimentación y el crecimiento de las plantas.<br><br><div class="bg-3" style="padding: 10px;"><strong>Abono: </strong>sustancia que se adiciona a la tierra para mejorar la cantidad de alimento disponible para la planta en el suelo</div>'
      },
      { 
        title: "Recolectar",
        src: 'D12',
        img: "recolectar.png",
        imgAlt: "donde se muestra una agricultora recogiendo los repollos maduros de un cultivo",
        text:'Recoger los frutos o productos generados por el cultivo de las plantas.'
      }
    ]
  };
});

nat210.controller('Act1Ctrl', function ($scope) {
   $scope.data = {
    minRightAnswers: 3,
    feedback: "<p>Las respuestas correctas son:</p>\n<ol style=\"font-size: 26px;\">\n    <li>F</li>\n    <li>V</li>\n    <li>V</li>\n    <li>V</li>\n  <li>F</li>\n </ol>",
    items: [
      { text: "La agricultura comprende el conjunto de actividades desarrolladas para extraer productos de los ríos y océanos.", answer: "F" },
      { text: "Las actividades desarrolladas por los agricultores para cultivar las tierras son: arar, sembrar, regar, abonar y recolectar.", answer: "V" },
      { text: "El ganadero es la persona que se encarga de la cría de animales.", answer: "V" },
      { text: "La agricultura, la ganadería y la pesca le proporcionan alimentos al hombre.", answer: "V" },
      { text: "La pesca es la captura y extracción de los peces u otras especies acuáticas que habitan exclusivamente los ríos.", answer: "F" }
    ]
  };
});

nat210.controller('Act2Ctrl', function($scope){
 $scope.items = [
      {         
        img: 'lancha.png',
        title: 'Lancha',
        altimg: 'Lancha a motor',
        w: 300, h: 50, t:0  , l:0,
        options: [
              { text: "Agricultura"},
              { text: "Ganadería"},
              { text: "Pesca", answer: true }
            ]
      },
      {   
        img: 'azadon.png',
        title: 'Azadón',
        altimg: 'Azadón',
        w: 300, h: 50, t:0  , l:35,
        options: [
              { text: "Agricultura", answer: true },
              { text: "Ganadería"},
              { text: "Pesca"}
            ]
      },
      {         
        img: 'vaca.png',
        title: 'Vaca',
        altimg: 'Vaca',
        w: 300, h: 50, t:0  , l:70,
        options: [
              { text: "Agricultura"},
              { text: "Ganadería", answer: true },
              { text: "Pesca"}
            ]
      }
    ],

    $scope.options = {
      items: $scope.items,
      canvasStyle: 'width: 1021px;height: 400px;',
      chances: 2,
      optionsrandom: true,
      minRightAnswers: 3,
      itemsPerRow : 3
    };
});

nat210.controller('Act2-2Ctrl', function($scope){
 $scope.items = [
      {         
        img: 'pez.png',
        title: 'Pez',
        altimg: 'Pez',
        w: 300, h: 50, t:0  , l:0,
        options: [
              { text: "Agricultura"},
              { text: "Ganadería"},
              { text: "Pesca", answer: true }
            ]
      },
      {   
        img: 'tractor.png',
        title: 'Tractor',
        altimg: 'Tractor de color verde',
        w: 300, h: 50, t:0  , l:35,
        options: [
              { text: "Agricultura", answer: true },
              { text: "Ganadería"},
              { text: "Pesca"}
            ]
      },
      {         
        img: 'cerdo.png',
        title: 'Cerdo',
        altimg: 'Cerdo',
        w: 300, h: 50, t:0  , l:70,
        options: [
              { text: "Agricultura"},
              { text: "Ganadería", answer: true },
              { text: "Pesca"}
            ]
      }
    ],

    $scope.options = {
      items: $scope.items,
      canvasStyle: 'width: 1021px;height: 400px;',
      chances: 2,
      optionsrandom: true,
      minRightAnswers: 3,
      itemsPerRow : 3
    };
});

nat210.controller('Act3Ctrl', function($scope){
	 $scope.items = [
    {
      sil: '<strong>Agricultor</strong>',
      resource: "agricultor",
      alt: 'donde se muestra un agricultor trabajando con el azadón la tierra y realizando el mantenimiento de un cultivo de repollo'
    },
    {
      sil: '<strong>Ganadero</strong>',
      resource: "ganadero",
      alt: 'donde se muestra un ganadero arriando sus vacas hacia el potrero'
    },
    {
      sil: '<strong>Pescador</strong>',
      resource: "pescador",
      alt: 'donde se muestra un señor pescando en un río con la ayuda de una red'
    }
  ];

  $scope.options = {
    data: $scope.items,
    minRightAnswers: 2,
    randomItems: true,
  };
});

nat210.controller('Act4Ctrl', function($scope){
  $scope.items = [
    {
      sil: '<strong>Arar</strong>',
      sil2: '<strong>Acción mediante la cual se remueve la tierra haciendo surcos.</strong>',
    },
    {
      sil: '<strong>Sembrar</strong>',
      sil2: '<strong>Esparcir semillas en un terreno para que germinen y den plantas y frutos.</strong>',
    },
    {
      sil: '<strong>Regar</strong>',
      sil2: '<strong>Arrojar agua sobre la tierra o una planta para refrescarla.</strong>',
    },
    {
      sil: '<strong>Abonar</strong>',
      sil2: '<strong>Esparcir abono en la tierra para mejorar la alimentación y el crecimiento de las plantas.</strong>',
    },
    {
      sil: '<strong>Recolectar</strong>',
      sil2: '<strong>Recoger los frutos o productos generados por el cultivo de las plantas.</strong>',
    }
  ];

  $scope.options = {
    data: $scope.items,
    minRightAnswers: 5,
    randomItems: true,
    randomTargets: true
  };
});

nat210.controller('Act5Ctrl', function ($scope) {
  $scope.data = {
    chances: 3,
    chancesperitem: 4,
    minRightAnswers: 6,
    questions:[
      {
        text:'¿Cuáles de los siguientes productos se obtienen de la agricultura?',
        items: [
          { text: "Madera", answer: true },
          { text: "Carne", answer: false },
          { text: "Frutas", answer: true },
          { text: "Huevos", answer: false },
          { text: "Arroz", answer: true },
          { text: "Miel", answer: false }
        ]
      },
      {
        text:'¿Cuáles de los siguientes productos se obtienen de la ganadería?',
        items: [
          { text: "Lana", answer: true },
          { text: "Camarones", answer: false },
          { text: "Frutas", answer: false },
          { text: "Huevos", answer: true },
          { text: "Arroz", answer: false },
          { text: "Miel", answer: true }
        ]
      },
      {
        text:'¿Cuáles de los siguientes productos se obtienen de la pesca?',
        items: [
          { text: "Ostras", answer: true },
          { text: "Hortalizas", answer: false },
          { text: "Camarones", answer: true },
          { text: "Leche", answer: false },
          { text: "Peces", answer: true },
          { text: "Miel", answer: false }
        ]
      }
    ]
  };
});

nat210.controller("Act6Ctrl", function ($scope) {
 $scope.$root.isNextEnabled = true; // Activamos el siguiente link

  $scope.input = '';

  // antes de ir a la siguiente actividad, verificamos
  $scope.$root.beforeGoNext = function () {
    var error = false,
      str = '';

    str = $scope.input.toLowerCase();
    if( !( str.match(/([bcdfghjklmnñpqrstvwxyz])/) && str.match(/([aeiou])/) && str.length >= 10 ) ) error = true;

    if(error){
      // fracado
      $scope.failure = true;
      return false;
    } else {
      // éxito
      $scope.success = true;
      return true;
    }
  };
});

nat210.controller('Act7Ctrl', function ($scope) {
$scope.options = {
    link: "http://cplosangeles.juntaextremadura.net/web/edilim/curso_3/cmedio/los_trabajos_3/agricultura/agricultura.html ",
  };
});

var appManager = AppManager();
var soc201 = angular.module('soc201', ['activities']);

appManager.configModule(soc201, {
	resources: '../resources/02/soc/01',
	competences1: 'Identifico y describo algunas características físicas, sociales, culturales y emocionales propias a la comunidad que pertenezco y otras diferentes.',
	competences2: 'Describe el tipo de vivienda y las características que tiene ésta en su comunidad, barrio y municipio.',
	competencesSound: true,
	evidences: 'Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, actividad de evidencia, guía 1, lección 1; descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.',
	evidencesSound: true,
	farewell: 'Muy bien, ahora ya conoces más sobre la vivienda.',
	routes: [
		{ 
			name: '/conceptualizacion-1', 
			templateUrl: 'con1', 
			controller: 'Con1Ctrl',
			title: '¿En dónde vivo?'
		},
		{ 
			name: '/conceptualizacion-2', 
			templateUrl: 'con2', 
			controller: 'Con2Ctrl',
			title: '¿En dónde vivo?'
		},
		{ 
			name: '/actividad-1', 
			templateUrl: 'act1', 
			controller: 'Act1Ctrl',
			title: 'Actividad 1'
		},
		{ 
			name: '/actividad-2', 
			templateUrl: 'act2', 
			controller: 'Act2Ctrl',
			title: 'Actividad 2'
		},
		{ 
			name: '/actividad-3', 
			templateUrl: 'act3', 
			controller: 'Act3Ctrl',
			title: 'Actividad 3'
		},
		{ 
			name: '/actividad-4', 
			templateUrl: 'act4', 
			controller: 'Act4Ctrl',
			title: 'Actividad 4'
		},
		{ 
			name: '/actividad-5', 
			templateUrl: 'act5', 
			controller: 'Act5Ctrl',
			title: 'Actividad 5'
		}
	]
});

soc201.controller('Con1Ctrl', function($scope){
	$scope.data = {
		items: [
			{	
				number:'1',
				title: "Refugio",
				src: "refugio",
				img: "clima.png",
				imgAlt: "Una nube acompañada de sol y lluvia",
				text:'Brinda protección  a las personas y sus enseres; del clima o cualquier otra amenaza.'
			},
			{	
				number:'2',
				title: "Intimidad",
				src: "intimidad",
				img: "ducha.png",
				imgAlt: "Bañera con la ducha abierta",
				text:'Permite el desarrollo de nuestras actividades cotidianas, que requieren de privacidad.'
			},
			{	
				number:'3',
				title: "Descanso",
				src: "descanso",
				img: "cama.png",
				imgAlt: "Cama",
				text:'En nuestra vivienda podemos descansar después de trabajar, estudiar o desarrollar cualquier otra actividad.'
			}
		],
	};
});

soc201.controller('Con2Ctrl', function ($scope) {
	$scope.data = [
		{ 
			resource: "casa",
			alt: "Dos perros de color blanco y negro",
			title: "Linder, R. (2009). Bungalow [Fotografía]. Obtenido de: http://www.sxc.hu/photo/1212524",
			type: "jpg"
		},
		{ 
			resource: "apartamentos",
			alt: "Dos perros de color blanco y negro",
			title: "Richert, M. (2011). Apartment balcony skyscraper [Fotografía]. Obtenido de: http://www.sxc.hu/photo/1365469",
			type: "jpg"
		},
		{ 
			resource: "choza",
			alt: "Dos perros de color blanco y negro",
			title: "Schuster, E. (2008). Irish garden [Fotografía]. Obtenido de: http://www.sxc.hu/photo/1102326",
			type: "jpg"
		},
		{ 
			resource: "palacio",
			alt: "Dos perros de color blanco y negro",
			title: "Mahanand, P. (2009). Monument 02 [Fotografía]. Obtenido de: http://www.sxc.hu/photo/1152442",
			type: "jpg"
		},
	]
});

soc201.controller('Act1Ctrl', function ($scope) {
	$scope.data = [
		{ 
			resource: "vecindad",
			alt: "Imagen donde se muestran varias casas juntas",
			title: "Schuster, E. (2013). Narrow lanes 3 [Fotografía]. Obtenido de: http://www.sxc.hu/photo/1420847",
			text: "vecindad",
			textClass: "act1",
			type: "jpg"
		},
		{ 
			resource: "casa_madera",
			alt: "Casa construida con madera",
			title: "Linder, R. (2011). Log cabin [Fotografía]. Obtenido de: http://www.sxc.hu/photo/1331387",
			text: "Casa de madera",
			textClass: "act1",
			type: "jpg"
		},
		{ 
			resource: "casa_campo",
			alt: "Casa rodeada por bastante vegetación y con amplios jardines",
			title: "Hollek [Fotografía]. (2009). Obtenido de: http://www.sxc.hu/photo/1136201",
			text: "Casa de campo",
			textClass: "act1",
			type: "jpg"
		},
		{ 
			resource: "apartamentos_2",
			alt: "Edificio de varios pisos",
			title: "Richert, M. (2011). Tall apartment skyscraper 3 [fotografía]. Obtenido de: http://www.sxc.hu/photo/1350213",
			text: "Apartamentos",
			textClass: "act1",
			type: "jpg"
		},
		{ 
			resource: "casa_cemento",
			alt: "Varias casas contiguas, construidas con cemento",
			title: "Pires, I. (2008). Traditional Street [Fotografía]. Obtenido de: http://www.sxc.hu/photo/1053083",
			text: "Casa de cemento",
			textClass: "act1",
			type: "jpg"
		},
		{ 
			resource: "iglu",
			alt: "Iglú",
			title: "Hassinen, A. (2006). Igloo [fotografía]. Obtenido de: http://commons.wikimedia.org/wiki/File:Igloo_outside.jpg",
			text: "Iglú",
			textClass: "act1",
			type: "jpg"
		},
	]
});

soc201.controller('Act2Ctrl', function ($scope) {
	$scope.data = {
		images: [
			{
				src: "chozas.jpg",
				title: "11. Ahmed R.(2013). Thatched Roofs (Sierra Nevada de Santa Marta, Colombia) [Fotografía]. Obtenido de: http://commons.wikimedia.org/wiki/File%3AThatched_Roofs_(Sierra_Nevada_de_Santa_Marta%2C_Colombia)",
				alt: "Imagen donde se muestran varias chozas separadas una de la otra, Están construidas con paja y madera, se encuentran rodeada por mucha vegetación"
			},
			{
				src: "casa_cemento.jpg",
				title: "9. Pires, I. (2008). Traditional Street [Fotografía]. Obtenido de: http://www.sxc.hu/photo/1053083",
				alt: "Varias casas una junto a la otra, construidas en cemento, están junto a una vía pavimentada"
			}
		],
		inputs: 3
	};
});

soc201.controller('Act3Ctrl', function ($scope) {
	$scope.options = {
		data: [
			{
				src1: "edificio",
				alt1: "edificio",
				src2: "familia-citadina",
				alt2: "señora llevando de la mano a su hijo"
			},
			{
				src1: "choza-indigena",
				alt1: "choza indígena",
				src2: "indigena",
				alt2: "indígena"
			},
			{
				src1: "granja",
				alt1: "granja",
				src2: "granjera",
				alt2: "granjera"
			},
			{
				src1: "iglu",
				alt1: "iglú",
				src2: "esquimal",
				alt2: "esquimal"
			},
			{
				src1: "casa-de-madera-III",
				alt1: "casa de madera",
				src2: "lenador",
				alt2: "leñador"
			}
		],
		minRightAnswers: 3,
		randomItems: true,
		randomTargets: true
	};
});

soc201.controller('Act4Ctrl', function ($scope) {
	$scope.data = {
		canvas: 'estructura-casa',
		canvasAlt: 'Estructura de una casa donde se muestra donde van ubicadas las habitaciones, el baño, la sala y la cocina',
		targets: [
			{ 
				src: "sala",
				targetPos: { w: 47, h: 21.8, t: 62, l: 2 },
				innerPos: { w: 85, h: 54, t: -0.2, l: 7 }
			},
			{ 
				src: "habitacion-2",
				targetPos: { w: 37.2, h: 24.5, t: 37, l: 1 },
				innerPos: { w: 97, h: 61, t: 0, l: 2.9 }
			},
			{ 
				src: "cocina",
				targetPos: { w: 48.4, h: 21.7, t: 62, l: 49.8 },
				innerPos: { w: 82.4, h: 61.7, t: -0.1, l: 8.4 }
			},
			{ 
				src: "habitacion-1",
				targetPos: { w: 33.3, h: 24.7, t: 36.9, l: 65 },
				innerPos: { w: 99.6, h: 59, t: 6, l: 0.5 }
			},
			{ 
				src: "bano",
				targetPos: { w: 25.5, h: 24.5, t: 37, l: 39 },
				innerPos: { w: 97, h: 56, t: -0.4, l: 1.9 }
			}
		],
		chances: 10,
		minRightAnswers: 3,
		itemsContainerHeight: '112px'
	};
});

soc201.controller('Act5Ctrl', function ($scope) {
	$scope.data = {
		data: [
			{
				src: "madera.png",
				alt: "tablas de madera"
			},
			{
				src: "cemento.png",
				alt: "cemento"
			},
			{
				src: "ladrillos.png",
				alt: "ladrillos"
			},
			{
				src: "techo.png",
				alt: "techo"
			},
			{
				src: "escaleras.png",
				alt: "escaleras"
			},
			{
				src: "ventana.png",
				alt: "ventana"
			},
			{
				src: "techo-paja.png",
				alt: "techo de paja"
			},
			{
				src: "puerta.png",
				alt: "puerta"
			},
		],
		minRightAnswers: 2,
		itemsPerRow: 3,
		priority: true
	};

});

var appManager = AppManager();
var soc202 = angular.module('soc202', ['activities']);

appManager.configModule(soc202, {
	resources: '../resources/02/soc/02',
	competences1: 'Establezco relaciones entre el clima y las actividades económicas de las personas.',
	competences2: 'Describe las diferentes características climáticas, según algunos productos o sitios turísticos de la región.',
	competencesSound: true,
	evidences: 'Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, actividad de evidencia, guía 1, lección 2; descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.',
	evidencesSound: true,
	farewell: 'Muy bien, ahora ya sabes más sobre el clima y las actividades económicas asociadas a él.',
	routes: [
		{ 
			name: '/conceptualizacion-1', 
			templateUrl: 'con1', 
			controller: 'Con1Ctrl',
			title: 'El clima'
		},
		{ 
			name: '/conceptualizacion-2', 
			templateUrl: 'con2', 
			controller: 'Con2Ctrl',
			title: 'El clima'
		},
		{ 
			name: '/conceptualizacion-3', 
			templateUrl: 'con3', 
			controller: 'Con3Ctrl',
			title: 'El clima'
		},
		{ 
			name: '/conceptualizacion-4', 
			templateUrl: 'con4', 
			controller: 'Con4Ctrl',
			title: 'El clima'
		},
		{ 
			name: '/conceptualizacion-5', 
			templateUrl: 'con5', 
			controller: 'Con5Ctrl',
			title: 'El clima'
		},
		{ 
			name: '/conceptualizacion-6', 
			templateUrl: 'con6', 
			controller: 'Con6Ctrl',
			title: 'El clima'
		},
		{ 
			name: '/actividad-1', 
			templateUrl: 'act1', 
			controller: 'Act1Ctrl',
			title: 'Actividad 1'
		},
		{ 
			name: '/actividad-2', 
			templateUrl: 'act2', 
			controller: 'Act2Ctrl',
			title: 'Actividad 2'
		},
		{ 
			name: '/actividad-3-1', 
			templateUrl: 'act3_1', 
			controller: 'Act3_1Ctrl',
			title: 'Actividad 3'
		},
		{ 
			name: '/actividad-3-2', 
			templateUrl: 'act3_2', 
			controller: 'Act3_2Ctrl',
			title: 'Actividad 3'
		},
		{ 
			name: '/actividad-3-3', 
			templateUrl: 'act3_3', 
			controller: 'Act3_3Ctrl',
			title: 'Actividad 3'
		},
		{ 
			name: '/actividad-4', 
			templateUrl: 'act4', 
			controller: 'Act4Ctrl',
			title: 'Actividad 4'
		},
		{ 
			name: '/actividad-5', 
			templateUrl: 'act5', 
			controller: 'Act5Ctrl',
			title: 'Actividad 5'
		}
	]
});

soc202.controller('Con1Ctrl', function ($scope) {
	$scope.data = [
		{ 
			resource: "calido",
			text: "Cálido",
			hideImg: true,
			textClass: "btn-primary"
		},
		{ 
			resource: "templado",
			text: "Templado",
			hideImg: true,
			textClass: "btn-primary"
		},
		{ 
			resource: "frio",
			text: "Frío",
			hideImg: true,
			textClass: "btn-primary"
		}
	]
});

soc202.controller('Con2Ctrl', function ($scope) {
	$scope.data = [
		{ 
			resource: "cultivo_naranja",
			alt: "Imagen donde se muestran varias naranjas en un árbol",
			title: "Tangerine [Fotografía]. (2009). Obtenido de: http://www.sxc.hu/photo/1154476",
			type: "jpg"
		},
		{ 
			resource: "ganado",
			alt: "Imagen donde se presentan tres reces de ganado pastando",
			title: "Duran, C. (2011). Ganado Finca Cantagallo [Fotografía]. Obtenido de: http://commons.wikimedia.org/wiki/File%3AGanado_Finca_Cantagallo.jpg",
			type: "jpg"
		},
		{ 
			resource: "cultivo_algodon",
			alt: "Imagen donde se presenta un cultivo de algodón",
			title: "De Algodón Campo Planta Cosecha [Fotografía]. (2013). Obtenido de: http://pixabay.com/es/de-algod%C3%B3n-campo-planta-cosecha-233920/",
			type: "jpg"
		},
		{ 
			resource: "turismo",
			alt: "Imagen donde se presentan dos niños jugando en una piscina",
			title: "Mumcu, O. (2006). Boys in the pool [Fotografía]. Obtenido de: http://www.sxc.hu/photo/661956",
			type: "jpg"
		}
	]
});

soc202.controller('Con3Ctrl', function ($scope) {
	$scope.data = [
		{ 
			resource: "cultivo_aguacate",
			alt: "Imagen donde se muestran varios aguacates, uno encima de otro",
			title: "Aguacate Frutas [Fotografía]. (2013). Obtenido de: http://pixabay.com/es/aguacate-frutas-cerrar-219743/",
			type: "jpg"
		},
		{ 
			resource: "cultivo_tomate",
			alt: "Imagen donde se presentan dos tomates colgando de la planta",
			title: "Borchard, A. (2008). The last tomatoes [Fotografía]. Obtenido de: http://www.sxc.hu/photo/1085248",
			type: "jpg"
		},
		{ 
			resource: "cafe",
			alt: "Imagen donde se muestra la mano de una persona recolectando café",
			title: "Café Coffe Azúcar [Fotografía]. (2013). Obtenido de: http://pixabay.com/es/caf%C3%A9-coffe-az%C3%BAcar-215383",
			type: "jpg"
		}
	]
});

soc202.controller('Con4Ctrl', function ($scope) {
	$scope.data = [
		{ 
			resource: "cultivo_rosa",
			alt: "Imagen donde se muestra una rosa roja",
			title: "Rosa flores [Fotografía]. (2013). Obtenido de: http://pixabay.com/es/rosa-flor-flores-rosas-rosa-flores-90531/",
			type: "jpg"
		},
		{ 
			resource: "cultivo_papa",
			alt: "Imagen donde se muestran dos papas que están siendo recogidas de la tierra",
			title: "Patatas [Fotografía]. (2012). Obtenido de: http://pixabay.com/es/patatas-cultivo-agricultura-patata-43242/",
			type: "jpg"
		},
		{ 
			resource: "leche",
			alt: "Imagen donde se muestran varias vacas lecheras pastando",
			title: "Cow [Fotografía]. (2007). Obtenido de: http://www.sxc.hu/photo/860031",
			type: "jpg"
		}
	]
});

soc202.controller('Con5Ctrl', function ($scope) {
	$scope.data = [
		{ 
			resource: "soleado",
			alt: "Imagen que muestra a una joven a las 7:00 de la mañana en un día muy soleado"
		},
		{ 
			resource: "lluvia",
			alt: "Imagen que muestra a una joven a las 12:00 del día en medio de una fuerte lluvia y con sombrilla"
		},
		{ 
			resource: "tornado",
			alt: "Imagen que muestra a una joven a las 5:00 de la tarde en medio de un viento muy fuerte"
		}
	]
});

soc202.controller('Con6Ctrl', function ($scope) {
	$scope.$root.isNextEnabled = true; // Activa el botón de siguiente
});

soc202.controller('Act1Ctrl', function ($scope) {
	$scope.data = [
		{ 
			resource: "frijol",
			audio: "calido",
			alt: "Imagen donde se muestran varios granos de frijol",
			title: "Aguacate Frutas [Fotografía]. (2013). Obtenido de: http://pixabay.com/es/aguacate-frutas-cerrar-219743/",
			type: "jpg"
		},
		{ 
			resource: "leche",
			audio: "frio",
			alt: "Imagen donde se muestran varias vacas lecheras pastando",
			title: "Cow [Fotografía]. (2007). Obtenido de: http://www.sxc.hu/photo/860031",
			type: "jpg"
		},
		{ 
			resource: "cultivo_zanahoria",
			audio: "templado",
			alt: "Imagen donde se muestran varias zanahorias una encima de la otra",
			title: "Mohan, M. (2007). Carrots [fotografía]. Obtenido de: http://www.sxc.hu/photo/765574",
			type: "jpg"
		},
		{ 
			resource: "cultivo_platano",
			audio: "calido",
			alt: "Imagen donde se muestran varias plantas de plátano",
			title: "Jones, M. (2011). Banana plant [Fotografía]. Obtenido de: http://www.sxc.hu/photo/1338275",
			type: "jpg"
		},
		{ 
			resource: "ganado",
			audio: "calido",
			alt: "Imagen donde se presentan tres reces de ganado pastando",
			title: "Duran, C. (2011). Ganado Finca Cantagallo [Fotografía]. Obtenido de: http://commons.wikimedia.org/wiki/File%3AGanado_Finca_Cantagallo.jpg",
			type: "jpg"
		},
		{ 
			resource: "cultivo_mora",
			audio: "frio",
			alt: "Imagen donde se presentan varias plantas de mora",
			title: "Çetin, Y. (2012). Blackberry [fotografía]. Obtenido de: http://pixabay.com/es/bayas-blackberry-fruta-org%C3%A1nica-53970/",
			type: "jpg"
		}
	]
});

soc202.controller('Act2Ctrl', function ($scope) {
	$scope.data = [
		{ 
			resource: "cartagena",
			audio: "calido",
			text: "Playa de Cartagena",
			alt: "Imagen donde se muestra una playa, donde la gente disfruta del mar",
			title: "Cartagena, P. (2011). Playas de Bocagrande, Cartagena de Indias (Colombia). Obtenido de: http://commons.wikimedia.org/wiki/File%3APlayas_de_Bocagrande%2C_Cartagena_de_Indias_(Colombia).jpg",
			type: "jpg"
		},
		{ 
			resource: "nevado_ruiz",
			audio: "frio",
			text: "Nevado del Ruiz",
			alt: "Imagen donde se presenta un área del Nevado del Ruiz, cubierta por nieve",
			title: "Nevado del Ruiz, Colombia [Fotografía]. (2010). Obtenido de: http://commons.wikimedia.org/wiki/File%3ANevado_del_Ruiz%2C_Colombia.jpg",
			type: "jpg"
		},
		{ 
			resource: "sierra_nevada",
			audio: "frio",
			text: "Bosque Sierra Nevada",
			alt: "Imagen donde se presenta parte de un bosque conformado por varias plantas",
			title: "Tarrier, D. (2011). Envolvert-foretprimaire-Colombie-SierraNevadaDeSantaMarta [Fotografía]. Obtenido de: http://commons.wikimedia.org/wiki/File%3AEnvolVert-ForetPrimaire-Colombie-SierraNevadaDeSantaMarta-2011-1.JPG",
			type: "jpg"
		},
		{ 
			resource: "eje_cafetero",
			audio: "templado",
			text: "Eje cafetero",
			alt: "Imagen donde se presenta una cascada grande",
			title: "Martínez, L. (2012). Cascadas en los termales en Santa Rosa de Cabal [Fotografía]. Obtenido de: http://commons.wikimedia.org/wiki/File%3ACascadas_en_los_termales_en_Santa_Rosa_de_Cabal.JPG",
			type: "jpg"
		},
		{ 
			resource: "guatapuri",
			audio: "calido",
			text: "Río Guatapurí",
			alt: "Imagen donde se presenta el Río Guatapurí  rodeado por vegetación y grandes piedras",
			title: "Rio Guatapurí [Fotografía]. (2013). Obtenido de: http://commons.wikimedia.org/wiki/File%3ARio_Guatapuri.JPG",
			type: "jpg"
		},
		{ 
			resource: "medellin",
			audio: "templado",
			text: "Medellín",
			alt: "Imagen donde se presenta el Parque de los Pies Descalzos, sobresaliendo en ella los chorros de agua característicos de este parque",
			title: "Jiménez, E. (2006). Parque de los pies descalzos [Fotografía]. Obtenido de: http://commons.wikimedia.org/wiki/File%3AParque_de_los_pies_descalzos_(321377268).jpg",
			type: "jpg"
		}
	]
});

soc202.controller('Act3_1Ctrl', function ($scope) {
	$scope.data = {
		data: [
			{
				src: "maiz.jpg",
				alt: "Imagen donde se presentan varias plantas de maíz",
				answer: true,
				title: "Corn [Fotografía]. (2012). Obtenido de: http://www.sxc.hu/photo/1403336",
				text: "Cultivo de maíz"
			},
			{
				src: "cultivo_papa.jpg",
				alt: "Imagen donde se muestran dos papas que están siendo recogidas de la tierra",
				answer: false,
				title: "Patatas [Fotografía]. (2012). Obtenido de: http://pixabay.com/es/patatas-cultivo-agricultura-patata-43242/",
				text: "Cultivo de papa"
			},
			{
				src: "ganado.jpg",
				alt: "Imagen donde se presentan tres reces de ganado pastando",
				answer: true,
				title: "Duran, C. (2011). Ganado Finca Cantagallo [Fotografía]. Obtenido de: http://commons.wikimedia.org/wiki/File%3AGanado_Finca_Cantagallo.jpg",
				text: "Ganadería"
			},
			{
				src: "cultivo_tomate.jpg",
				alt: "Imagen donde se presentan dos tomates colgando de la planta",
				answer: false,
				title: "Borchard, A. (2008). The last tomatoes [Fotografía]. Obtenido de: http://www.sxc.hu/photo/1085248",
				text: "Cultivo de tomate"
			},
			{
				src: "turismo.jpg",
				alt: "Imagen donde se presentan dos niños jugando en una piscina",
				answer: true,
				title: "Mumcu, O. (2006). Boys in the pool [Fotografía]. Obtenido de: http://www.sxc.hu/photo/661956",
				text: "Turismo"
			},
			{
				src: "arroz.jpg",
				alt: "Imagen donde se muestran varias plantas de arroz",
				answer: true,
				title: "Mhatre, S.(2009). Rice Field [Fotografía]. Obtenido de: http://www.sxc.hu/photo/1233293",
				text: "Cultivo de arroz"
			},
		],
		minRightAnswers: 3,
		chances: 4
	};
});

soc202.controller('Act3_2Ctrl', function ($scope) {
	$scope.data = {
		data: [
			{
				src: "turismo.jpg",
				alt: "Imagen donde se presentan dos niños jugando en una piscina",
				title: "Mumcu, O. (2006). Boys in the pool [Fotografía]. Obtenido de: http://www.sxc.hu/photo/661956",
				answer: false,
				text: "Turismo"
			},
			{ 
				src: "cultivo_zanahoria.jpg",
				alt: "Imagen donde se muestran varias zanahorias una encima de la otra",
				title: "Mohan, M. (2007). Carrots [fotografía]. Obtenido de: http://www.sxc.hu/photo/765574",
				answer: true,
				text: "Zanahoria"
			},
			{ 
				src: "cafe.jpg",
				alt: "Imagen donde se muestra la mano de una persona recolectando café",
				title: "Café Coffe Azúcar [Fotografía]. (2013). Obtenido de: http://pixabay.com/es/caf%C3%A9-coffe-az%C3%BAcar-215383",
				answer: true,
				text: "Café"
			},
			{ 
				src: "cultivo_aguacate.jpg",
				alt: "Imagen donde se muestran varios aguacates, uno encima de otro",
				title: "Aguacate Frutas [Fotografía]. (2013). Obtenido de: http://pixabay.com/es/aguacate-frutas-cerrar-219743/",
				answer: true,
				text: "Aguacate"
			},
			{
				src: "cultivo_tomate.jpg",
				alt: "Imagen donde se presentan dos tomates colgando de la planta",
				answer: false,
				title: "Borchard, A. (2008). The last tomatoes [Fotografía]. Obtenido de: http://www.sxc.hu/photo/1085248",
				answer: true,
				text: "Tomate"
			},
			{ 
				src: "cultivo_platano.jpg",
				alt: "Imagen donde se muestran varias plantas de plátano",
				title: "Jones, M. (2011). Banana plant [Fotografía]. Obtenido de: http://www.sxc.hu/photo/1338275",
				answer: false,
				text: "Plátano"
			}
		],
		minRightAnswers: 3,
		chances: 4
	};
});

soc202.controller('Act3_3Ctrl', function ($scope) {
	$scope.data = {
		data: [
			{
				src: "hortensia.jpg",
				alt: "Imagen donde se muestra una planta de hortensia florecida",
				title: "Hortensia azul pastel [fotografía]. (2013). Obtenido de: http://pixabay.com/es/hortensia-azul-pastel-flor-jard%C3%ADn-111325/",
				answer: true,
				text: "Hortensia"
			},
			{ 
				src: "cultivo_mora.jpg",
				alt: "Imagen donde se presentan varias plantas de mora",
				title: "Çetin, Y. (2012). Blackberry [fotografía]. Obtenido de: http://pixabay.com/es/bayas-blackberry-fruta-org%C3%A1nica-53970/",
				answer: true,
				text: "Mora"
			},
			{ 
				src: "cultivo_papa.jpg",
				alt: "Imagen donde se muestran dos papas que están siendo recogidas de la tierra",
				title: "Patatas [Fotografía]. (2012). Obtenido de: http://pixabay.com/es/patatas-cultivo-agricultura-patata-43242/",
				answer: true,
				text: "Papa"
			},
			{ 
				src: "turismo.jpg",
				alt: "Imagen donde se presentan dos niños jugando en una piscina",
				title: "Mumcu, O. (2006). Boys in the pool [Fotografía]. Obtenido de: http://www.sxc.hu/photo/661956",
				answer: false,
				text: "Turismo"
			},
			{ 
				src: "leche.jpg",
				alt: "Imagen donde se muestran varias vacas lecheras pastando",
				title: "Cow [Fotografía]. (2007). Obtenido de: http://www.sxc.hu/photo/860031",
				answer: true,
				text: "Ganadería lechera"
			},
			{ 
				src: "cultivo_algodon.jpg",
				alt: "Imagen donde se presenta un cultivo de algodón",
				title: "De Algodón Campo Planta Cosecha [Fotografía]. (2013). Obtenido de: http://pixabay.com/es/de-algod%C3%B3n-campo-planta-cosecha-233920/",
				answer: false,
				text: "algodón"
			},

		],
		minRightAnswers: 3,
		chances: 4
	};
});

soc202.controller('Act4Ctrl', function ($scope) {
	$scope.options = {
		data: [
			{
				src1: "ropa-clima-templado",
				alt1: "Imagen donde se presenta un blue jean, unos tenis y una camiseta manga corta",
				src2: "medellin2",
				alt2: "Imagen panorámica de Medellín",
				text: "Medellín",
				title: "Zapata, J. (2013). Panorámica Medellín [Fotografía]. Obtenido de: http://pixabay.com/es/medell%C3%ADn-colombia-panor%C3%A1mica-182352/"
			},
			{
				src1: "ropa-clima-frio",
				alt1: "Imagen donde se presenta un suéter, un pantalón largo y unos zapatos cubiertos, ropa indicada para clima frío",
				src2: "bogota",
				alt2: "Imagen panorámica de Bogotá",
				text: "Bogotá D.C.",
				title: "Zapata, J. (2013). Bogotá, Colombia [Fotografía]. Obtenido de: http://pixabay.com/es/bogot%C3%A1-colombia-la-construcci%C3%B3n-de-221345/"
			},
			{
				src1: "ropa-clima-calido",
				alt1: "Imagen donde se presenta un vestido de baño de dos piezas y un par de chancletas",
				src2: "cartagena",
				alt2: "Imagen donde se muestra una playa, donde la gente disfruta del mar",
				title: "Cartagena, P. (2011). Playas de Bocagrande, Cartagena de Indias (Colombia). Obtenido de: http://commons.wikimedia.org/wiki/File%3APlayas_de_Bocagrande%2C_Cartagena_de_Indias_(Colombia).jpg",
				text: "Cartagena"
			},
			{
				src1: "ropa-de-nieve",
				alt1: "Imagen donde se presenta un pantalón largo, una chaqueta, unas botas altas y una bufanda, vestuario especial para zonas donde hay nieve",
				src2: "nevado_ruiz",
				alt2: "Imagen donde se presenta un área del Nevado del Ruiz, cubierta por nieve",
				title: "Nevado del Ruiz, Colombia [Fotografía]. (2010). Obtenido de: http://commons.wikimedia.org/wiki/File%3ANevado_del_Ruiz%2C_Colombia.jpg",
				text: "Nevado del Ruiz",
			}
		],
		minRightAnswers: 3,
		randomItems: true,
		randomTargets: true
	};
});

soc202.controller('Act5Ctrl', function ($scope) {
	$scope.input = ''; // Input
	$scope.$root.isNextEnabled = true; // Activamos el siguiente link

	$scope.$root.beforeGoNext = function () {
		if( $scope.input.toLowerCase().match(/([bcdfghjklmnñpqrstvwxyz])/) && $scope.input.toLowerCase().match(/([aeiou])/)){
			$scope.success = true;
			return true;
		} else {
			$scope.failure = true;
			return false;
		}
	};
	
});

var appManager = AppManager();
var soc203 = angular.module('soc203', ['activities']);

appManager.configModule(soc203, {
  resources: '../resources/02/soc/03',
  competences1: 'Reconozco y describo las características físicas de Las principales formas del Paisaje.',
  competences2: 'Describe las diferentes características físicas de su entorno natural.',
  competencesSound: true,
  evidences: 'Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, actividad de evidencia, guía 1, lección 3; descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.',
  evidencesSound: true,
  farewell: 'Muy bien, ahora ya sabes más sobre el relieve y sus variadas formas.',
  routes: [
    {
      name: '/conceptualizacion-1',
      templateUrl: 'con1',
      controller: 'Con1Ctrl',
      title: 'El relieve'
    },
    {
      name: '/conceptualizacion-2',
      templateUrl: 'con2',
      controller: 'Con2Ctrl',
      title: 'El relieve'
    },
    {
      name: '/actividad-1',
      templateUrl: 'act1',
      controller: 'Act1Ctrl',
      title: 'Actividad 1'
    },
    {
      name: '/actividad-2',
      templateUrl: 'act2',
      controller: 'Act2Ctrl',
      title: 'Actividad 2'
    },
    {
      name: '/actividad-3',
      templateUrl: 'act3',
      controller: 'Act3Ctrl',
      title: 'Actividad 3'
    },
    {
      name: '/actividad-4',
      templateUrl: 'act4',
      controller: 'Act4Ctrl',
      title: 'Actividad 4'
    },
    {
      name: '/actividad-5',
      templateUrl: 'act5',
      controller: 'Act5Ctrl',
      title: 'Actividad 5'
    }
  ]
});

soc203.controller('Con1Ctrl', function ($scope) {
  $scope.data = {
    canvas: "ppales-formas-relieve",
    canvasAlt: "La imagen presenta las principales formas del relieve: Sierra, valle, meseta, cordillera, montaña y llanura",
    items: [
      {
        button: "Sierra",
        title: "La sierra",
        text: "La sierra la podemos definir como un conjunto de montañas unidas entre sí.",
        img: "sierra_2.jpg",
        imgAlt: "la imagen muestra varias montañas rocosas unidas entre sí.",
        imgTitle: "Gross Glockner 7 [Fotografía]. (2013). Obtenido de: http://www.sxc.hu/photo/1431018",
        audio: "D7",
        t: 30,
        l: 13
      },
      {
        button: "Meseta",
        title: "Meseta",
        text: "La meseta es similar a la montaña, pero se diferencia en que su cima es plana y extensa.",
        img: "meseta_2.jpg",
        imgAlt: "Imagen donde se presenta una montaña pero en su cima presenta un área extensa plana",
        imgTitle: "Braxmeier, H. (2013). Valley Of Love Tufa Plateau Plateau Viewpoint Human [Fotografía]. Obtenido de: http://pixabay.com/en/valley-of-love-tufa-plateau-plateau-73661/",
        audio: "D8",
        t: 71,
        l: 10
      },
      {
        button: "Valle",
        title: "Valle",
        text: "El valle es una zona plana del terreno que se presenta entre las montañas, esta zona es generada por el paso de un río, por ejemplo Medellín y algunos municipios cercanos.",
        img: "valle_2.jpg",
        imgAlt: "Imagen donde se muestran dos montañas y entre ellas se presenta un área plana por la cual transita un río",
        imgTitle: "Blue Green Valley River Water Mountains Alpine [fotografía]. (2012). Obtenido de: http://pixabay.com/en/blue-green-valley-river-water-66383/",
        audio: "D9",
        t: 45,
        l: 29
      },
      {
        button: "Cordillera",
        title: "Cordillera",
        text: "La cordillera es un conjunto de sierras unidas entre sí.",
        img: "cordillera_2.jpg",
        imgAlt: "Imagen donde se muestra gran cantidad de montañas unidas entre si",
        imgTitle: "Mark, D. (2013). Hawaii Mountains Sky Clouds Valley Ravine Gorge [Fotografía]. Obtenido de: http://pixabay.com/en/hawaii-mountains-sky-clouds-valley-209956/",
        audio: "D10",
        t: 28,
        l: 49
      },
      {
        button: "Montaña",
        title: "Montañas",
        text: "Las montañas son elevaciones del terreno, son empinadas y tan altas que sobresalen en el terreno.",
        img: "montana_2.jpg",
        imgAlt: "Imagen donde se muestra una montaña la cual sobresale en el terreno por su altura",
        imgTitle: "Mountainous goa [Fotografía]. (2011). Obtenido de: http://www.sxc.hu/photo/1338064",
        audio: "D11",
        t: 30,
        l: 77
      },
      {
        button: "Llanura",
        title: "Llanura",
        text: "La llanura es un área plana de la superficie de la tierra.",
        img: "llanura.jpg",
        imgAlt: "Imagen donde se muestra una extensa área plana, sobre la cual se ha establecido un cultivo de arroz",
        imgTitle: "",
        audio: "D12",
        t: 70,
        l: 80
      }
    ]
  };
});

soc203.controller('Con2Ctrl', function ($scope) {
  $scope.data = {
    items: [
      {
        number: '1',
        title: "Cañón",
        src: "D14",
        img: "canon.jpg",
        imgAlt: "Imagen donde se muestra un río pasando en medio de dos montañas muy pendientes",
        imgTitle: "Strait Mountains Canyon [Fotografía]. (2014). Obtenido de: http://pixabay.com/en/strait-mountains-canyon-245375/",
        text: "Los cañones son huecos  muy profundos  y empinados, generados por el paso de un río en el terreno."
      },
      {
        number: '2',
        title: "Isla",
        src: "D15",
        img: "isla.jpg",
        imgAlt: "Porción de tierra completamente rodeada por agua",
        imgTitle: "Schau, C. (2013). Island Beach Sand Beach Philippines [Fotografía]. Obtenido de: http://pixabay.com/en/island-beach-sand-beach-philippines-218578/",
        text: "La isla es una zona de tierra, más o menos extensa, rodeada completamente por agua."
      },
      {
        number: '3',
        title: "Golfo",
        src: "D16",
        img: "golfo.jpg",
        imgAlt: "Imagen donde se muestra parte del agua del mar entrando a la tierra",
        imgTitle: "Near Baie-Comeau [Fotografía]. (2012). Obtenido de: http://www.sxc.hu/photo/1397141",
        text: "Los golfos son amplias y profundas entradas del mar a la tierra."
      },
      {
        number: '4',
        title: "Archipiélago",
        src: "D17",
        img: "archipielago.jpg",
        imgAlt: "Imagen donde se muestra dos islas cercanas en medio del mar",
        imgTitle: "Delso, D. (2013). Islas del archipiélago Wanshan, Hong Kong [Fotografía]. Obtenido de: http://commons.wikimedia.org/wiki/File%3AIslas_del_archipi%C3%A9lago_Wanshan%2C_Hong_Kong%2C_2013-08-13%2C_DD_DD_02.JPG",
        text: "El archipiélago es un conjunto de islas que se encuentran agrupadas en una zona del mar."
      }
    ],
    imgStyle: "width: 350px;"
  };
});

soc203.controller('Act1Ctrl', function ($scope) {
  $scope.data = {
    items: [
      {
        resource: "canon_2",
        title: "Strait Mountains Canyon [Fotografía]. (2014). Obtenido de: http://pixabay.com/en/strait-mountains-canyon-245375/",
        alt: "Imagen donde se muestra un río pasando en medio de dos montañas muy pendientes",
        type: "jpg"
      },
      {
        resource: "montana_2",
        title: "Mountainous goa [Fotografía]. (2011). Obtenido de: http://www.sxc.hu/photo/1338064",
        alt: "Imagen donde se muestra una montaña la cual sobresale en el terreno por su altura",
        type: "jpg"
      },
      {
        resource: "golfo_2",
        title: "Near Baie-Comeau [Fotografía]. (2012). Obtenido de: http://www.sxc.hu/photo/1397141",
        alt: "Imagen donde se muestra parte del agua del mar entrando a la tierra",
        type: "jpg"
      },
      {
        resource: "valle_2",
        title: "Blue Green Valley River Water Mountains Alpine [fotografía]. (2012). Obtenido de: http://pixabay.com/en/blue-green-valley-river-water-66383/",
        alt: "Imagen donde se muestran dos montañas y entre ellas se presenta un área plana por la cual transita un río",
        type: "jpg"
      },
      {
        resource: "isla_2",
        title: "Islas Vírgenes Plouguerneau Mar Isla Finisterre [Fotografía]. (2013). Obtenido de: http://pixabay.com/es/islas-v%C3%ADrgenes-plouguerneau-mar-93225/",
        alt: "Porción de tierra rodeada por agua",
        type: "jpg"
      },
      {
        resource: "cordillera_2",
        title: "Mark, D. (2013). Hawaii Mountains Sky Clouds Valley Ravine Gorge [Fotografía]. Obtenido de: http://pixabay.com/en/hawaii-mountains-sky-clouds-valley-209956/",
        alt: "Imagen donde se muestra gran cantidad de montañas unidas entre si",
        type: "jpg"
      }
    ],
    minRightAnswers: 4
  };
});

soc203.controller('Act2Ctrl', function ($scope) {
  $scope.data = {
    canvas: 'relieve-arrastre',
    targets: [
      {
        text: "Meseta",
        w: 15, h: 15, t: 49, l: 10
      },
      {
        text: "Golfo",
        w: 15, h: 15, t: 67, l: 33
      },
      {
        text: "Cordillera",
        w: 15, h: 15, t: 12, l: 51
      },
      {
        text: "Valle",
        w: 15, h: 15, t: 33, l: 28
      },
      {
        text: "Isla",
        w: 15, h: 15, t: 87, l: 4
      },
      {
        text: "Montaña",
        w: 15, h: 15, t: 18, l: 73
      },
      {
        text: "Sierra",
        w: 15, h: 15, t: 14, l: 27
      },
      {
        text: "Río",
        w: 15, h: 15, t: 67, l: 63
      },
      {
        text: "Archipiélago",
        w: 15, h: 15, t: 85, l: 33
      }
    ],
    minRightAnswers: 9,
    itemsWidth: "250px",
    itemsPerRow: 1,
    borderColor: "#000"
  };
});

soc203.controller('Act3Ctrl', function ($scope) {
  $scope.data = {
    data: [
      {
        src: "puente.jpg",
        alt: "Imagen donde se muestra parte de un puente sobre un río",
        answer: false,
        title: "Brough, C. (2013). Tay Road Bridge [Fotografía]. Obtenido de: http://www.sxc.hu/photo/1429500"
      },
      {
        src: "montana_2.jpg",
        alt: "Imagen donde se muestra una montaña la cual Sobresale en el terreno por su altura",
        answer: true,
        title: "Mountainous goa [Fotografía]. (2011). Obtenido de: http://www.sxc.hu/photo/1338064"
      },
      {
        src: "archipielago_2.jpg",
        alt: "Imagen donde se muestra dos islas cercanas en medio del mar",
        answer: true,
        title: "Delso, D. (2013). Islas del archipiélago Wanshan, Hong Kong [Fotografía]. Obtenido de: http://commons.wikimedia.org/wiki/File%3AIslas_del_archipi%C3%A9lago_Wanshan%2C_Hong_Kong%2C_2013-08-13%2C_DD_DD_02.JPG"
      },
      {
        src: "valle_2.jpg",
        alt: "Imagen donde se muestran dos montañas y entre ellas se presenta un área plana por la cual transita un río",
        answer: true,
        title: "Blue Green Valley River Water Mountains Alpine [fotografía]. (2012). Obtenido de: http://pixabay.com/en/blue-green-valley-river-water-66383/"
      },
      {
        src: "cordillera_2.jpg",
        alt: "Imagen donde se muestra gran cantidad de montañas unidas entre si",
        answer: true,
        title: "Mark, D. (2013). Hawaii Mountains Sky Clouds Valley Ravine Gorge [Fotografía]. Obtenido de: http://pixabay.com/en/hawaii-mountains-sky-clouds-valley-209956/"
      },
      {
        src: "carretera.jpg",
        alt: "Imagen donde se muestra una carretera rodeada por vegetación",
        answer: false,
        title: "Van Diem, N. (2007). Road [fotografía]. Obtenido de: http://www.sxc.hu/photo/741850"
      }
    ],
    minRightAnswers: 3,
    chances: 4
  };
});

soc203.controller('Act4Ctrl', function ($scope) {
  $scope.data = {
    words: [
      {
        word: "cañon",
        img: "canon_2.jpg",
        alt: "Imagen donde se muestra un río pasando en medio de dos montañas muy pendientes",
        title: "Strait Mountains Canyon [Fotografía]. (2014). Obtenido de: http://pixabay.com/en/strait-mountains-canyon-245375/",
        number: 1,
        pos: [
          [5, 12],
          [5, 8]
        ]
      },
      {
        word: "valle",
        img: "valle_2.jpg",
        alt: "Imagen donde se muestran dos montañas y entre ellas se presenta un área plana por la cual transita un río",
        title: "Blue Green Valley River Water Mountains Alpine [fotografía]. (2012). Obtenido de: http://pixabay.com/en/blue-green-valley-river-water-66383/",
        number: 3,
        pos: [
          [5, 0],
          [5, 4]
        ]
      },
      {
        word: "cordillera",
        img: "cordillera_2.jpg",
        alt: "Imagen donde se muestra gran cantidad de montañas unidas entre si",
        title: "Mark, D. (2013). Hawaii Mountains Sky Clouds Valley Ravine Gorge [Fotografía]. Obtenido de: http://pixabay.com/en/hawaii-mountains-sky-clouds-valley-209956/",
        number: 2,
        pos: [
          [7, 2],
          [7, 11]
        ]
      },
      {
        word: "meseta",
        img: "meseta_2.jpg",
        alt: "Imagen donde se presenta una montaña pero en su cima presenta un área extensa plana",
        title: "Braxmeier, H. (2013). Valley Of Love Tufa Plateau Plateau Viewpoint Human [Fotografía]. Obtenido de: http://pixabay.com/en/valley-of-love-tufa-plateau-plateau-73661/",
        number: 4,
        pos: [
          [0, 1],
          [5, 1]
        ]
      },
      {
        word: "sierra",
        img: "sierra_2.jpg",
        alt: "Imagen donde se muestran varias montañas unidas entre si",
        title: "Braxmeier, H. (2013). Schochen Arriba Caminata De Montaña [Fotografía]. Obtenido de: http://pixabay.com/es/schochen-arriba-caminata-175329/",
        number: 5,
        pos: [
          [3, 4],
          [8, 4]
        ]
      },
      {
        word: "montaña",
        img: "montana_2.jpg",
        alt: "Imagen donde se muestra una montaña la cual Sobresale en el terreno por su altura",
        title: "Mountainous goa [Fotografía]. (2011). Obtenido de: http://www.sxc.hu/photo/1338064",
        number: 6,
        pos: [
          [1, 11],
          [7, 11]
        ]
      }
    ]
  };
});

soc203.controller('Act5Ctrl', function ($scope) {
  $scope.options = {
    data: [
      {
        src: "cordillera_2",
        alt: "Imagen donde se muestra gran cantidad de montañas unidas entre si",
        title: "Mark, D. (2013). Hawaii Mountains Sky Clouds Valley Ravine Gorge [Fotografía]. Obtenido de: http://pixabay.com/en/hawaii-mountains-sky-clouds-valley-209956/",
        text: "Es la unión de varias montañas entre sí, que se extiende por grandes distancias en diferentes partes de mundo."
      },
      {
        src: "montana_2",
        alt: "Imagen donde se muestra una montaña la cual sobresale en el terreno por su altura",
        title: "Mountainous goa [Fotografía]. (2011). Obtenido de: http://www.sxc.hu/photo/1338064",
        text: "Es una enorme superficie de la Tierra con pendientes empinadas y altas."
      },
      {
        src: "rio",
        alt: "Imagen donde se muestra un río rodeado de vegetación",
        title: "Kali River Dandeli India [fotografía]. (2014). Obtenido de: http://pixabay.com/es/kali-river-dandeli-india-246356/",
        text: "Es una corriente natural de agua que desemboca en el mar, la cual ayuda a dar forma al relieve."
      },
      {
        src: "valle_2",
        alt: "Imagen donde se muestran dos montañas y entre ellas se presenta un área plana por la cual transita un río",
        title: "Blue Green Valley River Water Mountains Alpine [fotografía]. (2012). Obtenido de: http://pixabay.com/en/blue-green-valley-river-water-66383/",
        text: "Zona plana que se genera entre montañas por el paso de un río."
      },
      {
        src: "volcan",
        alt: "Imagen de una montaña de la cual sale humo",
        title: "Mills, G. (2007). Volcanic Mt. Ngauruhoe [fotografía]. Obtenido de: http://www.sxc.hu/photo/730262",
        text: "Es una estructura de la tierra que expulsa lava, cenizas y gases de su interior."
      }
    ],
    targetStyles: "padding-top: 150px;",
    minRightAnswers: 3,
    randomItems: true
  };
});

var appManager = AppManager();
var soc204 = angular.module('soc204', ['activities']);

appManager.configModule(soc204, {
	resources: '../resources/02/soc/04',
	competences1: 'Identifico y describo algunos elementos que permiten reconocerme como miembro de un grupo regional o de una nación (territorio, lengua, costumbres, símbolos patrios).',
	competences2: 'Identifica algunas características de los departamentos de nuestro país.',
	competencesSound: true,
	evidences: 'Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, actividad de evidencia, guía 1, lección 4; descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.',
	evidencesSound: true,
	farewell: 'Muy bien, ahora ya sabes más sobre los departamentos de Colombia.',
	routes: [
		{ 
			name: '/conceptualizacion-1', 
			templateUrl: 'con1', 
			controller: 'Con1Ctrl',
			title: 'Mi Colombia'
		},
		{ 
			name: '/conceptualizacion-2', 
			templateUrl: 'con2', 
			controller: 'Con2Ctrl',
			title: 'Mi Colombia'
		},
		{ 
			name: '/actividad-1-1', 
			templateUrl: 'act1_1', 
			controller: 'Act1_1Ctrl',
			title: 'Actividad 1'
		},
		{ 
			name: '/actividad-1-2', 
			templateUrl: 'act1_2', 
			controller: 'Act1_2Ctrl',
			title: 'Actividad 1'
		},
		{ 
			name: '/actividad-1-3', 
			templateUrl: 'act1_3', 
			controller: 'Act1_3Ctrl',
			title: 'Actividad 1'
		},
		{ 
			name: '/actividad-1-4', 
			templateUrl: 'act1_4', 
			controller: 'Act1_4Ctrl',
			title: 'Actividad 1'
		},
		{ 
			name: '/actividad-2', 
			templateUrl: 'act2', 
			controller: 'Act2Ctrl',
			title: 'Actividad 2'
		},
		{ 
			name: '/actividad-3', 
			templateUrl: 'act3', 
			controller: 'Act3Ctrl',
			title: 'Actividad 3'
		},
		{ 
			name: '/actividad-4', 
			templateUrl: 'act4', 
			controller: 'Act4Ctrl',
			title: 'Actividad 4'
		},
		{ 
			name: '/actividad-5', 
			templateUrl: 'act5', 
			controller: 'Act5Ctrl',
			title: 'Actividad 5'
		}
	]
});

soc204.controller('Con1Ctrl', function($scope){
	$scope.data = {};
});

soc204.controller('Con2Ctrl', function($scope){
	$scope.data = {
		items: [
			{
				title: "Amazonas",
				text: "Es el departamento más extenso y está cubierto en su mayoría por la selva amazónica.",
				img1: "amazonas.png",
				img1Alt: "Mapa de Colombia dividido en sus departamentos, en la parte inferior resalta con color el departamento del Amazonas.",
				img2: "capital-amazonas.png",
				img2Alt: "Mapa del departamento del Amazonas, donde se indica su capital Leticia.",
				audio: "D8"
			},
			{
				title: "Antioquia",
				text: "Por su economía y tamaño de población, es el segundo departamento más importante, después de Bogotá.",
				img1: "antioquia.png",
				img1Alt: "Texto alternativo: Mapa de Colombia dividido en sus departamentos, en la parte superior izquierda se resalta con color el departamento de Antioquia",
				img2: "capital-antioquia.png",
				img2Alt: "Mapa del departamento de Antioquia, donde se indica su capital Medellín",
				audio: "D9"
			},
			{
				title: "Atlántico",
				text: "Este departamento limita con el océano Atlántico, lo que favorece su economía y cultura.",
				img1: "atlantico.png",
				img1Alt: "Mapa de Colombia dividido en sus departamentos, en la parte superior izquierda se resalta con color el departamento de Atlántico",
				img2: "capital-atlantico.png",
				img2Alt: "Mapa del departamento del Atlántico, donde se indica su capital Barranquilla",
				audio: "D10"
			},
			{
				title: "Cundinamarca",
				text: "Tiene como capital a Bogotá D.C., ciudad importante para el país, porque allí funcionan el gobierno central y se toman las decisiones más importantes a nivel político y económico para las regiones",
				img1: "cundinamarca.png",
				img1Alt: "Mapa de Colombia dividido en sus departamentos, en el centro se resalta con color el departamento de Cundinamarca",
				img2: "capital-cundinamarca.png",
				img2Alt: "Mapa del departamento de Cundinamarca, donde se indica su capital Bogotá D.C",
				audio: "D11"
			},
			{
				title: "Valle del Cauca",
				text: "Este departamento se caracteriza por tener una gran cantidad de recursos naturales como la caña de azúcar.",
				img1: "valle-del-cauca.png",
				img1Alt: "Mapa de Colombia dividido en sus departamentos, en La parte media del lado izquierdo se resalta con color el departamento de Valle del Cauca",
				img2: "capital-valle-del-cauca.png",
				img2Alt: "Mapa del departamento del Valle del Cauca, donde se indica su capital Cali",
				audio: "D12"
			},
			{
				title: "Chocó",
				text: "Gran parte del territorio de este departamento, está compuesto por selva. Sobresale por ser el único departamento de Colombia con costas en los océanos Pacífico y Atlántico.",
				img1: "choco.png",
				img1Alt: "Mapa de Colombia dividido en sus departamentos, en La parte media del lado izquierdo se resalta con color el departamento de Chocó",
				img2: "capital-choco.png",
				img2Alt: "Mapa del departamento del Chocó, donde se indica su capital Quibdó",
				audio: "D13"
			},
			{
				title: "Meta",
				text: "Este departamento se caracteriza por ser uno de los más extensos, posee una gran riqueza hídrica, sus tierras están dedicadas a la minería, la ganadería y la actividad agrícola.",
				img1: "meta.png",
				img1Alt: "Mapa de Colombia dividido en sus departamentos, en la parte media se resalta con color el departamento de Meta",
				img2: "capital-meta.png",
				img2Alt: "Mapa del departamento del Meta, donde se indica su capital Villavicencio",
				audio: "D14"
			},
			{
				title: "San Andrés",
				text: "Es el único departamento insular de Colombia, su mar sobresale por su colorido, razón por la cual es llamado el mar de los siete colores.",
				img1: "san-andres.png",
				img1Alt: "Mapa de Colombia dividido en sus departamentos, en La parte superior del lado izquierdo se resalta con color el departamento de San Andrés y Providencia",
				img2: "capital-san-andres.png",
				img2Alt: "Mapa del departamento San Andrés y Providencia, donde se indica su capital San Andrés",
				audio: "D15"
			}
		],
	};
});

soc204.controller('Act1_1Ctrl', function($scope){
	$scope.data = {
		headings: [
			'Departamento',
			'Capital'
		],
		items: [
			{
				name: "Amazonas",
				empty: "Leticia",
				audio: "capitales/leticia"
			},
			{
				name: "Antioquia",
				empty: "Medellín",
				audio: "capitales/medellin"
			},
			{
				name: "Arauca",
				empty: "Arauca",
				audio: "capitales/arauca"
			},
			{
				name: "Atlántico",
				empty: "Barranquilla",
				audio: "capitales/barranquilla"
			},
			{
				name: "Bolívar",
				empty: "Cartagena de Indias",
				audio: "capitales/cartagena"
			},
			{
				name: "Boyacá",
				empty: "Tunja",
				audio: "capitales/tunja"
			},
			{
				name: "Caldas",
				empty: "Manizales",
				audio: "capitales/manizales"
			},
			{
				name: "Caquetá",
				empty: "Florencia",
				audio: "capitales/florencia"
			}
		]

	};
});

soc204.controller('Act1_2Ctrl', function($scope){
	$scope.data = {
		headings: [
			'Departamento',
			'Capital'
		],
		items: [
			{
				name: "Casanare",
				empty: "Yopal",
				audio: "capitales/yopal"
			},
			{
				name: "Cauca",
				empty: "Popayán",
				audio: "capitales/popayan"
			},
			{
				name: "Cesar",
				empty: "Valledupar",
				audio: "capitales/valledupar"
			},
			{
				name: "Chocó",
				empty: "Quibdó",
				audio: "capitales/quibdo"
			},
			{
				name: "Córdoba",
				empty: "Montería",
				audio: "capitales/monteria"
			},
			{
				name: "Cundinamarca",
				empty: "Bogotá D.C.",
				audio: "capitales/bogota"
			},
			{
				name: "Guainía",
				empty: "Inírida",
				audio: "capitales/inirida"
			},
			{
				name: "Guaviare",
				empty: "San José del Guaviare",
				audio: "capitales/san_jose_guaviare"
			}
		]
	};
});

soc204.controller('Act1_3Ctrl', function($scope){
	$scope.data = {
		headings: [
			'Departamento',
			'Capital'
		],
		items: [
			{
				name: "Guajira",
				empty: "Riohacha",
				audio: "capitales/riohacha"
			},
			{
				name: "Huila",
				empty: "Neiva",
				audio: "capitales/neiva"
			},
			{
				name: "Magdalena",
				empty: "Santa Marta",
				audio: "capitales/santa_marta"
			},
			{
				name: "Meta",
				empty: "Villavicencio",
				audio: "capitales/villavicencio"
			},
			{
				name: "Nariño",
				empty: "San Juan de Pasto",
				audio: "capitales/san_juan_pasto"
			},
			{
				name: "Norte de Santander",
				empty: "Cúcuta",
				audio: "capitales/cucuta"
			},
			{
				name: "Putumayo",
				empty: "Mocoa",
				audio: "capitales/mocoa"
			},
			{
				name: "Quindío",
				empty: "Armenia",
				audio: "capitales/armenia"
			}
		]
	};
});

soc204.controller('Act1_4Ctrl', function($scope){
	$scope.data = {
		headings: [
			'Departamento',
			'Capital'
		],
		items: [
			{
				name: "Risaralda",
				empty: "Pereira",
				audio: "capitales/pereira"
			},
			{
				name: "San Andrés",
				empty: "San Andrés",
				audio: "capitales/san_andres"
			},
			{
				name: "Santander",
				empty: "Bucaramanga",
				audio: "capitales/bucaramanga"
			},
			{
				name: "Sucre",
				empty: "Sincelejo",
				audio: "capitales/sincelejo"
			},
			{
				name: "Tolima",
				empty: "Ibagué",
				audio: "capitales/ibague"
			},
			{
				name: "Valle del Cauca",
				empty: "Cali",
				audio: "capitales/cali"
			},
			{
				name: "Vaupés",
				empty: "Mitú",
				audio: "capitales/mitu"
			},
			{
				name: "Vichada",
				empty: "Puerto Carreño",
				audio: "capitales/puerto_carreno"
			}
		]
	};
});

soc204.controller('Act2Ctrl', function($scope){
	$scope.data = {
		img: "mapa_cuadros.png",
		alt: "imagen donde se muestra el mapa de Colombia con su división política",
		minRightAnswers: 20,
		items: [
			{
				name: "Amazonas",
				audio: "departamentos/amazonas",
				t: 81,
				l: 62
			},
			{
				name: "Antioquia",
				audio: "departamentos/antioquia",
				t: 36,
				l: 30
			},
			{
				name: "Arauca",
				audio: "departamentos/arauca",
				t: 35,
				l: 64
			},
			{
				name: "Atlántico",
				audio: "departamentos/atlantico",
				t: 13.7,
				l: 14.5
			},
			{
				name: "Bolívar",
				audio: "departamentos/bolivar",
				t: 25,
				l: 39.3
			},
			{
				name: "Boyacá",
				audio: "departamentos/boyaca",
				t: 42.2,
				l: 47.6
			},
			{
				name: "Caldas",
				audio: "departamentos/caldas",
				t: 41.9,
				l: 1.9
			},
			{
				name: "Caquetá",
				audio: "departamentos/caqueta",
				t: 71,
				l: 44.5
			},
			{
				name: "Casanare",
				audio: "departamentos/casanare",
				t: 42,
				l: 60
			},
			{
				name: "Cauca",
				audio: "departamentos/cauca",
				t: 61,
				l: 20.6
			},
			{
				name: "Chocó",
				audio: "departamentos/choco",
				t: 33.4,
				l: 17
			},
			{
				name: "Córdoba",
				audio: "departamentos/cordoba",
				t: 26.6,
				l: 27.7
			},
			{
				name: "Cundinamarca",
				audio: "departamentos/cundinamarca",
				t: 46.5,
				l: 40
			},
			{
				name: "Guainía",
				audio: "departamentos/guainia",
				t: 58,
				l: 80
			},
			{
				name: "Guaviare",
				audio: "departamentos/guaviare",
				t: 63,
				l: 56
			},
			{
				name: "Guajira",
				audio: "departamentos/guajira",
				t: 9,
				l: 50
			},
			{
				name: "Huila",
				audio: "departamentos/huila",
				t: 58.6,
				l: 31
			},
			{
				name: "Magdalena",
				audio: "departamentos/magdalena",
				t: 16,
				l: 37.7
			},
			{
				name: "Meta",
				audio: "departamentos/meta",
				t: 54.6,
				l: 50
			},
			{
				name: "Nariño",
				audio: "departamentos/narino",
				t: 65.8,
				l: 13
			},
			{
				name: "Putumayo",
				audio: "departamentos/putumayo",
				t: 72.6,
				l: 30
			},
			{
				name: "Quindío",
				audio: "departamentos/quindio",
				t: 50.4,
				l: 1.8
			},
			{
				name: "Risaralda",
				audio: "departamentos/risaralda",
				t: 46.2,
				l: 0.9
			},
			{
				name: "San Andrés",
				audio: "departamentos/san_andres",
				t: 10,
				l: 3.4
			},
			{
				name: "Santander",
				audio: "departamentos/santander",
				t: 35.2,
				l: 46
			},
			{
				name: "Sucre",
				audio: "departamentos/sucre",
				t: 23.2,
				l: 33.2
			},
			{
				name: "Tolima",
				audio: "departamentos/tolima",
				t: 51.5,
				l: 32.6
			},
			{
				name: "Valle del Cauca",
				audio: "departamentos/valle_cauca",
				t: 53.7,
				l: 23.7
			},
			{
				name: "Vaupés",
				audio: "departamentos/vaupes",
				t: 69,
				l: 67
			},
			{
				name: "Vichada",
				audio: "departamentos/vichada",
				t: 46,
				l: 76
			},
			{
				name: "El Cesar",
				audio: "departamentos/cesar",
				t: 16.9,
				l: 44.6
			},
			{
				name: "Norte de Santander",
				audio: "departamentos/norte_santander",
				t: 27,
				l: 48.7
			}
		]
	};
});

soc204.controller('Act3Ctrl', function($scope){
	$scope.data = {
		img: "mapa_cuadros.png",
		alt: "imagen donde se muestra el mapa de Colombia con su división política",
		minRightAnswers: 20,
		items: [
			{
				name: "Leticia",
				audio: "capitales/leticia",
				t: 81,
				l: 62
			},
			{
				name: "Medellín",
				audio: "capitales/medellin",
				t: 36,
				l: 30
			},
			{
				name: "Arauca",
				audio: "capitales/arauca",
				t: 35,
				l: 64
			},
			{
				name: "Barranquilla",
				audio: "capitales/barranquilla",
				t: 13.7,
				l: 14.5
			},
			{
				name: "Cartagena",
				audio: "capitales/cartagena",
				t: 25,
				l: 39.3
			},
			{
				name: "Tunja",
				audio: "capitales/tunja",
				t: 42.2,
				l: 47.6
			},
			{
				name: "Manizales",
				audio: "capitales/manizales",
				t: 41.9,
				l: 1.9
			},
			{
				name: "Florencia",
				audio: "capitales/florencia",
				t: 71,
				l: 44.5
			},
			{
				name: "Yopal",
				audio: "capitales/yopal",
				t: 42,
				l: 60
			},
			{
				name: "Popayán",
				audio: "capitales/popayan",
				t: 61,
				l: 20.6
			},
			{
				name: "Quibdó",
				audio: "capitales/quibdo",
				t: 33.4,
				l: 17
			},
			{
				name: "Montería",
				audio: "capitales/monteria",
				t: 26.6,
				l: 27.7
			},
			{
				name: "Bogotá D.C.",
				audio: "capitales/bogota",
				t: 46.5,
				l: 40
			},
			{
				name: "Puerto Inírida",
				audio: "capitales/inirida",
				t: 58,
				l: 80
			},
			{
				name: "Riohacha",
				audio: "capitales/riohacha",
				t: 9,
				l: 50
			},
			{
				name: "Neiva",
				audio: "capitales/neiva",
				t: 58.6,
				l: 31
			},
			{
				name: "Santa Marta",
				audio: "capitales/santa_marta",
				t: 16,
				l: 37.7
			},
			{
				name: "Villavicencio",
				audio: "capitales/villavicencio",
				t: 54.6,
				l: 50
			},
			{
				name: "Pasto",
				audio: "capitales/pasto",
				t: 65.8,
				l: 13
			},
			{
				name: "Mocoa",
				audio: "capitales/mocoa",
				t: 72.6,
				l: 30
			},
			{
				name: "Armenia",
				audio: "capitales/armenia",
				t: 50.4,
				l: 1.8
			},
			{
				name: "Pereira",
				audio: "capitales/pereira",
				t: 46.2,
				l: 0.9
			},
			{
				name: "San Andrés",
				audio: "capitales/san_andres",
				t: 10,
				l: 3.4
			},
			{
				name: "Bucaramanga",
				audio: "capitales/bucaramanga",
				t: 35.2,
				l: 46
			},
			{
				name: "Sincelejo",
				audio: "capitales/sincelejo",
				t: 23.2,
				l: 33.2
			},
			{
				name: "Ibagué",
				audio: "capitales/ibague",
				t: 51.5,
				l: 32.6
			},
			{
				name: "Cali",
				audio: "capitales/cali",
				t: 53.7,
				l: 23.7
			},
			{
				name: "Mitú",
				audio: "capitales/mitu",
				t: 69,
				l: 67
			},
			{
				name: "Puerto Carreño",
				audio: "capitales/puerto_carreno",
				t: 46,
				l: 76
			},
			{
				name: "Valledupar",
				audio: "capitales/valledupar",
				t: 16.9,
				l: 44.6
			},
			{
				name: "Cúcuta",
				audio: "capitales/cucuta",
				t: 27,
				l: 48.7
			},
			{
				name: "San José del Guaviare",
				audio: "capitales/san_jose_guaviare",
				t: 63,
				l: 56
			}
		]
	};
});

soc204.controller('Act4Ctrl', function ($scope) {
	$scope.data = {
		canvas: 'mapa_act4',
		canvasAlt: 'Mapa de Colombia donde se resaltan cinco departamentos (Atlántico, Antioquia, Valle del Cauca, Amazonas y Cundinamarca',
		targets: [
			{ 
				src: "img_amazonas",
				extension: "jpg",
				targetPos: { w: 39, h: 21.8, t: 71, l: 38 },
				innerPos: { w: 70, h: 54, t: -53, l: 71 }
			},
			{ 
				src: "img_antioquia",
				extension: "jpg",
				targetPos: { w: 25.2, h: 18.5, t: 26, l: 17 },
				innerPos: { w: 128, h: 54, t: -51, l: -92 }
			},
			{ 
				src: "img_valle",
				extension: "jpg",
				targetPos: { w: 15.4, h: 12.7, t: 46, l: 14.8 },
				innerPos: { w: 178, h: 54, t: 77, l: -153 }
			},
			{ 
				src: "img_cundinamarca",
				extension: "jpg",
				targetPos: { w: 20.3, h: 17.7, t: 41.9, l: 34 },
				innerPos: { w: 135, h: 54, t: -91, l: 57 }
			},
			{ 
				src: "img_atlantico",
				extension: "jpg",
				targetPos: { w: 15.5, h: 13.5, t: 9, l: 25 },
				innerPos: { w: 176, h: 54, t: -60, l: 62 }
			}
		],
		chances: 10,
		minRightAnswers: 3,
		itemsContainerHeight: '230px'
	};
});

soc204.controller('Act5Ctrl', function ($scope) {
	$scope.inputs = [];
	$scope.$root.isNextEnabled = true; // Activamos el siguiente link

	// llenamos el array
	for(var i = 0; i < 5; i++) {
		$scope.inputs.push({
			left: '',
			right: ''
		});
	}

	// antes de ir a la siguiente actividad, verificamos
	$scope.$root.beforeGoNext = function () {
		var error = false,
			str = '';

		// Recorremos los elementos, buscando que cumplan con las condiciones
		// Al menos una mayúscula, una minúscula y 4 letras
		$scope.inputs.forEach(function(item){
			str = item.left.toLowerCase();
			if( !( str.match(/([bcdfghjklmnñpqrstvwxyz])/) && str.match(/([aeiou])/) && str.length >= 4 ) ) error = true;

			str = item.right.toLowerCase();
			if( !( str.match(/([bcdfghjklmnñpqrstvwxyz])/) && str.match(/([aeiou])/) && str.length >= 4 ) ) error = true;
		});

		if(error){
			// fracado
			$scope.failure = true;
			return false;
		} else {
			// éxito
			$scope.success = true;
			return true;
		}
	};
	
});

var appManager = AppManager();
var soc205 = angular.module('soc205', ['activities']);

appManager.configModule(soc205, {
	resources: '../resources/02/soc/05',
	competences1: 'Reconozco algunas normas que han sido construidas socialmente y distingo aquellas en cuya construcción y modificación puedo participar (normas del hogar, manual de convivencia escolar, Código de Tránsito…).',
	competences2: 'Reconoce algunas normas de tránsito en medios de transporte que permiten el desplazamiento de las personas del lugar donde viven.',
	competencesSound: true,
	evidences: 'Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, actividad de evidencia, guía 1, lección 5; descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.',
	evidencesSound: true,
	farewell: 'Muy bien, ahora ya conoces los medios de transporte y su clasificación.',
	routes: [
		{ 
			name: '/conceptualizacion-1', 
			templateUrl: 'con1', 
			controller: 'Con1Ctrl',
			title: 'Medios de transporte'
		},
		{ 
			name: '/conceptualizacion-2', 
			templateUrl: 'con2', 
			controller: 'Con2Ctrl',
			title: 'Medios de transporte'
		},
		{ 
			name: '/conceptualizacion-3', 
			templateUrl: 'con3', 
			controller: 'Con3Ctrl',
			title: 'Medios de transporte'
		},
		{ 
			name: '/conceptualizacion-4', 
			templateUrl: 'con4', 
			controller: 'Con4Ctrl',
			title: 'Medios de transporte'
		},
		{ 
			name: '/conceptualizacion-5', 
			templateUrl: 'con5', 
			controller: 'Con5Ctrl',
			title: 'Medios de transporte'
		},
		{ 
			name: '/conceptualizacion-6', 
			templateUrl: 'con6', 
			controller: 'Con6Ctrl',
			title: 'Medios de transporte'
		},
		{ 
			name: '/actividad-1', 
			templateUrl: 'act1', 
			controller: 'Act1Ctrl',
			title: 'Actividad 1'
		},
		{ 
			name: '/actividad-2', 
			templateUrl: 'act2', 
			controller: 'Act2Ctrl',
			title: 'Actividad 2'
		},
		{ 
			name: '/actividad-3', 
			templateUrl: 'act3', 
			controller: 'Act3Ctrl',
			title: 'Actividad 3'
		},
		{ 
			name: '/actividad-4', 
			templateUrl: 'act4', 
			controller: 'Act4Ctrl',
			title: 'Actividad 4'
		},
		{ 
			name: '/actividad-5', 
			templateUrl: 'act5', 
			controller: 'Act5Ctrl',
			title: 'Actividad 5'
		},
		{ 
			name: '/actividad-6', 
			templateUrl: 'act6', 
			controller: 'Act6Ctrl',
			title: 'Actividad 6'
		},
		{ 
			name: '/actividad-7', 
			templateUrl: 'act7', 
			controller: 'Act7Ctrl',
			title: 'Actividad 7'
		}
	]
});

soc205.controller('Con1Ctrl', function($scope){
	$scope.data = {
		items: [
			{	
				number:'1',
				title: "Autobús",
				src: "D7",
				img: "autobus2.png",
				imgAlt: "autobús desplazándose por una vía",
				list: [
					"Esperar el autobús en la parada correspondiente, haciendo la fila por orden de llegada.",
					"En los autobuses se debe permanecer sentado y por ningún motivo, sacar las manos ni la cabeza por las ventanas."
				]
			},
			{	
				number:'2',
				title: "Carro",
				src: "D8",
				img: "carro-2.png",
				imgAlt: "carro de color naranja desplazándose por la carretera.",
				list: [
					"Los niños deben ir sentados en el puesto trasero, si es un bebé debe ir acompañado por un adulto.",
					"Por ningún motivo, debes sacar las manos ni la cabeza por las ventanas."
				]
			},
			{	
				number:'3',
				title: "Metro",
				src: "D9",
				img: "metro-2.png",
				imgAlt: "Metro desplazándose por la vía",
				list: [
					"Los niños, deben ir de la mano de sus padres o del adulto que vaya con ellos.",
					"Se debe esperar detrás de la raya amarilla pintada en el piso, hasta que el tren se detenga y abra sus puertas.",
					"Antes de subir, debes esperar que bajen los pasajeros que se quedan en esa estación, esto debe hacerse rápido y ordenadamente."
				]
			},
			{	
				number:'4',
				title: "Avión",
				src: "D10",
				img: "avion-2.png",
				imgAlt: "Avión volando por el aire",
				list: [
					"Usar el cinturón de seguridad, el cual hace parte del asiento, se debe usar al momento de despegar y aterrizar.",
					"Se debe apagar y no utilizar el celular, mientras se viaja en avión."
				]
			}
		],
		imgStyle: "width: 350px;"
	};
});

soc205.controller('Con2Ctrl', function($scope){
	$scope.data = {
		items: [
			{	
				number:'1',
				src: "i1",
				alt: "moto"
			},
			{	
				number:'2',
				alt: "automóvil",
				src: "i2"
			},
			{	
				number:'3',
				alt: "barco de vela",
				src: "i3"
			},
			{	
				number:'4',
				alt: "autobus",
				src: "i4"
			},
			{	
				number:'5',
				alt: "avión",
				src: "i5"
			},
			{	
				number:'6',
				alt: "bicicleta",
				src: "i6"
			}
		]
	};
});

soc205.controller('Con3Ctrl', function ($scope) {
	$scope.data = [
		{ 
			resource: "t_aereos",
			text: "Aéreos",
			hideImg: true,
			textClass: "btn-primary"
		},
		{ 
			resource: "t_terrestres",
			text: "Terrestres",
			hideImg: true,
			textClass: "btn-primary"
		},
		{ 
			resource: "t_acuaticos",
			text: "Acuáticos",
			hideImg: true,
			textClass: "btn-primary"
		}
	]
});

soc205.controller('Con4Ctrl', function ($scope) {
	$scope.data = [
		{ 
			resource: "avion",
			alt: "Avión",
			title: "Air Aircraft Airline Airliner Airplane Aviation [Fotografía]. (2013). Obtenido de: http://pixabay.com/en/air-aircraft-airline-airliner-84602/",
			type: "jpg"
		},
		{ 
			resource: "helicoptero",
			alt: "helicóptero",
			title: "Braxmeier, H. (2013). Helicopter surveillance camera camera monitoring [fotografía]. Obtenido de: http://pixabay.com/en/helicopter-surveillance-camera-167598/",
			type: "jpg"
		},
		{ 
			resource: "teleferico",
			alt: "teleférico",
			title: "Aerial air alpine cabin cable car Gondola [Fotografía]. (2012). Obtenido de: http://pixabay.com/en/aerial-air-alpine-cabin-cable-car-15960/",
			type: "jpg"
		},
		{ 
			resource: "globo",
			alt: "globo",
			title: "Hot air balloon balloon colorful wind [Fotografía]. (2011). Obtenido de: http://pixabay.com/en/hot-air-balloon-balloon-colorful-4761/",
			type: "jpg"
		}
	]
});

soc205.controller('Con5Ctrl', function ($scope) {
	$scope.data = [
		{ 
			resource: "carro",
			alt: "Carro particular",
			title: "Lievonen, M. (2007). Speeding car [Fotografía]. Obtenido de: http://www.sxc.hu/photo/798979",
			type: "jpg"
		},
		{ 
			resource: "bus",
			alt: "Bus",
			title: "Pelc, M. (2007). Parking [Fotografía]. Obtenido de: http://www.sxc.hu/photo/826475",
			type: "jpg"
		},
		{ 
			resource: "bicicleta",
			alt: "bicicleta",
			title: "Ramos, A. (2013). Fast Bike Running [Fotografía]. Obtenido de: http://pixabay.com/en/fast-bike-running-166067/",
			type: "jpg"
		},
		{ 
			resource: "moto",
			alt: "moto",
			title: "Motorcycling in the country 1 [Fotografía]. (2005). Obtenido de: http://www.sxc.hu/photo/288537",
			type: "jpg"
		},
		{ 
			resource: "tren",
			alt: "tren",
			title: "Szkurlatowski, K. (2008). Train - shuttle service 1 [Fotografía]. Obtenido de: http://www.sxc.hu/photo/1030473",
			type: "jpg"
		}
	]
});

soc205.controller('Con6Ctrl', function ($scope) {
	$scope.data = [
		{ 
			resource: "barco",
			alt: "barco",
			title: "Esplendor De Los Mares Crucero Caribe [Fotografía]. (2013). Obtenido de: http://pixabay.com/es/esplendor-de-los-mares-crucero-210328/",
			type: "jpg"
		},
		{ 
			resource: "lancha",
			alt: "lancha",
			title: "Boat Sea Caribbean Ocean Ship [Fotografía]. (2013). Obtenido de: http://pixabay.com/en/boat-sea-caribbean-ocean-ship-218928/",
			type: "jpg"
		},
		{ 
			resource: "submarino",
			alt: "submarino",
			title: "Kleist, U. (2005). U461 submarine @ Peenemuende H [Fotografía]. Obtenido en: http://www.sxc.hu/photo/353653",
			type: "jpg"
		}
	]
});

soc205.controller('Act1Ctrl', function ($scope) {
	$scope.data = {
		items: [
			{ 
				resource: "teleferico",
				alt: "teleférico",
				audio: "t_aereos",
				title: "Aerial air alpine cabin cable car Gondola [Fotografía]. (2012). Obtenido de: http://pixabay.com/en/aerial-air-alpine-cabin-cable-car-15960/",
				type: "jpg"
			},
			{ 
				resource: "barco",
				alt: "barco",
				audio: "t_acuaticos",
				title: "Esplendor De Los Mares Crucero Caribe [Fotografía]. (2013). Obtenido de: http://pixabay.com/es/esplendor-de-los-mares-crucero-210328/",
				type: "jpg"
			},
			{ 
				resource: "bicicleta",
				alt: "bicicleta",
				audio: "t_terrestres",
				title: "Ramos, A. (2013). Fast Bike Running [Fotografía]. Obtenido de: http://pixabay.com/en/fast-bike-running-166067/",
				type: "jpg"
			}
		],
		chances: 3,
		minRightAnswers: 2
	};
});

soc205.controller('Act2Ctrl', function ($scope) {
	$scope.data = {
		data: [
			{
				src: "metro.jpg",
				alt: "Metro",
				title: "La imagen es cortesía de Diana Marcela Restrepo T, Diseñadora Mediacional del programa “Primaria Incluyente”"
			},
			{ 
				src: "globo.jpg",
				alt: "globo",
				title: "Hot air balloon balloon colorful wind [Fotografía]. (2011). Obtenido de: http://pixabay.com/en/hot-air-balloon-balloon-colorful-4761/"
			},
			{ 
				src: "bus.jpg",
				alt: "Bus",
				title: "Pelc, M. (2007). Parking [Fotografía]. Obtenido de: http://www.sxc.hu/photo/826475"
			},
			{ 
				src: "carro.jpg",
				alt: "Carro particular",
				title: "Lievonen, M. (2007). Speeding car [Fotografía]. Obtenido de: http://www.sxc.hu/photo/798979"
			},
			{ 
				src: "submarino.jpg",
				alt: "submarino",
				title: "Kleist, U. (2005). U461 submarine @ Peenemuende H [Fotografía]. Obtenido en: http://www.sxc.hu/photo/353653"
			},
			{ 
				src: "moto.jpg",
				alt: "moto",
				title: "Motorcycling in the country 1 [Fotografía]. (2005). Obtenido de: http://www.sxc.hu/photo/288537"
			}
		],
		minRightAnswers: 1,
		itemsPerRow: 3,
		priority: true
	};
});

soc205.controller('Act3Ctrl', function ($scope) {
	$scope.data = {
		items: [
			{
				resource: "metro",
				audio: "a_tren",
				alt: "Metro",
				title: "La imagen es cortesía de Diana Marcela Restrepo T, Diseñadora Mediacional del programa “Primaria Incluyente”",
				type: "jpg"
			},
			{ 
				resource: "avion",
				audio: "a_avion",
				alt: "Avión",
				title: "Air Aircraft Airline Airliner Airplane Aviation [Fotografía]. (2013). Obtenido de: http://pixabay.com/en/air-aircraft-airline-airliner-84602/",
				type: "jpg"
			},
			{ 
				resource: "moto",
				audio: "a_moto",
				alt: "moto",
				title: "Motorcycling in the country 1 [Fotografía]. (2005). Obtenido de: http://www.sxc.hu/photo/288537",
				type: "jpg"
			},
			{
				resource: "opcion1",
				audio: "a_teleferico",
				alt: "metrocable",
				title: "La imagen es cortesía de Diana Marcela Restrepo T, Diseñadora Mediacional del programa “Primaria Incluyente”.",
				type: "jpg"
			},
			{ 
				resource: "bus",
				audio: "a_autobus",
				alt: "Bus",
				title: "Pelc, M. (2007). Parking [Fotografía]. Obtenido de: http://www.sxc.hu/photo/826475",
				type: "jpg"
			},
			{ 
				resource: "bicicleta",
				audio: "a_bicicleta",
				alt: "bicicleta",
				title: "Ramos, A. (2013). Fast Bike Running [Fotografía]. Obtenido de: http://pixabay.com/en/fast-bike-running-166067/",
				type: "jpg"
			}
		],
		chances: 6,
		minRightAnswers: 4
	};
});

soc205.controller('Act4Ctrl', function($scope){
	$scope.data = {
		words: [
			{
				word: "submarino",
				img: "submarino.jpg",
				alt: "submarino",
				title: "Kleist, U. (2005). U461 submarine @ Peenemuende H [Fotografía]. Obtenido en: http://www.sxc.hu/photo/353653",
				number: 1,
				pos: [ [1,6], [1,14] ]
			},
			{
				word: "automovil",
				img: "carro.jpg",
				alt: "Carro particular",
				title: "Lievonen, M. (2007). Speeding car [Fotografía]. Obtenido de: http://www.sxc.hu/photo/798979",
				number: 2,
				pos: [ [4,1], [4,9] ]
			},
			{
				word: "tren",
				img: "tren.jpg",
				alt: "tren",
				title: "Szkurlatowski, K. (2008). Train - shuttle service 1 [Fotografía]. Obtenido de: http://www.sxc.hu/photo/1030473",
				number: 3,
				pos: [ [8,8], [8,11] ]
			},
			{
				word: "barco",
				img: "barco.jpg",
				alt: "barco",
				title: "Esplendor De Los Mares Crucero Caribe [Fotografía]. (2013). Obtenido de: http://pixabay.com/es/esplendor-de-los-mares-crucero-210328/",
				number: 4,
				pos: [ [10,1], [10,5] ]
			},
			{
				word: "moto",
				img: "moto.jpg",
				alt: "moto",
				title: "Motorcycling in the country 1 [Fotografía]. (2005). Obtenido de: http://www.sxc.hu/photo/288537",
				number: 5,
				pos: [ [13,0], [13,3] ]
			},
			{
				word: "bicicleta",
				img: "bicicleta.jpg",
				alt: "bicicleta",
				title: "Ramos, A. (2013). Fast Bike Running [Fotografía]. Obtenido de: http://pixabay.com/en/fast-bike-running-166067/",
				number: 6,
				pos: [ [1,8], [9,8] ]
			},
			{
				word: "globo",
				img: "globo.jpg",
				alt: "globo",
				title: "Hot air balloon balloon colorful wind [Fotografía]. (2011). Obtenido de: http://pixabay.com/en/hot-air-balloon-balloon-colorful-4761/",
				number: 7,
				pos: [ [0,4], [4,4] ]
			},
			{
				word: "teleferico",
				img: "opcion1.jpg",
				alt: "metrocable",
				title: "La imagen es cortesía de Diana Marcela Restrepo T, Diseñadora Mediacional del programa “Primaria Incluyente”.",
				number: 8,
				pos: [ [4,3], [13,3] ]
			},
			{
				word: "avion",
				img: "avion.jpg",
				alt: "Avión",
				title: "Air Aircraft Airline Airliner Airplane Aviation [Fotografía]. (2013). Obtenido de: http://pixabay.com/en/air-aircraft-airline-airliner-84602/",
				number: 9,
				pos: [ [2,1], [2,5] ]
			},
			{
				word: "metro",
				img: "metro.jpg",
				alt: "Metro",
				title: "La imagen es cortesía de Diana Marcela Restrepo T, Diseñadora Mediacional del programa “Primaria Incluyente”",
				number: 10,
				pos: [ [6,5], [10,5] ]
			}
		]
	};
});

soc205.controller('Act5Ctrl', function ($scope) {
	$scope.options = {
		data: [
      {
        src: "avion",
        alt: "Avión",
        title: "Air Aircraft Airline Airliner Airplane Aviation [Fotografía]. (2013). Obtenido de: http://pixabay.com/en/air-aircraft-airline-airliner-84602/",
        text: "Juanito visitará en los Estados Unidos a su hermano Luis; quien cumple años, debe viajar por aire para lograr llegar más rápido. ¿Cuál medio de transporte debe utilizar Juanito para Llegar a su destino?"
      },
      {
        src: "bus",
        alt: "Bus",
        title: "Pelc, M. (2007). Parking [Fotografía]. Obtenido de: http://www.sxc.hu/photo/826475",
        text: "Mamá Lucia realizará  un paseo al municipio de Guatapé para 20 niños, debe llevar cómodamente a los niños a su destino. ¿Cuál será el medio de transporte indicado para transportar a los niños?"
      },
			{
				src: "lancha",
				alt: "lancha",
				title: "Boat Sea Caribbean Ocean Ship [Fotografía]. (2013). Obtenido de: http://pixabay.com/en/boat-sea-caribbean-ocean-ship-218928/",
				text: "Carlos visitará una isla en medio del mar, para explorar algunas especies del reino animal, la isla no cuenta con aeropuerto. ¿Cuál será el medio de transporte que deberá utilizar Carlos para llegar a su destino?"
			},
			{
				src: "bicicleta",
				alt: "bicicleta",
				title: "Ramos, A. (2013). Fast Bike Running [Fotografía]. Obtenido de: http://pixabay.com/en/fast-bike-running-166067/",
				text: "Andrés participará de una competencia ciclística en su municipio, se ha preparado al máximo para llegar a la meta. ¿Cuál será el medio de transporte que utilizará para alcanzar la meta?"
			},
			{
				src: "submarino",
				alt: "submarino",
				title: "Kleist, U. (2005). U461 submarine @ Peenemuende H [Fotografía]. Obtenido en: http://www.sxc.hu/photo/353653",
				text: "Ana partirá a una expedición para explorar las maravillas profundas del océano, ¿Cuál será el medio de transporte para llegar a su destino?"
			}
		],
    targetStyles: "padding-top: 150px;",
		minRightAnswers: 3,
		randomItems: true
	};
});

soc205.controller('Act6Ctrl', function ($scope) {
	$scope.data = {
		items: [
			{
				text: "Juanita espera el metro para visitar a su madre, ella lo espera en la plataforma detrás de la línea amarilla.",
				answer: true
			},
			{
				text: "Luis es un niño de tres años de edad y viaja hacia la escuela en el asiento delantero del carro de su papá.",
				answer: false
			},
			{
				text: "Pedro habla por su celular mientras viaja en un avión rumbo a Bogotá.",
				answer: false
			},
			{
				text: "Camila cuando viaja en bus con su mamá saca la mano por una de las ventanas, porque le gusta sentir como el aire la rosa.",
				answer: false
			},
			{
				text: "Felipe utiliza el cinturón de seguridad cuando viaja en el carro de su papá",
				answer: true
			}
		],
		minRightAnswers: 3	
	};
});

soc205.controller('Act7Ctrl', function ($scope) {
	$scope.inputs = [];
	$scope.$root.isNextEnabled = true; // Activamos el siguiente link

	$scope.items = [];
	$scope.texts = [
		"¿Cuál medio de transporte utilizan para transportarse a su lugar de trabajo?",
		"¿Es un medio de transporte aéreo, terrestre o acuático?",
		"¿Qué normas debe cumplir para hacer un buen uso de este medio?"
	];

	// llenamos el array
	$scope.texts.forEach(function(text){
		$scope.items.push({
			text: text,
			input: ''
		});
	});

	// antes de ir a la siguiente actividad, verificamos
	$scope.$root.beforeGoNext = function () {
		var error = false,
			str = '';

		// Recorremos los elementos, buscando que cumplan con las condiciones
		// Al menos una mayúscula, una minúscula y 4 letras
		$scope.items.forEach(function(item){
			str = item.input.toLowerCase();
			if( !( str.match(/([bcdfghjklmnñpqrstvwxyz])/) && str.match(/([aeiou])/) && str.length >= 4 ) ) error = true;
		});

		if(error){
			// fracado
			$scope.failure = true;
			return false;
		} else {
			// éxito
			$scope.success = true;
			return true;
		}
	};
	
});

var appManager = AppManager();
var soc206 = angular.module('soc206', ['activities']);

appManager.configModule(soc206, {
	resources: '../resources/02/soc/06',
	competences1: 'Reconozco algunas normas que han sido construidas socialmente y distingo aquellas en cuya construcción y modificación puedo participar (normas del hogar, manual de convivencia escolar, Código de Tránsito…).',
	competences2: 'Reconoce algunas normas de tránsito para conducirse con precaución y seguridad.',
	competencesSound: true,
	evidences: 'Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, actividad de evidencia, guía 2, lección 6; descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.',
	evidencesSound: true,
	farewell: '¡Muy bien!, ahora ya conoces las normas de tránsito.',
	routes: [
		{ 
			name: '/conceptualizacion-1', 
			templateUrl: 'con1', 
			controller: 'Con1Ctrl',
			title: 'Lección 6: Normas de tránsito'
		},
		{ 
			name: '/conceptualizacion-2', 
			templateUrl: 'con2', 
			controller: 'Con2Ctrl',
			title: 'Lección 6: Normas de tránsito'
		},
		{ 
			name: '/conceptualizacion-3', 
			templateUrl: 'con3', 
			controller: 'Con3Ctrl',
			title: 'Lección 6: Normas de tránsito'
		},
		{ 
			name: '/conceptualizacion-4', 
			templateUrl: 'con4', 
			controller: 'Con4Ctrl',
			title: 'Lección 6: Normas de tránsito'
		},
		{ 
			name: '/conceptualizacion-5', 
			templateUrl: 'con5', 
			controller: 'Con5Ctrl',
			title: 'Lección 6: Normas de tránsito'
		},
		{ 
			name: '/conceptualizacion-6', 
			templateUrl: 'con6', 
			controller: 'Con6Ctrl',
			title: 'Lección 6: Normas de tránsito'
		},
		{ 
			name: '/conceptualizacion-7', 
			templateUrl: 'con7', 
			controller: 'Con7Ctrl',
			title: 'Lección 6: Normas de tránsito'
		},
	    { 
			name: '/actividad-1', 
			templateUrl: 'act1', 
			controller: 'Act1Ctrl',
			title: 'Actividad N°1'
		},
		{ 
			name: '/actividad-2', 
			templateUrl: 'act2', 
			controller: 'Act2Ctrl',
			title: 'Actividad N°2'
		},
		{ 
			name: '/actividad-3', 
			templateUrl: 'act3', 
			controller: 'Act3Ctrl',
			title: 'Actividad N°3'
		},
		{ 
			name: '/actividad-3-2', 
			templateUrl: 'act3_2', 
			controller: 'Act3_2Ctrl',
			title: 'Actividad N°3'
		},
		{ 
			name: '/actividad-3-3', 
			templateUrl: 'act3_3', 
			controller: 'Act3_3Ctrl',
			title: 'Actividad N°3'
		},
		{ 
			name: '/actividad-4', 
			templateUrl: 'act4', 
			controller: 'Act4Ctrl',
			title: 'Actividad N°4'
		},
		{ 
			name: '/actividad-5', 
			templateUrl: 'act5', 
			controller: 'Act5Ctrl',
			title: 'Actividad N°5'
		}
	]
});

soc206.controller('Con1Ctrl', function ($scope){
  $scope.$root.isNextEnabled = true;

});

soc206.controller('Con2Ctrl', function ($scope){
	$scope.data = {
		hasAudio: true,
		itemsPerRow: 4,
		blocks: [
			{
				blockTitle: "Señal reglamentaria: pare",
				img: "pare.png",
				alt: "Imagen donde se presenta un heptágono de color rojo en su interior dice pare",
				audio: "pare",
				hasAudio: true
			},
			{
				blockTitle: "Señal preventiva: zona escolar",
				img: "zona_escolar.png",
				alt: "Imagen de un rombo color amarillo en su interior hay dos siluetas, una de un niño y otra de un adulto, en sus manos llevan algunos libros",
				audio: "zona_escolar",
				hasAudio: true
			},
			{
				blockTitle: "Señal informativa: zona accesible",
				img: "discapacitado.png",
				alt: "Imagen de un rectángulo color azul, en su interior hay una silueta de una persona en silla de ruedas",
				audio: "zona_accesible",
				hasAudio: true
			}
		]
	}
});

soc206.controller('Con3Ctrl', function ($scope) {
	$scope.data = {
		hasAudio: true,
		itemsPerRow: 5,
		customClass: "big-title-blocks-fix",
		blocks: [
			{
				img: "permitido.png",
				alt: "Círculo de color rojo empleado para representar las señales permitidas",
				hasAudio: false
			},
			{
				blockTitle: "Ciclovía",
				img: "ciclorruta.png",
				alt: "Círculo de color rojo, en su interior tiene la silueta de una bicicleta",
				audio: "ciclovia",
				hasAudio: true
			},
			{
				blockTitle: "Giro a la izquierda solamente",
				img: "giro_a_la_izquierda.png",
				alt: "Círculo de color rojo, en su interior tiene una flecha señalando hacia el lado izquierdo",
				audio: "giro_a_la_izquierda",
				hasAudio: true
			},
			{
				blockTitle: "Paradero",
				img: "paradero_de_buses.png",
				alt: "Círculo de color rojo, en su interior tiene la silueta de dos personas montándose a un bus",
				audio: "paradero",
				hasAudio: true
			},
			{
				blockTitle: "Velocidad máxima",
				img: "velocidad_maxima_60.png",
				alt: "Círculo de color rojo, en su interior tiene el número sesenta",
				audio: "velocidad_maxima",
				hasAudio: true
			},
			{
				img: "prohibido.png",
				alt: "Círculo de color rojo empleado para representar las señales permitidas",
				hasAudio: false
			},
			{
				blockTitle: "Prohibido parquear",
				img: "prohibido_parquear.png",
				alt: "Círculo de color rojo con una línea diagonal atravesándolo, en el centro hay una letra P mayúscula",
				audio: "prohibido_parquear",
				hasAudio: true
			},
			{
				blockTitle: "Prohibido girar a la izquierda",
				img: "prohibido_girar_a_izquierda.png",
				alt: "Círculo de color rojo  con una línea diagonal atravesándolo, en el centro hay una flecha señalando hacia el lado izquierdo",
				audio: "prohibido_girar_a_la_izq",
				hasAudio: true
			},
			{
				blockTitle: "Prohibido girar en U",
				img: "prohibido_giro_en_U.png",
				alt: "Círculo de color rojo con una línea diagonal atravesándolo, en su interior hay una flecha formando una U",
				audio: "prohibido_girar_en_u",
				hasAudio: true
			},
			{
				blockTitle: "Circulación prohibida de peatones",
				img: "prohibido_paso_de_peatones.png",
				alt: "Círculo de color rojo con una línea diagonal atravesándolo, en su interior tiene la silueta de una persona caminando",
				audio: "prohibido_paso_de_peatones",
				hasAudio: true
			}
		]
	}
});

soc206.controller('Con4Ctrl', function ($scope) {
	$scope.data = {
		hasAudio: true,
		itemsPerRow: 5,
		customClass: "big-title-blocks-fix",
		blocks: [
			{
				blockTitle: "Semáforo",
				img: "semaforo.png",
				alt: "Rombo de color amarillo, en su interior tiene un semáforo",
				audio: "semaforo",
				hasAudio: true
			},
			{
				blockTitle: "Zona escolar",
				img: "zona_escolar.png",
				alt: "Rombo de color amarillo, en su interior hay dos siluetas, una de un niño y otra de un adulto, en sus manos llevan algunos libros",
				audio: "zona_escolar_II",
				hasAudio: true
			},
			{
				blockTitle: "Zona deportiva",
				img: "zona_deportiva.png",
				alt: "Rombo de color amarillo, en su interior está la silueta de una persona jugando con un balón",
				audio: "zona_deportiva",
				hasAudio: true
			},
			{
				blockTitle: "Resalto",
				img: "resalto.png",
				alt: "Rombo de color amarillo, en su interior está la silueta de un resalto",
				audio: "resalto",
				hasAudio: true
			},
			{
				blockTitle: "Curvas sucesivas primera izquierda",
				img: "curvas_sucesivas.png",
				alt: "Rombo de color amarillo, en su interior hay una flecha con varias curvas sucesivas",
				audio: "curvas_sucesivas",
				hasAudio: true
			},
			{
				blockTitle: "Zona de derrumbe",
				img: "zona_de_derrumbe.png",
				alt: "Rombo de color amarillo, en su interior está la silueta de un carro y junto a él un terreno el cual se está derrumbando",
				audio: "zona_de_derrumbe",
				hasAudio: true
			},
			{
				blockTitle: "Animales en la vía",
				img: "Animales_en_la_via.png",
				alt: "Rombo de color amarillo, en su interior presenta la silueta de una vaca",
				audio: "Animales_en_la_via",
				hasAudio: true
			},
			{
				blockTitle: "Riesgo de accidente",
				img: "riesgo_de_accidente.png",
				alt: "Rombo de color amarillo, en su interior se presentan dos carros chocándose de frente",
				audio: "riesgo_de_accidente",
				hasAudio: true
			},
			{
				blockTitle: "Puente angosto",
				img: "puente_angosto.png",
				alt: "Rombo de color amarillo, en su interior hay dos líneas verticales",
				audio: "puente_angosto",
				hasAudio: true
			},
			{
				blockTitle: "Circulación en dos sentidos",
				img: "circulación_en_dos_sentidos.png",
				alt: "Rombo de color amarillo, en su interior hay dos flechas, una señala hacia abajo y la otra hacia arriba",
				audio: "circulación_en_dos_sentidos",
				hasAudio: true
			}
		]
	}
});

soc206.controller('Con5Ctrl', function ($scope) {
	$scope.data = {
		hasAudio: true,
		itemsPerRow: 5,
		customClass: "big-title-blocks-fix",
		blocks: [
			{
				blockTitle: "Zona accesible",
				img: "discapacitado.png",
				alt: "Rectángulo color azul, en su interior hay una silueta de una persona en silla de ruedas",
				audio: "zona_accesible_II",
				hasAudio: true
			},
			{
				blockTitle: "Primeros auxilios",
				img: "primeros_auxilios.png",
				alt: "Rectángulo color azul, en su interior hay una cruz de color rojo",
				audio: "primeros_auxilios",
				hasAudio: true
			},
			{
				blockTitle: "Restaurante",
				img: "restaurante.png",
				alt: "Rectángulo  de color azul, en su interior hay un tenedor y un cuchillo, debajo de ellos está el texto 500m",
				audio: "restaurante",
				hasAudio: true
			},
			{
				blockTitle: "Paradero de buses",
				img: "paradero_de_buses_informativo.png",
				alt: "Rectángulo de color azul, en su interior hay un bus",
				audio: "paradero_de_buses",
				hasAudio: true
			},
			{
				blockTitle: "Estacionamiento de taxis",
				img: "estacionamiento_de_taxis.png",
				alt: "Rectángulo de color azul, en su interior está la palabra taxi y debajo de ella una flecha señalando hacia la derecha",
				audio: "estacionamiento_de_taxis",
				hasAudio: true
			},
			{
				blockTitle: "Aeropuerto",
				img: "aeropuerto.png",
				alt: "Rectángulo de color azul, en su interior hay un avión y una flecha señalando hacia la derecha",
				audio: "aeropuerto",
				hasAudio: true
			},
			{
				blockTitle: "Teléfono",
				img: "telefono.png",
				alt: "Rectángulo de color azul, en su interior hay un teléfono y el texto 1Km",
				audio: "telefono",
				hasAudio: true
			},
			{
				blockTitle: "Estación de servicio",
				img: "estacion_de_servicio.png",
				alt: "Rectángulo de color azul, en su interior se muestra el gráfico de un dispensador de gasolina y el texto 1Km",
				audio: "estacion_de_servicio",
				hasAudio: true
			},
			{
				blockTitle: "Taller",
				img: "taller.png",
				alt: "Imagen de un rectángulo de color azul, en su interior hay una llave de herramienta y una flecha señalando hacia la derecha",
				audio: "taller",
				hasAudio: true
			},
			{
				blockTitle: "Iglesia",
				img: "iglesia.png",
				alt: "Imagen de un rectángulo azul, en su interior hay una iglesia y una flecha señalando hacia la derecha",
				audio: "iglesia",
				hasAudio: true
			}
		]
	}
});

soc206.controller('Con6Ctrl', function ($scope){
	$scope.data = {
		items: [
			{	
				number: 1,
				title: "Agente de tránsito",
				src: "D12",
				img: "trafico/6.png",
				imgAlt: "Agente de tránsito, viste un uniforme azul y un chaleco reflectivo. Está utilizando sus manos para controlar la movilidad",
				text:'El agente de tránsito es la persona encargada de controlar la circulación vehicular y peatonal, además de vigilar y garantizar el cumplimiento de las normas de tránsito en las calles y carreteras del país.'
			},
			{	
				number: 2,
				title: "Paso peatonal",
				src: "D13",
				img: "trafico/1.png",
				imgAlt: "Imagen donde se muestra dos personas esperando el cambio del semáforo, para poder cruzar por el paso peatonal o la cebra; zona señalada por varias líneas verticales sucesivas",
				text:'El paso peatonal es el lugar por donde deben transitar las personas al cruzar una vía. Éste garantiza que cuando los autos se detengan en el semáforo, las personas puedan cruzar la calle con tranquilidad.'
			},
			{
				number: 3,
				title: "Semáforo",
				src: "D14",
				img: "trafico/7.png",
				imgAlt: "Semáforo, conformado por una luz roja, otra amarilla y una verde",
				text:'El semáforo es un aparato con señales luminosas, el cual se encarga de regular la movilidad de los vehículos y los peatones.'
			}
		]
	};
});
soc206.controller('Con7Ctrl', function ($scope){ 
	$scope.data = {
		hasImageItems: true,
		items: [
			{	
				itemImage: "red.png",
				itemAlt: "Círculo de color rojo",
				title: "Luz Roja",
				src: "D16",
				img: "trafico/5.png",
				imgAlt: "Imagen donde se muestra un señor cruzando una vía por el paso peatonal, mientras un carro está parado detrás de dicho paso peatona",
				text:'La luz de color rojo del semáforo indica que los carros deben detenerse para que los peatones puedan cruzar la calle.'
			},
			{	
				itemImage: "yellow.png",
				itemAlt: "Círculo de color amarillo",
				title: "Luz Amarilla",
				src: "D17",
				img: "trafico/2.png",
				imgAlt: "Imagen donde se muestra un hombre y una mujer parados en la acera frente al paso peatonal, ellos esperan que los carros se detengan para poder cruzar la vía. Además, en la imagen se presenta un carro parado detrás del paso peatonal",
				text:'La luz de color amarillo indica que tanto los conductores como los peatones deben tener precaución porque pronto va cambiar la luz del semáforo.'
			},
			{
				itemImage: "green.png",
				itemAlt: "Círculo de color verde",
				title: "Luz Verde",
				src: "D18",
				img: "trafico/3.png",
				imgAlt: "Imagen donde se muestra un hombre y una mujer parados en la acera frente al paso peatonal, ellos esperan que los carros se detengan para poder cruzar la vía. Además, en la imagen se presenta un carro en movimiento, pasando enfrente de las personas que esperan",
				text:'La luz de color verde indica que los carros pueden comenzar a desplazarse por la vía y por tanto los peatones deben esperar en la acera.'
			},
		],
	};
});




soc206.controller('Act1Ctrl', function ($scope){
	$scope.items = [
		{
			text: 'Advierte al conductor la proximidad a un sector de la vía en el cual se presentan accidentes con frecuencia.',
			resource: "riesgo_de_accidente",
			alt: 'Rombo de color amarillo, en su interior se presentan dos carros chocándose de frente'
		},
		{
			text: 'Notifica al conductor sobre la prohibición de estacionar su vehículo en la vía.',
			resource: "prohibido_parquear",
			alt: 'Círculo de color rojo con una línea diagonal atravesándolo, en el centro hay una letra P mayúscula'
		},
		{
			text: 'Advierte al conductor la proximidad a una zona deportiva en la vía.',
			resource: "zona_deportiva",
			alt: 'Rombo de color amarillo, en su interior está la silueta de una persona jugando con un balón'
		},
		{
			text: 'Informa a las personas la distancia a la cual se encuentra un hospital, puesto de salud o cualquier sitio destinado a la prestación de primeros auxilios.',
			resource: "primeros_auxilios",
			alt: 'Rectángulo color azul, en su interior hay una cruz de color rojo'
		},
		{
			text: 'Notifica a los peatones que está prohibida su circulación sobre la vía.',
			resource: "prohibido_paso_de_peatones",
			alt: 'Círculo de color rojo con una línea diagonal atravesándolo, en su interior tiene la silueta de una persona caminando'
		},
		{
			text: 'Informa a los usuarios el sitio o la distancia a la cual se encuentra ubicado el paradero de buses.  ',
			resource: "paradero_de_buses_informativo",
			alt: 'Rectángulo de color azul, en su interior hay un bus'
		}
	];

	$scope.options = {
		data: $scope.items,
		minRightAnswers: 4,
		randomItems: true,
		randomTargets: true
	};
});

soc206.controller('Act2Ctrl', function ($scope) {
	$scope.data = {
		groups: [
			{
				title: 'Señales informativas',
				resource: 'señales-informativas',
				alt: "Rectángulo de color azul",
				items: [
					{
						resource: 'restaurante',
						alt: "Rectángulo  de color azul, en su interior hay un tenedor y un cuchillo, debajo de ellos está el texto 500m"
					},
					{
						resource: 'primeros_auxilios',
						alt: "Rectángulo color azul, en su interior hay una cruz de color rojo"
					},
					{
						resource: 'estacion_de_servicio',
						alt: "Rectángulo de color azul, en su interior se muestra el gráfico de un dispensador de gasolina"
					}
				]
			},
			{
				title: 'Señales preventivas',
				resource: 'señales-preventivas',
				alt: "Rombo de color amarillo",
				items: [
					{
						resource: 'zona_escolar',
						alt: "Rombo de color amarillo, en su interior hay dos siluetas, una de un niño y otra de un adulto, en sus manos llevan algunos libros"
					},
					{
						resource: 'curvas_sucesivas',
						alt: "Rombo de color amarillo, en su interior hay una flecha con varias curvas sucesivas"
					},
					{
						resource: 'Animales_en_la_via',
						alt: "Rombo de color amarillo, en su interior se presenta la silueta de una vaca"
					}
				]
			},
			{
				title: 'Señales reglamentarias',
				resource: 'señales-reglamentarias',
				alt: "Círculo de color rojo",
				items: [
					{
						resource: 'prohibido_paso_de_peatones',
						alt: "Círculo de color rojo con una línea diagonal atravesándolo, en su interior tiene la silueta de una persona caminando"
					},
					{
						resource: 'giro_a_la_izquierda',
						alt: "Círculo de color rojo, en su interior tiene una flecha señalando hacia el lado izquierdo"
					},
					{
						resource: 'prohibido_parquear',
						alt: "Círculo de color rojo con una línea diagonal atravesándolo, en el centro hay una letra P mayúscula"
					}
				]
			}
		],
		minRightAnswers: 6,
		chances: 18

	};
});

soc206.controller('Act3Ctrl', function ($scope) {
	$scope.data = {
		chances: 1,
		items: [
			{
				img: "carros/carro_mal_parqueado.png",
				alt: "Imagen donde se muestra un carro de mal ubicado en el lugar de estacionamiento. Este carro se encuentra parqueado torcido, ocupando dos celdas en el parqueadero",
				correct: true
			},
			{
				img: "carros/carro_bien_parqueado.png",
				alt: "Imagen donde se muestra un carro bien ubicado en su celda de estacionamiento",
				correct: false
			}
		]
	};
});

soc206.controller('Act3_2Ctrl', function ($scope) {
	$scope.data = {
		chances: 1,
		items: [
			{
				img: "carros/car-2.png",
				alt: "Imagen donde se presenta un carro girando hacia la izquierda en una zona donde este giro es permitido",
				correct: false
			},
			{
				img: "carros/car-1.png",
				alt: "- Imagen donde se presenta un carro girando hacia el lado derecho en una zona donde ese giro no es permitido. El carro imprudente aparece a punto de chocarse con otro vehículo",
				correct: true
			}
		]
	};
});

soc206.controller('Act3_3Ctrl', function ($scope) {
	$scope.data = {
		chances: 1,
		items: [
			{
				img: "carros/car-5.png",
				alt: "Imagen donde se muestran tres carros desplazándose por dos vías, uno se ellos no respetó el semáforo en rojo",
				correct: true
			},
			{
				img: "carros/car-6.png",
				alt: "Imagen donde se muestran tres carros, dos de ellos se desplazan por una vía;  mientras el otro está parado porque el semáforo está en rojo",
				correct: false
			}
		]
	};
});

soc206.controller('Act4Ctrl', function ($scope) {
	$scope.data = {
		chancesPerItem: 1,
		minRightAnswers: 2,
		mainImageTitle: "Situación",
		imageTitle2: "Semáforo vehicular",
		imageTitle3: "Semáforo peatonal",
		items: [
			{
				mainImg: "trafico/4.png",
				mainAlt: "Imagen donde se muestran un hombre y una mujer cruzando una vía por el paso peatonal, mientras un vehículo se encuentra parado detrás de dicho paso",
				cols: [
					{
						img: "semaforo-actividad.png",
						alt: "Semáforo vehicular, tiene tres luces: roja, amarilla y verde",
						imgOptions: [
							{
								w: 50, h: 50, t: 13, l: 31.7, bdrs: "50%", correct: true,
								customClass: "option-red"
							},
							{
								w: 50, h: 50, t: 38.8, l: 31.7, bdrs: "50%", correct: false,
								customClass: "option-yellow"
							},
							{
								w: 50, h: 50, t: 65.5, l: 31.7, bdrs: "50%", correct: false,
								customClass: "option-green"
							}
						]
					},
					{
						img: "semaforo-peatonal.png",
						alt: "Semáforo peatonal, tiene una luz roja con la forma de una persona estática y una luz verde con la forma de una persona en movimiento",
						imgOptions: [
							{
								w: 75, h: 75, t: 17.5, l: 22.6, bdrs: "14px", correct: false,
								customClass: "option-person-red"
							},
							{
								w: 75, h: 75, t: 52, l: 22.6, bdrs: "14px", correct: true,
								customClass: "option-person-green"
							}
						]
					}
				]
			},
			{
				mainImg: "trafico/2.png",
				mainAlt: "Imagen donde se muestra un hombre y una mujer parados en la acera frente al paso peatonal, ellos esperan que los carros se detenga para poder cruzar la vía. Además, en la imagen se presenta un carro parado detrás del paso peatonal",
				cols: [
					{
						img: "semaforo-actividad.png",
						alt: "Semáforo vehicular, tiene tres luces: roja, amarilla y verde",
						imgOptions: [
							{
								w: 50, h: 50, t: 13, l: 31.7, bdrs: "50%", correct: false,
								customClass: "option-red"
							},
							{
								w: 50, h: 50, t: 38.8, l: 31.7, bdrs: "50%", correct: true,
								customClass: "option-yellow"
							},
							{
								w: 50, h: 50, t: 65.5, l: 31.7, bdrs: "50%", correct: false,
								customClass: "option-green"
							}
						]
					},
					{
						img: "semaforo-peatonal.png",
						alt: "Semáforo peatonal, tiene una luz roja con la forma de una persona estática y una luz verde con la forma de una persona en movimiento",
						imgOptions: [
							{
								w: 75, h: 75, t: 17.5, l: 22.6, bdrs: "14px", correct: true,
								customClass: "option-person-red"
							},
							{
								w: 75, h: 75, t: 52, l: 22.6, bdrs: "14px", correct: false,
								customClass: "option-person-green"
							}
						]
					}
				]
			},
			{
				mainImg: "trafico/3.png",
				mainAlt: "Imagen donde se muestra un hombre y una mujer parados en la acera frente al paso peatonal, ellos esperan que los carros se detenga para poder cruzar la vía. Además, en la imagen se presenta un carro en movimiento, pasando enfrente de las personas que esperan",
				cols: [
					{
						img: "semaforo-actividad.png",
						alt: "Semáforo vehicular, tiene tres luces: roja, amarilla y verde",
						imgOptions: [
							{
								w: 50, h: 50, t: 13, l: 31.7, bdrs: "50%", correct: false,
								customClass: "option-red"
							},
							{
								w: 50, h: 50, t: 38.8, l: 31.7, bdrs: "50%", correct: false,
								customClass: "option-yellow"
							},
							{
								w: 50, h: 50, t: 65.5, l: 31.7, bdrs: "50%", correct: true,
								customClass: "option-green"
							}
						]
					},
					{
						img: "semaforo-peatonal.png",
						alt: "Semáforo peatonal, tiene una luz roja con la forma de una persona estática y una luz verde con la forma de una persona en movimiento",
						imgOptions: [
							{
								w: 75, h: 75, t: 17.5, l: 22.6, bdrs: "14px", correct: true,
								customClass: "option-person-red"
							},
							{
								w: 75, h: 75, t: 52, l: 22.6, bdrs: "14px", correct: false,
								customClass: "option-person-green"
							}
						]
					}
				]
			}
		]
	};
});

soc206.controller('Act5Ctrl', function ($scope) {
	$scope.data = {
		chancesPerItem: 1,
		itemsPerRow: 2,
		minRightAnswers: 4,
		items: [
			{
				img: "1.png",
				alt: "Imagen donde se presentan dos peatones, el del lado izquierdo está cruzando la calle en medio de los carros, el otro peatón está cruzando por el paso peatonal",
				imgOptions: [
					{
						w: 166, h: 107, t: 4, l: 9, correct: false
					},
					{
						w: 91, h: 107, t: 20, l: 43, correct: true
					},
					{
						w: 57, h: 119, t: 2, l: 79, correct: false
					}
				]
			},
			{
				img: "6.png",
				alt: "Imagen donde se muestran dos peatones, uno está cruzando un puente, el otro está cruzando la vía que hay por debajo del puente",
				imgOptions: [
					{
						w: 43, h: 76, t: 32, l: 40, correct: false
					},
					{
						w: 97, h: 55, t: 49, l: 55, correct: false
					},
					{
						w: 18, h: 57, t: 41, l: 85, correct: true
					}
				]
			},
			{
				img: "2.png",
				alt: "Imagen donde se muestra un bus en movimiento, éste lleva dos pasajeras una de ellas está sacando sus manos y cabeza por la ventana",
				imgOptions: [
					{
						w: 66, h: 55, t: 25, l: 31, correct: true
					},
					{
						w: 34, h: 39, t: 31, l: 46, correct: false
					}
				]
			},
			{
				img: "3.png",
				alt: "Imagen donde se muestran dos peatones, uno de ellos esta esperando en la acera a que el semáforo cambie a rojo y los carros se detengan. El otro peatón, está cruzando la calle con los carros en movimiento",
				imgOptions: [
					{
						w: 29, h: 99, t: 8, l: 44, correct: false
					},
					{
						w: 34, h: 113, t: 30, l: 33, correct: true
					},
					{
						w: 230, h: 103, t: 54, l: 41, correct: false
					}
				]
			}
		]
	};
});
var appManager = AppManager();
var soc207 = angular.module('soc207', ['activities']);

appManager.configModule(soc207, {
	resources: '../resources/02/soc/07',
	farewell: '¡Muy bien!, ahora ya conoces la historia de nuestro hermoso país…Colombia.',
	evidencesSound:true,
	evidences: 'Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, actividad de evidencia, guía 2, lección 7; descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.',
	routes:[
		{ 
			name: '/competencias', 
			templateUrl: 'comp', 
			controller: 'CompCtrl',
			title:"Estándares básicos de competencias"
		},
		{ 
			name: '/conceptualizacion-1', 
			templateUrl: 'con1', 
			controller: 'Con1Ctrl',
			title: 'Lección 7: Historia de Colombia'
		},
		{ 
			name: '/conceptualizacion-2', 
			templateUrl: 'con2', 
			controller: 'Con2Ctrl',
			title: 'Lección 7: Historia de Colombia'
		},
		{ 
			name: '/actividad-1', 
			templateUrl: 'act1', 
			controller: 'Act1Ctrl',
			title: 'Actividad 1 | Lección 9'
		},
		{ 
			name: '/actividad-2', 
			templateUrl: 'act2', 
			controller: 'Act2Ctrl',
			title: 'Actividad 2 | Lección 9'
		},
    { 
      name: '/actividad-2-2', 
      templateUrl: 'act2-2', 
      controller: 'Act2-2Ctrl',
      title: 'Actividad 2 - 2 | Lección 9'
    },
		{ 
			name: '/actividad-3', 
			templateUrl: 'act3', 
			controller: 'Act3Ctrl',
			title: 'Actividad 3 | Lección 9'
		},
		{ 
			name: '/actividad-4', 
			templateUrl: 'act4', 
			controller: 'Act4Ctrl',
			title: 'Actividad 4 | Lección 9'
		},
		{
			name: '/actividad-5', 
			templateUrl: 'act5', 
			controller: 'Act5Ctrl',
			title: 'Actividad 5 | Lección 9'
		}
	]
	
});

soc207.controller('CompCtrl', function($scope){
	$scope.data = [
		{
			title: 'Estándar de competencia:',
			text1: 'Identifico y describo algunos elementos que permiten reconocerme como miembro de un grupo regional y de una nación (territorio, lenguas, costumbres, símbolos patrios…)(Relaciones con la historia y la cultura).',
		},
		{
			title: 'Elemento de competencia:',
			text1: 'Identifica y conoce algunos hechos históricos de Colombia que dieron origen a nuestra independencia.',
		}
		
	];
});

soc207.controller('Con1Ctrl', function($scope){
  $scope.data = {
    items: [
      { 
        title: "1.492",
        src: 'D7',
        img: "D7.jpg",
        imgAlt: "donde se muestra parte del continente americano, africano y europeo. También se presenta una imagen del retrato de Cristóbal Colón, tres embarcaciones españolas y una línea que representa el desplazamiento de estas embarcaciones desde España hasta América",
        imgTitle: 'Ghirlandaio, R. (1520). Christopher Columbus [Pintura]. Obtenido de: http://commons.wikimedia.org/wiki/File:Ridolfo_Ghirlandaio_Columbus.jpg',
        text:'<strong>3 de agosto: </strong>Cristóbal Colón con la ayuda de los reyes de España parte en las embarcaciones la Pinta, la Niña y la Santa María, en la búsqueda de una nueva ruta comercial entre Europa y Asia.<br><br><strong>12 de octubre: </strong>Cristóbal Colón llega a una isla del nuevo continente y allí comienza la colonización europea en América. Los españoles comenzaron a introducir al continente americano plantas, animales, esclavos y enfermedades.<br><br><a  href="http://www.youtube.com/watch?v=7NZF_SvjO4g" target="blank"><img class="icon-play-description"src="../resources/common/icon_video.png" alt="ícono video"/><a/><img class="icon-play-description"src="../resources/common/icon_seleccion2.png" alt="ícono seleccion"/>Haz clic sobre el ícono de video y conoce más sobre la historia de Colombia.'
      },
      { 
        title: "1.499",
        src: 'D8',
        img: "D8.png",
        imgAlt: "donde se muestra parte del mapa de Colombia, una embarcación española y una línea representando el recorrido de la embarcación para llegar a tierras colombianas",
        text:'Los españoles llegan a lo que hoy conocemos como Colombia, fundando diferentes ciudades. Españoles, indígenas, africanos comienzan a mezclarse y a dar origen a otras razas.'
      },
      {
        title: "1.700",
        src: 'D9',
        img: "D9.png",
        imgAlt: "Baúl vacío, con unas cuantas monedas (nueve) a su alrededor",
        text:'España después de disfrutar de todas las riquezas del continente americano, entra en una crisis económica y su nuevo gobernante decide generar una serie de reformas que buscan recuperar su economía y reducir el poder de los criollos y la iglesia, lo que generó mucha oposición en América.'
      },
      { 
        title: "1.810",
        src: 'D10',
        img: "D10b.png",
        imgAlt: "Imagen donde se muestran dos hombres discutiendo, uno tiene en sus manos un cartel con el texto Centralismo, el otro también tiene un cartel pero éste dice Federalismo",
        text:'<strong>20 de julio - Grito de la Independencia: </strong>varios líderes de los criollos acordaron provocar una perturbación del orden público y así aprovechar para tomar el poder. Con tal fin, el 20 de julio un grupo de criollos fueron a la tienda del comerciante español José Gonzáles Llorente a pedirle prestado un florero o cualquier clase de adorno para decorar la mesa de un banquete en honor a un criollo reconocido, éste se negó, lo que generó una serie de hechos que terminaron con la rebelión del pueblo en contra del gobierno español.<br><br><img ng-show="selectedItem.img" class="img-responsive scale1 selected-item selected-img" style="" src="../resources/02/soc/07/D10a.png" alt="donde se presentan dos hombres discutiendo, uno de ellos trata de arrebatarle un florero que tiene el otro hombre en sus manos"><br><br><a  href="http://www.youtube.com/watch?v=2ruMnA6K9ho" target="blank"><img class="icon-play-description"src="../resources/common/icon_video.png" alt="ícono video"/><a/><img class="icon-play-description"src="../resources/common/icon_seleccion2.png" alt="ícono seleccion"/>Haz clic sobre el ícono de video y conoce más sobre la historia de Colombia.<br><br><strong>Patria Boba: </strong>se llamó así a al periodo comprendido entre los años 1.810 y 1.816; antes de la independencia de Colombia, en este periodo los criollos divididos en dos grupos (Federalistas y Centralistas) se dedicaron a una guerra interna y se olvidaron de asegurar su independencia total de los españoles.<br><br><a  href="http://www.youtube.com/watch?v=s3TowW6vOag" target="blank"><img class="icon-play-description"src="../resources/common/icon_video.png" alt="ícono video"/><a/><img class="icon-play-description"src="../resources/common/icon_seleccion2.png" alt="ícono seleccion"/>Haz clic sobre el ícono de video y conoce más sobre la historia de Colombia.'
      },
      { 
        title: "1.819",
        src: 'D11',
        img: "D11b.png",
        imgAlt: "donde se muestra a Simón Bolívar caminando victorioso en su caballo, empuñando la bandera de Colombia en sus manos, después de que él y su ejercito triunfaran en la batalla de Boyacá",
        text:'<strong>25 de julio - La Batalla del Pantano de Vargas: </strong>en esta fecha se presentó un enfrentamiento armado cerca al municipio de Paipa, entre tropas españolas y tropas independentistas; éstas ultimas buscaban la independencia de Colombia.<br><br><img ng-show="selectedItem.img" class="img-responsive scale1 selected-item selected-img" style="" src="../resources/02/soc/07/D11a.png" alt="donde se muestran dos hombre a caballo pertenecientes a tropas independentistas enfrentándose a hombres pertenecientes al ejercito español"><br><br><a  href="http://www.youtube.com/watch?v=4e5raNp-o5o" target="blank"><img class="icon-play-description"src="../resources/common/icon_video.png" alt="ícono video"/><a/><img class="icon-play-description"src="../resources/common/icon_seleccion2.png" alt="ícono seleccion"/>Haz clic sobre el ícono de video y conoce más sobre la historia de Colombia.<br><br><strong>7 de agosto - La Batalla de Boyacá: </strong>el ejército español y el ejército criollo liderado por Simón Bolívar, se enfrentaron en el campo de Boyacá, cada uno con diferentes objetivos; el primero buscaba tomarse Santa Fe de Bogotá y el segundo deseaba impedir esta maniobra. La batalla terminó con el triunfo de los criollos, quienes tomaron de improviso al ejército español en el puente de Boyacá y provocaron después de muchas horas de pelea su rendición.<br><br><a  href="http://www.youtube.com/watch?v=hs3fbLxwDKs" target="blank"><img class="icon-play-description"src="../resources/common/icon_video.png" alt="ícono video"/><a/><img class="icon-play-description"src="../resources/common/icon_seleccion2.png" alt="ícono seleccion"/>Haz clic sobre el ícono de video y conoce más sobre la historia de Colombia.'
      }
    ]
  };
});


soc207.controller('Con2Ctrl', function($scope){
 $scope.data = {
    items: [
      { 
        title: "Simón Bolívar",
        src: 'simonbolivar',
        img: "simonbolivar.jpg",
        imgAlt: "Pintura donde se presenta el retrato de Simón Bolívar",
        imgTitle: 'Salas, A. (1825). Simón Bolívar [Pintura]. Obtenido de: http://commons.wikimedia.org/wiki/File:Sim%C3%B3n_Bol%C3%ADvar_by_Antonio_Salas.jpg',
        text:'Militar y político fundador de la Gran Colombia y una de las figuras más destacadas en la lucha por la independencia frente al imperio español. Contribuyó de manera decisiva a la independencia de Bolivia, Colombia, Ecuador, Panamá, Perú y Venezuela.'
      },
      { 
        title: "Antonio Nariño",
        src: 'antonio',
        img: "antonionarino.jpg",
        imgAlt: "Pintura donde se muestra el retrato de Antonio Nariño",
        imgTitle: 'Acevedo, R. (1917). Óleo de Antonio Nariño [Pintura]. Obtenido de: http://commons.wikimedia.org/wiki/File:Nari%C3%B1o_by_Acevedo_Bernal.jpg',
        text:'Político y militar reconocido por promover la independencia de los pueblos americanos del imperio españo'
      },
      { 
        title: "Francisco de Paula Santander",
        src: 'francisco',
        img: "francisco.jpg",
        imgAlt: "Pintura del retrato de Francisco de Paula Santander",
        imgTitle: 'Acevedo, R. (1917). Retrato de Francisco de Paula Santander [Pintura]. Obtenido de: http://www.colombiaaprende.edu.co/html/mediateca/1607/article-238900.html',
        text:'Militar y político colombiano, líder de la independencia de Colombia. Participó en diversas batallas, desempeñando un rol determinante en la Batalla de Boyacá. Por sus grandes logros fue ascendido por Bolívar al rango de general de división.'
      },
      { 
        title: "Policarpa Salavarrieta",
        src: 'policarpa',
        img: "policarpa.jpg",
        imgAlt: "Pintura donde se muestra el retrato de Policarpa Salavarrieta",
        imgTitle: 'Espinosa, J. (1855). Policarpa Salavarrieta [Pintura]. Obtenido de: http://commons.wikimedia.org/wiki/File:Policarpa_Salabarrieta.jpg',
        text:'Mujer destacada en la época de la independencia de Colombia, también fue conocida como la Pola, actuó como espía de los grupos que buscaban la independencia en el período denominado ¨La Patria Boba¨.'
      },
      { 
        title: "José Antonio Galán",
        src: 'galan',
        img: "galan.jpg",
        imgAlt: "Pintura donde se muestra el retrato de José Antonio Galán",
        imgTitle: 'Plata, G. (2005). Escudo de Charalá [Fotografía]. Obtenido de: http://commons.wikimedia.org/wiki/File:Escudo_de_Charal%C3%A1.jpg',
        text:'Personaje de gran importancia dentro de la historia colombiana, fue un líder comunero colombiano, el cual promovió la oposición a las reformas del imperio español y luchó por la defensa de los grupos sociales más desfavorecidos.'
      }
    ]
  };
});

soc207.controller('Act1Ctrl', function ($scope) {
  $scope.items = [
   {
      sil: '<strong>Policarpa Salavarrieta</strong>',
      resource: "policarpa",
      alt: "Pintura donde se muestra el retrato de Policarpa Salavarrieta",
      imgtitle: 'Espinosa, J. (1855). Policarpa Salavarrieta [Pintura]. Obtenido de: http://commons.wikimedia.org/wiki/File:Policarpa_Salabarrieta.jpg',
    },
    {
      sil: '<strong>Simón Bolívar</strong>',
      resource: "simonbolivar",
      alt: "Pintura donde se presenta el retrato de Simón Bolívar",
      imgtitle: 'Salas, A. (1825). Simón Bolívar [Pintura]. Obtenido de: http://commons.wikimedia.org/wiki/File:Sim%C3%B3n_Bol%C3%ADvar_by_Antonio_Salas.jpg',
    },
    {
      sil: '<strong>Cristóbal Colón</strong>',
      resource: "colon",
      imgtitle: 'Ghirlandaio, R. (1520). Christopher Columbus [Pintura]. Obtenido de: http://commons.wikimedia.org/wiki/File:Ridolfo_Ghirlandaio_Columbus.jpg',
      alt: 'Pintura del retrato de Cristóbal Colón'
    },
    {
      sil: '<strong>Antonio Nariño</strong>',
      resource: "antonionarino",
      alt: "Pintura donde se muestra el retrato de Antonio Nariño",
      imgtitle: 'Acevedo, R. (1917). Óleo de Antonio Nariño [Pintura]. Obtenido de: http://commons.wikimedia.org/wiki/File:Nari%C3%B1o_by_Acevedo_Bernal.jpg',
    },
    {
      sil: '<strong>Francisco de Paula Santander</strong>',
      resource: "francisco",
      alt: "Pintura del retrato de Francisco de Paula Santander",
      imgtitle: 'Acevedo, R. (1917). Retrato de Francisco de Paula Santander [Pintura]. Obtenido de: http://www.colombiaaprende.edu.co/html/mediateca/1607/article-238900.html',
    },
    {
      sil: '<strong>José Antonio Galán</strong>',
      resource: "galan",
      alt: "Pintura donde se muestra el retrato de José Antonio Galán",
      imgtitle: 'Plata, G. (2005). Escudo de Charalá [Fotografía]. Obtenido de: http://commons.wikimedia.org/wiki/File:Escudo_de_Charal%C3%A1.jpg',
    }
  ];

  $scope.options = {
    data: $scope.items,
    minRightAnswers: 6,
    randomItems: true,
  };
});
   
soc207.controller('Act2Ctrl', function($scope){
 $scope.items = [
    {
      sil: 'Político y militar reconocido por promover la independencia de los pueblos americanos del imperio español.',
      resource: "antonionarino",
      alt: "Pintura donde se muestra el retrato de Antonio Nariño",
      imgtitle: 'Acevedo, R. (1917). Óleo de Antonio Nariño [Pintura]. Obtenido de: http://commons.wikimedia.org/wiki/File:Nari%C3%B1o_by_Acevedo_Bernal.jpg',
    },
    {
      sil: 'Militar y político fundador de la Gran Colombia y una de las figuras más destacadas en la lucha por la independencia frente al imperio español. Contribuyó de manera decisiva a la independencia de Bolivia, Colombia, Ecuador, Panamá, Perú y Venezuela.',
      resource: "simonbolivar",
      alt: "Pintura donde se presenta el retrato de Simón Bolívar",
      imgtitle: 'Salas, A. (1825). Simón Bolívar [Pintura]. Obtenido de: http://commons.wikimedia.org/wiki/File:Sim%C3%B3n_Bol%C3%ADvar_by_Antonio_Salas.jpg',
    },
    {
      sil: 'Militar y político colombiano, líder de la independencia de Colombia. Participó en diversas batallas, desempeñando un rol determinante en la Batalla de Boyacá. Por sus grandes méritos fue ascendido por Bolívar al rango de general de división.',
      resource: "francisco",
      alt: "Pintura del retrato de Francisco de Paula Santander",
      imgtitle: 'Acevedo, R. (1917). Retrato de Francisco de Paula Santander [Pintura]. Obtenido de: http://www.colombiaaprende.edu.co/html/mediateca/1607/article-238900.html',
    }
  ];

  $scope.options = {
    data: $scope.items,
    minRightAnswers: 3,
    randomTargets: true,
  };
});

soc207.controller('Act2-2Ctrl', function($scope){
 $scope.items = [
    {
      sil: 'Mujer destacada en la época de la independencia de Colombia, también fue conocida como la Pola, actuó como espía de los grupos que buscaban la independencia en el período denominado ¨La Patria Boba¨.',
      resource: "policarpa2",
      alt: "Pintura donde se muestra el retrato de Policarpa Salavarrieta",
      imgtitle: 'Espinosa, J. (1855). Policarpa Salavarrieta [Pintura]. Obtenido de: http://commons.wikimedia.org/wiki/File:Policarpa_Salabarrieta.jpg',
    },
    {
      sil: 'Personaje de gran importancia dentro de la historia colombiana, fue un líder comunero colombiano, el cual promovió la oposición a las reformas del imperio español y luchó por la defensa de los grupos sociales más desfavorecidos',
      resource: "galan",
      alt: "Pintura donde se muestra el retrato de José Antonio Galán",
      imgtitle: 'Plata, G. (2005). Escudo de Charalá [Fotografía]. Obtenido de: http://commons.wikimedia.org/wiki/File:Escudo_de_Charal%C3%A1.jpg',
    },
    {
      sil: 'Navegante comercial que propuso a los reyes de España buscar nuevas rutas comerciales entre Europa y Asia. Más tarde fue reconocido por descubrir América.',
      resource: "colon",
      imgtitle: 'Ghirlandaio, R. (1520). Christopher Columbus [Pintura]. Obtenido de: http://commons.wikimedia.org/wiki/File:Ridolfo_Ghirlandaio_Columbus.jpg',
      alt: 'Pintura del retrato de Cristóbal Colón'
    }
  ];

  $scope.options = {
    data: $scope.items,
    minRightAnswers: 3,
    randomTargets: true,
  };
});

soc207.controller('Act3Ctrl', function($scope){
   $scope.items = [
   {
      sil: '20 de julio de 1.810',
      resource: "D10a",
      title: 'Independencia de Colombia',
      imgtitle: 'International Center for Tropical Agriculture. (2012). Amazon River [Fotografía]. Obtenido de: http://www.fotopedia.com/items/flickr-5641587148/slideshow',
      alt: 'donde se presentan dos hombres discutiendo, uno de ellos trata de arrebatarle un florero que tiene el otro hombre en sus manos'
    },
    {
      sil: '7 de agosto de 1.819',
      resource: "D11b",
      title: 'Batalla de Boyacá',
      imgtitle: 'Sovich, J. (2010). Cartagena old town [Fotografía]. Obtenido de: http://bit.ly/1ywCn2o',
      alt: 'Imagen donde se muestra Simón Bolívar caminando victorioso en su caballo, empuñando la bandera de Colombia en sus manos, después de que él y su ejercito triunfaran en la batalla de Boyacá'
    },
    {
      sil: '12 de octubre de 1492',
      resource: "america",
      title: 'Descubrimiento de América',
      imgtitle: 'Zea, F. (2007). Salto del Tequendama [Fotografía]. Obtenido de: http://commons.wikimedia.org/wiki/File:Salto_del_tequendama_by_FranciscoA._ZeaB.png',
      alt: 'Imagen donde se muestra parte del continente americano, africano y europeo. También se presentan tres embarcaciones y una línea representando el desplazamiento de estas embarcaciones desde España hasta América'
    },
    {
      sil: '25 de julio de 1.819',
      resource: "D11a",
      title: 'Batalla del Pantano de Vargas',
      imgtitle: 'Vista del embalse desde la Piedra del Peñol [Fotografía]. (2011). Obtenido de: http://commons.wikimedia.org/wiki/File:Embalse_de_Guatap%C3%A9_10_30062011.jpg',
      alt: 'Imagen donde se muestran dos hombre a caballo; pertenecientes a tropas independentistas enfrentándose a hombre pertenecientes al ejercito español'
    }
  ];

  $scope.options = {
    data: $scope.items,
    minRightAnswers: 4,
    randomItems: true,
  };
});

soc207.controller('Act4Ctrl', function($scope){
  $scope.data = {
    chances: 12,
    minRightAnswers: 6,
    inverted: true,
    groupStyle: 'float: right;',
    table: [

    "A B C D E F S H J K L Ñ O J K G Ñ C P Q W E R R T".split(" "),
    "K N D F H J I L Ñ N B V I O I N X R T R S A V B M".split(" "),
    "L O T Y U I M M L L Ñ Y U S D F G I U I E W Q A C".split(" "),
    "O Y E O P Q Ó Q W T Y U I É H M N S Í T R S D F G".split(" "),
    "B U T M N P N O E R F T U A L O P T S T D F G I H".split(" "),
    "C I R I Ñ I B N M K L N I N K M X Ó Z O Ñ P L E O".split(" "),
    "V H J K L Ñ O N M V B C X T A S D B E W F G H I L".split(" "),
    "D C A L O U L N O Y D F G O F C R A I T O C A Ó L".split(" "),
    "F A V H E D Í T A U I O Y N Á S D L Y F G H I L M".split(" "),
    "C R B F D F V G I R Y Ñ H I F G K C L D R T P U N".split(" "),
    "X L C A I G A H C F I U Y O Ñ L O O F F R T D G B".split(" "),
    "E O D D O H R J I L O Ñ R G B K P L G S D F M J F".split(" "),
    "Z S I C S I E M P R E C O A C E R Ó P L I F G V B".split(" "),
    "A A A G N M C A S D E R T L I M O N C A D U I Y W".split(" "),
    "I N N D R É S F G H O P Q Á M L Ñ O P U O E G F O".split(" "),
    "Ó P Í L Ñ Ú R C F G D E C N K L M O P Ñ Q W E D S".split(" "),
    "P O L I C A R P A S A L A V A R R I E T A D E F R".split(" "),
    "P O D F U Y T H J K L Ñ O E W S D S T R T P I L M".split(" "),
    "F R A N C I S C O D E P A U L A S A N T A N D E R".split(" ")




    ],
    wordGroups: [
      {
        items: [
          {
            front: "CRISTÓBAL COLÓN",
            back: "CRISTÓBALCOLÓN"
          },
          {
            front: "FRANCISCO DE PAULA SANTANDER",
            back: "FRANCISCODEPAULASANTANDER"
          },
          {
            front: "ANTONIO NARIÑO",
            back: "ANTONIONARIÑO"
          },
          {
            front: "JOSÉ ANTONIO GALÁN",
            back: "JOSÉANTONIOGALÁN"
          },
          {
            front: "SIMÓN BOLÍVAR",
            back: "SIMÓNBOLÍVAR"
          },
          {
            front: "POLICARPA SALAVARRIETA",
            back: "POLICARPASALAVARRIETA"
          }
        ]
      }
    ]
  };
});

soc207.controller('Act5Ctrl', function ($scope) {
   $scope.data = {
    minRightAnswers: 3,
    feedback: "<p>Las respuestas correctas son:</p>\n<ol style=\"font-size: 26px;\">\n    <li>v</li>\n    <li>V</li>\n    <li>v</li>\n    <li>F</li>\n  <li>V</li>\n </ol>",
    items: [
      { text: "Simón Bolívar fue el libertador de Colombia, gracias a él nuestro país es independiente y soberano.", answer: "V" },
      { text: "Antonio Nariño fue un político y militar de destacada actuación en la independencia del Virreinato de Nueva Granada.", answer: "V" },
      { text: "Policarpa Salavarrieta fue una heroína y la mujer más sobresaliente en la época de la independencia de Colombia. ", answer: "V" },
      { text: "La Patria Boba fue el periodo en el cual los criollos estaban más unidos y lograron asegurar su independencia total de los españoles.", answer: "F" },
      { text: "La independencia de Colombia fue un proceso que permitió al pueblo acceder a un estado autónomo e independiente.", answer: "V" }
    ]
  };
});



var appManager = AppManager();
var soc208 = angular.module('soc208', ['activities']);

appManager.configModule(soc208, {
	resources: '../resources/02/soc/08',
	evidences: 'Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, actividad de evidencia, guía 2, lección 8; descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.',
	evidencesSound: true,
	farewell: '¡Excelente!, ahora ya sabes qué es un municipio y conoces  varios municipios de nuestro país.',
	routes: [
		{ 
			name: '/competencias', 
			templateUrl: 'comp', 
			controller: 'CompCtrl',
			title:"Estándares básicos de competencias"
		},
		{ 
			name: '/conceptualizacion-1', 
			templateUrl: 'con1', 
			controller: 'Con1Ctrl',
			title: 'Lección 8: Los municipios de Colombia'
		},
		{ 
			name: '/conceptualizacion-2', 
			templateUrl: 'con2', 
			controller: 'Con2Ctrl',
			title: 'Lección 8: Los municipios de Colombia'
		},
		{ 
			name: '/conceptualizacion-3', 
			templateUrl: 'con3', 
			controller: 'Con3Ctrl',
			title: 'Lección 8: Los municipios de Colombia'
		},
		{ 
			name: '/actividad-1', 
			templateUrl: 'act1', 
			controller: 'Act1Ctrl',
			title: 'Actividad N°1 | Lección 8'
		},
		{ 
			name: '/actividad-2', 
			templateUrl: 'act2', 
			controller: 'Act2Ctrl',
			title: 'Actividad N°2 | Lección 8'
		},
		{ 
			name: '/actividad-3', 
			templateUrl: 'act3', 
			controller: 'Act3Ctrl',
			title: 'Actividad N°3 | Lección 8'
		},
		{ 
			name: '/actividad-4', 
			templateUrl: 'act4', 
			controller: 'Act4Ctrl',
			title: 'Actividad N°4 | Lección 8'
		},
		{ 
			name: '/actividad-5', 
			templateUrl: 'act5', 
			controller: 'Act5Ctrl',
			title: 'Actividad N°5 | Lección 8'
		}
	]
});

soc208.controller('CompCtrl', function($scope){
	$scope.data = [
		{
			title: 'Estándar de competencia:',
			text1: 'Identifico y describo algunos elementos que permiten reconocerme como miembro de un grupo regional y de una nación (territorio, lenguas,costumbres, símbolos patrios…).',
		},
		{
			title: 'Elementos de competencia:',
			text1: 'Conoce la historia y algunos lugares del municipio donde vive.',
			
		}
		
	];
});

soc208.controller('Con1Ctrl', function ($scope){
  $scope.$root.isNextEnabled = true;

});

soc208.controller('Con2Ctrl', function ($scope){
	$scope.$root.isNextEnabled = true; // Activamos el siguiente link
	$scope.maintitle = 'Municipio';

  $scope.items = [

    {
      resource: 'territorio.png',
      alt: 'Imagen donde se muestran dos viviendas ubicadas sobre un terreno',
      title: 'Territorio',
      text: 'Comprende el suelo, el subsuelo, el espacio aéreo y las aguas.',
      style: 'background-color: #d44a27;'
    },
    {
      resource: 'poblacion.png',
      alt: 'Imagen donde se muestran tres niños felices jugando en una de las calles del municipio donde viven',
      title: 'Población',
      text: 'Grupo de personas que habitan el territorio.',
      style: 'background-color: #d44a27;'
    },
    {
      resource: 'alcalde.png',
      alt: 'Señor con un letrero en su mano derecha y tiene escrito el texto: alcalde',
      title: 'Autoridades políticas',
      text: 'Organizaciones y personas encargadas de administrar el territorio.',
      style: 'background-color: #d44a27;'
    }
  ];

  

});


soc208.controller('Con3Ctrl', function ($scope) {
	$scope.data = {
		items: [
			{	
				title: "Medellín (Antioquia)",
				src: 'D9',
				img: "medellin.png",
				imgAlt: "Fotografía panorámica de la ciudad de Medellín, donde se muestran gran cantidad de edificios de variadas alturas. Al lado derecho de la fotografía aparece el escudo del municipio y su bandera de color blanco y verde",
				text:'El municipio de Medellín es la capital del departamento de Antioquia, fue fundado en el año 1.675 en el centro de la ciudad con el nombre de Nuestra Señora de la Candelaria.<br><br>Medellín cuenta con un alto número de habitantes (2.223.078), por lo que es uno de los mayores centros urbanos de Colombia, lo que ha generado grandes problemas a nivel social y ambiental.<br><br>Se destaca por ser una de las regiones más productivas del país, sobresaliendo la industria textil y de confecciones. En los últimos años el turismo ha cogido fuerza gracias a la transformación urbana  que se ha presentado en la ciudad.'
			},
			{	
				title: "Envigado (Antioquia)",
				src: 'D10',
				img: "envigado.png",
				imgAlt: "Fotografía donde se muestra la iglesia principal del municipio de Envigado. Al dado derecho está el escudo del municipio y la bandera conformada por tres franjas horizontales: la primera de color naranja, la segunda de color verde y la tercera también de color naranja",
				text:'En sus inicios, las tierras de este municipio estaban cubiertas por abundante vegetación y eran habitadas por indígenas, más tarde, estas tierras fueron colonizados por los españoles.<br><br>El municipio de Envigado fue fundado en el año 1.775, cuando se crea la Parroquia de Santa Gertrudis, se selecciona el terreno para el templo, se traza la plaza y las primeras calles.<br><br>La economía de Envigado está basada en la confección, la cristalería, el ensamble de autos y el comercio. El municipio se destaca por la alta calidad de vida de sus habitantes, gracias a que es uno de los pocos municipios del país donde gran parte de los dineros públicos son invertidos en el bienestar de sus habitantes.'
			},
			{
				title: "Soacha (Cundinamarca)",
				src: 'D11',
				img: "soacha.png",
				imgAlt: "Fotografía de el Salto del Tequendama, un sitio emblemático del municipio de Soacha. En la imagen se muestra una gran caída de agua, al lado derecho de la misma se muestra el escudo y la bandera del municipio; la cual consta de una franja blanca y otra roja.",
				text:'El municipio de Soacha fue fundado en el año 1.600. Muchos años antes de su fundación, las tierras de este municipio eran habitadas por indígenas muiscas, los cuales se dedicaban a la  agricultura, la minería y la orfebrería (trabajo artístico realizado sobre utensilios de metal).<br><br>A través de los años el municipio de Soacha a tenido gran importancia a nivel hídrico, gracias a que en su territorio hay gran cantidad de humedales, quebradas, cañadas y cascadas con el Salto del Tequendama. Desafortunadamente el alto número de pobladores de este municipio y sus malas prácticas, han hecho que estos recursos presenten un alto nivel de contaminación.'
			},
			{	
				title: "Floridablanca (Santander)",
				src: 'D12',
				img: "floridablanca.png",
				imgAlt: "Fotografía donde se muestra el parque principal de Floridablanca, al lado derecho de la fotografía está el escudo del municipio y  su bandera, ésta ultima de color verde con varios círculos concéntricos de color amarillo",
				text:'El municipio de Floridablanca fue fundado en el año 1.817. Es el segundo municipio más importante dentro del departamento de Santander.<br><br>Allí se desarrollan diferentes actividades económicas, pero las que más se destacan son: el comercio, la industria alimenticia y textil y la fabricación de minerales no metálicos.<br><br>Se destaca este municipio por sus parques, gracias a que gran parte de la zona urbana está cubierta por zonas verdes, algunas de ellas muy bien protegidas.'
			},
			{	
				title: "Leticia (Amazonas)",
				src: 'D13',
				img: "leticia.png",
				imgAlt: "Fotografía donde se muestran dos viviendas construidas sobre una laguna. Éstas están fabricadas con troncos de madera y paja. Al lado derecho de la fotografía está el escudo del municipio del Leticia y  su bandera con franjas blanca, verde y azul,  en el centro hay un Sol de color rojo y amarillo",
				text:'Leticia es la capital del departamento del Amazonas y fue fundada en el año 1.867.<br><br>En la actualidad este municipio está habitado por más de la mitad de la población del departamento. La mayoría de los habitantes de este municipio son indígenas pertenecientes a diferentes comunidades indígenas como: los Huitotos, Ingas, Tucanos, Ticunas y Nukak.<br><br>Este municipio se caracteriza por estar cubierto por una gran cantidad de vegetación, donde es posible encontrar gran cantidad de especies animales y vegetales, las cuales son en gran parte el sustento de las comunidades que habitan este territorio.'
			},
			{
				title: "Quibdó (Chocó)",
				src: 'D14',
				img: "quibdo.png",
				imgAlt: "Fotografía donde se muestra el parque principal de Quibdó. Al lado derecho de la fotografía se muestra el escudo del municipio y su bandera, la cual está conformada por tres franjas de color verde, rojo y café.",
				text:'El municipio de Quibdó fue fundado en el año 1.664 y en la actualidad es la capital del departamento de Chocó.<br><br>Sus pobladores, que en su mayoría son afrocolombianos, se dedican principalmente a las actividades de minería y agricultura.<br><br>Quibdó presenta una alta riqueza natural y forestal en comparación con otros municipios de Colombia. Además, sobresale por ser una de las zonas donde se presenta mayor cantidad de lluvias en todo el mundo.'
			},
			{	
				title: "Puerto Colombia (Atlántico)",
				src: 'D15',
				img: "puertocolombia.png",
				imgAlt: "Fotografía donde se muestra una playa del municipio de Puerto Colombia. Al lado derecho de la imagen se muestra el escudo del municipio y su bandera, ésta última con dos franjas verticales de color blanco y amarillo, las cuales son atravesadas por una franja horizontal de color verde la cual lleva en el centro una estrella blanca",
				text:'EEl municipio de Puerto Colombia fue fundado en el año 1.888 por el ingeniero cubano Francisco Javier Cisneros y toma este nombre en honor al muelle allí construido.<br><br>El muelle dio paso a la construcción del terminal marítimo, razón por la cual por muchos años este municipio fue de gran importancia para la economía del país, puesto que a este terminal llegaban barcos que traían mercancía de diferentes países.<br><br>En la actualidad la actividad económica más importante es el turismo, gracias a que este municipio tiene playas sobre el mar caribe. Además, cuenta con un gran número de monumentos históricos que lo hacen más atractivo para el turismo.'
			},
			{
				title: "Valledupar (Cesar)",
				src: 'D16',
				img: "valledupar 1.png",
				imgAlt: "Fotografía donde se muestra el parque principal del municipio de Valledupar. Al lado derecho de la fotografía está el escudo del municipio y su bandera, la cual esta conformada por tres franjas horizontales de color azul, blanco y rojo",
				text:'Valledupar es la capital del departamento del Cesar, este municipio fue fundado en el año 1.550 por el capitán español Hernando de Santana.<br><br>Este municipio está ubicado en terrenos planos y fértiles, razón por la cual las principales actividades económicas desarrolladas en esta zona son la agricultura y la ganadería.<br><br>Valledupar es centro musical, cultural y folclórico de Colombia por ser la ciudad donde nació el vallenato, género musical de alta popularidad en el país y símbolo de la música colombiana.'
			}
		]
	};
});

soc208.controller('Act1Ctrl', function ($scope){
	$scope.items = [
    { 
      name: "1",
      pattern: [7],
      text:"El termino municipio hace referencia a pequeñas divisiones territoriales a nivel administrativo y agrupa una o varias localidades.",
    },
    { 
      name: "2",
      pattern: [13],
      text:"El termino municipio también ha sido utilizado para nombrar a un pueblo o ciudad .",
    },
    { 
      name: "3",
      pattern: [10],
      text:"Medellín, Floridablanca, Quibdó, Bello, Leticia y Puerto Colombia son algunos municipios de Colombia.",
    },
    { 
      name: "4",
      pattern: [8],
      text:"Antioquia, Santander, Chocó, Amazonas y Atlántico son algunos departamentos de Colombia.",
    },
    { 
      name: "5",
      pattern: [6],
      text:"El termino municipio comprende tres elementos: territorio , población y las autoridades políticas.",
    }

  ];
  $scope.options = {
    items: $scope.items,
    chances: 5,
    minRightAnswers: 3,
    itemsrow : 'row-3',
    examples:['territorio','departamentos','ciudad','municipios','divisiones']
  };
});

soc208.controller('Act2Ctrl', function ($scope) {
	$scope.items = [
		{
			text: 'Municipio destacado por ser una de las regiones más productivas del país, sobresaliendo la industria textil y de confecciones.',
			resource: "medellin 2",
			alt: 'Fotografía panorámica de la ciudad de Medellín, donde se muestran gran cantidad de edificios de variadas alturas',
			title: 'Zapata, J. (2013). Medellín [Fotografía]. Obtenido de: http://pixabay.com/es/medell%C3%ADn-colombia-panor%C3%A1mica-182352/',
			text2: 'Medellín'
		},
		{
			text: 'Las tierras de este municipio, hace muchos años fueron habitadas por indígenas muiscas, los cuales se dedicaban a la  agricultura, la minería y la orfebrería.',
			resource: "soacha 2",
			alt: 'Fotografía de el Salto del Tequendama, un sitio emblemático del municipio de Soacha. En la imagen se muestra una gran caída de agua, rodeada de abundante vegetación',
			title: 'Zea, F. (2007). Salto del Tequendama [Fotografía]. Obtenido de: http://commons.wikimedia.org/wiki/File:Salto_del_tequendama_by_FranciscoA._ZeaB.png',
			text2: 'Soacha'
		},
		{
			text: 'La mayoría de los habitantes de este municipio son indígenas pertenecientes a diferentes comunidades indígenas como: los Huitotos, Ingas, Tucanos, Ticunas y Nukak.',
			resource: "leticia2",
			alt: 'Fotografía donde se muestra una vivienda construida sobre una laguna. Ésta está fabricada con troncos de madera y paja',
			title: 'Cumpleaños en Leticia [Fotografía]. (2014). Obtenido de: http://bit.ly/1kmHyZb',
			text2: 'Leticia'
		},
		{
			text: 'Municipio con alta riqueza natural y forestal. Además, sobresale por ser una de las zonas donde se presenta mayor cantidad de lluvias en todo el mundo.',
			resource: "quibdo 2",
			alt: 'Fotografía donde se muestra el parque principal de Quibdó',
			title: 'Catedral San Francisco de Asís [Fotografía]. Obtenido de: http://delchocoyotraspeliculas.wordpress.com/',
			text2: 'Quibdó'
		},
		{
			text: 'Es considerado centro musical, cultural y folclórico de Colombia por ser la ciudad donde nació el vallenato.',
			resource: "valledupar",
			alt: 'Fotografía donde se muestra el parque principal del municipio de Valledupar',
			title: 'Casamolinavupar [Fotografía]. (2006). Obtenido de: http://es.wikipedia.org/wiki/Valledupar#mediaviewer/Archivo:Casamolinavupar.png',
			text2: 'Valledupar'
		},
		{
			text: 'Años atrás este municipio fue de gran importancia para la economía del país, puesto que allí se construyó un terminal marítimo.',
			resource: "puerto colombia 2",
			alt: 'Fotografía donde se muestra una playa del municipio de Puerto Colombia',
			title: 'Berrio, G. (2010). Playa grande de Puerto Colombia [Fotografía]. Obtenido de: http://bit.ly/1qusm1e',
			text2: 'Puerto Colombia'
		}
	];

	$scope.options = {
		data: $scope.items,
		minRightAnswers: 4,
		randomItems: true,
		randomTargets: true,
	};
});

soc208.controller('Act3Ctrl', function ($scope) {
	$scope.data = {
    chances: 24,
    minRightAnswers: 12,
    inverted: true,
    table: [
		"G A E B N P V O Q K J L B M".split(" "),
		"I C D L E U A H A N M I U P".split(" "),
		"R D M E D E L L Í N S W E Q".split(" "),
		"A A A T S R L V U I O P N V".split(" "),
		"R G L I T T E F S E W Q A R".split(" "),
		"D V A C U O D G A N M L V Y".split(" "),
		"O B M I I C U H Z T A M E C".split(" "),
		"T D B A P O P O X W E T N P".split(" "),
		"R S O A D L A H J F G N T O".split(" "),
		"T F G H J O R N M E R S U T".split(" "),
		"Y E P T Y M O S T D U Q R N".split(" "),
		"B U G A L B E L L O D F A M".split(" "),
		"U E S A Ñ I Q U I B D Ó C P".split(" "),
		"S O A C H A I K L N O N M I".split(" ")
    ],
    wordGroups: [
      {
        items: [
          {
            front: "MEDELLÍN",
            back: "MEDELLÍN"
          },
          {
            front: "BELLO",
            back: "BELLO"
          },
          {
            front: "LETICIA",
            back: "LETICIA"
          },
          {
            front: "TAME",
            back: "TAME"
          },
          {
            front: "MALAMBO",
            back: "MALAMBO"
          },
          {
            front: "PUERTO COLOMBIA",
            back: "PUERTOCOLOMBIA"
          },
          {
            front: "BUENAVENTURA",
            back: "BUENAVENTURA"
          },
          {
            front: "VALLEDUPAR",
            back: "VALLEDUPAR"
          },
          {
            front: "QUIBDÓ",
            back: "QUIBDÓ"
          },
          {
            front: "SOACHA",
            back: "SOACHA"
          },
          {
            front: "GIRARDOT",
            back: "GIRARDOT"
          },
          {
            front: "BUGA",
            back: "BUGA"
          }
        ]
      }
    ]
  };
});

soc208.controller('Act4Ctrl', function ($scope) {
	$scope.data = {
		maintext: '<tr class="col-md-12"><th class="col-md-6 bg-1">Municipio</th><th class="col-md-6 bg-1">Departamento</th></tr><tr class="col-md-12"><td class="col-md-6">Medellín</td><td class="col-md-6">xx</td></tr><tr class="col-md-12"><td class="col-md-6">Buenaventura</td><td class="col-md-6">xx</td></tr><tr class="col-md-12"><td class="col-md-6">Girardot</td><td class="col-md-6">xx</td></tr><tr class="col-md-12"><td class="col-md-6">Malambo</td><td class="col-md-6">xx</td></tr><tr class="col-md-12"><td class="col-md-6">Bahía Solano</td><td class="col-md-6">xx</td></tr><tr class="col-md-12"><td class="col-md-6">Valledupar</td><td class="col-md-6">xx</td></tr>',
		targets: [
			{ 
				text: "Cundinamarca",
				w: 34.8, h: 7.2, t: 32, l: 62.5,
				style:'background-color: #0c64e9;color: white;margin-left: 10px;margin-bottom: 20px;'

			},
			{ 
				text: "Atlántico",
				w: 34.8, h: 7.2, t: 40.2, l: 62.5,
				style:'background-color: #0c64e9;color: white;margin-left: 10px;margin-bottom: 20px;'				
			},
			{ 
				text: "Chocó",
				w: 34.8, h: 7.2, t: 48.2, l: 62.5,
				style:'background-color: #0c64e9;color: white;margin-left: 10px;margin-bottom: 20px;'  
			},
			{ 
				text: "Valle del Cauca",
				w: 34.8, h: 7.2, t: 24, l: 62.5,
				style:'background-color: #0c64e9;color: white;margin-left: 10px;margin-bottom: 20px;'
			},
			{ 
				text: "Antioquia",
				w: 34.8, h: 7.2, t: 15.8, l: 62.5,
				style:'background-color: #0c64e9;color: white;margin-left: 10px;margin-bottom: 20px;' 
			},
			{ 
				text: "Cesar",
				w: 34.8, h: 7.2, t: 56.2, l: 62.5,
				style:'background-color: #0c64e9;color: white;margin-left: 10px;margin-bottom: 20px;'
			}
		],

		minRightAnswers: 4,
		itemsWidth: "250px",
		itemsPerRow: 1,
		chances:12,
		customStyles: "border-radius: 0px; background: #fff;box-shadow: 0px 0px 0px 0px #063782;color: #0c64e9;",
		preserveText: true
	};
});

soc208.controller('Act5Ctrl', function ($scope) {
  $scope.inputs = [];
  $scope.$root.isNextEnabled = true; // Activamos el siguiente link

  $scope.items = [];

  // llenamos el array
  for (var i = 0; i < 1; i++) {
    $scope.items.push({
      uno: '',
      dos: '',
      tres: '',
      cuatro: ''
    });
  }

  var regex = function (value) {
    return !( value.match(/([bcdfghjklmnñpqrstvwxyz])/) && value.match(/([aeiou])/) && value.length >= 5 );
  };

  // antes de ir a la siguiente actividad, verificamos
  $scope.$root.beforeGoNext = function () {
    var error = false;

    // Recorremos los elementos, buscando que cumplan con las condiciones
    // Al menos una mayúscula, una minúscula y 4 letras
    $scope.items.forEach(function(item){
      if( regex(item.uno) || regex(item.dos) || regex(item.tres) || regex(item.cuatro)) error = true;
    });

    if(error){
      // fracado
      $scope.failure = true;
      return true;
    } else {
      // éxito
      $scope.success = true;
      return true;
    }
  };

});
var appManager = AppManager();
var soc209 = angular.module('soc209', ['activities']);

appManager.configModule(soc209, {
	resources: '../resources/02/soc/09',
	farewell: '¡Excelente!, ahora ya conoces más sobre los vecinos de nuestro hermoso país, Colombia.',
	evidencesSound:true,
	evidences: 'Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, actividad de evidencia, guía 2, lección 9; descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.',
	routes:[
		{ 
			name: '/competencias', 
			templateUrl: 'comp', 
			controller: 'CompCtrl',
			title:"Estándares básicos de competencias"
		},
		{ 
			name: '/conceptualizacion-1', 
			templateUrl: 'con1', 
			controller: 'Con1Ctrl',
			title: 'Lección 9: Colombia y sus países vecinos'
		},
		{ 
			name: '/conceptualizacion-2', 
			templateUrl: 'con2', 
			controller: 'Con2Ctrl',
			title: 'Lección 9: Colombia y sus países vecinos'
		},
    { 
      name: '/conceptualizacion-3', 
      templateUrl: 'con3', 
      controller: 'Con3Ctrl',
      title: 'Lección 9: Colombia y sus países vecinos'
    },
    { 
      name: '/conceptualizacion-4', 
      templateUrl: 'con4', 
      controller: 'Con4Ctrl',
      title: 'Lección 9: Colombia y sus países vecinos'
    },
    { 
      name: '/conceptualizacion-5', 
      templateUrl: 'con5', 
      controller: 'Con5Ctrl',
      title: 'Lección 9: Colombia y sus países vecinos'
    },
		{ 
			name: '/actividad-1', 
			templateUrl: 'act1', 
			controller: 'Act1Ctrl',
			title: 'Actividad 1 | Lección 9'
		},
		{ 
			name: '/actividad-2', 
			templateUrl: 'act2', 
			controller: 'Act2Ctrl',
			title: 'Actividad 2 | Lección 9'
		},
		{ 
			name: '/actividad-3', 
			templateUrl: 'act3', 
			controller: 'Act3Ctrl',
			title: 'Actividad 3 | Lección 9'
		},
		{ 
			name: '/actividad-4', 
			templateUrl: 'act4', 
			controller: 'Act4Ctrl',
			title: 'Actividad 4 | Lección 9'
		},
		{
			name: '/actividad-5', 
			templateUrl: 'act5', 
			controller: 'Act5Ctrl',
			title: 'Actividad 5 | Lección 9'
		},
    {
      name: '/actividad-6', 
      templateUrl: 'act6', 
      controller: 'Act6Ctrl',
      title: 'Actividad 6 | Lección 9'
    }
	]
	
});

soc209.controller('CompCtrl', function($scope){
	$scope.data = [
		{
			title: 'Estándar de competencia:',
			text1: 'Identifico y describo algunos elementos que permiten reconocerme como miembro de un grupo regional y de una nación (territorio, lenguas, costumbres, símbolos patrios…).',
		},
		{
			title: 'Elemento de competencia:',
			text1: 'Identifica algunas costumbres y símbolos patrios de Colombia y sus países vecinos.',
		}
		
	];
});

soc209.controller('Con1Ctrl', function($scope){
  $scope.$root.isNextEnabled = false; // Activamos el siguiente link

  $scope.input = '';
  $scope.selectedItem = false; // elemento seleccionado

  $scope.items = [
    {
      src: "venezuela",
      alt: "Mapa de Venezuela",
      text: "Venezuela",
      style: 'background-color: #e28bb0!important;'
    },
    {
      src: "brasil",
      alt: "Mapa de Brasil",
      text: "Brasil",
      style: 'background-color: #bac67a!important;'
    },
    {
      src: "peru",
      alt: "Mapa de Perú",
      text: "Perú",
      style: 'background-color: #f6d2de!important;'
    },
    {
      src: "ecuador",
      alt: "Mapa de Ecuador",
      text: "Ecuador",
      style: 'background-color: #f1b472!important;'
    },
    {
      src: "panama",
      alt: "Mapa de Panamá",
      text: "Panamá",
      style: 'background-color: #18a19a!important;'
    }
  ];


  $scope.$root.selectItem = function (item) {
        $scope.selectedItem = item; // seleccionamos el objeto
        item.complete = true // completamos el item para mostrar la imagen 

        var completedItems = $scope.items.filter(function (i) {
          return i.complete;
        }).length;

        if(completedItems >= $scope.items.length) { 
          $scope.$root.isNextEnabled = true;
        }

  };

     
});

soc209.controller('Con2Ctrl', function($scope){
 $scope.data = {
    items: [
      { 
        title: "Venezuela",
        src: 'D9',
        img: "D9.png",
        imgAlt: "Imagen del mapa de América del Sur, en él se indica la posición de Colombia y Venezuela",
        text:'<strong>Capital: </strong> Caracas<br><br><strong>Idioma: </strong> español<br><br><strong>Moneda: </strong> Bolívar<br><br>Venezuela se destaca por ser uno de los principales productores de petróleo en el planeta, gracias a que cuenta con un gran número de yacimientos de petróleo en su territorio.'
      },
      { 
        title: "Brasil",
        src: 'D10',
        img: "D10.png",
        imgAlt: "del mapa de América del Sur, en él se indica la posición de Colombia y Brasil.",
        text:'<strong>Capital: </strong> Brasilia<br><br><strong>Idioma: </strong> portugués<br><br><strong>Moneda: </strong> Real<br><br>Brasil es el país más grande de América del Sur y con una de las economías más importante de este continente, puesto que realiza un gran número de intercambios comerciales con otros países obteniendo; gran cantidad de ingresos económicos.'
      },
      { 
        title: "Perú",
        src: 'D11',
        img: "D11.png",
        imgAlt: "Imagen del mapa de América del Sur, en él se indica la posición de Colombia y Perú",
        text:'<strong>Capital: </strong> Lima<br><br><strong>Idioma: </strong> español<br><br><strong>Moneda: </strong> Nuevo sol<br><br>Perú se destaca por ser uno de los países con mayor cantidad de recursos minerales y un alto número de especies de plantas y animales.'
      },
      { 
        title: "Ecuador",
        src: 'D12',
        img: "D12.png",
        imgAlt: "Imagen del mapa de América del Sur, en él se indica la posición de Colombia y Ecuador",
        text:'<strong>Capital: </strong> Quito<br><br><strong>Idioma: </strong> español<br><br><strong>Moneda: </strong> Dólar estadounidense<br><br>Ecuador además de contar con una gran diversidad de especies de animales y plantas, tiene una gran diversidad cultural, puesto que este territorio está habitado por diversas tribus indígenas.'
      },
      { 
        title: "Panamá",
        src: 'D13',
        img: "D13.png",
        imgAlt: "Imagen del mapa de América del Sur, en él se indica la posición de Colombia y Panamá",
        text:'<strong>Capital: </strong> Ciudad de Panamá<br><br><strong>Idioma: </strong> español<br><br><strong>Moneda: </strong> Balboa<br><br>Éste país cuenta con el canal de Panamá, obra que facilita la comunicación entre las costas de los océanos Atlántico y Pacífico, favoreciendo así el comercio mundial y el intercambio cultural.'
      }
    ]
  };
});

soc209.controller('Con3Ctrl', function($scope){
 $scope.$root.isNextEnabled = false; // Activa el botón de siguiente

 $scope.items = [
    {
      src: "simboloscolombia",
      alt: "Imagen donde se presenta el escudo de Colombia, su himno y  la bandera; conformada por tres bandas horizontales de colores amarillo, azul y rojo",
      text: "Colombia",
    },
    {
      src: "simbolosecuador",
      alt: "Imagen donde se presenta el escudo de Ecuador, su himno nacional y su bandera; con tres franjas horizontales de colores: armarillo, azul y rojo; la cual en el centro tiene el escudo del país",
      text: "Ecuador",
    },
    {
      src: "simbolosvenezuela",
      alt: "Imagen donde se presenta el escudo de Venezuela, el himno nacional y su bandera; con tres franjas horizontales de colores: amarillo, azul y rojo; en la franja del centro tiene ocho estrellas de color blanco",
      text: "Venezuela",
    }
  ];

  $scope.$root.selectItem = function (item) {
        item.complete = true // completamos el item para mostrar la imagen 

        var completedItems = $scope.items.filter(function (i) {
          return i.complete;
        }).length;

        if(completedItems >= $scope.items.length) { 
          $scope.$root.isNextEnabled = true;
        }

  };

});

soc209.controller('Con4Ctrl', function($scope){
 $scope.$root.isNextEnabled = false; // Activa el botón de siguiente

 $scope.items = [
    {
      src: "simbolosbrasil",
      alt: "donde se presenta el escudo de Brasil, la letra de su himno nacional y su bandera de color verde; la cual en el centro lleva un rombo amarillo y dentro de él un círculo azul con varias estrellas y una banda con el mensaje: orden y progreso",
      text: "Brasil",
    },
    {
      src: "simbolospanama",
      alt: "Imagen donde se muestra el escudo de Panamá, la letra del himno nacional de este país y su bandera formada por cuatro rectángulos uno de color rojo, otro de color azul y dos rectángulos de color blanco ubicados en lados opuestos, uno de ellos lleva una estrella de color azul y el otro una estrella de color rojo",
      text: "Panamá",
    },
    {
      src: "simbolosperu",
      alt: "Imagen donde se presenta el escudo de Perú, la letra de su himno nacional y su bandera formada por tres franjas verticales; las de los extremos son de color rojo mientras que la del centro es de color blanco",
      text: "Perú",
    }
  ];

  $scope.$root.selectItem = function (item) {
        item.complete = true // completamos el item para mostrar la imagen 

        var completedItems = $scope.items.filter(function (i) {
          return i.complete;
        }).length;

        if(completedItems >= $scope.items.length) { 
          $scope.$root.isNextEnabled = true;
        }

  };

});

soc209.controller('Con5Ctrl', function($scope){
 $scope.data = {
    items: [
      { 
        title: "Venezuela",
        src: 'D17',
        img: "D17.jpg",
        imgAlt: "donde se presenta una de las hermosas playas de Isla Margarita (Venezuela).",
        imgTitle: 'Bulla, G. (2007). Isla Margarita [Fotografía]. Obtenido de: http://www.freeimages.com/photo/782115?forcedownload=1',
        text:'Isla Margarita es uno de los principales atractivos turísticos de Venezuela, gracias a sus hermosas playas y su rica historia; puesto que desempeñó un papel muy importante en la independencia de este país, razón por la cual es posible encontrar en este territorio antiguas construcciones españolas tales como: castillos, murallas e iglesias de gran valor cultural.'
      },
      { 
        title: "Brasil",
        src: 'D18',
        img: "D18.jpg",
        imgAlt: "Imagen donde se presenta dos bailarinas brasileras con disfraces coloridos y alusivos a las selvas brasileras, ellas hacen parte de una de las comparsas del carnaval de Rio de Janeiro",
        imgTitle: 'Camaret, N. (2014). Carnaval Rio de Janeiro [Fotografía]. Obtenido de: http://commons.wikimedia.org/wiki/File:Carnaval_2014_-_Rio_de_Janeiro_(12981758325).jpg',
        text:'El Carnaval de Río de Janeiro es uno de los carnavales más famosos del mundo y se desarrolla anualmente en territorio brasileño.<br><br>Este carnaval es una celebración que está asociada con desfiles de carrozas coloridas, disfraces y bailes populares típicos de la región como la Samba.'
      },
      { 
        title: "Perú",
        src: 'D19',
        img: "D19.jpg",
        imgAlt: "donde se presenta parte de las ruinas de la ciudad de Machu Picchu (Perú), la imagen muestra como esta construcción se realizó sobre una roca de gran altura",
        imgTitle: 'Machu Picchu [Fotografía]. (2012). Obtenido de: http://pixabay.com/es/machu-picchu-ruinas-ciudad-en-ruinas-43388/',
        text:'Las ruinas de la antigua ciudad de Machu Picchu es uno de los lugares de mayor interés turístico en Perú.<br><br>Machu Picchu fue construido por los indígenas incas hace muchísimos años y es considerado hoy en día como un santuario cultural, ecológico e histórico.'
      },
      { 
        title: "Ecuador",
        src: 'D20',
        img: "D20.jpg",
        imgAlt: "donde se muestra parte de las aguas de las Islas Galápagos rodeadas por rocas y encima de ellas dos especies de animales, característicos de esta zona:  nutrias y pájaros de patas azules",
        imgTitle: 'Animales descansando en las islas Galápagos [Fotografía].(2008). Obtenido de: http://commons.wikimedia.org/wiki/File:Animales_descansando_en_las_islas_Gal%C3%A1pagos.jpg',
        text:'Islas Galápagos, son un conjunto de islas volcánicas que se encuentran en el Océano Pacifico, éstas son el mayor atractivo de Ecuador a nivel científico y turístico, puesto que allí es posible encontrar especies únicas de animales y plantas.'
      },
      { 
        title: "Panamá",
        src: 'D21',
        img: "D21.jpg",
        imgAlt: "donde se muestra un barco grande ingresando por el canal de Panamá, él está transportando gran cantidad de productos",
        imgTitle: 'Eder, T. (2009). El Canal de Panamá [Fotografía]. Obtenido de: http://bit.ly/1sdRATX',
        text:'El Canal de Panamá es una de las obras más impresionantes desarrolladas por la ingeniería moderna.<br><br>Gracias a este canal es posible la comunicación entre el Océano Pacífico y Océano Atlántico, lo que permite el ahorro de tiempo, distancias y costos en las rutas marítimas.'
      }
    ]
  };
});

soc209.controller('Act1Ctrl', function ($scope) {
  $scope.items = [
    { 
      name: "1",
      pattern: [0],
      text:"Brasil es el país más grande y con la economía más importante de América del Sur. es el país más grande y con la economía más importante de América del Sur.",
    },
    { 
      name: "2",
      pattern: [11],
      text:"Venezuela, Brasil, Perú, Ecuador y Panamá son los países vecinos de Colombia",
    },
    { 
      name: "3",
      pattern: [1],
      text:"El portugués es el idioma oficial de Brasil.",
    },
    { 
      name: "4",
      pattern: [0],
      text:"Venezuela se destaca por ser uno de los principales productores de petróleo en el planeta",
    },
    { 
      name: "5",
      pattern: [14],
      text:"Tanto Colombia como sus países vecinos cuentan con tres símbolos patrios: bandera, escudo e himno .",
    }

  ];
  $scope.options = {
    items: $scope.items,
    chances: 5,
    minRightAnswers: 3,
    itemsPerRow : 3,
    examples:['Venezuela','himno','Colombia','portugués','Brasil']
  };
});
   
soc209.controller('Act2Ctrl', function($scope){
 $scope.items = [
    {
      sil: '<strong>Perú</strong>',
      resource: "D19",
      text: 'Machu Picchu',
      alt: "donde se presenta parte de las ruinas de la ciudad de Machu Picchu (Perú), la imagen muestra como esta construcción se realizó sobre una roca de gran altura",
      title: 'Machu Picchu [Fotografía]. (2012). Obtenido de: http://pixabay.com/es/machu-picchu-ruinas-ciudad-en-ruinas-43388/',
    },
    {
      sil: '<strong>Venezuela</strong>',
      resource: "D17",
      text: 'Isla Margarita',
      alt: "donde se presenta una de las hermosas playas de Isla Margarita (Venezuela).",
      title: 'Bulla, G. (2007). Isla Margarita [Fotografía]. Obtenido de: http://www.freeimages.com/photo/782115?forcedownload=1',
    },
    {
      sil: '<strong>Ecuador</strong>',
      resource: "D20",
      text: 'Islas Galápago',
      alt: "donde se muestra parte de las aguas de las Islas Galápagos rodeadas por rocas y encima de ellas dos especies de animales, característicos de esta zona:  nutrias y pájaros de patas azules",
      title: 'Animales descansando en las islas Galápagos [Fotografía].(2008). Obtenido de: http://commons.wikimedia.org/wiki/File:Animales_descansando_en_las_islas_Gal%C3%A1pagos.jpg',
    },
    {
      sil: '<strong>Brasil</strong>',
      resource: "D18",
      text: 'Carnaval de Río de Janeiro',
      alt: "Imagen donde se presenta dos bailarinas brasileras con disfraces coloridos y alusivos a las selvas brasileras, ellas hacen parte de una de las comparsas del carnaval de Rio de Janeiro",
      title: 'Camaret, N. (2014). Carnaval Rio de Janeiro [Fotografía]. Obtenido de: http://commons.wikimedia.org/wiki/File:Carnaval_2014_-_Rio_de_Janeiro_(12981758325).jpg',
    },
    {
      sil: '<strong>Panamá</strong>',
      resource: "D21",
      text: 'Canal de Panamá',
      alt: "donde se muestra un barco grande ingresando por el canal de Panamá, él está transportando gran cantidad de productos",
      title: 'Eder, T. (2009). El Canal de Panamá [Fotografía]. Obtenido de: http://bit.ly/1sdRATX',
    }
  ];

  $scope.options = {
    data: $scope.items,
    minRightAnswers: 3,
    randomItems: true,
  };
});

soc209.controller('Act3Ctrl', function($scope){
   $scope.data = {
    canvas: 'mapacolombia',
    targets: [
      {
        text: "A3-2.png",
        img: 'A3-1.png',
        alt: 'Mapa de Panamá',
        w: 11, h: 11, t: 2.9, l: 25.4, z:2
      },
      {
        text: "A3-4.png",
        img: 'A3-3.png',
        alt: 'Mapa de Perú',
        w: 30.7, h: 25, t: 17.3, l: 22.4, z:4
      },
      {
        text: "A3-6.png",
        img: 'A3-5.png',
        alt: 'Mapa de Venezuela',
        w: 20.9, h: 18, t: 0.2, l: 37.9, z:3
      },
      {
        text: "A3-8.png",
        img: 'A3-7.png',
        alt: 'Mapa de Ecuador',
       w: 12.5, h: 10, t: 15.5, l: 26.4, z:5
      },
      {
        text: "A3-10.png",
        img: 'A3-9.png',
        alt: 'Mapa de Brasil',
       w: 62.6, h: 56.5, t: 8.2, l: 33.2, z:1
      }
    ],
    minRightAnswers: 3,
    itemsWidth: "200px",
    itemsPerRow: 1,
    chances: 10,
    customStyles: "border-radius: 2px;box-shadow: 0px 0px 0px 3px transparent",
    preserveimg: true,
  };
});	

soc209.controller('Act4Ctrl', function($scope){
  $scope.data = {
    minRightAnswers: 3,
    feedback: "<p>Las respuestas correctas son:</p>\n<ol style=\"font-size: 26px;\">\n    <li>F</li>\n    <li>V</li>\n    <li>F</li>\n    <li>V</li>\n  <li>V</li>\n </ol>",
    items: [
      { text: "Los países vecinos de Colombia son: Venezuela, Argentina, Perú, Panamá y Ecuador.", answer: "F" },
      { text: "Ecuador tiene una gran diversidad cultural puesto que este territorio está habitado por diversas tribus indígenas.", answer: "V" },
      { text: "Brasil es el país más pequeño de América del Sur.", answer: "F" },
      { text: "El Canal de Panamá es una de las obras más importantes de Panamá y tiene como función facilitar la comunicación entre las costas de los océanos Atlántico y Pacífico.", answer: "V" },
      { text: "Las banderas de Colombia, Ecuador y Venezuela tienen los mismos tres colores: amarillo, azul y rojo.", answer: "V" }
    ]
  };
});

soc209.controller('Act5Ctrl', function ($scope) {
   $scope.items = [
    {
      resource: "becuador",
      alt: "Bandera de Ecuador: formada por tres franjas horizontales de colores: amarillo, azul y rojo, en el centro tiene el escudo de Ecuador",
      resource2: "eecuador",
      alt2: 'Escudo de Ecuador: en cada costado tiene dos banderas nacionales colgando de lanzas, junto a ellas hay ramas de laurel y palma y en su parte superior hay un cóndor andino',
      title: 'Escudo Ecuador [Ilustración]. Obtenido de: http://www.ecuadorlotiene.com/ecuadorlotiene/index.php/clasificados/item/35-el-escudo/35-el-escudo',
    },
    {
      resource: "bcolombia",
      alt: "Bandera de Colombia: tiene tres franjas horizontales: amarillo, azul y rojo",
      resource2: "ecolombia",
      alt2: 'Escudo de Colombia: en cada costado tiene dos banderas nacionales, consta también de dos cuernos  junto  a uno de ellos hay monedas y junto al otro hay frutas. En la parte superior hay un cóndor y junto a él una franja con el mensaje libertad y orden',
      title: 'Escudo nacional de Colombia [Ilustración]. Obtenido de: http://web.presidencia.gov.co/asiescolombia/simbolos1.htm',
    },
    {
      resource: "bbrasil",
      alt: "Bandera de Brasil: es de color verde en el centro tiene un rombo de color amarillo, el cual en el centro tiene un círculo azul con varias estrellas y una banda con el mensaje: orden y progreso",
      resource2: "ebrasil",
      alt2: 'Escudo de Brasil: escudo redondo de color azul, contiene cinco estrellas. Éste se encuentra sobre una estrella, la cual tiene a su  lado izquierdo varias ramas de una planta de café y en su lado derecho varias ramas de tabaco',
      title: 'Brazilian Government [Ilustración]. (2010). Obtenido de: http://commons.wikimedia.org/wiki/File:Coat_of_Brasil.png',
    },
    {
      resource: "bpanama",
      alt: "Bandera de Panamá: tiene cuatro rectángulos uno de color azul, otro rojo y dos blancos, en estos últimos aparece de a una estrella; una color rojo y otra color azul",
      resource2: "epanama",
      alt2: 'Escudo Panamá: en cada costado tiene dos banderas nacionales, en la parte superior tiene un águila harpía, ella sostiene una franja con el mensaje: para el beneficio del mundo',
      title: 'Escudo de Panamá [Ilustración]. Obtenido de: http://es.althistory.wikia.com/wiki/Archivo:Panam%C3%A1_escudo.jpg',
    },
    {
      resource: "bperu",
      alt: "Bandera de Perú: tiene tres franjas verticales las de los extremos son de color rojo y la del medio es de color blanco",
      resource2: "eperu",
      alt2: 'Escudo de Perú: en cada costado tiene dos banderas nacionales, los elementos que resaltan del escudo son una vicuña; un animal representativo de tierras peruanas y un árbol de quina',
      title: 'Escudo nacional de Perú [Ilustración]. (2012). Obtenido de: http://commons.wikimedia.org/wiki/File:Escudo_nacional_del_Per%C3%BA.svg#file',
    },
    {
      resource: "bvenezuela",
      alt: "Bandera de Venezuela: tiene tres franjas horizontales de colores amarillo, azul y rojo. En la franja del medio tiene ocho estrellas blancas",
      resource2: "evenezuela",
      alt2: 'Escudo Venezuela: sobresalen de él veinte espigas, dos banderas nacionales y un caballo blanco. A su lado izquierdo hay varias ramas de olivo y a su lado derecho ramas de palma de laurel',
      title: 'Kotliar S. (2013).Coat of arms of Venezuela [Ilustración].Obtenido de: http://es.wikipedia.org/wiki/Venezuela#mediaviewer/Archivo:Coat_of_arms_of_Venezuela.svg',
    },
  ];

  $scope.options = {
    data: $scope.items,
    minRightAnswers: 3,
    randomItems: true,
  };
});

soc209.controller('Act6Ctrl', function($scope){
$scope.items = [
    {
      name: "País",
      list: [
        {
          text: 'Venezuela'
        },
        {
          text: 'Ecuador'
        },
        {
          text: 'Perú'
        },
        {
          text: 'Brasil'
        },
        {
          text: 'Panamá'
        }
      ],
      style:"width: 15%;font-size: 25px;"
    },
    {
      name: "Costumbre",
      list: [
        {
          text: 'Genero musical más representativo:'
        },
        {
          text: 'Plato popular a nivel nacional:'
        },
        {
          text: 'Genero musical más representativo:'
        },
        {
          text: 'Su baile típico es:'
        },
        {
          text: 'Las artesanías típicas son:'
        }
      ],
      style:"width: 35%;font-size: 25px;"
    },
    {
      name: "Costumbre",
      list: [
        {
          answers: [
                { text: "Cumbia"},
                { text: "Tango"},
                { text: "Música llanera", answer: true }
              ],
              /*default: true*/
        },
        {
          answers: [
                { text: "Ajiaco" },
                { text: "Guatita", answer: true },
                { text: "Bandeja paisa"}
              ]
        },
        {
          answers: [
                { text: "Cumbia"},
                { text: "Música andina", answer: true },
                { text: "Música llanera"}
              ]
        },
        {
          answers: [
                { text: "La Samba", answer: true  },
                { text: "La Cumbia"},
                { text: "El Tango"}
              ]
        },
        {
          answers: [
                { text: "Mochilas"},
                { text: "Las  molas", answer: true },
                { text: "Vasijas de madera"}
              ]
        }
      ],
      style:"width: 29%;font-size: 25px;"
    },
    {
      name: "Idioma",
      list: [
        {
          answers: [
                { text: "Español", answer: true },
                { text: "Portugués"},
                { text: "Inglés"}
              ],
               /*default: true*/
        },
        {
          answers: [
                { text: "Español", answer: true },
                { text: "Portugués"},
                { text: "Inglés"}
              ]
        },
        {
          answers: [
                { text: "Español", answer: true },
                { text: "Portugués"},
                { text: "Inglés"}
              ]
        },
        {
          answers: [
                { text: "Español"},
                { text: "Portugués", answer: true },
                { text: "Inglés"}
              ]
        },
        {
          answers: [
                { text: "Español", answer: true },
                { text: "Portugués"},
                { text: "Inglés"}
              ]
        }
      ],
      style:"width: 20%;font-size: 25px;"
    }
  ];

  $scope.options = {
    items: $scope.items,
    rowsstyle:"height: 120px;",
    chancesPerItem: 1,
    minRightAnswers: 6,
    itemsPerRow : 3
  };
});



var appManager = AppManager();
var soc210 = angular.module('soc210', ['activities']);

appManager.configModule(soc210, {
	resources: '../resources/02/soc/10',
	farewell: '¡Excelente!, ya conoces la importancia de los recursos hídricos para la economía de nuestro país.',
	evidencesSound:true,
	evidences: 'Ingresar al curso “Primaria incluyente”, seleccionar la herramienta actividades, actividad de evidencia, guía 2, lección 10; descargar y realizar la actividad propuesta, y enviarla al facilitador por esta misma herramienta en los tiempos programados.',
	routes:[
		{ 
			name: '/competencias', 
			templateUrl: 'comp', 
			controller: 'CompCtrl',
			title:"Estándares básicos de competencias"
		},
		{ 
			name: '/conceptualizacion-1', 
			templateUrl: 'con1', 
			controller: function () {},
			title: 'Lección 10: Hidrografía de Colombia'
		},
		{ 
			name: '/conceptualizacion-2', 
			templateUrl: 'con2', 
			controller: 'Con2Ctrl',
			title: 'Lección 10: Hidrografía de Colombia'
		},
    { 
      name: '/conceptualizacion-3', 
      templateUrl: 'con3', 
      controller: 'Con3Ctrl',
      title: 'Lección 10: Hidrografía de Colombia'
    },
		{ 
			name: '/actividad-1', 
			templateUrl: 'act1', 
			controller: 'Act1Ctrl',
			title: 'Actividad 1 | Lección 10'
		},
		{ 
			name: '/actividad-2', 
			templateUrl: 'act2', 
			controller: 'Act2Ctrl',
			title: 'Actividad 2 | Lección 10'
		},
		{ 
			name: '/actividad-3', 
			templateUrl: 'act3', 
			controller: 'Act3Ctrl',
			title: 'Actividad 3 | Lección 10'
		},
		{ 
			name: '/actividad-4', 
			templateUrl: 'act4', 
			controller: 'Act4Ctrl',
			title: 'Actividad 4 | Lección 10'
		},
		{
			name: '/actividad-5', 
			templateUrl: 'act5', 
			controller: 'Act5Ctrl',
			title: 'Actividad 5 | Lección 10'
		}
	]
	
});

soc210.controller('CompCtrl', function($scope){
	$scope.data = [
		{
			title: 'Estándar de competencia:',
			text1: 'Comparo actividades económicas que se llevan a cabo en diferentes entornos.',
		},
		{
			title: 'Elemento de competencia:',
			text1: 'Relaciona los principales elementos de la hidrografía en Colombia y su importancia en las actividades económicas de las regiones.',
		}
		
	];
});

soc210.controller('Con2Ctrl', function($scope){
  $scope.data = [
    {
      resource: 'lacocha',
      text: '<strong>Laguna</strong>',
      alt:'Imagen donde se presenta una amplia zona de un terreno cubierta por agua, este espejo de agua está rodeado por mucha vegetación, dentro de la que se encuentran especies típicas de los páramos como los Frailejones',
      title: 'Weigell,  P. (2008). Laguna Chisacá en el Parque Nacional Natural Sumapaz [Fotografía]. Obtenido de: http://commons.wikimedia.org/wiki/File:Laguna_Chisac%C3%A1_-_PNN_Sumapaz.jpg',
      type: 'jpg'
    },
    {
      resource: 'tequendama',
      text: '<strong>Salto</strong>',
      alt:'Imagen donde se presenta una caída de agua desde unas rocas  de gran altura cubiertas por vegetación',
      title: 'Zea, F. (2007). Salto del Tequendama [Fotografía]. Obtenido de: http://commons.wikimedia.org/wiki/File:Salto_del_tequendama_by_FranciscoA._ZeaB.png',
      type: 'png'
    },
    {
      resource: 'guatapuri',
      text: '<strong>Río</strong>',
      alt:'Imagen donde se presenta el río Guatapurí  rodeado por vegetación y grandes piedras',
      title: 'Rio Guatapurí [Fotografía]. (2013). Obtenido de: http://commons.wikimedia.org/wiki/File%3ARio_Guatapuri.JPG',
      type: 'jpg'
    },
    {
      resource: 'marcaribe',
      text: '<strong>Mar</strong>',
      alt:'donde se muestra una porción de las aguas del mar Caribe, éstas presentan varios tonos de color azul',
      title: 'Sovich, J. (2010). Cartagena old town [Fotografía]. Obtenido de: http://bit.ly/1ywCn2o',
      type: 'jpg'
    }
  ];
});

soc210.controller('Con3Ctrl', function($scope){
$scope.data = {
    items: [
      { 
        title: "Pesca",
        src: 'D9',
        img: "oceano - pesca.jpg",
        imgtext:"Mar Caribe",
        imgTitle: 'Sovich, J. (2010). Cartagena old town [Fotografía]. Obtenido de: http://bit.ly/1ywCn2o',
        imgAlt: "donde se muestra una porción de las aguas del mar Caribe, éstas presentan varios tonos de color azul. En la parte inferior de la imagen aparece la palabra pesca y junto a ella una ilustración de un pez",
        text:'La pesca es la captura y extracción de los peces u otras especies acuáticas que habitan en los ríos y los océanos y que son útiles al hombre.<br><br>Gran cantidad de las especies acuáticas que viven en las aguas de nuestro país, son empleadas en la industria alimenticia y farmacéutica, por lo que su pesca se convierte en una fuente importante de recursos económicos para las personas que habitan cerca de estos recursos hídricos.'
      },
      { 
        title: "Turismo",
        src: 'D10',
        img: "turismo.jpg",
        imgtext:"Salto del Tequendama",
        imgTitle: 'Zea, F. (2007). Salto del Tequendama [Fotografía]. Obtenido de: http://commons.wikimedia.org/wiki/File:Salto_del_tequendama_by_FranciscoA._ZeaB.png',
        imgAlt: "donde se presenta una caída de agua desde unas rocas  de gran altura cubiertas por vegetación. En la parte inferior de la imagen aparece la palabra turismo y junto a ella la ilustración de un niño excursionista",
        text:'Los hermosos paisajes que rodean los recursos hídricos de Colombia y la belleza de sus aguas, hacen que cientos de turistas se vean atraídos por los mares, quebradas, saltos, embalses, ríos y lagunas de las regiones de nuestro país, beneficiando las economías de las regiones.'
      },
      {
        title: "Transporte",
        src: 'D11',
        img: "rioamazonas.jpg",
        imgtext:"Río Amazonas",
        imgTitle: 'International Center for Tropical Agriculture. (2012). Amazon River [Fotografía]. Obtenido de: http://www.fotopedia.com/items/flickr-5641587148/slideshow',
        imgAlt: "donde se muestra el extenso río Amazonas, rodeado por una gran cantidad de vegetación. En la parte inferior de la imagen aparece la palabra transporte y junto a ella la ilustración de un niño remando un bote",
        text:'Los ríos y los mares permiten el traslado de productos o pasajeros de un lugar a otro.<br><br>Productos que se generan o fabrican en las  regiones de nuestro país o países vecinos, como por ejemplo el carbón, el petróleo, las esmeraldas, el oro, entre otros, es más fácil transportarlos a través de estos recursos hídricos.'
      },
      { 
        title: "Generación de energía",
        src: 'D12',
        img: "energia.jpg",
        imgtext:"Embalse Peñol-Guatapé",
        imgTitle: 'Vista del embalse desde la Piedra del Peñol [Fotografía]. (2011). Obtenido de: http://commons.wikimedia.org/wiki/File:Embalse_de_Guatap%C3%A9_10_30062011.jpg',
        imgAlt: "donde se muestra una extensa  área de un territorio cubierta por agua, se presentan también algunas islas. En la parte inferior de la imagen aparece la palabra energía y junto a ella un bombillo encendido",
        text:'Los ríos, saltos y embalses contribuyen a la generación de energía eléctrica. El agua que cae desde una montaña o un embalse produce el movimiento de una turbina, generando así electricidad.'
      },
    ]
  };
});

soc210.controller('Act1Ctrl', function ($scope) {
   $scope.items = [
    { 
      name: "1",
      pattern: [1],
      text:"La hidrografía es una parte de la geografía que se encarga del estudio de las aguas o el recurso hídrico del planeta Tierra.",
    },
    { 
      name: "2",
      pattern: [20],
      text:"Colombia cuenta con una gran riqueza en recursos hídricos dentro de los que se incluyen los mares, lagunas, ríos, ciénagas, quebradas y humedales.",
    },
    { 
      name: "3",
      pattern: [13],
      text:"Los recursos hídricos favorecen el desarrollo de actividades económicas tales como: industria, agricultura, turismo , generación de energía y transporte fluvial.",
    },
    { 
      name: "4",
      pattern: [10],
      text:"Los ríos, saltos y embalses contribuyen a la generación de energía .",
      answer2: 'energía eléctrica'
    },
    { 
      name: "5",
      pattern: [7],
      text:"Los ríos y los mares permiten el transporte de productos o pasajeros de un lugar a otro.",
    }

  ];
  $scope.options = {
    items: $scope.items,
    chances: 5,
    minRightAnswers: 3,
    itemsPerRow : 3,
    examples:['transporte','energía eléctrica','turismo','hidrografía','quebradas']
  };
});

soc210.controller('Act2Ctrl', function($scope){
 $scope.items = [
   {
      sil: '<strong>Transporte</strong>',
      resource: "rioamazonas",
      title: 'Río Amazonas',
      imgtitle: 'International Center for Tropical Agriculture. (2012). Amazon River [Fotografía]. Obtenido de: http://www.fotopedia.com/items/flickr-5641587148/slideshow',
      alt: 'Imagen donde se muestra el extenso río Amazonas rodeado por una gran cantidad de vegetación'
    },
    {
      sil: '<strong>Pesca</strong>',
      resource: "marcaribe",
      title: 'Mar  Caribe',
      imgtitle: 'Sovich, J. (2010). Cartagena old town [Fotografía]. Obtenido de: http://bit.ly/1ywCn2o',
      alt: 'Imagen donde se muestra una porción de las aguas del mar Caribe, éstas presentan varios tonos de color azul'
    },
    {
      sil: '<strong>Turismo</strong>',
      resource: "tequendama",
      title: 'Salto del Tequendama',
      imgtitle: 'Zea, F. (2007). Salto del Tequendama [Fotografía]. Obtenido de: http://commons.wikimedia.org/wiki/File:Salto_del_tequendama_by_FranciscoA._ZeaB.png',
      alt: 'Imagen donde se presenta el Salto del Tequendama, una caída de agua desde unas rocas  de gran altura cubiertas por vegetación'
    },
    {
      sil: '<strong>Generación de energía</strong>',
      resource: "guatape",
      title: 'Embalse Peñol -Guatapé',
      imgtitle: 'Vista del embalse desde la Piedra del Peñol [Fotografía]. (2011). Obtenido de: http://commons.wikimedia.org/wiki/File:Embalse_de_Guatap%C3%A9_10_30062011.jpg',
      alt: 'Imagen donde se muestra el embalse Peñol – Guatapé, en ella una extensa  área  está cubierta por agua, presentándose también algunas islas'
    }
  ];

  $scope.options = {
    data: $scope.items,
    minRightAnswers: 4,
    randomItems: true,
  };
});

soc210.controller('Act3Ctrl', function($scope){
	 $scope.data = {
    chances: 24,
    minRightAnswers: 12,
    inverted: true,
    table: [

    "A G R I C U L T U R A D P I".split(" "),
    "G F H Q U E B R A D A F G N".split(" "),
    "U I J A E S T A H O K L P D".split(" "),
    "A L O R O P E N E R G Í A U".split(" "),
    "T R C L K M I S M Í E W T S".split(" "),
    "A S É A V B P P E O E L A T".split(" "),
    "L I A D F O U O I T C V P R".split(" "),
    "M U N Z S A T R S O M B N I".split(" "),
    "N V O N R O Q T A U L M K A".split(" "),
    "O A T L E I W E M B A L S E".split(" "),
    "Q O A K A U S N A P G J L Ñ".split(" "),
    "S Y E J M T I F R W U O A O".split(" "),
    "T U R I S M O M N S N S Q U".split(" "),
    "A R T U V A E S T K A E S T".split(" ")



    ],
    wordGroups: [
      {
        items: [
          {
            front: "AGUA",
            back: "AGUA"
          },
          {
            front: "ENERGÍA",
            back: "ENERGÍA"
          },
          {
            front: "TRANSPORTE",
            back: "TRANSPORTE"
          },
          {
            front: "AGRICULTURA",
            back: "AGRICULTURA"
          },
          {
            front: "INDUSTRIA",
            back: "INDUSTRIA"
          },
          {
            front: "RÍO",
            back: "RÍO"
          },
          {
            front: "OCÉANO",
            back: "OCÉANO"
          },
          {
            front: "MAR",
            back: "MAR"
          },
          {
            front: "QUEBRADA",
            back: "QUEBRADA"
          },
          {
            front: "LAGUNA",
            back: "LAGUNA"
          },
          {
            front: "EMBALSE",
            back: "EMBALSE"
          },
          {
            front: "TURISMO",
            back: "TURISMO"
          }
        ]
      }
    ]
  };
});

soc210.controller('Act4Ctrl', function($scope){
  $scope.data = {
    maintext: '<tr class="col-md-12"><th class="col-md-6 bg-1">Recurso hídrico</th><th class="col-md-6 bg-1">Actividad económica</th></tr><tr class="col-md-12"><td class="col-md-6">Laguna la Cocha</td><td class="col-md-6">xx</td></tr><tr class="col-md-12"><td class="col-md-6">Río Magdalena</td><td class="col-md-6">xx</td></tr><tr class="col-md-12"><td class="col-md-6">Embalse Piedras Blancas</td><td class="col-md-6">xx</td></tr><tr class="col-md-12"><td class="col-md-6">Río Timbiquí</td><td class="col-md-6">xx</td></tr>',
    targets: [
      { 
        text: "Generación de energía",
        w: 45.6, h: 7.2*1.75, t: 32*1.75, l: 51.8,
        style:'background-color: #0c64e9;color: white;margin-left: 10px;margin-bottom: 20px;'

      },
      { 
        text: "Pesca",
        w: 45.6, h: 7.2*1.75, t: 40.2*1.75, l: 51.8,
        style:'background-color: #0c64e9;color: white;margin-left: 10px;margin-bottom: 20px;'       
      },
      { 
        text: "Transporte",
        w: 45.6, h: 7.2*1.75, t: 24*1.75, l: 51.8,
        style:'background-color: #0c64e9;color: white;margin-left: 10px;margin-bottom: 20px;'
      },
      { 
        text: "Turismo",
        w: 45.6, h: 7.2*1.75, t: 15.8*1.75, l: 51.8,
        style:'background-color: #0c64e9;color: white;margin-left: 10px;margin-bottom: 20px;' 
      }
    ],

    minRightAnswers: 4,
    itemsWidth: "250px",
    itemsPerRow: 1,
    chances:8,
    maintextstyle: 'padding-left: 20px;height: 400px;',
    customStyles: "border-radius: 0px; background: #fff;box-shadow: 0px 0px 0px 0px #063782;color: #0c64e9;",
    preserveText: true
  };
});

soc210.controller('Act5Ctrl', function ($scope) {
  $scope.inputs = [];
  $scope.$root.isNextEnabled = true; // Activamos el siguiente link

  $scope.items = [];

  // llenamos el array
  for (var i = 0; i < 1; i++) {
    $scope.items.push({
      uno: '',
      dos: '',
      tres: '',
    });
  }

  var regex = function (value) {
    return !( value.match(/([bcdfghjklmnñpqrstvwxyz])/) && value.match(/([aeiou])/) && value.length >= 5 );
  };

  // antes de ir a la siguiente actividad, verificamos
  $scope.$root.beforeGoNext = function () {
    var error = false;


    // Recorremos los elementos, buscando que cumplan con las condiciones
    // Al menos una mayúscula, una minúscula y 4 letras
    $scope.items.forEach(function(item){
      if( regex(item.uno) || regex(item.dos) || regex(item.tres)) error = true;
    });

    if(error){
      // fracado
      $scope.failure = true;
      return true;
    } else {
      // éxito
      $scope.success = true;
      return true;
    }
  };

});


// Binding for flash messages
ko.bindingHandlers.flash = {
    init: function(element) {
        $(element).hide();
    },
    update: function(element, valueAccessor) {
        var value = ko.utils.unwrapObservable(valueAccessor());
        if (value) {
            $(element).stop().hide().text(value).fadeIn(function() {
                clearTimeout($(element).data("timeout"));
                $(element).data("timeout", setTimeout(function() {
                    $(element).fadeOut();
                    valueAccessor()(null);
                }, 1000));
            });
        }
    },
    timeout: null
};

//# sourceMappingURL=app.js.map